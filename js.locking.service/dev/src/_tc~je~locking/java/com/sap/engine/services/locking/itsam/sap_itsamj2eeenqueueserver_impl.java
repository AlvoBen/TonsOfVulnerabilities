
/*
This file is generated by Code Generator
for CIMClass SAP_ITSAMJ2eeEnqueueServer
*/

package com.sap.engine.services.locking.itsam;	

import java.util.Properties;

import javax.management.MBeanException;

import com.sap.engine.services.locking.LockingRuntimeInterface;
import com.sap.engine.services.locking.itsam.compositedata.SAP_ITSAMJ2eeLockEntry;
import com.sap.engine.services.locking.itsam.compositedata.SAP_ITSAMJ2eeLockStatisticsEntry;
import com.sap.tc.logging.Location;
/* 
ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema. 
@version  	
*/	

public class SAP_ITSAMJ2eeEnqueueServer_Impl implements SAP_ITSAMJ2eeEnqueueServer{

	private static final Location LOCATION = Location.getLocation(SAP_ITSAMJ2eeEnqueueServer_Impl.class);
	
	private static final int STATUS_SUCCESS = 0;
	private static final int STATUS_FAILED = -1;
	
	/** The LockingApplicationFrame (given in the constructor) */
	private LockingRuntimeInterface runtimeInterface;
	
	public SAP_ITSAMJ2eeEnqueueServer_Impl(LockingRuntimeInterface lrti){
		runtimeInterface = lrti;
	}
	
/*
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. 
Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties. 
@return String
*/

public String getElementName(){
// Generated Code. Implementation to be done here.
return null; 
 
}

/*
The Caption property is a short textual description (one- line string) of the object. 
@return String
*/

public String getCaption(){
// Generated Code. Implementation to be done here.
return null; 
 
}

/*
The Description property provides a textual description of the object. 
@return String
*/

public String getDescription(){
// Generated Code. Implementation to be done here.
return null; 
 
}

public SAP_ITSAMJ2eeLockEntry[] getLocks(String name , String argument , String user) throws MBeanException {
	try{
		SAP_ITSAMJ2eeLockEntry[] lockEntries = null;	
		Properties[] propLocks = runtimeInterface.getLocks(name, argument, user);
		if(propLocks!=null){
			int len = propLocks.length;
			lockEntries = new SAP_ITSAMJ2eeLockEntry[len];
			for(int i=0; i<len; i++){
				Properties prop = null;
				try{
					prop = runtimeInterface.getLockDetails(propLocks[i]);
				}
				catch(Exception eDetails){
					prop = propLocks[i];
				}
				lockEntries[i] = transformToITSAMLockEntry(prop);
			}				
		}
		return lockEntries;
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public int lock(String owner , String name , String argument , char mode) throws MBeanException {
	try{
		runtimeInterface.lock(owner, name, argument, mode);
		return STATUS_SUCCESS;	
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public int unlock(String owner , String name , String argument , char mode , boolean asynchronous) throws MBeanException {
	try{
		runtimeInterface.unlock(owner, name, argument, mode, asynchronous);
		return STATUS_SUCCESS;	
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public int unlockAll(String owner , boolean asynchronous) throws MBeanException {
	try{
		runtimeInterface.unlockAll(owner, asynchronous);
		return STATUS_SUCCESS;	
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public int unlockAllGeneric(String owner , boolean asynchronous) throws MBeanException {
	try{
		runtimeInterface.unlockAllGeneric(owner, asynchronous);
		return STATUS_SUCCESS;
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public int unlockAllCumulativeCounts(String owner , String name , String argument , char mode) throws MBeanException {
	try{
		runtimeInterface.unlockAllCumulativeCounts(owner, name, argument, mode);
		return STATUS_SUCCESS;	
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public void enableTimeStatistics() throws MBeanException {
	try{
		runtimeInterface.enableTimeStatistics();
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public void disableTimeStatistics() throws MBeanException {
	try{
		runtimeInterface.disableTimeStatistics();
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public void resetTimeStatistics() throws MBeanException {
	try{
		runtimeInterface.resetTimeStatistics();
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public void enableServerLogging() throws MBeanException {
	try{
		runtimeInterface.enableServerLogging();
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public void disableServerLogging() throws MBeanException {
	try{
		runtimeInterface.disableServerLogging();
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}

public SAP_ITSAMJ2eeLockStatisticsEntry[] getTimeStatisticsEntries() throws MBeanException {
	try{
		SAP_ITSAMJ2eeLockStatisticsEntry[] lockStatisticsEntries = null;		
		Properties[] propLockStatistics = runtimeInterface.getTimeStatisticsEntries();
		int len = propLockStatistics.length;
		lockStatisticsEntries = new SAP_ITSAMJ2eeLockStatisticsEntry[len];
		for(int i=0; i<len; i++){			
			lockStatisticsEntries[i] = transformToITSAMLockStatisticsEntry(propLockStatistics[i]);
		}						
		return lockStatisticsEntries;
	}
	catch(Exception e){
		throw new MBeanException(e, e.getMessage());
	}
}



private SAP_ITSAMJ2eeLockEntry transformToITSAMLockEntry(Properties lockDetails) throws Exception{
    if (lockDetails == null){
    	throw new IllegalArgumentException("Cannot transform to ITSAMLockEntry due to parameter lockDetails is null");
    }
    String user = lockDetails.getProperty(LockingRuntimeInterface.USER);
    String owner = lockDetails.getProperty(LockingRuntimeInterface.OWNER);
    String name = lockDetails.getProperty(LockingRuntimeInterface.NAME);
    String argument = lockDetails.getProperty(LockingRuntimeInterface.ARGUMENT);
    String countString = lockDetails.getProperty(LockingRuntimeInterface.COUNT);
    String modeString = lockDetails.getProperty(LockingRuntimeInterface.MODE);
    String namespace = lockDetails.getProperty(LockingRuntimeInterface.NAMESPACE);
    String namespaceDescription = lockDetails.getProperty(LockingRuntimeInterface.NAMESPACE_DESCRIPTION);
    long count = -1;
    char mode = ' ';
    
    count = Long.parseLong(countString);
    mode = modeString.charAt(0);
    
    return new SAP_ITSAMJ2eeLockEntry(owner, argument, count, mode, user, namespace, name, namespaceDescription, "", "", "");    
}

private SAP_ITSAMJ2eeLockStatisticsEntry transformToITSAMLockStatisticsEntry(Properties lockStatistics) throws Exception {
    if (lockStatistics == null){
    	throw new IllegalArgumentException("Cannot transform to ITSAMLockStatisticsEntry due to parameter lockStatistics is null");
    }
    String description = lockStatistics.getProperty(LockingRuntimeInterface.TS_DESCR);
    String countString = lockStatistics.getProperty(LockingRuntimeInterface.TS_COUNT);
    String sMinDelta = lockStatistics.getProperty(LockingRuntimeInterface.TS_MIN);
    String sMaxDelta = lockStatistics.getProperty(LockingRuntimeInterface.TS_MAX);
    String sAvgDelta = lockStatistics.getProperty(LockingRuntimeInterface.TS_AVG);    
    String sCumulatedDelta = "";    
    long count = -1;
    long minDelta = -1;
    long maxDelta = -1;
    long avgDelta = -1;
    long cumulatedDelta = -1;    
    
    count = Long.parseLong(countString);    	
    minDelta = Long.parseLong(sMinDelta);
    maxDelta = Long.parseLong(sMaxDelta);
    avgDelta = Long.parseLong(sAvgDelta);
    cumulatedDelta = Long.parseLong(sCumulatedDelta);
        
    return new SAP_ITSAMJ2eeLockStatisticsEntry(description, count, cumulatedDelta, avgDelta, minDelta, maxDelta, "", "");    
}

}
