
  /*
This file is generated by Code Generator
to wrap datatypes of attributes of CIMClass SAP_ITSAMJ2eeEnqueueServer
WARNING:DO NOT CHANGE THE CODE MANUALLY. 
*/
package com.sap.engine.services.locking.itsam;

import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.openmbean.*;

import com.sap.engine.services.locking.itsam.compositedata.SAP_ITSAMJ2eeLockEntry;
import com.sap.engine.services.locking.itsam.compositedata.SAP_ITSAMJ2eeLockStatisticsEntry;

  public class SAP_ITSAMJ2eeEnqueueServerWrapper implements DynamicMBean    {   
 
 /* The wrapped object to be exposed as MBean */  
  private SAP_ITSAMJ2eeEnqueueServer mbean;
  
  /* MBeanInfo */
  private static final MBeanInfo mbeanInfo;
  
 /* Initialize MBeanInfo */
  static {
    // attributes
    
       MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[3]; 
    
		  	
   
		     attributeInfo[ 0]		     
		      = new MBeanAttributeInfo("ElementName",	 					
	 					"java.lang.String","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.",true,false,false);                               
        	  	
   
		     attributeInfo[ 1]		     
		      = new MBeanAttributeInfo("Caption",	 					
	 					"java.lang.String","Description:The Caption property is a short textual description (one- line string) of the object.",true,false,false);                               
        	  	
   
		     attributeInfo[ 2]		     
		      = new MBeanAttributeInfo("Description",	 					
	 					"java.lang.String","Description:The Description property provides a textual description of the object.",true,false,false);                               
        
// operations
MBeanParameterInfo[] signature;
MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[12];

// for method getLocks
 signature = new MBeanParameterInfo[3];
 

signature[0] = new MBeanParameterInfo("name", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("argument", "java.lang.String","Description:");                    

signature[2] = new MBeanParameterInfo("user", "java.lang.String","Description:");                    

operationInfo[0] = new MBeanOperationInfo("getLocks", "Description:", signature, "[javax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	        
// for method lock
 signature = new MBeanParameterInfo[4];
 

signature[0] = new MBeanParameterInfo("owner", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("name", "java.lang.String","Description:");                    

signature[2] = new MBeanParameterInfo("argument", "java.lang.String","Description:");                    

signature[3] = new MBeanParameterInfo("mode", "char","Description:");                    

operationInfo[1] = new MBeanOperationInfo("lock", "Description:", signature, "int", MBeanOperationInfo.UNKNOWN);
	        
// for method unlock
 signature = new MBeanParameterInfo[5];
 

signature[0] = new MBeanParameterInfo("owner", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("name", "java.lang.String","Description:");                    

signature[2] = new MBeanParameterInfo("argument", "java.lang.String","Description:");                    

signature[3] = new MBeanParameterInfo("mode", "char","Description:");                    

signature[4] = new MBeanParameterInfo("asynchronous", "boolean","Description:");                    

operationInfo[2] = new MBeanOperationInfo("unlock", "Description:", signature, "int", MBeanOperationInfo.UNKNOWN);
	        
// for method unlockAll
 signature = new MBeanParameterInfo[2];
 

signature[0] = new MBeanParameterInfo("owner", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("asynchronous", "boolean","Description:");                    

operationInfo[3] = new MBeanOperationInfo("unlockAll", "Description:", signature, "int", MBeanOperationInfo.UNKNOWN);
	        
// for method unlockAllGeneric
 signature = new MBeanParameterInfo[2];
 

signature[0] = new MBeanParameterInfo("owner", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("asynchronous", "boolean","Description:");                    

operationInfo[4] = new MBeanOperationInfo("unlockAllGeneric", "Description:", signature, "int", MBeanOperationInfo.UNKNOWN);
	        
// for method unlockAllCumulativeCounts
 signature = new MBeanParameterInfo[4];
 

signature[0] = new MBeanParameterInfo("owner", "java.lang.String","Description:");                    

signature[1] = new MBeanParameterInfo("name", "java.lang.String","Description:");                    

signature[2] = new MBeanParameterInfo("argument", "java.lang.String","Description:");                    

signature[3] = new MBeanParameterInfo("mode", "char","Description:");                    

operationInfo[5] = new MBeanOperationInfo("unlockAllCumulativeCounts", "Description:", signature, "int", MBeanOperationInfo.UNKNOWN);
	        
// for method enableTimeStatistics
 signature = new MBeanParameterInfo[0];
 

operationInfo[6] = new MBeanOperationInfo("enableTimeStatistics", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	        
// for method disableTimeStatistics
 signature = new MBeanParameterInfo[0];
 

operationInfo[7] = new MBeanOperationInfo("disableTimeStatistics", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	        
// for method resetTimeStatistics
 signature = new MBeanParameterInfo[0];
 

operationInfo[8] = new MBeanOperationInfo("resetTimeStatistics", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	        
// for method enableServerLogging
 signature = new MBeanParameterInfo[0];
 

operationInfo[9] = new MBeanOperationInfo("enableServerLogging", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	        
// for method disableServerLogging
 signature = new MBeanParameterInfo[0];
 

operationInfo[10] = new MBeanOperationInfo("disableServerLogging", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	        
// for method getTimeStatisticsEntries
 signature = new MBeanParameterInfo[0];
 

operationInfo[11] = new MBeanOperationInfo("getTimeStatisticsEntries", "Description:", signature, "[javax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	        




MBeanConstructorInfo[] constructorInfo = new MBeanConstructorInfo[0];
MBeanNotificationInfo[] notificationInfo = new MBeanNotificationInfo[0];

mbeanInfo = new MBeanInfo("SAP_ITSAMJ2eeEnqueueServer", "SAP_ITSAMJ2eeEnqueueServer MBean", attributeInfo, constructorInfo, operationInfo, notificationInfo);

  }


	 /*
	  * Wraps given SAP_ITSAMJ2eeEnqueueServer and provides a javax.management.DynamicMBean interface on top
   */
       public  SAP_ITSAMJ2eeEnqueueServerWrapper(SAP_ITSAMJ2eeEnqueueServer mbean){
              this.mbean = mbean;
       }
       
    /*
	  * Creates an empty wrapper for SAP_ITSAMJ2eeEnqueueServer
   */
    public SAP_ITSAMJ2eeEnqueueServerWrapper() 
		{
		}
			  /*
   * Sets a new SAP_ITSAMJ2eeEnqueueServer to be wrapped and returns the old one
   */
  public SAP_ITSAMJ2eeEnqueueServer setManagedObject(SAP_ITSAMJ2eeEnqueueServer mbean) {
    SAP_ITSAMJ2eeEnqueueServer old = this.mbean;
    this.mbean = mbean;
    return old;
  }

  /*
   * Returns the currently wrapped SAP_ITSAMJ2eeEnqueueServer
   */
  public SAP_ITSAMJ2eeEnqueueServer getManagedObject() {
    return this.mbean;
  }
		
		
    /*
   * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
   */
      public AttributeList getAttributes(String[] arg0) {
		return null;
	   }

	  public AttributeList setAttributes(AttributeList arg0) {
		 return null;
	  }
    
     /**
   * @see javax.management.DynamicMBean#getMBeanInfo()
   */
	public MBeanInfo getMBeanInfo() {
     return mbeanInfo;
	  }   
    
 /**
   * @see javax.management.DynamicMBean\#setAttribute(javax.management.Attribute)
   */    
    public void setAttribute(Attribute attr) throws AttributeNotFoundException, InvalidAttributeValueException,
      MBeanException, ReflectionException {
      String name = attr.getName();
          
         }             
  
   /**
   * @see javax.management.DynamicMBean#invoke(java.lang.String, java.lang.Object[], java.lang.String[])
   */
     public Object invoke(String operationName, Object param[], String signature[])
    throws MBeanException, ReflectionException {
     if (operationName == null) {
        throw new RuntimeOperationsException(
            new IllegalArgumentException(
                "Operation name cannot be null"),
            "Cannot invoke a null operation in " + "SAP_ITSAMJ2eeEnqueueServer");
            }
            
            if(operationName.equals("getLocks") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.String") || signature[1].equals("string")) && (signature[2].equals("java.lang.String") || signature[2].equals("string")))
            {
            try{return getCDataArrForSAP_ITSAMJ2eeLockEntry(mbean.getLocks(
	    	(String) param[0] , (String) param[1] , (String) param[2]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equals("lock") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.String") || signature[1].equals("string")) && (signature[2].equals("java.lang.String") || signature[2].equals("string")) && (signature[3].equals("java.lang.Character") || signature[3].equals("char")))
            {
            return new Integer(mbean.lock((String) param[0] , (String) param[1] , (String) param[2] , ((Character)param[3]).charValue()));
			
            }
            
            if(operationName.equals("unlock") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.String") || signature[1].equals("string")) && (signature[2].equals("java.lang.String") || signature[2].equals("string")) && (signature[3].equals("java.lang.Character") || signature[3].equals("char")) && (signature[4].equals("java.lang.Boolean") || signature[4].equals("boolean")))
            {
            return new Integer(mbean.unlock((String) param[0] , (String) param[1] , (String) param[2] , ((Character)param[3]).charValue() , ((Boolean)param[4]).booleanValue()));
			
            }
            
            if(operationName.equals("unlockAll") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.Boolean") || signature[1].equals("boolean")))
            {
            return new Integer(mbean.unlockAll((String) param[0] , ((Boolean)param[1]).booleanValue()));
			
            }
            
            if(operationName.equals("unlockAllGeneric") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.Boolean") || signature[1].equals("boolean")))
            {
            return new Integer(mbean.unlockAllGeneric((String) param[0] , ((Boolean)param[1]).booleanValue()));
			
            }
            
            if(operationName.equals("unlockAllCumulativeCounts") && (signature[0].equals("java.lang.String") || signature[0].equals("string")) && (signature[1].equals("java.lang.String") || signature[1].equals("string")) && (signature[2].equals("java.lang.String") || signature[2].equals("string")) && (signature[3].equals("java.lang.Character") || signature[3].equals("char")))
            {
            return new Integer(mbean.unlockAllCumulativeCounts((String) param[0] , (String) param[1] , (String) param[2] , ((Character)param[3]).charValue()));
			
            }
            
            if(operationName.equals("enableTimeStatistics") && signature.length==0)
            {
            mbean.enableTimeStatistics();
			return null;
            }
            
            if(operationName.equals("disableTimeStatistics") && signature.length==0)
            {
            mbean.disableTimeStatistics();
			return null;
            }
            
            if(operationName.equals("resetTimeStatistics") && signature.length==0)
            {
            mbean.resetTimeStatistics();
			return null;
            }
            
            if(operationName.equals("enableServerLogging") && signature.length==0)
            {
            mbean.enableServerLogging();
			return null;
            }
            
            if(operationName.equals("disableServerLogging") && signature.length==0)
            {
            mbean.disableServerLogging();
			return null;
            }
            
            if(operationName.equals("getTimeStatisticsEntries") && signature.length==0)
            {
            try{return getCDataArrForSAP_ITSAMJ2eeLockStatisticsEntry(mbean.getTimeStatisticsEntries(
	    	));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            else { 
        // unrecognized operation name:
        throw new ReflectionException(
            new NoSuchMethodException(operationName), 
            "Cannot find the operation " + operationName +
                " in " + "SAP_ITSAMJ2eeEnqueueServer");
    }
  }
   
     /*
   * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
   */
public Object getAttribute(String arg0 ) throws AttributeNotFoundException, MBeanException,   ReflectionException {
             if (arg0 == null) 
  throw new RuntimeOperationsException(
	 new IllegalArgumentException("Attribute name cannot be null"), 
	 "Cannot invoke a getter of " + "SAP_ITSAMJ2eeEnqueueServer" +
		 " with null attribute name");  
		     if(arg0.equals("ElementName"))
                    
	   	    return mbean.getElementName();
					    if(arg0.equals("Caption"))
                    
	   	    return mbean.getCaption();
					    if(arg0.equals("Description"))
                    
	   	    return mbean.getDescription();
					    
     else {
           throw(new AttributeNotFoundException("Cannot find " + arg0+ " attribute"));
             }
             
            
  }
   
  public static CompositeData getCDataForSAP_ITSAMJ2eeLockEntry(SAP_ITSAMJ2eeLockEntry metric) throws OpenDataException {
  
  	 String[] attrnames={"Owner","Argument","Count","Mode","User","Namespace","Name","NamespaceDescription","Caption","Description","ElementName"};
	 Object[] attrobj={metric.getOwner(),metric.getArgument(),new Long(metric.getCount()),new Character(metric.getMode()),metric.getUser(),metric.getNamespace(),metric.getName(),metric.getNamespaceDescription(),metric.getCaption(),metric.getDescription(),metric.getElementName()};

	return new CompositeDataSupport(getCTypeForSAP_ITSAMJ2eeLockEntry(),attrnames,attrobj);
	
}
public static SAP_ITSAMJ2eeLockEntry getSAP_ITSAMJ2eeLockEntryForCData(CompositeData data) {
    	SAP_ITSAMJ2eeLockEntry result = new SAP_ITSAMJ2eeLockEntry((String) data.get("Owner"),(String) data.get("Argument"),((Long) data.get("Count")).longValue(),((Character) data.get("Mode")).charValue(),(String) data.get("User"),(String) data.get("Namespace"),(String) data.get("Name"),(String) data.get("NamespaceDescription"),(String) data.get("Caption"),(String) data.get("Description"),(String) data.get("ElementName"));
		          
		  return result;}
		 
		 public static CompositeType getCTypeForSAP_ITSAMJ2eeLockEntry() throws OpenDataException
		 {
		 				 String[] itemNames={"Owner","Argument","Count","Mode","User","Namespace","Name","NamespaceDescription","Caption","Description","ElementName"};
                	String[] itemDescriptions={"Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:The Caption property is a short textual description (one- line string) of the object.","Description:The Description property provides a textual description of the object.","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.LONG,SimpleType.CHARACTER,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
	return new CompositeType("SAP_ITSAMJ2eeLockEntry","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 



public static SAP_ITSAMJ2eeLockEntry[] getSAP_ITSAMJ2eeLockEntryArrForCData(CompositeData[] cd){
		  SAP_ITSAMJ2eeLockEntry[] arr = new SAP_ITSAMJ2eeLockEntry[cd.length] ;
		for(int i=0;i< cd.length;i++)
		arr[i] =  getSAP_ITSAMJ2eeLockEntryForCData(cd[i]);
		return arr;
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJ2eeLockEntry(SAP_ITSAMJ2eeLockEntry[] crr) throws OpenDataException{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJ2eeLockEntry(crr[i]);
     	return cd;
     }
  
  public static CompositeData getCDataForSAP_ITSAMJ2eeLockStatisticsEntry(SAP_ITSAMJ2eeLockStatisticsEntry metric) throws OpenDataException {
  
  	 String[] attrnames={"Description","Counts","CumulatedDeltas","AverageDelta","MinDelta","MaxDelta","Caption","ElementName"};
	 Object[] attrobj={metric.getDescription(),new Long(metric.getCounts()),new Long(metric.getCumulatedDeltas()),new Long(metric.getAverageDelta()),new Long(metric.getMinDelta()),new Long(metric.getMaxDelta()),metric.getCaption(),metric.getElementName()};

	return new CompositeDataSupport(getCTypeForSAP_ITSAMJ2eeLockStatisticsEntry(),attrnames,attrobj);
	
}
public static SAP_ITSAMJ2eeLockStatisticsEntry getSAP_ITSAMJ2eeLockStatisticsEntryForCData(CompositeData data) {
    	SAP_ITSAMJ2eeLockStatisticsEntry result = new SAP_ITSAMJ2eeLockStatisticsEntry((String) data.get("Description"),((Long) data.get("Counts")).longValue(),((Long) data.get("CumulatedDeltas")).longValue(),((Long) data.get("AverageDelta")).longValue(),((Long) data.get("MinDelta")).longValue(),((Long) data.get("MaxDelta")).longValue(),(String) data.get("Caption"),(String) data.get("ElementName"));
		          
		  return result;}
		 
		 public static CompositeType getCTypeForSAP_ITSAMJ2eeLockStatisticsEntry() throws OpenDataException
		 {
		 				 String[] itemNames={"Description","Counts","CumulatedDeltas","AverageDelta","MinDelta","MaxDelta","Caption","ElementName"};
                	String[] itemDescriptions={"Description:The Description property provides a textual description of the object.","Description:","Description:","Description:","Description:","Description:","Description:The Caption property is a short textual description (one- line string) of the object.","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.LONG,SimpleType.LONG,SimpleType.LONG,SimpleType.LONG,SimpleType.LONG,SimpleType.STRING,SimpleType.STRING };
		
	return new CompositeType("SAP_ITSAMJ2eeLockStatisticsEntry","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 



public static SAP_ITSAMJ2eeLockStatisticsEntry[] getSAP_ITSAMJ2eeLockStatisticsEntryArrForCData(CompositeData[] cd){
		  SAP_ITSAMJ2eeLockStatisticsEntry[] arr = new SAP_ITSAMJ2eeLockStatisticsEntry[cd.length] ;
		for(int i=0;i< cd.length;i++)
		arr[i] =  getSAP_ITSAMJ2eeLockStatisticsEntryForCData(cd[i]);
		return arr;
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJ2eeLockStatisticsEntry(SAP_ITSAMJ2eeLockStatisticsEntry[] crr) throws OpenDataException{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJ2eeLockStatisticsEntry(crr[i]);
     	return cd;
     }

}
 