/*
 * Copyright (c) 2005 by SAP AG, Walldorf.,
 * http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */

package com.sap.engine.services.jndi.itsam;

import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.openmbean.ArrayType;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;

import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDIAttribute;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDIContext;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDINamedObject;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDISubcontext;

/**
 * This class is automatically generated by the CIM Java code generator.<br>
 *
 * @author Dimitar Mihaylov (i031671)
 * @version 7.10
 */
public class SAP_ITSAMJNDIRegistryWrapper implements DynamicMBean {

  /* The wrapped object to be exposed as MBean */
  private SAP_ITSAMJNDIRegistry_Impl mbean;

  /* MBeanInfo */
  private static final MBeanInfo mbeanInfo;

  /* Initialize MBeanInfo */
  static {
    // attributes

    MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[5];

    attributeInfo[0] = new MBeanAttributeInfo("objectName", "java.lang.String", "Description:", true, false, false);

    attributeInfo[1] = new MBeanAttributeInfo("Caption", "java.lang.String", "Description:", true, false, false);

    attributeInfo[2] = new MBeanAttributeInfo("statisticsProvider", "boolean", "Description:", true, false, false);

    attributeInfo[3] = new MBeanAttributeInfo("stateManageable", "boolean", "Description:", true, false, false);

    attributeInfo[4] = new MBeanAttributeInfo("eventProvider", "boolean", "Description:", true, false, false);

//	 operations
    MBeanParameterInfo[] signature;
    MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[1];

//	 for method getJNDIContext
    signature = new MBeanParameterInfo[1];

    signature[0] = new MBeanParameterInfo("Name", "java.lang.String", "Description:");

    operationInfo[0] = new MBeanOperationInfo("getJNDIContext", "Description:", signature, "SAP_ITSAMJNDIContext", MBeanOperationInfo.UNKNOWN);

    MBeanConstructorInfo[] constructorInfo = new MBeanConstructorInfo[0];
    MBeanNotificationInfo[] notificationInfo = new MBeanNotificationInfo[0];

    mbeanInfo = new MBeanInfo("SAP_ITSAMJNDIRegistry", "SAP_ITSAMJNDIRegistry MBean", attributeInfo, constructorInfo, operationInfo, notificationInfo);
  }


  /*
       * Wraps given SAP_ITSAMJNDIRegistry and provides a javax.management.DynamicMBean interface on top
      */
  public SAP_ITSAMJNDIRegistryWrapper(SAP_ITSAMJNDIRegistry_Impl mbean) {
    this.mbean = mbean;
  }

  /*
       * Creates an empty wrapper for SAP_ITSAMJNDIRegistry
      */
  public SAP_ITSAMJNDIRegistryWrapper() {
  }

  /*
      * Sets a new SAP_ITSAMJNDIRegistry to be wrapped and returns the old one
      */
  public SAP_ITSAMJNDIRegistry_Impl setManagedObject(SAP_ITSAMJNDIRegistry_Impl mbean) {
    SAP_ITSAMJNDIRegistry_Impl old = this.mbean;
    this.mbean = mbean;
    return old;
  }

  /*
      * Returns the currently wrapped SAP_ITSAMJNDIRegistry
      */
  public SAP_ITSAMJNDIRegistry getManagedObject() {
    return this.mbean;
  }


  /*
      * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
      */
  public AttributeList getAttributes(String[] arg0) {
    return null;
  }

  public AttributeList setAttributes(AttributeList arg0) {
    return null;
  }

  /**
   * @see javax.management.DynamicMBean#getMBeanInfo()
   */
  public MBeanInfo getMBeanInfo() {
    return mbeanInfo;
  }

  /**
   * @see javax.management.DynamicMBean\#setAttribute(javax.management.Attribute)
   */
  public void setAttribute(Attribute attr) throws AttributeNotFoundException, InvalidAttributeValueException, MBeanException, ReflectionException {
    String name = attr.getName();

  }

  /**
   * @see javax.management.DynamicMBean#invoke(java.lang.String, java.lang.Object[], java.lang.String[])
   */
  public Object invoke(String operationName, Object param[], String signature[]) throws MBeanException, ReflectionException {
    if (operationName == null) {
      throw new RuntimeOperationsException(new IllegalArgumentException("Operation name cannot be null"), "Cannot invoke a null operation in " + "SAP_ITSAMJNDIRegistry");
    }

    if (operationName.equals("getJNDIContext") && (signature[0].equals("java.lang.String") || signature[0].equals("string"))) {
      try {
        return getCDataForSAP_ITSAMJNDIContext(mbean.getJNDIContext((String) param[0]));
      } catch (OpenDataException e1) {
        e1.printStackTrace();
        return "ERROR" + e1.getMessage();
      }
    } else {
      // unrecognized operation name:
      throw new ReflectionException(new NoSuchMethodException(operationName), "Cannot find the operation " + operationName + " in " + "SAP_ITSAMJNDIRegistry");
    }
  }

  /*
      * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
      */
  public Object getAttribute(String arg0) throws AttributeNotFoundException, MBeanException, ReflectionException {
    if (arg0 == null) {
      throw new RuntimeOperationsException(new IllegalArgumentException("Attribute name cannot be null"), "Cannot invoke a getter of " + "SAP_ITSAMJNDIRegistry" + " with null attribute name");
    }
    if (arg0.equals("objectName"))

    {
      return mbean.getobjectName();
    }
    if (arg0.equals("Caption"))

    {
      return mbean.getCaption();
    }
    if (arg0.equals("statisticsProvider"))

    {
      return new Boolean(mbean.getstatisticsProvider());
    }
    if (arg0.equals("stateManageable"))

    {
      return new Boolean(mbean.getstateManageable());
    }
    if (arg0.equals("eventProvider"))

    {
      return new Boolean(mbean.geteventProvider());
    } else {
      throw (new AttributeNotFoundException("Cannot find " + arg0 + " attribute"));
    }


  }

  public static CompositeData getCDataForSAP_ITSAMJNDIAttribute(SAP_ITSAMJNDIAttribute metric) throws OpenDataException {

    String[] attrnames = {"Name", "Value"};
    Object[] attrobj = {metric.getName(), metric.getValue()};

    return new CompositeDataSupport(getCTypeForSAP_ITSAMJNDIAttribute(), attrnames, attrobj);

  }

  public static SAP_ITSAMJNDIAttribute getSAP_ITSAMJNDIAttributeForCData(CompositeData data) {
    SAP_ITSAMJNDIAttribute result = new SAP_ITSAMJNDIAttribute((String) data.get("Name"), (String) data.get("Value"));

    return result;
  }

  public static CompositeType getCTypeForSAP_ITSAMJNDIAttribute() throws OpenDataException {
    String[] itemNames = {"Name", "Value"};
    String[] itemDescriptions = {"Description:", "Description:"};
    OpenType[] itemTypes = {SimpleType.STRING, SimpleType.STRING};

    return new CompositeType("SAP_ITSAMJNDIAttribute", "Description:", itemNames, itemDescriptions, itemTypes);
  }


  public static SAP_ITSAMJNDIAttribute[] getSAP_ITSAMJNDIAttributeArrForCData(CompositeData[] cd) {
    SAP_ITSAMJNDIAttribute[] arr = null;
    for (int i = 0; i < cd.length; i++) {
      arr[i] = getSAP_ITSAMJNDIAttributeForCData(cd[i]);
    }
    return arr;
  }


  public static CompositeData[] getCDataArrForSAP_ITSAMJNDIAttribute(SAP_ITSAMJNDIAttribute[] crr) throws OpenDataException {
    CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
    for (int i = 0; i < crr.length; i++) {
      cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMJNDIAttribute(crr[i]);
    }
    return cd;
  }

  public static CompositeData getCDataForSAP_ITSAMJNDISubcontext(SAP_ITSAMJNDISubcontext metric) throws OpenDataException {

    String[] attrnames = {"Name", "ShortName"};
    Object[] attrobj = {metric.getName(), metric.getShortName()};

    return new CompositeDataSupport(getCTypeForSAP_ITSAMJNDISubcontext(), attrnames, attrobj);

  }

  public static SAP_ITSAMJNDISubcontext getSAP_ITSAMJNDISubcontextForCData(CompositeData data) {
    SAP_ITSAMJNDISubcontext result = new SAP_ITSAMJNDISubcontext((String) data.get("Name"), (String) data.get("ShortName"));

    return result;
  }

  public static CompositeType getCTypeForSAP_ITSAMJNDISubcontext() throws OpenDataException {
    String[] itemNames = {"Name", "ShortName"};
    String[] itemDescriptions = {"Description:", "Description:"};
    OpenType[] itemTypes = {SimpleType.STRING, SimpleType.STRING};

    return new CompositeType("SAP_ITSAMJNDISubcontext", "Description:", itemNames, itemDescriptions, itemTypes);
  }


  public static SAP_ITSAMJNDISubcontext[] getSAP_ITSAMJNDISubcontextArrForCData(CompositeData[] cd) {
    SAP_ITSAMJNDISubcontext[] arr = null;
    for (int i = 0; i < cd.length; i++) {
      arr[i] = getSAP_ITSAMJNDISubcontextForCData(cd[i]);
    }
    return arr;
  }


  public static CompositeData[] getCDataArrForSAP_ITSAMJNDISubcontext(SAP_ITSAMJNDISubcontext[] crr) throws OpenDataException {
    CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
    for (int i = 0; i < crr.length; i++) {
      cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMJNDISubcontext(crr[i]);
    }
    return cd;
  }

  public static CompositeData getCDataForSAP_ITSAMJNDINamedObject(SAP_ITSAMJNDINamedObject metric) throws OpenDataException {

    String[] attrnames = {"Name", "ShortName", "ClassName", "ObjectValue", "Attributes"};
    Object[] attrobj = {metric.getName(), metric.getShortName(), metric.getClassName(), metric.getObjectValue(), getCDataArrForSAP_ITSAMJNDIAttribute(metric.getAttributes())};

    return new CompositeDataSupport(getCTypeForSAP_ITSAMJNDINamedObject(), attrnames, attrobj);

  }

  public static SAP_ITSAMJNDINamedObject getSAP_ITSAMJNDINamedObjectForCData(CompositeData data) {
    SAP_ITSAMJNDINamedObject result = new SAP_ITSAMJNDINamedObject((String) data.get("Name"), (String) data.get("ShortName"), (String) data.get("ClassName"), (String) data.get("ObjectValue"), getSAP_ITSAMJNDIAttributeArrForCData((CompositeData[]) data.get("Attributes")));

    return result;
  }

  public static CompositeType getCTypeForSAP_ITSAMJNDINamedObject() throws OpenDataException {
    String[] itemNames = {"Name", "ShortName", "ClassName", "ObjectValue", "Attributes"};
    String[] itemDescriptions = {"Description:", "Description:", "Description:", "Description:", "Description:"};
    OpenType[] itemTypes = {SimpleType.STRING, SimpleType.STRING, SimpleType.STRING, SimpleType.STRING, new ArrayType(1, getCTypeForSAP_ITSAMJNDIAttribute())};

    return new CompositeType("SAP_ITSAMJNDINamedObject", "Description:", itemNames, itemDescriptions, itemTypes);
  }


  public static SAP_ITSAMJNDINamedObject[] getSAP_ITSAMJNDINamedObjectArrForCData(CompositeData[] cd) {
    SAP_ITSAMJNDINamedObject[] arr = null;
    for (int i = 0; i < cd.length; i++) {
      arr[i] = getSAP_ITSAMJNDINamedObjectForCData(cd[i]);
    }
    return arr;
  }


  public static CompositeData[] getCDataArrForSAP_ITSAMJNDINamedObject(SAP_ITSAMJNDINamedObject[] crr) throws OpenDataException {
    CompositeDataSupport[] cd = new CompositeDataSupport[crr.length];
    for (int i = 0; i < crr.length; i++) {
      cd[i] = (CompositeDataSupport) getCDataForSAP_ITSAMJNDINamedObject(crr[i]);
    }
    return cd;
  }

  public static CompositeData getCDataForSAP_ITSAMJNDIContext(SAP_ITSAMJNDIContext metric) throws OpenDataException {

    String[] attrnames = {"Name", "ShortName", "Attributes", "Subcontexts", "NamedObjects"};
    Object[] attrobj = {metric.getName(), metric.getShortName(), getCDataArrForSAP_ITSAMJNDIAttribute(metric.getAttributes()), getCDataArrForSAP_ITSAMJNDISubcontext(metric.getSubcontexts()), getCDataArrForSAP_ITSAMJNDINamedObject(metric.getNamedObjects())};

    return new CompositeDataSupport(getCTypeForSAP_ITSAMJNDIContext(), attrnames, attrobj);

  }

  public static SAP_ITSAMJNDIContext getSAP_ITSAMJNDIContextForCData(CompositeData data) {
    SAP_ITSAMJNDIContext result = new SAP_ITSAMJNDIContext((String) data.get("Name"), (String) data.get("ShortName"), getSAP_ITSAMJNDIAttributeArrForCData((CompositeData[]) data.get("Attributes")), getSAP_ITSAMJNDISubcontextArrForCData((CompositeData[]) data.get("Subcontexts")), getSAP_ITSAMJNDINamedObjectArrForCData((CompositeData[]) data.get("NamedObjects")));

    return result;
  }

  public static CompositeType getCTypeForSAP_ITSAMJNDIContext() throws OpenDataException {
    String[] itemNames = {"Name", "ShortName", "Attributes", "Subcontexts", "NamedObjects"};
    String[] itemDescriptions = {"Description:", "Description:", "Description:", "Description:", "Description:"};
    OpenType[] itemTypes = {SimpleType.STRING, SimpleType.STRING, new ArrayType(1, getCTypeForSAP_ITSAMJNDIAttribute()), new ArrayType(1, getCTypeForSAP_ITSAMJNDISubcontext()), new ArrayType(1, getCTypeForSAP_ITSAMJNDINamedObject())};

    return new CompositeType("SAP_ITSAMJNDIContext", "Description:", itemNames, itemDescriptions, itemTypes);
  }

}