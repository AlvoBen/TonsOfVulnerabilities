/*
 * Copyright (c) 2005 by SAP AG, Walldorf.,
 * http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */

package com.sap.engine.services.jndi.itsam;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;

import javax.naming.Binding;
import javax.naming.Context;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;

import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDIAttribute;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDIContext;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDINamedObject;
import com.sap.engine.services.jndi.itsam.compositedata.SAP_ITSAMJNDISubcontext;
import com.sap.tc.logging.Location;
import com.sap.tc.logging.Severity;
import com.sap.tc.logging.SimpleLogger;

/**
 * This class is automatically generated by the CIM Java generator.<br>
 * It transforms the data from the J2EE engine naming service into a CIM
 * compliant model data.
 *
 * @author Dimitar Mihaylov (i031671)
 * @version 7.10
 */
public class SAP_ITSAMJNDIRegistry_Impl implements SAP_ITSAMJNDIRegistry {

  private static final String SEPARATOR = "/";

  private static final String UNABLE_TO_OBTAIN_INITIAL_DIR_CONTEXT = "Unable to obtain initial directory context";
  private static final String ERROR_OBTAINING_BINDINGS = "Error obtaining bindings for jndi context: ";
  private static final String ERROR_OBTAINING_ATTRIBUTES = "Error obtaining attributes for ";
  private static final String UNEXPECTED_ERROR = "Unexpected error";

  private static final String NULL_VALUE = "null";

  private static final Comparator subcontextComparator = new SubcontextComparator();
  private static final Comparator namedObjectComparator = new NamedObjectComparator();

  private static final Location LOCATION = Location.getLocation(SAP_ITSAMJNDIRegistry_Impl.class);

  private String objectName;

  public SAP_ITSAMJNDIRegistry_Impl(String objectName) {
    this.objectName = objectName;
  }

  /**
   * The method tries to find and return the specified JNDI context.
   *
   * @param Name the context name
   * @return the JNDI context if found, otherwise <code>null</code>
   * @see SAP_ITSAMJNDIContext
   */
  public SAP_ITSAMJNDIContext getJNDIContext(String Name) {
    SAP_ITSAMJNDIContext context = null;
    String errorMessage = "";
    try {
      Properties props = new java.util.Properties();
      props.put("domain", "true");
      errorMessage = UNABLE_TO_OBTAIN_INITIAL_DIR_CONTEXT;
      DirContext ctx = new InitialDirContext(props);

      errorMessage = ERROR_OBTAINING_ATTRIBUTES + Name;
      Attributes attrs = ctx.getAttributes(Name);

      errorMessage = ERROR_OBTAINING_BINDINGS + Name;
      Enumeration bindings = ctx.listBindings(Name);

      errorMessage = UNEXPECTED_ERROR;
      context = createJNDIContext(ctx, Name, attrs, bindings);
    } catch (NamingException e) {
      SimpleLogger.traceThrowable(Severity.ERROR,LOCATION,e, "ASJ.jndi.000019", "{0}",  new Object[] { errorMessage});
    }
    return context;
  }

  private SAP_ITSAMJNDIContext createJNDIContext(DirContext ctx, String name, Attributes attrs, Enumeration bindings) throws NamingException {
    List _subcontexts = new ArrayList();
    List _namedObjects = new ArrayList();
    splitBindings(ctx, name, bindings, _subcontexts, _namedObjects);
    SAP_ITSAMJNDIAttribute[] attributes = convertAttributes(attrs);
    SAP_ITSAMJNDISubcontext[] subcontexts = new SAP_ITSAMJNDISubcontext[_subcontexts.size()];
    subcontexts = (SAP_ITSAMJNDISubcontext[]) _subcontexts.toArray(subcontexts);
    Arrays.sort(subcontexts, subcontextComparator);
    SAP_ITSAMJNDINamedObject[] namedObjects = new SAP_ITSAMJNDINamedObject[_namedObjects.size()];
    namedObjects = (SAP_ITSAMJNDINamedObject[]) _namedObjects.toArray(namedObjects);
    Arrays.sort(namedObjects, namedObjectComparator);
    String shortName = name.lastIndexOf(SEPARATOR) != -1 ? name.substring(name.lastIndexOf(SEPARATOR) + 1) : name;
    SAP_ITSAMJNDIContext context = new SAP_ITSAMJNDIContext(name, shortName, attributes, subcontexts, namedObjects);
    return context;
  }

  private SAP_ITSAMJNDIAttribute[] convertAttributes(Attributes attrs) throws NamingException {
    List attributes = new ArrayList();
    if (attrs != null) {
      Enumeration e = attrs.getAll();
      while (e.hasMoreElements()) {
        Attribute attr = (Attribute) e.nextElement();
        if (attr != null) {
          String name = attr.getID();
          Object value = attr.get();
          SAP_ITSAMJNDIAttribute attribute = new SAP_ITSAMJNDIAttribute(name, value != null ? value.toString() : NULL_VALUE);
          attributes.add(attribute);
        }
      }
    }
    SAP_ITSAMJNDIAttribute[] result = new SAP_ITSAMJNDIAttribute[attributes.size()];
    result = (SAP_ITSAMJNDIAttribute[]) attributes.toArray(result);
    return result;
  }

  private void splitBindings(DirContext ctx, String path, Enumeration bindings, List subcontexts, List namedObjects) throws NamingException {
    while (bindings.hasMoreElements()) {
      Binding binding = (Binding) bindings.nextElement();
      if (binding != null) {
        String shortName = binding.getName();
        String className = binding.getClassName();
        Object obj = binding.getObject();
        boolean isContext = obj instanceof Context;
        String name;
        if (path.length() > 0) {
          name = path + SEPARATOR + shortName;
        } else {
          name = shortName;
        }
        if (isContext) {
          SAP_ITSAMJNDISubcontext subcontext = new SAP_ITSAMJNDISubcontext(name, shortName);
          subcontexts.add(subcontext);
        } else {
          if (className == null) {
            className = NULL_VALUE;
          }
          String objectValue = (obj == null) ? NULL_VALUE : obj.toString();
          Attributes attrs = null;
          try {
            attrs = ctx.getAttributes(name);
          } catch (NamingException e) {
            SimpleLogger.traceThrowable(Severity.ERROR,LOCATION,e, "ASJ.jndi.000020", "Error obtaining attributes for [{0}]",  new Object[] { name});
          }
          SAP_ITSAMJNDIAttribute[] attributes = convertAttributes(attrs);
          SAP_ITSAMJNDINamedObject namedObject = new SAP_ITSAMJNDINamedObject(name, shortName, className, objectValue, attributes);
          namedObjects.add(namedObject);
        }
      }
    }
  }

  /**
   *
   */
  public String getobjectName() {
    return objectName;
  }

  /**
   *
   */
  public String getCaption() {
    return MBEAN_NAME;
  }

  /**
   *
   */
  public boolean getstatisticsProvider() {
    return false;
  }

  /**
   *
   */
  public boolean getstateManageable() {
    return false;
  }

  /**
   *
   */
  public boolean geteventProvider() {
    return false;
  }

  private static class SubcontextComparator implements Comparator {
    public int compare(Object o1, Object o2) {
      SAP_ITSAMJNDISubcontext subcontext1 = (SAP_ITSAMJNDISubcontext) o1;
      SAP_ITSAMJNDISubcontext subcontext2 = (SAP_ITSAMJNDISubcontext) o2;
      String shortName1 = subcontext1.getShortName();
      String shortName2 = subcontext2.getShortName();
      return shortName1.compareToIgnoreCase(shortName2);
    }
  }

  private static class NamedObjectComparator implements Comparator {
    public int compare(Object o1, Object o2) {
      SAP_ITSAMJNDINamedObject namedObject1 = (SAP_ITSAMJNDINamedObject) o1;
      SAP_ITSAMJNDINamedObject namedObject2 = (SAP_ITSAMJNDINamedObject) o2;
      String shortName1 = namedObject1.getShortName();
      String shortName2 = namedObject2.getShortName();
      return shortName1.compareToIgnoreCase(shortName2);
    }
	}
}