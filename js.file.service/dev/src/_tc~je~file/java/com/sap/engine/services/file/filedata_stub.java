// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.file;

import java.rmi.server.Operation;


import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  RMIC Generator
* @version 6.30
*/
public class FileData_Stub  extends com.sap.engine.services.rmi_p4.StubBase 
		implements com.sap.engine.services.file.FileData {

	private static final Operation[] operations = {
			new Operation("write(byte[],int,int)"),
			new Operation("read()"),
			new Operation("openRead()"),
			new Operation("openWrite()"),
			new Operation("closeRead()"),
			new Operation("closeWrite()"),
			new Operation("getBufferSize()"),
			new Operation("setBufferSize(int)")};

	public Operation[] getOperations() {
		return operations;
	}

	public void write(byte[] _param0, int _param1, int _param2) throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("write(byte[],int,int)");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.write( _param0,  _param1,  _param2);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,new Integer(_param1),new Integer(_param2)};
				Class[] p = new Class[]{byte[].class,int.class,int.class};
				try { 
					invokeReflect(remote,"write",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <write>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <write>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeInt( _param1);
				out.writeInt( _param2);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public byte[] read() throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("read()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				return remoteInterface.read();
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (byte[])broker.narrow(replicate(invokeReflect(remote,"read",params,p)),byte[].class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <read>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <read>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					byte[] _result;
					obj = in.readObject();
					try {
						 _result = (byte[])obj;
					} catch (ClassCastException ex) {
						 _result = (byte[]) broker.narrow(obj,byte[].class);
					}
				return _result;
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void openRead() throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("openRead()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.openRead();
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					invokeReflect(remote,"openRead",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <openRead>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <openRead>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(2);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void openWrite() throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("openWrite()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.openWrite();
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					invokeReflect(remote,"openWrite",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <openWrite>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <openWrite>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(3);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void closeRead() throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("closeRead()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.closeRead();
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					invokeReflect(remote,"closeRead",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <closeRead>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <closeRead>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(4);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void closeWrite() throws java.io.IOException {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("closeWrite()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.closeWrite();
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					invokeReflect(remote,"closeWrite",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.io.IOException) {
					 throw (java.io.IOException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <closeWrite>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.io.IOException ex) {
				broker.log("P4 Call exception: Exception in execute <closeWrite>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.io.IOException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(5);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.io.IOException ex) {
				throw (java.io.IOException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public int getBufferSize()  {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("getBufferSize()");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				return remoteInterface.getBufferSize();
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return ((Integer) invokeReflect(remote,"getBufferSize",params,p)).intValue();
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					{ 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getBufferSize>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(6);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
				int _result = in.readInt();
				return _result;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void setBufferSize(int _param0)  {

		Object state = null;
		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
					p4remote.checkPermission("setBufferSize(int)");
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.file.FileData remoteInterface = (com.sap.engine.services.file.FileData) remote;
				remoteInterface.setBufferSize( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{new Integer(_param0)};
				Class[] p = new Class[]{int.class};
				try { 
					invokeReflect(remote,"setBufferSize",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					{ 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <setBufferSize>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(7);
				P4ObjectOutput out = call.getOutputStream();
				out.writeInt( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


}
