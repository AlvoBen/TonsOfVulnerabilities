// Class generated by InQMy Generator
// Don't change it !!
/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.file;

import java.rmi.server.Operation;
import com.sap.engine.services.rmi_p4.*;

/**
 *
 * @author Georgy Stanev
 * @version 4.0
 */
public class FileDataImplp4_Skel extends P4RemoteObject implements com.sap.engine.services.rmi_p4.Skeleton, java.rmi.Remote {

  public P4ObjectBroker broker = P4ObjectBroker.init();
  private static final Operation[] operations = {new Operation("closeWrite()"), new Operation("getBufferSize()"), new Operation("openWrite()"), new Operation("closeRead()"), new Operation("openRead()"), new Operation("read()"), new Operation("setBufferSize(int)"), new Operation("write(byte[],int,int)")};

  public FileDataImplp4_Skel() {

  }

  public Operation[] getOperations() {
    return operations;
  }

  private static final String[] _implements = {"com.sap.engine.services.file.FileData"};

  public String[] getImplemntsObjects() {
    return _implements;
  }

  public void dispatch(java.rmi.Remote remote, Dispatch call, int opnum) throws Exception {
    com.sap.engine.services.file.FileDataImpl impl = (com.sap.engine.services.file.FileDataImpl) getDelegate();
    P4ObjectInput in = call.getInputStream();

    switch (opnum) {
      case 0: { //method public abstract void com.sap.engine.services.file.FileData.closeWrite() throws java.io.IOException
        try {
          impl.closeWrite();
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 1: { //method public abstract int com.sap.engine.services.file.FileData.getBufferSize()
        try {
          int _result = impl.getBufferSize();
          P4ObjectOutput out = call.getOutputStream();
          out.writeInt(_result);
          out.flush();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 2: { //method public abstract void com.sap.engine.services.file.FileData.openWrite() throws java.io.IOException
        try {
          impl.openWrite();
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 3: { //method public abstract void com.sap.engine.services.file.FileData.closeRead() throws java.io.IOException
        try {
          impl.closeRead();
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 4: { //method public abstract void com.sap.engine.services.file.FileData.openRead() throws java.io.IOException
        try {
          impl.openRead();
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 5: { //method public abstract byte[] com.sap.engine.services.file.FileData.read() throws java.io.IOException
        try {
          byte[] _result = impl.read();
          P4ObjectOutput out = call.getOutputStream();
          out.writeObject(_result);
          out.flush();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 6: { //method public abstract void com.sap.engine.services.file.FileData.setBufferSize(int)
        try {
          int param0 = in.readInt();
          impl.setBufferSize(param0);
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
      case 7: { //method public abstract void com.sap.engine.services.file.FileData.write(byte[],int,int) throws java.io.IOException
        try {
          Object obj0;
          byte[] param0;
          obj0 = in.readObject();
          try {
            param0 = (byte[]) obj0;
          } catch (ClassCastException ex) {
            param0 = (byte[]) broker.narrow(obj0, byte[].class);
          }
          int param1 = in.readInt();
          int param2 = in.readInt();
          impl.write(param0, param1, param2);
          P4ObjectOutput out = call.getOutputStream();
        } catch (Exception ex) {
          throw ex;
        }
        break;
      }
    }
  }

}

