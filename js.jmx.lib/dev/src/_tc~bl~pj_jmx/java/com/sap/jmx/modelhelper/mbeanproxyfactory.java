/*
 * Copyright (c) 2002 by SAP AG, Walldorf., url: http://www.sap.com All rights
 * reserved.
 * 
 * of SAP AG, Walldorf.. You shall not disclose such Confidential This software
 * is the confidential and proprietary information Information and shall use it
 * only in accordance with the terms of the license agreement you entered into
 * with SAP.
 */
package com.sap.jmx.modelhelper;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.management.MBeanServerConnection;
import javax.management.ObjectName;

import com.sap.pj.jmx.exception.Messages;

/**
 * A factory for creating MBean proxies that are generated by the Web Dynpro JMX
 * model importer.
 */
public class MBeanProxyFactory {

  private static final Class[] CONSTRUCTOR_SIGNATURE = new Class[] { MBeanProxyFactory.class, MBeanServerConnection.class, ObjectName.class };

  // do not keep the factory statically since this causes ClassCastExceptions when
  // re-deploying applications
  // private static MBeanProxyFactory factory;

  private final Map connections = new HashMap();

  private MBeanProxyFactory() {
    // hidden constructor
  }

  /**
   * @return get an instance of the factory
   */
  public static MBeanProxyFactory getFactory() {
//    MBeanProxyFactory theFactory = factory;
//    if (theFactory == null) {
//      theFactory = new MBeanProxyFactory();
//      factory = theFactory;
//    }
//    return theFactory;
    return new MBeanProxyFactory();
  }

  /**
   * Returns a proxy for the specified MBean that implements the given
   * interface.
   * 
   * @param mbsc
   *          MBeanServer the MBean is registered with
   * @param name
   *          name of the MBean
   * @param mbeanInterface
   *          interface the proxy will implement
   * @return the proxy instance
   * @throws MBeanProxyFactoryException
   */
  public Object getProxyFor(MBeanServerConnection mbsc, ObjectName name, Class mbeanInterface) throws MBeanProxyFactoryException {
    Map proxies;
    synchronized (connections) {
      // TODO provide connections form a factory too
      proxies = (Map) connections.get(mbsc);
      if (proxies == null) {
        proxies = new HashMap();
        connections.put(mbsc, proxies);
      }
    }
    Object proxy;
    synchronized (proxies) {
      proxy = proxies.get(name);
      Exception lastException = null;
      if (proxy == null) {
        Class[] classes = mbeanInterface.getDeclaredClasses();
        for (int i = 0; i < classes.length; i++) {
          if (classes[i].getName().substring(classes[i].getName().lastIndexOf('$') + 1).equals("Impl")) { //$NON-NLS-1$
            try {
              proxy = classes[i].getConstructor(CONSTRUCTOR_SIGNATURE).newInstance(new Object[] { this, mbsc, name });
              break;
            } catch (Exception e) {
              lastException = e;
            }
          }
        }
        if (proxy == null) {
          throw new MBeanProxyFactoryException(Messages.UNABLE_TO_CREATE_PROXY_FOR_MBEAN_$0_CLASS_$1,
          													new Object[]{name, mbeanInterface}, lastException);
        }
        proxies.put(name, proxy);
      }
    }
    return proxy;
  }

  /**
   * @param mbsc
   * @param objectNames
   * @param interfaceClass
   * @return @throws
   *         MBeanProxyFactoryException
   */
  public List getProxyListFor(MBeanServerConnection mbsc, Set objectNames, Class interfaceClass) throws MBeanProxyFactoryException {
    ArrayList proxies = new ArrayList(objectNames.size());
    for (Iterator iter = objectNames.iterator(); iter.hasNext();) {
      proxies.add(getProxyFor(mbsc, (ObjectName) iter.next(), interfaceClass));
    }
    return proxies;
  }

}