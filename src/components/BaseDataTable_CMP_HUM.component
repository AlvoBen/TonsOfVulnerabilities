<!--
Component Name   : BaseDataTable_CMP_HUM.component
Version          : 1.0
Created On       : 08/31/2017
Function         : VF Component to display  tables on VF Page  from the controller DataTable_C_HUM

Modification Log: 
* Developer Name           Code Review                 Date                         Description
*------------------------------------------------------------------------------------------------------------------------------
* Pradeepkumar Dani          149513                   11/20/2017                    Origianl Version - Check In   
* Pradeepkumar Dani          153242                   12/01/2017                    Enhancements on showing data with bold values
* Prasad Jandhyala           168111                   01/11/2018                    Defect fix for 337418.0001
* Pradeepkumar Dani          168111                   01/18/2018                    Update to resolve deletion issue.
* Anupama Tavva                                       02/22/2018                    REQ-355767 - Resolution stories for Case Inventory page 
* Pallavi R                  193088                   03/05/2018                    Defect fix 348061.0001 - fixed break in functionality
* Pallavi R                  195310                   03/07/2018                    348733.0001 - Due Date Sorting 
* Pallavi R                  199176                   03/15/2018                    349908.0001 - Cell not red when days until due is 0
* Satyam Malviya             203380                   3/20/2018                     REQ - 350793 -  MA Post Associated Claims Section 
* Pallavi Ravishankar        215883                   11/04/2018                    REQ - 323439 Replaced CaseHitory_CMP_HUM  with reusable datatable component as per Resolution project
* Suraj Patil                214101                   04/15/2018                    REQ - 354346 - SF - USER - Research/Attachments - Claims Reprocessing - Selecting Claims to send to CRU
* Pallavi R                  223024                   05/02/2018                    Defect fix 356955.0001 & 356962.0001 - hide/show functioality -scrollbar and select all check
* Pallavi R                  225315                   05/08/2018                    Defect fix 356797.0001 & 357384.0001 - accordion width and hide/show scrollbar
* Pallavi R                  229819                   05/17/2018                    Defect fix : 358236.0001 - Case detail page Filter by flashing on load
* Pallavi R                  335000                   02/06/2019                    REQ - 373391 - Defect fix 400729.0001
* Sagar MN                                            06/20/2019                    REQ - 367091 - Code Fix to remove Extra Column in Clinical Programs
* Jasmeen Shangari                                    01/21/2020                    Defect fix 454294 -for P9JQuery Date Sorting issue
* Prudhvi Pamarthi                                    01/27/2019                    REQ - 409719 - Fix for CA Ticket # 8455426 - A case is created when click Enter in Filter by in Case History Section
* Prudhvi Pamarthi                                    02/17/2019                    REQ - 409719 - Defect Fix
* Santhi Mandava                                      02/18/2020                    US - 860272 - Added "sDCN" string variable
* Santhi Mandava                                      03/06/2020                    US - 903424 Addednew attribute tableContentType
* Santhi Mandava                                       03/06/2020                   US - 957458 Fixed multiple case tabs issue 
* Subhamay Mandal							          01/13/2022			        User Story 2977653: T1PRJ0001827 - MF 1 - AHT - Ability to display count of linked cases in the Case History section (RF)
* Tharun Madishetti                                   07/14/2023           US-4635103: T1PRJ0891742 - VIT19761200 - TECH - Data Table Upgrade - Upgrade Moment.js Usage (Group 1)
****************************************************************************************************************************
-->

<apex:component controller="BaseDataTable_C_HUM"  id="cmpId" allowDML="true">
    <apex:includeScript value="{!URLFOR($Resource.CRM_DataTables_1_13_4, '/DataTables-1.13.4/js/jquery.dataTables.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CRM_DataTables_1_13_4, '/DataTables-1.13.4/js/dataTables.bootstrap.min.js')}" />

    <apex:includeScript value="{!URLFOR($Resource.CRM_DataTables_1_13_4, '/Moment-2.29.4/moment.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.CRM_DataTables_1_13_4, '/Sorting/datetime-moment.js')}" />

   <!--Mandatory -->
    <apex:attribute name="tableClass" type="string" description="Data Table CSS Class name" default="table table-striped table-bordered width100" /> 
    <apex:attribute name="tableContainerClass" type="string" description="Table Container (Div) CSS classname" default="width100 dt-container" /> 
    <apex:attribute name="tableID" type="string" description="Data Table ID" required="true"/> 
    <apex:attribute name="tableContainerID" type="string" description="Table Container(Div) ID " required="true" /> 
    <apex:attribute name="jqueryVariable" type="string" description="Jquery variable for no conflict" required="true"/> 
    <apex:attribute name="fixedColumn" type="string" description="used for fixing the columns without reordering" default="0"/>    
    <!--Mandatory-->
    
    
    <apex:attribute name="tableContentType" type="string" description="This attribute will hold table data type for example case attachments,process etc" default="" /> 
    <!--Default Column Order-->
    <apex:attribute name="orderColumn" type="string" description="Column number to be ordered (Column nos is based on index starting with zero,Example 0 is first element)" default="1" /> 
    <apex:attribute name="orderDirection" type="string" description="Column order direction" default="desc" /> 
    <apex:attribute name="orderingBool" description="Enable ordering" type="string"  default="true" /> 
    <!--Default column Order-->
    
    <!--First and Second column configurations in case col 1 and col 2 are event based-Accordian , Edit/Delete buttons etc-->
    <apex:attribute name="col1_searchable" type="boolean" description="Is first column searchable" default="false" /> 
    <apex:attribute name="col1_orderable" type="boolean" description="Can first column be ordered" default="false" /> 
    <apex:attribute name="col1_visible" type="boolean" description="Is first column visible" default="true" /> 
    <apex:attribute name="col2_searchable" type="boolean" description="Is Second column searchable" default="true" /> 
    <apex:attribute name="col2_orderable" type="boolean" description="Can Second column be ordered" default="true" /> 
    <apex:attribute name="col2_visible" type="boolean" description="Is Second column visible" default="true" /> 
    <apex:attribute name="col3_searchable" type="boolean" description="Is Third column searchable" default="true" /> 
    <apex:attribute name="col3_orderable" type="boolean" description="Can Third column be ordered" default="true" /> 
    <apex:attribute name="col3_visible" type="boolean" description="Is Third column visible" default="true" /> 

    <!--End--->
    
    <!--Frequently used configuration items like pagination type,enabling search etc-->
    <apex:attribute name="pagingationType" type="string" description="Pagination Type" default="simple_numbers" /> 
    <apex:attribute name="pagingArray" type="string" description="Paging list" default="[5,10,25,50,75,100]" />
    <apex:attribute name="pagingbarBool" type="string" description="pagination bar and show entries on top" default="true"/>
    <apex:attribute name="enableSearch" type="string" description="Display search box " default="" /> 
    <apex:attribute name="enablepagination" type="string" description="Display Pagination " default="p" /> 
    <apex:attribute name="enableLength" type="string" description="Display Length" default="l" /> 
    <apex:attribute name="scrollX" type="boolean" description="whether datatable has to be horizontal scrollable" default="false" />
    <apex:attribute name="col1_accordian" type="boolean" description="Is Column 1 accordian" default="false" /> 
    <apex:attribute name="col1_EditDelete" type="boolean" description="Is Column 1 Event based-Edit/Delete" default="false" /> 
    <apex:attribute name="col1_CheckBoxID" type="string" description="Column1 checkboxID" required="false" /> 
    <apex:attribute name="info" type="string" description="to display and hide of showing entries of X" default="true"/>
    <apex:attribute name="keyword" type="boolean" description="is searchbox needed" default="true"/>
    <apex:attribute name="createdByValue" type="string" description="Created by is needed as link"  required="false" />
    <apex:attribute name="LastModifiedValue" type="string" description="Created by is needed as link" default="false"/>
    <apex:attribute name="sort" type="string" description="needs sorting or not" default="true"/>
    <apex:attribute name="stateSave" type="string" description="used for state saving" default="false" id="stateSaveID"/>
    <apex:attribute name="colReorder" type="string" description="used for colreorder" default="false" id="colReorderID"/>
    <apex:attribute name="hideShow" type="string" description="used for hide/show of the columns" default="false" id="colReorderID"/>
    <apex:attribute name="selectAll" type="boolean" description="used to display select all opt hide/show" default="false" id="selectAllAttID"/>
    <apex:attribute name="fixedHeader" type="string" description="used for Fixed Header when they are more number of records" default="false" id="fixedHeaerID"/>
    <apex:attribute name="visible" type="string" description="used for show/hide visibility" required="false" id="visibleId"/>
    <apex:attribute name="errorMessages" type="string" description="used for showing error messages when column length less than 1 and greater than 15" required="false" default="false"/>
    <apex:attribute name="autoWidth" type="string" description="used for autowidth" default="false" required="false"/>
    <apex:attribute name="linkClass" type="string" description="used for setting Link for class" required="false" id="linkClassId"/>
    <apex:attribute name="CheckBoxClass" type="string" description="used for setting class for Checkbox" required="false" id="CheckboxClassId"/>
    <apex:attribute name="CheckBoxHeader" type="boolean" description="used for setting header as checkbox" default="true" id="CheckboxHeaderId"/>
  
    <!--end--> 
    
    <!--Custom dom to position elements-->
    <apex:attribute name="customDom" type="string" description="Custom Dom to position Pagination,Search box etc .If no value is provided, default position is rendered " /> 
    <!--Custom dom to position elements-->
    
    <!--Salesforce JSON Object based data related configurations-->
    <apex:attribute name="objName" type="string" assignTo="{!sObjectName}" description="objName,rowdata and columnName are one combination.Use only when JSON Salesforce Object data is returned"/> 
    <apex:attribute name="rowData" type="string" description="Salesforce Object JSON based SOQL query row data(objName,rowdata and columnName are one combination)" /> 
    <apex:attribute name="columnHeader" type="string" description="column headers of datatable" /> 
    <apex:attribute name="columnName" type="string" description="Column names " />
    <apex:attribute name="columnHeaderTitle" type="string" description="column headers of datatable" />  
    <apex:attribute name="htmlColumnName" type="string" description="Comma Separated column names which needs to be rendered as HTML content " />
    <apex:attribute name="hoverColumns" type="string" description="used to get title on hover of data" required="false"/>
    <apex:attribute name="popupOnHover" type="string" description="used to get popup on hover of column data" required="false" default="false"/>
    <apex:attribute name="redBold" type="string" description="used to get red and bold based  on some conditions" required="false" />
    <apex:attribute name="workflow" type="string" description="if workflow value is new - complete row should be bold and red" required="false" />
    <apex:attribute name="daysDue" type="string" description="if DaysUntilDue is less than 10 then that particular cell must be in color" required="false" />
    <apex:attribute name="reqPermissionSet" type="string" description="visibilty based on permission set" required="false" default="true" />
    <apex:attribute name="lastModified" type="string" description="if days are greater than 7 the cell should be in green color" required="false" />
    <apex:attribute name="hiddencols" type="string" description="used for hiding columns from show/hide dropdown"  id="hideColsId"/>
  
    <!--End-->
        
    <!--Render the DataTable with editing functionality -->
    <apex:attribute name="inlineEditingRequired" type="boolean" description="Is inline Editing Required in DataTable" default="false" />     
    <apex:attribute name="inlineEditableColumns" type="string" description="Name, Type,Mandatory Nature, Options for Picklist Columns which needs to be shown as editable"/>    
    <!-- Accordion related attributes-->
    <apex:attribute name="useStandardAccordionUI" type="boolean" description="Map of Column Name and API Name for Inline Tables for accordian functionality" default="false"/>
    <apex:attribute name="accordionExpandAllByDefault" type="boolean" description="Are all rows expanded be default on load to show accordion details" default="true"/>
    <apex:attribute name="accordionInlineTables" type="string" description="Map of Column Name and API Name for Inline Tables for accordian functionality"/>           
    <apex:attribute name="accordionColumnsLabels" type="string" description="Column Labels for accordion columns specified"/>        
    <apex:attribute name="accordionColumns" type="string" description="Comma Separated column names which needs to be rendered as HTML content " />
    <apex:attribute name="accordionColumnsWidth" type="string" description="Comma Separated column names which needs to be rendered as HTML content " required="false" default="20%,80%" />

    <apex:attribute name="accordionCountKey" type="String" description="This attribute to show linked record count" required="false" default="none"/>

    <nav class="navbar navbar-default" style="background-color:transparent; display:none; " id="keywordNav_{!tableID}"  onkeydown="if (event.keyCode==13){ return false;}">
        <div class="navbar-header" id="keywordDiv_{!tableID}">
            <span class="navbar-brand panel-title">Filter By</span>
            <div class="form-group" style="display: inline-block;">
              <input type="text" class="form-control example_disable_while_logging" placeholder="Keyword" id="keyword_{!tableID}" style="margin-top:10px; box-sizing: border-box !important;display:block;" onkeydown="if (event.keyCode==13){ return false;}"/>
      </div>
        </div>
    </nav>

    <div style="display:{!IF((useStandardAccordionUI),'block','none')};">
        <a href="#" id="expandAll_{!tableID}" style="display:inline-block;">
            <u>Expand All</u>
        </a> | <a href="#" id="collapseAll_{!tableID}" style="display:inline-block;">
            <u>Collapse All</u>
        </a>
        <br/><br/>
    </div>
    <div id="statusImage_div_{!tableID}" style="text-align:center; vertical-align: middle;"> 
        <img src="/img/loading.gif" /> 
        <span class="waitingDescription">Please wait...</span> 
    </div> 
    
    <!-- This block will render a table using jQuery after the data load --> 
    <div class="{!tableContainerClass}" id="{!tableContainerID}" style="z-index:0;"> 
        <table id="{!tableID}" class="{!tableClass}" style ="font-size : 12px"></table> 
    </div> 
    
    <script>
      var dynamicTable_{!tableID} ='';
      var columnArray_{!tableID}  = new Array();
      var columnHeaderArray_{!tableID};
      var dataArray_{!tableID} = new Array();
      var datatableRowData_{!tableID} = '{!rowData}';
      var columnData_{!tableID} = '{!columnName}';
      var currentDeleteRecord_{!tableID};
      var columnHeader_{!tableID} = '{!columnHeader}';
      var columnHeaderTitle_{!tableID} = '{!columnHeaderTitle}';
      var accordionColumns_{!tableID}  = '{!accordionColumns}';
      var accordionDataArray_{!tableID} = [];
      var accordionColumnNames_{!tableID} = accordionColumns_{!tableID}.split(',');
      var refresh=false;
      var fixedCol='{!fixedColumn}';
      var linkClass = '{!linkClass}';
      var CheckBoxClass = '{!CheckBoxClass}';
      var accordionExpandAllByDefault_{!tableID} = {!accordionExpandAllByDefault};
      var accordionChildDisplayOverride_{!tableID} = true;
      var accordionColumnLabels_{!tableID} = '{!accordionColumnsLabels}';
      var accordionColumnLabelNames_{!tableID} = accordionColumnLabels_{!tableID}.split(',');  
      var linkedCountValues = {};  
      var linkedCountKey = '{!accordionCountKey}';
      //Prepare Column Data
      function getColumnData_{!tableID}(columnData,columnHeaderData,columnHeaderTitleData)
      {
      var colData = JSON.parse(columnData);
      var colHeaderData = JSON.parse(columnHeaderData);
      if(columnHeaderTitleData){
      var columnHeaderTitleData= JSON.parse(columnHeaderTitleData);
      }
      var col1_EditDelete = ('{!col1_EditDelete}' == 'true');

      //Inline Editing
        var inlineEditingRequired = (!col1_EditDelete && !{!col1_accordian} && {!inlineEditingRequired});
        var inlineEditableColumns = '{!inlineEditableColumns}';
        var inlineEditableColumnNames;
        if (inlineEditingRequired)
        {

            if (inlineEditableColumns){
                try{
                    editableColumnsData_{!tableID} = JSON.parse({!inlineEditableColumns});  
                    inlineEditableColumnNames = {!jqueryVariable}.map(editableColumnsData_{!tableID}.columns,function(elem, index){
                        return elem.name;
                    });
                    
                }
                catch(ex)
                {
                    showError_{!tableID}('Somethign is wrong with the inlineEditableColumns attribute. Error Message :' + ex);
                }
            }
        }        

        if({!col1_accordian})
        {
            var newColumn_0 = new Object();
            newColumn_0['className'] = 'details-control_{!tableID}';
            newColumn_0['data'] = null;
            newColumn_0['defaultContent'] = '';
            newColumn_0['customData'] = 'accordian';
            newColumn_0['jQueryVal'] = '{!jqueryVariable}';
            newColumn_0['title'] = '';   
            newColumn_0['width'] = '40px !important';
            columnArray_{!tableID}.push(newColumn_0);
        }
        
        if(col1_EditDelete)
        {
            var newColumn_1 = new Object();
            newColumn_1['data'] = null;
            newColumn_1['defaultContent'] = '';
            newColumn_1['width'] = '10%';
            newColumn_1['title'] = 'Action';
            newColumn_1['render'] = renderEditDelfunctionlinks_{!tableID};
            newColumn_1['customData'] = 'editDelete';
            columnArray_{!tableID}.push(newColumn_1);
        }

        if(colData ) 
        {
            for(var i = 0 ; i < colData.length ; i++) 
            {
                var col= new Object();
                var htmlCols = '{!htmlColumnName}';
                htmlCols = htmlCols.toLowerCase();      
                var hoverColumns='{!hoverColumns}';
                var redBolds = '{!redBold}';
                var workflow='{!workflow}';
                var daysDue='{!daysDue}';
                var lastModified='{!lastModified}';
                var checkboxID= '{!col1_CheckBoxID}';
                var visibility = '{!visible}';
                var name=colHeaderData[i];
                name=name.replace("<br/>", "");
                  if(colData[i].toLowerCase() != 'id')
                  {
                   if(columnHeaderTitleData){
                   col['title'] ='<div title="' + columnHeaderTitleData[i]+ '"><span>' +colHeaderData[i]+ '</span></div>';
                   
                  }
                  else{
                    col['title'] = colHeaderData[i];
                  }
                  if(htmlCols.indexOf( colData[i].toLowerCase() ) > -1) col['render'] = renderFunction_{!tableID};
                  if(colHeaderData[i]=='')
                  {
                    fixedCol=1;
                  }           
                  col['name']=name;
                  
                  if(workflow == colData[i])
                  {
                    col['render'] =  renderWorkflowFunction_{!tableID};
                  }
                  if(daysDue== colData[i])
                  {
                    col['render'] = renderDaysDue_{!tableID}
                  }
                  if(lastModified== colData[i])
                  {
                    col['render'] = renderLastModifiedDate_{!tableID}
                  }
                  
                  if(name == 'DCN Present')
                  {
                      col['render'] = renderDCNFunction_{!tableID};
                  }
                  
                  if(redBolds == colData[i])
                  {
                    col['render'] = renderRedBoldFunction_{!tableID};
                    col['type']='uk_date';
                  }
                  if(checkboxID== colData[i])
                  {
                    col['render'] = renderCheckbox_{!tableID};
                if({!CheckBoxHeader})
                {
                col['title'] = '<input type="checkbox" id="{!tableID}-select-all" onclick="checkUncheckAllRows_{!tableID}()">';
                }
                    if({!reqPermissionSet}==true){
                        col['visible'] = true;
                        col['class'] = CheckBoxClass;
                }
                    else{
                        col['visible'] = false;
                    }
                  }
                if(hoverColumns.indexOf( colData[i] ) != -1)
                {
                    col['render'] = renderHoverFunction_{!tableID};
                }

                if(visibility.indexOf(colData[i])!=-1)
                {
                    col['visible'] = false;
                }

                //Provide inline editing
                if (inlineEditingRequired && inlineEditableColumnNames != undefined && inlineEditableColumnNames.indexOf(colData[i]) != -1)
                    {
                        col['editable'] = 'true';
                        col['render'] = renderFieldinEditMode_{!tableID};
                    }
                    col['customData'] = colData[i];  
                    columnArray_{!tableID}.push(col);
                }
            }
        }  
    }
    
    //Prepare Row Data
    function getBody_{!tableID}(bodyData)
    {
        dataArray_{!tableID} = new Array();
        var jsonData = JSON.parse(bodyData);
        var rowData ;
        var colData =  columnArray_{!tableID};

        jsonData = jsonData.data;
        var columnData = '';

        if(jsonData)
        {
            for(var i = 0 ; i < jsonData.length ; i++) 
            {
                rowData = [];
                if(linkedCountKey !== 'none') {
                    linkedCountValues[jsonData[i]['Id']] = jsonData[i][linkedCountKey];
                }
                var accordionData;
                for(var j = 0 ; j < colData.length ; j++) 
                {
                    if( (colData[j].customData=='accordian' ) || (colData[j].customData=='editDelete') )
                    { 
                        columnData =jsonData[i]['Id'];
                    }
                    else
                    {  
                       if(refresh==true)
                         {
                            var curr=[];
                            var table = {!jqueryVariable}('#{!tableID}').DataTable();
                            var colReorder = new jQuery.fn.dataTable.ColReorder(table);
                            var curr = colReorder.fnOrder(); 
                            if(jsonData[i][colData[curr[j]].customData] || jsonData[i][colData[curr[j]].customData]==0)
                               {
                                 columnData = jsonData[i][colData[curr[j]].customData];
                               }
                            else
                               {
                                 columnData = '';
                               }      
                         }
                       else
                         {
                            if(jsonData[i][colData[j].customData] || jsonData[i][colData[j].customData]==0)
                              {
                                 columnData = jsonData[i][colData[j].customData];
                              }
                            else
                              {
                                 columnData = '';
                              } 
                        }

                    }
                    if(colData[j].customData=='accordian') 
                    {
                        if(accordionColumnNames_{!tableID} != undefined) 
                        {
                            accordionData = new Object();
                            for(var k =0; k< accordionColumnNames_{!tableID}.length; k++) 
                        {
                            accordionData[accordionColumnNames_{!tableID}[k]]=jsonData[i][accordionColumnNames_{!tableID}[k]];
                }
                accordionDataArray_{!tableID}.push(accordionData);
            }
        }
        if (colData[j].editable)
            columnData = colData[j].customData + '_' + columnData;
        rowData.push(columnData);
    }
                    
    dataArray_{!tableID}.push(rowData);                
    }
    }
    }
    
    
    {!jqueryVariable}('#keyword_{!tableID}').keyup(function() 
    {
        var word = this.value;
        dynamicTable_{!tableID}.search(this.value).draw();
    });
    
    function prepareTable_{!tableID}(initializeFunction,drawCallbackFunction)	
    {
        {!jqueryVariable}.fn.DataTable.datetime('MM/DD/YYYY');
        {!jqueryVariable}.fn.DataTable.datetime('MM/DD/YYYY hh:mm:ss A');
        {!jqueryVariable}.fn.DataTable.datetime('MM/DD/YYYY hh:mm A');  
	   
        // Prepare data in case of JSON based response
        if(columnData_{!tableID} && datatableRowData_{!tableID} )
        {
           getColumnData_{!tableID}(columnData_{!tableID},columnHeader_{!tableID},columnHeaderTitle_{!tableID});
           getBody_{!tableID}(datatableRowData_{!tableID});
        }

          var finalDomValue='<<"left"{!enableLength}><"right"{!enablePagination}>><"width100 viewWidth"t><<"left"i><"right"{!enablePagination}>>';
            if('{!customDom}')
            {
            finalDomValue='{!customDom}';
            }

            dynamicTable_{!tableID} =  {!jqueryVariable}('#{!tableID}').DataTable(
            {
            "data": dataArray_{!tableID},
            "columns": columnArray_{!tableID},
            autoWidth: {!autoWidth},
            "columnDefs": [
            {"targets": [0], "searchable": {!col1_searchable}, "orderable":  {!col1_orderable}, "visible":  true},
            {"targets": [1], "searchable": {!col2_searchable}, "orderable":  {!col2_orderable}, "visible": true },
            {"targets": [2], "searchable": {!col3_searchable}, "orderable":  {!col3_orderable}, "visible": {!col3_visible} }
            ],
            "order": [  [{!orderColumn}, '{!orderDirection}']  ],
            "ordering":{!orderingBool},
            "paging":{!pagingbarBool},
            "pagingType": "{!pagingationType}",
            "bSearchable": true,
            "lengthMenu": {!pagingArray},
            "dom": finalDomValue,
            "info": {!info},
            "scrollX": {!scrollX},
            stateSave: {!stateSave},
            colReorder: {!colReorder},
            colReorder: {
            fixedColumnsLeft: fixedCol
            },
            fixedHeader: {!fixedHeader},
            "drawCallback": drawCallbackFunction,
            "retrieve": true,
            "initComplete":function() {
            if(initializeFunction)
            {
            initializeFunction();
            }
            if({!hideShow}==true)
            {
            var hiddencols = '{!hiddencols}';
            var columnsHTML = '';
            {!jqueryVariable}('div.toolbar').html('<div class="dropdown"> \
                        <button class="btn btn-default dropdown-toggle example_disable_while_logging" type="button" id="columnSelect" data-toggle="dropdown"> \
                        Hide/Show Columns <span class="caret"></span></button> \
                        <ul class="dropdown-menu" id="selectColumns"></ul></div>');
          if({!selectAll})
          {columnsHTML += '<li><a log_ignore_click="false" href="#"><label class="checkbox-label" for="select-all"><input type="checkbox" class="selectallClass" id="selectAllId" value="selectAll">Select All</label></a></li>';}     

              this.api().columns().every(function () 
               {
             
                var colHeader = {!jqueryVariable}(this.header()).text().trim();
                var colIndex = this.index();
                var colVisible = this.visible() ? "checked" : " ";
                var cindx = hiddencols.indexOf(colHeader);
                if (colHeader != "" && cindx===-1) 
                 {
                  columnsHTML += '<li><a log_ignore_click="false" href="#"><label class="checkbox-label" for="' + colHeader + '"><input type="checkbox" class="headerdisplay" id="' + colHeader + '" value="' + colHeader + '" data-column="' + colHeader + '" ' + colVisible + '> ' + colHeader + '</label></a></li>';
                 }
               });
              {!jqueryVariable}('#selectColumns').append(columnsHTML);
              if({!selectAll})
                {
                  var all = {!jqueryVariable}('.headerdisplay');
                  if (all.length === all.filter(':checked').length) {
                    {!jqueryVariable}("#selectAllId").prop("checked", true);
                  } 
                  else {
                    {!jqueryVariable}("#selectAllId").prop("checked", false);
                  }
                } 
            var listLength = {!jqueryVariable}("#selectColumns li").length;
            if(listLength > 10)
            {        
              {!jqueryVariable}('#selectColumns').css('max-height', 388);
              {!jqueryVariable}("#selectColumns").addClass("scrollable-menu");
              
            }
            else 
			  {
			{!jqueryVariable}("#selectColumns").removeClass("scrollable-menu");
              }
			}
          }
        });
       dynamicTable_{!tableID}.columns.adjust().draw();
       
       var useStandardAccordionUI = {!useStandardAccordionUI};
       var accordionRequired = {!col1_accordian};
       if(useStandardAccordionUI == true && accordionRequired == true)
       {
            getAccordianDetails_{!tableID}();
       }
        hideLoading_{!tableID}();
        if('{!tableContentType}') raiseEventToSetRecordCount(dataArray_{!tableID},'{!tableContentType}');
    }
    
    function updateTable_{!tableID}()
    {
        dataArray_{!tableID} = new Array();
        accordionDataArray_{!tableID} = [];
        if( datatableRowData_{!tableID} ) getBody_{!tableID}( datatableRowData_{!tableID} );
        if( dataArray_{!tableID} && {!jqueryVariable}.fn.DataTable.isDataTable( '#{!tableID}' ) )
        {
            dynamicTable_{!tableID}.clear().rows.add( dataArray_{!tableID} ).draw();
            if('{!tableContentType}') raiseEventToSetRecordCount(dataArray_{!tableID},'{!tableContentType}');
        } 
    }
     function refreshUpdateTable_{!tableID}(datatableRowData_{!tableID},initial)
     {
    
     dataArray_{!tableID} = new Array();       
     if (!{!jqueryVariable}.fn.DataTable.isDataTable('#{!tableID}'))
     {
     prepareTable_{!tableID}(initial);
     }
     else
     {
     var table = jQuery('#{!tableID}').DataTable();
     var colReorder = new jQuery.fn.dataTable.ColReorder(table);
     var curr = colReorder.fnOrder(); 
     refresh=true;
     getBody_{!tableID}(datatableRowData_{!tableID});
     dynamicTable_{!tableID}.clear().rows.add(dataArray_{!tableID}).draw();
     if('{!tableContentType}') raiseEventToSetRecordCount(dataArray_{!tableID},'{!tableContentType}');
     }
     }
    
    function searchBoxDisplay_{!tableID}()
    {    
        var searchBox = document.getElementById('keywordNav_{!tableID}');
        var bKeyword = {!keyword};
        
        if(bKeyword === false)
        {
            searchBox.style.display='none';
        }
        else
        {
            searchBox.style.display='block';
        }
    }
    
    function hideLoading_{!tableID}()
    {
        document.getElementById('statusImage_div_{!tableID}').style.display = 'none';
        searchBoxDisplay_{!tableID}();
    }
    
    function showError_{!tableID}(errorMsg)
    {
        document.getElementById('statusImage_div_{!tableID}').style.color = 'red';
        document.getElementById('statusImage_div_{!tableID}').innerHTML = errorMsg ;
        showLoading_{!tableID}();
        searchBoxDisplay_{!tableID}();
    }
    
    function showLoading_{!tableID}()
    {
        document.getElementById('statusImage_div_{!tableID}').style.display = 'block';
    }
    
    function prepareLink(dataEl)
    {
        var splitEl = dataEl.split(',');
        var linkEL = '';
        if(splitEl.length > 1){
            var jsMethodWrap = 'javascript:' + splitEl[1] + '(';
            
            if(splitEl.length > 2)
            {
                for( var i=2; i < splitEl.length; i++)
                {
                    jsMethodWrap += '\'' + splitEl[i] + '\'';
                    jsMethodWrap += splitEl[i+1] ? ',' : ')';
                }
            }
            else
            {
                jsMethodWrap += ')';
            }
        linkEL = '<a href="' + jsMethodWrap + '"' + ' class="' + linkClass + '">' + splitEl[0] + '</a>';
            
            if({!popupOnHover})
            {

            linkEL = '<div><span><a href="' + jsMethodWrap + '" '
                            + ' id="' + splitEl[2] + '" '
                            + ' onmouseout="clearPopUpComments();" '
                            + ' onmouseover="openPopUpComments(\''+splitEl[2] + '\');" >' +splitEl[0] + '</a></span></div>';

           }
        }
        else
        {
         // linkEL = '<a href="' + jsMethodWrap + '">' + splitEl[0] + '</a>';
         linkEL = '<a>' +dataEl + '</a>';
        
        }
        return linkEL ;
    }
          
    function decodeHtml(dataElIn) {
        var retHtml = document.createElement("textarea");
        retHtml.innerHTML = dataElIn;
        retHtml.innerHTML = retHtml.innerHTML.split('amp;lt;').join('<').split('amp;gt;').join('>');
        return retHtml.value;
    }   
    var renderRedBoldFunction_{!tableID} = function( data, type, row,meta,td)
    {
        var dataSplitE0 = data.split('_')[0];
        var dataSplitE1 = data.split('_')[1];
        var dataSplitE2 = data.split('_')[2] + '_' + data.split('_')[3];
        var cell = meta.settings.aoData[meta.row].anCells[meta.col];
        if(dataSplitE1 == 'true')
        {
            {!jqueryVariable}(cell).css('color', 'red').css('font-weight','bold');
            {!jqueryVariable}(cell).attr("title", dataSplitE0);
            return '<div id="' + dataSplitE2 + '"><span>' + dataSplitE0 + '</span></div></td>';
        }
        else
        {
            {!jqueryVariable}(cell).attr("title", dataSplitE0);
             return '<div id="' + dataSplitE2 + '"><span>' + dataSplitE0 + '</span></div></td>';
        }

    };
    //For HTML content
    var renderDCNFunction_{!tableID} = function(dataEl, type, row)
    {
        var linkEL = '';        
        if(dataEl == 'No' ) linkEL = '<span>' + dataEl + '</span>';
        else if(dataEl != 'No')
        {
            linkEL = '<a href="javascript:openDCNLink_{!tableID}(\'' + row[0] + '\')" style="text-decoration: underline;display:inline-block;cursor:pointer;">Yes</a>';
        }  
        return linkEL;  
    } 
    
    var renderFunction_{!tableID} = function(dataEl, type, row)
    {
        var linkEL = '';        
        if(dataEl == '' ) linkEL = '<a href="#">' + dataEl + '</a>';
        else if(dataEl.indexOf('amp;lt;bamp;gt;') > -1) linkEL = decodeHtml(dataEl);  
        else linkEL = prepareLink(dataEl);
        return linkEL ;
    }
   var  renderHoverFunction_{!tableID} = function(data, type, row, meta) 
    {
        var hoverdata= '<div title="' + data + '"><span>' +data + '</span></div>';
        return hoverdata;

    };
    
    var  renderWorkflowFunction_{!tableID} = function(data, type, row, meta)
    {
        var trData= meta.settings.aoData[meta.row].nTr;
        var cell = meta.settings.aoData[meta.row].anCells[meta.col];
        if(data== "{!$Label.workflowdata_RT_HUM}"){
            {!jqueryVariable}(trData).css('font-weight','bold').css('font-style', 'italic');
            {!jqueryVariable}(cell).css('background-color','#7CBA3C');
            var workflowdata= '<div title="' + data + '"><span>' +data + '</span></div>';
            return workflowdata;
        }
        else
        {
            var workflowdata= '<div title="' + data + '"><span>' +data + '</span> </div>';
            return workflowdata;
        }
    };
    var  renderLastModifiedDate_{!tableID} = function(data, type, row, meta)
    {
        var cell = meta.settings.aoData[meta.row].anCells[meta.col];
        var dataSplit=data.replace("days ago","");
        if(dataSplit >= {!$Label.LastModifiedDaysCount_RT_HUM} && data !=''){
            {!jqueryVariable}(cell).css('background-color','#7CBA3C');
            var lastModifieddata= '<div title="' + data + '"><span>' +data + '</span></div>';
            return lastModifieddata;
        }
        else
        {
            var lastModifieddata= '<div title="' + data + '"><span>' +data + '</span></div>';
          return lastModifieddata;
          }
          };
          var renderDaysDue_{!tableID} = function(data, type, row,meta)
          {
          var cell = meta.settings.aoData[meta.row].anCells[meta.col];
          if(data <= 10 && data.length!=0 )
          {
          {!jqueryVariable}(cell).css('background-color','#FF5977');
          var daysDue= '<div title="' + data + '"><span>' +data + '</span></div>';
            return daysDue;
        }
        else
        {
            var daysDue= '<div title="' + data + '"><span>' +data + '</span></div>';
            return daysDue;
        }
    };
    
    var renderfunctionlinks_{!tableID} = function(data, type, row, meta)
    {
    var links = '<a href="javascript:srcUp(\'/' + data[0] + '/e\')" style="display:inline-block;">Edit</a> | ' + '<a href="javascript:confirmDelete_{!tableID}(\'' + data[0]+ '\'  , \'' + meta.row+ '\' )" style="display:inline-block;"} ;">Del </a>&nbsp;';
    return links;
    };
    var renderCheckbox_{!tableID} = function(data, type, row,meta) 
    {
      var checkbox= '<input type="checkbox" id="'+ data +'" class="{!tableID}_cBox" onclick="checkboxesClickEvent_{!tableID}()">';
      if(linkedCountKey !== 'none') {
        checkbox= '<input type="checkbox" id="'+ data +'" class="{!tableID}_cBox notification" onclick="checkboxesClickEvent_{!tableID}()">';
        var countValue = linkedCountValues[data];
        if(countValue === 0) {
            countValue = '';
        }  
        checkbox += '&nbsp;<label id="idLCC_'+data+'" class="badge">'+countValue+'</label></input>';
      }
      return checkbox;
    };
    var renderEditDelfunctionlinks_{!tableID} = function(dataEl, type, row, meta) 
    {        
        var links = '';
        var col1_EditDelete = ('{!col1_EditDelete}' == 'true');
        var canEdit = ('{!canEdit}' == 'true');
        var canDelete = ('{!canDelete}' == 'true');
        
        if(col1_EditDelete) 
        {
            if(typeof(dataEl[0]) != 'undefined'  && dataEl[0].indexOf('---') != -1) 
            {
                var editDelLinks = dataEl[0].split('---');
                var editOrViewLinks = editDelLinks[0];
                var delLinks = editDelLinks[1]; 
                var splitDelEl = delLinks.split(',');               
                var canViewOREdit = (editOrViewLinks != '') ? true : false;
                var canDel = false;
                
                if(delLinks != '')
                {
                    delLinks += ','+meta.row;
                    canDel = true;
                }               
                var editOrViewLink = (canViewOREdit) ? prepareLink(editOrViewLinks) : '';
                var delLink = (canDel) ? prepareLink(delLinks) : '';                
                links = editOrViewLink + ( (canViewOREdit && canDel) ? ' | ' : '' ) + delLink;                
            }
            else 
            {
                var canEdit = ('{!canEdit}' == 'true');
                var canDelete = ('{!canDelete}' == 'true');
                var editLink = (canEdit) ? '<a href="javascript:srcUp(\'/' + dataEl[0] + '/e?parent_id=' + vCaseRecordId + '\')" style="display:inline-block;">Edit</a>' : '';
                var delLink = (canDelete) ? '<a href="javascript:confirmDelete_{!tableID}(\'' + dataEl[0]+ '\'  , \'' + meta.row+ '\' )" style="display:inline-block;"} ;">Del </a>' : '';
                links = editLink + ( (canEdit && canDelete) ? ' | ' : '' ) + delLink;              
            }
       }
       return links;
       };

       function confirmDelete_{!tableID}(data,tableRow)
       {
       currentDeleteRecord_{!tableID} = tableRow ;

       var confirmValue=confirm("Are you sure?");
           if(confirmValue==true)
           {
               showLoading_{!tableID}();
               Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BaseDataTable_C_HUM.deleteRecord}', data, '{!objName}',
               function(result, event)
               {
                   if (event.status)
                   {
                    if (result)
                    {
                        deleteSelection_{!tableID}(data);
                    }
                   }
               },
               {
               buffer: false,
               escape: true
               });
           }
       }

       function deleteSelection_{!tableID}(removeData)
       {
            var table_comp= {!jqueryVariable}('#{!tableID}').DataTable();
                var rowEl = {!jqueryVariable}("tr td a[href*='"+removeData+"']").parent().parent();
                    table_comp.row(rowEl).remove().draw(false);
                    hideLoading_{!tableID}();
       }
       {!jqueryVariable}(document).on('click', '.headerdisplay', function (e)
       {
           var dtable = {!jqueryVariable}('#{!tableID}').DataTable();
           if ({!errorMessages})
           {
                displayVisibleError();
                
                if(displayVisibleError()==false)
                 {
                    return false;
                 }
           }
            var column = dtable.column({!jqueryVariable}(this).attr('data-column') + ':name');
            // Toggle the visibility
            column.visible(!column.visible());
            //Select-all functionality
             if({!selectAll})
             {
              var all = {!jqueryVariable}('.headerdisplay');
              if (all.length === all.filter(':checked').length) {
                  {!jqueryVariable}("#selectAllId").prop("checked", true);
               } 
              else {
                  {!jqueryVariable}("#selectAllId").prop("checked", false);
               }
             } 
            });
       //Select All functionalty
       {!jqueryVariable}(document).on('click', '#selectAllId', function (e)
        {
                  var all1 = {!jqueryVariable}('.headerdisplay');
                  if (all1.length === all1.filter(':checked').length) {
                    {!jqueryVariable}("#selectAllId").prop("checked", true);
                  } 
         var dtable = {!jqueryVariable}('#{!tableID}').DataTable();
         var checked =  {!jqueryVariable}(this).is(':checked');
         var all = {!jqueryVariable}('.headerdisplay');
          for(var i = 0 ; i < all.length ; i++) 
           {  
             var selColumn = dtable.column({!jqueryVariable}(all[i]).attr('data-column') + ':name');
            if(checked)
             {
               selColumn.visible(true);
               {!jqueryVariable}(all[i]).prop('checked', true);
             }                   
         }
            });
        
       /**
       * Method returned by Columns"render" method to render the cell in editable form based on the columns details provided in
       * editableColumnsData_{!tableID} attribute.
       *
       * @param  {string} Data value returned by Standard DataTable JS file.
       * @param  {object} type object returned by Standard DataTable JS file.
       * @param  {object} row object returned by Standard DataTable JS file.
       * @param  {object} DataTables settings objects to be filtered
       * @return {string} HTML for rendering the cell in editable form
       */
       var renderFieldinEditMode_{!tableID} = function(data, type, row, meta)
       {
        var colName = data.split('_')[0];
        var cellData = data.split('_')[1];
        var inputField = cellData;
        {!jqueryVariable}.each(editableColumnsData_{!tableID}.columns, function(index, element) {
            if (String(element.name) == String(colName)){          
                if (element.dataType === "dropdown"){
                    var optionValues = element.options;
                    inputField = '<select class= "'+colName+'" style="overflow:visible"> ';
                    for (var i=0;i<optionValues.length;i++)
                    {
                        inputField = inputField + '<option value="' + optionValues[i] + '"' ;
                        if (optionValues[i] === cellData)
                            inputField = inputField + 'selected = "selected">'+ optionValues[i]+ '</option>';
                        else
                            inputField = inputField + '>'+ optionValues[i]+  '</option>';
                    }
                    inputField = inputField+" </select> ";
                }
                else if (element.dataType === "text"){
                    inputField = '<input type="text" class= "'+colName+'" value="'+ cellData + '" maxlength ="'+ element.maxlength + '"/>';              
                }
                else if (element.dataType === "textarea"){
                    inputField = '<textarea rows="3" class= "'+colName+'" value="'+ cellData + '" maxlength ="'+ element.maxlength + '">' + cellData + '</textArea>';                
                }
                return false;                           
            }
        }); 
        return inputField;  
      }   
     
     /**
     * Method to export editable/updated data from the html table for the rows having check boc selected
     *
     * @param  string (possible values :- AllTableData, SelTableData, AllEditTableData, AllSelEditTableData)
     * @return List of Rows
     */
   
    function getTableData_{!tableID}(dataType)
    {
        var myRows = [];
        var headers = {!jqueryVariable}("#{!tableID} th");
        var myRowIndex = 0; 
        var myTempRowIndex = 0;               
        var rows = {!jqueryVariable}("#{!tableID} tbody tr").each(function(index) {       
        var rowSelected = {!jqueryVariable}(this).find('input:checkbox').prop('checked');
        if(rowSelected == true || ( rowSelected == false && (dataType=="AllTableData" || dataType=="AllEditTableData")))
        {        
            myRows[myTempRowIndex] = {};          
            cells = {!jqueryVariable}(this).find("td");
            cells.each(function(cellIndex) {
                var cellValue ;               
                var headerValue = {!jqueryVariable}(headers[cellIndex]).text();               
                if ({!jqueryVariable}(this).find('input:checkbox').attr('type')== 'checkbox')
                {
                  if(dataType=="AllTableData" || dataType=="AllEditTableData")
                  {
                    headerValue = '{!col1_CheckBoxID}';  
                    cellValue = {!jqueryVariable}(this).find('input:checkbox').prop('checked')
                    myRows[myTempRowIndex][headerValue] = cellValue;                   
                  } 
                    headerValue = 'Id';
                    cellValue = {!jqueryVariable}(this).find('input:checkbox').prop('id');
                }
                else if ({!jqueryVariable}(this).html().indexOf('<text') >= 0 || {!jqueryVariable}(this).html().indexOf('<select') >= 0 || {!jqueryVariable}(this).html().indexOf('<input') >= 0)
                {
                    cellValue = {!jqueryVariable}(this).children().first().val();                    
                    headerValue = jQuery(this).children().first().prop('class');
                }
                else
                {
                    if(dataType=="AllTableData" || dataType=="SelTableData")
                    cellValue = {!jqueryVariable}(this).text();                    
                } 
                                                                                   
                    myRows[myTempRowIndex][headerValue] = cellValue;                                  
            });
            myTempRowIndex++;                  
        }            
      });
        
        var myObj = {};       
        myObj.myrows = myRows;
        return myObj;
    }   
                                            
    /**
     * Method to be called on the Click event of checkbox field present in the checkbox column header to check uncheck child rows. 
     *
     * @param  none
     * @return none
     */    
    function checkUncheckAllRows_{!tableID}()
    {
        {!jqueryVariable}('.{!tableID}_cBox').prop('checked', {!jqueryVariable}('#{!tableID}-select-all').prop("checked"));
    }
    
    /**
     * Method to be called on the Click event of checkbox field for each row to check uncheck header checkbox. 
     *
     * @param  none
     * @return none
     */        
    function checkboxesClickEvent_{!tableID}()
    {
        if ({!jqueryVariable}('.{!tableID}_cBox:checked').length != {!jqueryVariable}('.{!tableID}_cBox').length) 
            {!jqueryVariable}('#{!tableID}-select-all').prop('checked', false);
        else if ({!jqueryVariable}('.{!tableID}_cBox:checked').length == {!jqueryVariable}('.{!tableID}_cBox').length)
            {!jqueryVariable}('#{!tableID}-select-all').prop('checked', true);
        
    }
        
    /**
     * Method to render hidden details once the user clicks on the accordian icon. 
     *
     * @param  row          row for which sub items needs to be returned 
     * @return tableHTML    html code of the table rows
     */    
    function getAccordionTableRows_{!tableID}(row) 
    {
        var rowIndex = row.index();
        var accordionRowData = accordionDataArray_{!tableID}[rowIndex];
        var columnTag ='';
        var tableHTMLDivStart = '<div class="pbSubsection">';
        var tableHTMLStart = '<table class="table table-striped table-bordered table-hover" border="0" cellpadding="0" cellspacing="0" style="width:98%;margin-left:20px;margin-bottom:0px;!important;">'+
                            '<tbody>';                      
        var tableHTMLEnd = '</tbody></table>';
        var tableHTMLDivEnd = '</div>';
        var tableHTML = tableHTMLDivStart;
        var lastRenderedElement; 
        var accordionInlineTables = '{!accordionInlineTables}';
        if (accordionInlineTables)
            accordionInlineTables= JSON.parse(accordionInlineTables);
        for(var k =0; k< accordionColumnNames_{!tableID}.length; k++) 
        {
            var cellData = encodeURI(accordionRowData[accordionColumnNames_{!tableID}[k]]);
            var columnName = accordionColumnNames_{!tableID}[k];
            if (typeof cellData == 'object'){
                    tableHTML += (lastRenderedElement == 'NormalCell' ? tableHTMLEnd : '');
                    var inlineTableStructure;
                    if (accordionInlineTables)
                    {
                        inlineTableStructure = {!jqueryVariable}.each(accordionInlineTables.subTables, function(key,val) {
                                            if(key.name == columnName)
                                                 return key.columns; 
                                            });
                    }       
                    tableHTML += buildTableInsideAccordian_{!tableID}(inlineTableStructure[0].columns, cellData);
                    lastRenderedElement = 'InnerHTMLTable';
             }
             else{
                tableHTML += (lastRenderedElement=='InnerHTMLTable' || lastRenderedElement===undefined ? tableHTMLStart : '');             
                tableHTML += buildAccordianRow_{!tableID}(columnName,cellData); 
                lastRenderedElement = 'NormalCell';         
             }
        }
        tableHTML += (lastRenderedElement!=='InnerHTMLTable'?tableHTMLEnd:'');
        tableHTML += tableHTMLDivEnd;
        return tableHTML;
     }

    /**
     * Utility Method to render individual items for inside the sub Items of accordian functionality. 
     *
     * @param  cellLabel    Label of the field for which cell needs to be returned
     * @param  cellValue    Value of the field for which cell needs to be returned
     * @return retHTML      html code of the table row 
     */   
    function buildAccordianRow_{!tableID}(cellName, cellValue)
    {
        var retHTML='';
        var colIndex = accordionColumnNames_{!tableID}.indexOf(cellName);
        var cellLabel = (colIndex >-1)? accordionColumnLabelNames_{!tableID}[colIndex] : cellName;
        var accordionColumnWidth_{!tableID} = '{!accordionColumnsWidth}'.split(','); 

        var dummyHTML = document.createElement('textarea');
        dummyHTML.innerHTML = cellValue;
        cellValue = (cellValue === undefined)?'':dummyHTML.value;
        
        retHTML += '<tr><td style="width:' + accordionColumnWidth_{!tableID}[0] +';">' + cellLabel+'</td>'+ 
        '<td style="background-color: #fff; width:' + accordionColumnWidth_{!tableID}[1] +';">' + decodeURIComponent(cellValue)+'</td></tr>';
        
        return retHTML;
    }

    /**
     * Utility Method to render the table inside the sub Items of accordian functionality. 
     *
     * @param  tableName            Name of the Table for which sub Table needs to be rendered 
     * @param  jsonArrayObject      JSON Array object for which the html Table needs to be created
     * @return retHTML              html code of the table  
     */ 
    function buildTableInsideAccordian_{!tableID}(inlineTableStructure, jsonArrayObject){
        var retHTML ='<table class="table table-striped table-bordered table-hover" border="0" cellpadding="0" cellspacing="0" style="width:98%;margin-left:20px;margin-top:5px;margin-bottom:5px;!important;">'+
                        '<tbody><thead><tr>'    
        
        for( var j in jsonArrayObject[0] ) {
            if (inlineTableStructure){
            columnTitle = {!jqueryVariable}.each(inlineTableStructure, function(key,val) {
                                if(key == j)
                                {
                                     j= val;
                                     return false;
                                 } 
                            });
            }
            retHTML += '<th>' + j + '</th>';
        }
        
        retHTML += '</tr></thead>';
        for( var i = 0; i < jsonArrayObject.length; i++) {
            retHTML += '<tr>';
            for( var j in jsonArrayObject[i] ) {
                retHTML += '<td>' + jsonArrayObject[i][j] + '</td>';
            }
            retHTML += '</tr>';
        }
        retHTML += '</tbody></table>';      
        return retHTML;     
    }   

    /**
     * Common Method to to collapse hidden rows of accordian functionality. 
     *
     * @param  none
     * @return none     
     */  
    function collapseOrExpandAllRows_{!tableID}() 
    {
      var useStandardAccordionUI = {!useStandardAccordionUI};
      var accordionRequired = {!col1_accordian};
        if({!useStandardAccordionUI} == true && {!col1_accordian} == true){
            var accordionElements = {!jqueryVariable}('#{!tableID}').find('td.details-control_{!tableID}');
            for (var i = 0; i < accordionElements.length; i++) 
            {
                var parentJQRow = {!jqueryVariable}(accordionElements[i]).closest('tr');
                var parentDTRow = dynamicTable_{!tableID}.row(parentJQRow);
                if (parentJQRow.hasClass('visited_child') == false  || accordionChildDisplayOverride_{!tableID} == true) 
                {
                    if (accordionExpandAllByDefault_{!tableID} == true) 
                    {
                        parentDTRow.child(getAccordionTableRows_{!tableID}(parentDTRow)).show();
                        parentJQRow.addClass('shown');
                    } 
                    else 
                    {
                        parentDTRow.child.hide();
                        parentJQRow.removeClass('shown');
                    }
                }
            }
        }
    }

    /**
     * This function retains and associates Collapse all or Expand All functionality on click of Pagination buttons 
     *
     * @param  none
     * @return none     
     */ 
    function getPaginateButtonsOnClickEvents_{!tableID}() 
    {
        var paginateButtons = {!jqueryVariable}("#{!tableID}_wrapper .dataTables_paginate");
        for(var i = 0; i<paginateButtons.length; i++) 
        {
            {!jqueryVariable}(paginateButtons[i]).on('click',function() 
            {
                collapseOrExpandAllRows_{!tableID}();
            });
        }
    }    
    
    /**
     * This function associates Expand All functionality on click of ExpandAll Link 
     *
     * @param  none
     * @return none     
     */ 
    function getExpandAllOnClick_{!tableID}() 
    {
        {!jqueryVariable}("#expandAll_{!tableID}").on('click',function() 
        {
            accordionChildDisplayOverride_{!tableID} = true;
            accordionExpandAllByDefault_{!tableID} = true;
            collapseOrExpandAllRows_{!tableID}();
            return false;
        });
    }   
    
    /**
     * This function associates Collapse All functionality on click of CollapseAll Link 
     *
     * @param  none
     * @return none     
     */ 
    function getCollapseAllOnClick_{!tableID}() 
    {
        {!jqueryVariable}("#collapseAll_{!tableID}").on('click',function() 
        {
            accordionChildDisplayOverride_{!tableID} = true;
            accordionExpandAllByDefault_{!tableID} = false;
            collapseOrExpandAllRows_{!tableID}();
            return false;
        });
    }   
    
    /**
     * This function retains the state of the child row display when the user clicks on header to sort 
     *
     * @param  none
     * @return none     
     */ 
    function retainChildRowDisplayOnSort_{!tableID}() 
    {
        {!jqueryVariable}('thead > tr > th', '#{!tableID}').click(function() 
        {
            if ({!jqueryVariable}(this).hasClass('show-details') == false) 
            {
                collapseOrExpandAllRows_{!tableID}();
            }
        });
    }   
    
    /**
     * This function retains the state of the child row display when the user changes the length of the Datatable 
     *
     * @param  none
     * @return none     
     */ 
    function retainChildRowDisplayOnSizeChange_{!tableID}() 
    {
        var dataTableLengthSelector = {!jqueryVariable}("#{!tableID}_wrapper div.dataTables_length select");
        for(var i = 0; i<dataTableLengthSelector.length; i++) 
        {
            {!jqueryVariable}(dataTableLengthSelector[i]).on('change', function() 
            {
                collapseOrExpandAllRows_{!tableID}();
            });
        }
    }
    
    /**
     * This function associates click event on Accordion
     *
     * @param  none
     * @return none     
     */ 
    function getAccordionDetailsOnRows_{!tableID}() 
    {
        {!jqueryVariable}('#{!tableID} tbody').on('click', 'td.details-control_{!tableID}', function() 
        {
            var tr ={!jqueryVariable}(this).closest('tr');
            var row = dynamicTable_{!tableID}.row(tr);
            tr.addClass('visited_child');
            if (row.child.isShown()) 
            {
                row.child.hide();
                tr.removeClass('shown');
            }
            else 
            {
                row.child(getAccordionTableRows_{!tableID}(row)).show();
                tr.addClass('shown');
            }
            accordionChildDisplayOverride_{!tableID} = true;
        });
    }
    
    /**
     * This function is called once the Datatable is loaded so that all the Accordion  
     * and onClick Events can be associated properly
     *
     * @param  none
     * @return none     
     */
    function getAccordianDetails_{!tableID}() 
    {
        if (accordionExpandAllByDefault_{!tableID})
            collapseOrExpandAllRows_{!tableID}();
            
        getPaginateButtonsOnClickEvents_{!tableID}();
        getExpandAllOnClick_{!tableID}();
        getCollapseAllOnClick_{!tableID}();
        retainChildRowDisplayOnSort_{!tableID}();
        retainChildRowDisplayOnSizeChange_{!tableID}();
        getAccordionDetailsOnRows_{!tableID}();
    }       
    
    function openDCNLink_{!tableID}(sCaseId) {
        var sDCNUrl = '/apex/DCNRedirection_VF_HUM?id=' + sCaseId;
        window.open(sDCNUrl, "_blank");
    }
    function raiseEventToSetRecordCount(tableData,stableContentType)
    {
        if(stableContentType) 
        {
            var lstDetails = stableContentType.split('_');
            var responseArray = [lstDetails[0],tableData.length];
            if(lstDetails.length >1) sforce.console.fireEvent('UpdateRelatedListSize_'+lstDetails[1], responseArray);
        }
    }
    </script>   
</apex:component>