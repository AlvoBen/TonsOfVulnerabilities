// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remoteimpl.roles;

import java.rmi.server.Operation;

import com.sap.engine.services.rmi_p4.*;

/**
 *
 * @author RMIC Generator 
 * @version 6.30
 */
public class RemoteSecurityRolesImplp4_Skel extends P4RemoteObject  implements com.sap.engine.services.rmi_p4.Skeleton, java.rmi.Remote {

	public P4ObjectBroker broker = P4ObjectBroker.init();
	private static final Operation[] operations = {
			new Operation("modifySecurityRole(com.sap.engine.interfaces.security.SecurityRole)"),
			new Operation("getSecurityRole(java.lang.String)"),
			new Operation("addSecurityRole(java.lang.String)"),
			new Operation("listSecurityRolesOfUser(java.lang.String)"),
			new Operation("addSecurityRoleReference(java.lang.String,java.lang.String,java.lang.String)"),
			new Operation("listSecurityRoles()"),
			new Operation("listSecurityRolesOfGroup(java.lang.String)"),
			new Operation("removeSecurityRole(java.lang.String)")};

	public RemoteSecurityRolesImplp4_Skel () {
	}

	public Operation[] getOperations() {
		return operations;
	}

	private static final String[] _implements = {
			"com.sap.engine.services.security.remote.roles.RemoteSecurityRoles"};

	public String[] getImplemntsObjects() {
		return _implements;
	}

	public void dispatch(java.rmi.Remote remote, Dispatch call, int opnum) throws Exception {

		com.sap.engine.services.security.remoteimpl.roles.RemoteSecurityRolesImpl impl = (com.sap.engine.services.security.remoteimpl.roles.RemoteSecurityRolesImpl) getDelegate();
		P4ObjectInput in = call.getInputStream();

		switch (opnum) {

			case 0 : {  //method public abstract void com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.modifySecurityRole(com.sap.engine.interfaces.security.SecurityRole) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					com.sap.engine.interfaces.security.SecurityRole param0;
					obj0 = in.readObject();
					try {
						 param0 = (com.sap.engine.interfaces.security.SecurityRole)obj0;
					} catch (ClassCastException ex) {
						 param0 = (com.sap.engine.interfaces.security.SecurityRole) broker.narrow(obj0,com.sap.engine.interfaces.security.SecurityRole.class);
					}
					impl.modifySecurityRole(param0);
					P4ObjectOutput out = call.getOutputStream();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 1 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.getSecurityRole(java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					com.sap.engine.interfaces.security.SecurityRole _result = impl.getSecurityRole(param0);
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 2 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.addSecurityRole(java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					com.sap.engine.interfaces.security.SecurityRole _result = impl.addSecurityRole(param0);
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 3 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole[] com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.listSecurityRolesOfUser(java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					com.sap.engine.interfaces.security.SecurityRole[] _result = impl.listSecurityRolesOfUser(param0);
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 4 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.addSecurityRoleReference(java.lang.String,java.lang.String,java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					Object obj1;
					java.lang.String param1;
					obj1 = in.readObject();
					try {
						 param1 = (java.lang.String)obj1;
					} catch (ClassCastException ex) {
						 param1 = (java.lang.String) broker.narrow(obj1,java.lang.String.class);
					}
					Object obj2;
					java.lang.String param2;
					obj2 = in.readObject();
					try {
						 param2 = (java.lang.String)obj2;
					} catch (ClassCastException ex) {
						 param2 = (java.lang.String) broker.narrow(obj2,java.lang.String.class);
					}
					com.sap.engine.interfaces.security.SecurityRole _result = impl.addSecurityRoleReference(param0, param1, param2);
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 5 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole[] com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.listSecurityRoles() throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					com.sap.engine.interfaces.security.SecurityRole[] _result = impl.listSecurityRoles();
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 6 : {  //method public abstract com.sap.engine.interfaces.security.SecurityRole[] com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.listSecurityRolesOfGroup(java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					com.sap.engine.interfaces.security.SecurityRole[] _result = impl.listSecurityRolesOfGroup(param0);
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 7 : {  //method public abstract void com.sap.engine.services.security.remote.roles.RemoteSecurityRoles.removeSecurityRole(java.lang.String) throws java.rmi.RemoteException,java.lang.SecurityException
				try {
					Object obj0;
					java.lang.String param0;
					obj0 = in.readObject();
					try {
						 param0 = (java.lang.String)obj0;
					} catch (ClassCastException ex) {
						 param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
					}
					impl.removeSecurityRole(param0);
					P4ObjectOutput out = call.getOutputStream();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
		}
	}

}
