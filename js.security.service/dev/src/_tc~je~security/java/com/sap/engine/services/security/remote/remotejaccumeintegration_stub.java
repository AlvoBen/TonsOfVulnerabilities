// Class generated by SAP Labs Bulgaria's RMIC Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote;



import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  SAP's RMIC Generator
* @version J2EE Engine 7.0
*/
public class RemoteJACCUMEIntegration_Stub extends com.sap.engine.services.rmi_p4.StubImpl 
    implements com.sap.engine.services.security.remote.RemoteJACCUMEIntegration {

  private static final String[] operations = {
      "addUsersAndGroupsToJACCRole(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])",
      "removeUMERole(java.lang.String)",
      "addUMERoleToJACCRole(java.lang.String,java.lang.String,java.lang.String)",
      "addUMERoleToServiceRole(java.lang.String,java.lang.String,java.lang.String)",
      "getRunAsIdentity(java.lang.String,java.lang.String)",
      "setRunAsIdentity(java.lang.String,java.lang.String,java.lang.String)"};

  public String[] p4_getOperations() {
    return operations;
  }

  public void addUsersAndGroupsToJACCRole(java.lang.String _param0, java.lang.String _param1, java.lang.String[] _param2, java.lang.String[] _param3) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        remoteInterface.addUsersAndGroupsToJACCRole( _param0,  _param1,  _param2,  _param3);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,_param1,_param2,_param3};
        Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String[].class,java.lang.String[].class};
        try { 
          p4_invokeReflect(remote,"addUsersAndGroupsToJACCRole",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUsersAndGroupsToJACCRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUsersAndGroupsToJACCRole", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUsersAndGroupsToJACCRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUsersAndGroupsToJACCRole", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(0);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        out.writeObject( _param2);
        out.writeObject( _param3);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUsersAndGroupsToJACCRole", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void removeUMERole(java.lang.String _param0) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        remoteInterface.removeUMERole( _param0);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"removeUMERole",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <removeUMERole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "removeUMERole", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <removeUMERole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "removeUMERole", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(1);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "removeUMERole", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void addUMERoleToJACCRole(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        remoteInterface.addUMERoleToJACCRole( _param0,  _param1,  _param2);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,_param1,_param2};
        Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"addUMERoleToJACCRole",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUMERoleToJACCRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToJACCRole", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUMERoleToJACCRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToJACCRole", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(2);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        out.writeObject( _param2);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToJACCRole", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void addUMERoleToServiceRole(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        remoteInterface.addUMERoleToServiceRole( _param0,  _param1,  _param2);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,_param1,_param2};
        Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"addUMERoleToServiceRole",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUMERoleToServiceRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToServiceRole", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <addUMERoleToServiceRole>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToServiceRole", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(3);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        out.writeObject( _param2);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "addUMERoleToServiceRole", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public java.lang.String getRunAsIdentity(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        return remoteInterface.getRunAsIdentity( _param0,  _param1);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,_param1};
        Class[] p = new Class[]{java.lang.String.class,java.lang.String.class};
        try { 
          return ((String) p4_invokeReflect(remote,"getRunAsIdentity",params,p));
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <getRunAsIdentity>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "getRunAsIdentity", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <getRunAsIdentity>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "getRunAsIdentity", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(4);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          java.lang.String _result;
          obj = in.readObject();
          try {
             _result = (java.lang.String)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (java.lang.String) broker.narrow(obj,java.lang.String.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "getRunAsIdentity", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void setRunAsIdentity(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteJACCUMEIntegration remoteInterface = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) remote;
        remoteInterface.setRunAsIdentity( _param0,  _param1,  _param2);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,_param1,_param2};
        Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"setRunAsIdentity",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <setRunAsIdentity>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "setRunAsIdentity", rex);
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.logDebug("P4 Call exception: Exception in execute <setRunAsIdentity>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "setRunAsIdentity", ex);
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(5);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        out.writeObject( _param2);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.traceDebug(this.getClass(), "setRunAsIdentity", tr);
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public byte[] readByteArray(com.sap.engine.services.rmi_p4.P4ObjectInput in, int length){
    byte[] buffer = new byte[length];
    int readed = 0;
    int offset = 0;
    try {
      while (readed != -1 && offset < length) {
        readed = in.read(buffer, offset, length - offset);
        offset += readed;
      }
    } catch (java.io.IOException ioe) {
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this + ". Problem while read byte[] from the stream : " + ioe.getMessage());
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().throwing(ioe);
    }
    return buffer;
  }


}
