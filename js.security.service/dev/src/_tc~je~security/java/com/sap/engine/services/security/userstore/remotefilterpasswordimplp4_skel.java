// Class generated by SAP Labs Bulgaria's RMIC Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.userstore;

import java.rmi.server.Operation;

import com.sap.engine.services.rmi_p4.*;

/**
 *
 * @author RMIC Generator 
 * @version 6.30
 */
public class RemoteFilterPasswordImplp4_Skel extends P4RemoteObject  implements com.sap.engine.services.rmi_p4.Skeleton, java.rmi.Remote {

  public P4ObjectBroker broker = P4ObjectBroker.init();
  private static final Operation[] operations = {
      new Operation("getRestrictionsInfo()"),
      new Operation("getUsageInfo()"),
      new Operation("generatePassword()"),
      new Operation("setRestriction(int,int)"),
      new Operation("filterPassword(char[])"),
      new Operation("getRestriction(int)"),
      new Operation("generatePassword(java.lang.String)"),
      new Operation("filterPassword(char[],java.lang.String)")};

  public RemoteFilterPasswordImplp4_Skel () {
  }

  public Operation[] getOperations() {
    return operations;
  }

  private static final String[] _implements = {
      "com.sap.engine.services.security.remote.RemoteFilterPassword"};

  public String[] getImplemntsObjects() {
    return _implements;
  }

  public void dispatch(java.rmi.Remote remote, Dispatch call, int opnum) throws Exception {

    com.sap.engine.services.security.userstore.RemoteFilterPasswordImpl impl = (com.sap.engine.services.security.userstore.RemoteFilterPasswordImpl) delegate();
    P4ObjectInput in = call.getInputStream();

    switch (opnum) {

      case 0 : {  //method public abstract java.lang.String[] com.sap.engine.services.security.remote.RemoteFilterPassword.getRestrictionsInfo()
        try {
          java.lang.String[] _result = impl.getRestrictionsInfo();
          P4ObjectOutput out = call.getOutputStream();
          out.writeObject( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 1 : {  //method public abstract java.lang.String[] com.sap.engine.services.security.remote.RemoteFilterPassword.getUsageInfo()
        try {
          java.lang.String[] _result = impl.getUsageInfo();
          P4ObjectOutput out = call.getOutputStream();
          out.writeObject( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 2 : {  //method public abstract char[] com.sap.engine.services.security.remote.RemoteFilterPassword.generatePassword()
        try {
          char[] _result = impl.generatePassword();
          P4ObjectOutput out = call.getOutputStream();
          out.writeObject( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 3 : {  //method public abstract void com.sap.engine.services.security.remote.RemoteFilterPassword.setRestriction(int,int)
        try {
          int param0 = in.readInt();
          int param1 = in.readInt();
          impl.setRestriction(param0, param1);
          P4ObjectOutput out = call.getOutputStream();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 4 : {  //method public abstract boolean com.sap.engine.services.security.remote.RemoteFilterPassword.filterPassword(char[])
        try {
          Object obj0;
          char[] param0;
          obj0 = in.readObject();
          try {
             param0 = (char[])obj0;
          } catch (ClassCastException ex) {
             param0 = (char[]) broker.narrow(obj0,char[].class);
          }
          boolean _result = impl.filterPassword(param0);
          P4ObjectOutput out = call.getOutputStream();
          out.writeBoolean( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 5 : {  //method public abstract int com.sap.engine.services.security.remote.RemoteFilterPassword.getRestriction(int)
        try {
          int param0 = in.readInt();
          int _result = impl.getRestriction(param0);
          P4ObjectOutput out = call.getOutputStream();
          out.writeInt( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 6 : {  //method public abstract char[] com.sap.engine.services.security.remote.RemoteFilterPassword.generatePassword(java.lang.String)
        try {
          Object obj0;
          java.lang.String param0;
          obj0 = in.readObject();
          try {
             param0 = (java.lang.String)obj0;
          } catch (ClassCastException ex) {
             param0 = (java.lang.String) broker.narrow(obj0,java.lang.String.class);
          }
          char[] _result = impl.generatePassword(param0);
          P4ObjectOutput out = call.getOutputStream();
          out.writeObject( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
      case 7 : {  //method public abstract boolean com.sap.engine.services.security.remote.RemoteFilterPassword.filterPassword(char[],java.lang.String)
        try {
          Object obj0;
          char[] param0;
          obj0 = in.readObject();
          try {
             param0 = (char[])obj0;
          } catch (ClassCastException ex) {
             param0 = (char[]) broker.narrow(obj0,char[].class);
          }
          Object obj1;
          java.lang.String param1;
          obj1 = in.readObject();
          try {
             param1 = (java.lang.String)obj1;
          } catch (ClassCastException ex) {
             param1 = (java.lang.String) broker.narrow(obj1,java.lang.String.class);
          }
          boolean _result = impl.filterPassword(param0, param1);
          P4ObjectOutput out = call.getOutputStream();
          out.writeBoolean( _result);
          out.flush();
        } catch (java.lang.Exception ex) {
          throw ex;
        }
        break;
      }
    }
  }


  public byte[] readByteArray(com.sap.engine.services.rmi_p4.P4ObjectInput in, int length){
    byte[] buffer = new byte[length];
    int readed = 0;
    int offset = 0;
    try {
      while (readed != -1 && offset < length) {
        readed = in.read(buffer, offset, length - offset);
        offset += readed;
      }
    } catch (java.io.IOException ioe) {
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this + ". Problem while read byte[] from the stream : " + ioe.getMessage());
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().throwing(ioe);
    }
    return buffer;
  }


}
