// Class generated by InQMy Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote.resource;

import java.rmi.server.Operation;


import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  Nickolay Neychev, Georgy Stanev
* @version 4.0
*/
public class RemoteSecurityResources_Stub  extends com.sap.engine.services.rmi_p4.StubBase 
		implements com.sap.engine.services.security.remote.resource.RemoteSecurityResources {

	private static final Operation[] operations = {
			new Operation("getResourceAliases()"),
			new Operation("renameResource(java.lang.String,java.lang.String)"),
			new Operation("getResourceAccessControlHandle(java.lang.String)"),
			new Operation("getResourceHandle(java.lang.String)"),
			new Operation("destroyResource(java.lang.String)"),
			new Operation("createResource(java.lang.String)"),
			new Operation("checkPermission(java.lang.String,java.lang.String,java.lang.String)")};

	public Operation[] getOperations() {
		return operations;
	}

	public java.lang.String[] getResourceAliases() throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("getResourceAliases()");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getResourceAliases>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return remoteInterface.getResourceAliases();
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAliases>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAliases>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAliases>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.lang.String[] _result;
					obj = in.readObject();
					try {
						 _result = (java.lang.String[])obj;
					} catch (ClassCastException ex) {
						 _result = (java.lang.String[]) broker.narrow(obj,java.lang.String[].class);
					}
				done(call);
				call.releaseInputStream();
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public void renameResource(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("renameResource(java.lang.String,java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <renameResource>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.renameResource( _param0,  _param1);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <renameResource>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <renameResource>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <renameResource>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
				done(call);
				call.releaseInputStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle getResourceAccessControlHandle(java.lang.String _param0) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("getResourceAccessControlHandle(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getResourceAccessControlHandle>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle) broker.narrow(replicate(remoteInterface.getResourceAccessControlHandle( _param0)), com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle.class);
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAccessControlHandle>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAccessControlHandle>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getResourceAccessControlHandle>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(2);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle) broker.narrow(obj,com.sap.engine.services.security.remote.resource.RemoteResourceAccessControlHandle.class);
					}
				done(call);
				call.releaseInputStream();
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public com.sap.engine.services.security.remote.resource.RemoteResourceHandle getResourceHandle(java.lang.String _param0) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("getResourceHandle(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getResourceHandle>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (com.sap.engine.services.security.remote.resource.RemoteResourceHandle) broker.narrow(replicate(remoteInterface.getResourceHandle( _param0)), com.sap.engine.services.security.remote.resource.RemoteResourceHandle.class);
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceHandle>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getResourceHandle>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getResourceHandle>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(3);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.resource.RemoteResourceHandle _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.resource.RemoteResourceHandle)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.resource.RemoteResourceHandle) broker.narrow(obj,com.sap.engine.services.security.remote.resource.RemoteResourceHandle.class);
					}
				done(call);
				call.releaseInputStream();
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public void destroyResource(java.lang.String _param0) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("destroyResource(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <destroyResource>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.destroyResource( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <destroyResource>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <destroyResource>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <destroyResource>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(4);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
				done(call);
				call.releaseInputStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public void createResource(java.lang.String _param0) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("createResource(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <createResource>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.createResource( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <createResource>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <createResource>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <createResource>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(5);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
				done(call);
				call.releaseInputStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


	public void checkPermission(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2) throws java.rmi.RemoteException, java.lang.SecurityException {
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.resource.RemoteSecurityResources remoteInterface = (com.sap.engine.services.security.remote.resource.RemoteSecurityResources) p4remote.getDelegate();
				try{
					p4remote.checkPermission("checkPermission(java.lang.String,java.lang.String,java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <checkPermission>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.checkPermission( _param0,  _param1,  _param2);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <checkPermission>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <checkPermission>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <checkPermission>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			try {
				com.sap.engine.services.rmi_p4.Call call = newCall(6);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
				done(call);
				call.releaseInputStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw new P4RuntimeException(tr.toString(), tr);
				}
			}
	}


}
