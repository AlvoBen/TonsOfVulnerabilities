// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.userstore;

import java.rmi.server.Operation;

import com.sap.engine.services.rmi_p4.*;

/**
 *
 * @author RMIC Generator 
 * @version 6.30
 */
public class RemoteIteratorImplp4_Skel extends P4RemoteObject  implements com.sap.engine.services.rmi_p4.Skeleton, java.rmi.Remote {

	public P4ObjectBroker broker = P4ObjectBroker.init();
	private static final Operation[] operations = {
			new Operation("getState()"),
			new Operation("hasNext()"),
			new Operation("remove()"),
			new Operation("next()")};

	public RemoteIteratorImplp4_Skel () {
	}

	public Operation[] getOperations() {
		return operations;
	}

	private static final String[] _implements = {
			"com.sap.engine.services.security.remote.RemoteIterator"};

	public String[] getImplemntsObjects() {
		return _implements;
	}

	public void dispatch(java.rmi.Remote remote, Dispatch call, int opnum) throws Exception {

		com.sap.engine.services.security.userstore.RemoteIteratorImpl impl = (com.sap.engine.services.security.userstore.RemoteIteratorImpl) delegate();
		P4ObjectInput in = call.getInputStream();

		switch (opnum) {

			case 0 : {  //method public abstract int com.sap.engine.interfaces.security.userstore.context.SearchResult.getState()
				try {
					int _result = impl.getState();
					P4ObjectOutput out = call.getOutputStream();
					out.writeInt( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 1 : {  //method public abstract boolean java.util.Iterator.hasNext()
				try {
					boolean _result = impl.hasNext();
					P4ObjectOutput out = call.getOutputStream();
					out.writeBoolean( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 2 : {  //method public abstract void java.util.Iterator.remove()
				try {
					impl.remove();
					P4ObjectOutput out = call.getOutputStream();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
			case 3 : {  //method public abstract java.lang.Object java.util.Iterator.next()
				try {
					java.lang.Object _result = impl.next();
					P4ObjectOutput out = call.getOutputStream();
					out.writeObject( _result);
					out.flush();
				} catch (Exception ex) {
					throw ex;
				}
				break;
			}
		}
	}

}
