// Class generated by SAP Labs Bulgaria's RMIC Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote;



import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  SAP's RMIC Generator
* @version J2EE Engine 7.0
*/
public class RemoteSecurity_Stub extends com.sap.engine.services.rmi_p4.StubImpl 
    implements com.sap.engine.services.security.remote.RemoteSecurity {

  private static final String[] operations = {
      "registerPolicyConfiguration(java.lang.String,byte)",
      "registerPolicyConfiguration(java.lang.String)",
      "listPolicyConfigurations()",
      "unregisterPolicyConfiguration(java.lang.String)",
      "getPolicyConfiguration(java.lang.String)",
      "getAuthenticationStacks()",
      "getRemoteLoginContext(java.lang.String,java.lang.Object[])",
      "getRemoteLoginContext()",
      "getRemoteLoginContext(java.lang.String)",
      "getCryptography()",
      "getProtectionDomains()",
      "getSecuritySessions()",
      "getRemoteUserStoreFactory()",
      "getRemoteJACCUMEIntegration()",
      "getUserStoreAccessCount()",
      "getActiveSessionsCount()",
      "getActiveSessionsCount(java.lang.String)",
      "getLoggedUsersCount()",
      "getLoggedUsersCount(java.lang.String)",
      "getTotalSessionsCount(java.lang.String)",
      "getTotalSessionsCount()",
      "getTimedOutSessionsCount(java.lang.String)",
      "getTimedOutSessionsCount()",
      "getLoggedOffSessionsCount(java.lang.String)",
      "getLoggedOffSessionsCount()",
      "getUnsuccessfullLogonAttemptsCount(java.lang.String)",
      "getUnsuccessfullLogonAttemptsCount()",
      "getInvalidSessionsCount()",
      "getInvalidSessionsCount(java.lang.String)",
      "registerManagementListener(com.sap.engine.frame.state.ManagementListener)"};

  public String[] p4_getOperations() {
    return operations;
  }

  public void registerPolicyConfiguration(java.lang.String _param0, byte _param1) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        remoteInterface.registerPolicyConfiguration( _param0,  _param1);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0,new Byte( _param1)};
        Class[] p = new Class[]{java.lang.String.class,byte.class};
        try { 
          p4_invokeReflect(remote,"registerPolicyConfiguration",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <registerPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <registerPolicyConfiguration>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <registerPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<registerPolicyConfiguration>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(0);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeByte( _param1);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <registerPolicyConfiguration> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void registerPolicyConfiguration(java.lang.String _param0) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        remoteInterface.registerPolicyConfiguration( _param0);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"registerPolicyConfiguration",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <registerPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <registerPolicyConfiguration>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <registerPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<registerPolicyConfiguration>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(1);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <registerPolicyConfiguration> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public java.lang.String[] listPolicyConfigurations() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.listPolicyConfigurations();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (java.lang.String[])broker.narrow(p4_replicate(p4_invokeReflect(remote,"listPolicyConfigurations",params,p)),java.lang.String[].class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <listPolicyConfigurations>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <listPolicyConfigurations>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <listPolicyConfigurations>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<listPolicyConfigurations>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(2);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          java.lang.String[] _result;
          obj = in.readObject();
          try {
             _result = (java.lang.String[])obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (java.lang.String[]) broker.narrow(obj,java.lang.String[].class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <listPolicyConfigurations> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void unregisterPolicyConfiguration(java.lang.String _param0) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        remoteInterface.unregisterPolicyConfiguration( _param0);
        return;
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          p4_invokeReflect(remote,"unregisterPolicyConfiguration",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <unregisterPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <unregisterPolicyConfiguration>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <unregisterPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<unregisterPolicyConfiguration>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(3);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <unregisterPolicyConfiguration> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.RemotePolicyConfiguration getPolicyConfiguration(java.lang.String _param0) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.RemotePolicyConfiguration) broker.narrow(p4_replicate(remoteInterface.getPolicyConfiguration( _param0)), com.sap.engine.services.security.remote.RemotePolicyConfiguration.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return (com.sap.engine.services.security.remote.RemotePolicyConfiguration)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getPolicyConfiguration",params,p)),com.sap.engine.services.security.remote.RemotePolicyConfiguration.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getPolicyConfiguration>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getPolicyConfiguration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getPolicyConfiguration>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(4);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.RemotePolicyConfiguration _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.RemotePolicyConfiguration)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.RemotePolicyConfiguration) broker.narrow(obj,com.sap.engine.services.security.remote.RemotePolicyConfiguration.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getPolicyConfiguration> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public java.lang.String[] getAuthenticationStacks()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getAuthenticationStacks();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (java.lang.String[])broker.narrow(p4_replicate(p4_invokeReflect(remote,"getAuthenticationStacks",params,p)),java.lang.String[].class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getAuthenticationStacks>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getAuthenticationStacks>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(5);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          java.lang.String[] _result;
          obj = in.readObject();
          try {
             _result = (java.lang.String[])obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (java.lang.String[]) broker.narrow(obj,java.lang.String[].class);
          }
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getAuthenticationStacks> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.login.RemoteLoginContextHelper getRemoteLoginContext(java.lang.String _param0, java.lang.Object[] _param1) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        ReplicateOutputStream out1 = p4_getReplicateOutput();
        ReplicateInputStream inn1 = p4_getReplicateInput(out1);
        return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(p4_replicate(remoteInterface.getRemoteLoginContext( _param0, (java.lang.Object[]) broker.narrow(p4_replicateWithStreams(inn1,out1,_param1),java.lang.Object[].class))), com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
      } catch (java.lang.ClassCastException rex) {
        ReplicateOutputStream outt = p4_getReplicateOutput();
        ReplicateInputStream inn = p4_getReplicateInput(outt);
        Object[] params = new Object[]{_param0,p4_replicateWithStreams(inn,outt,_param1)};
        Class[] p = new Class[]{java.lang.String.class,(Class) p4_replicateWithStreams(inn,outt,java.lang.Object[].class)};
        try { 
          return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getRemoteLoginContext",params,p)),com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getRemoteLoginContext>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getRemoteLoginContext>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(6);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        out.writeObject( _param1);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.login.RemoteLoginContextHelper _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(obj,com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getRemoteLoginContext> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.login.RemoteLoginContextHelper getRemoteLoginContext() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(p4_replicate(remoteInterface.getRemoteLoginContext()), com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getRemoteLoginContext",params,p)),com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getRemoteLoginContext>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getRemoteLoginContext>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(7);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.login.RemoteLoginContextHelper _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(obj,com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getRemoteLoginContext> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.login.RemoteLoginContextHelper getRemoteLoginContext(java.lang.String _param0) throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(p4_replicate(remoteInterface.getRemoteLoginContext( _param0)), com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getRemoteLoginContext",params,p)),com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getRemoteLoginContext>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteLoginContext>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getRemoteLoginContext>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(8);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.login.RemoteLoginContextHelper _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.login.RemoteLoginContextHelper) broker.narrow(obj,com.sap.engine.services.security.remote.login.RemoteLoginContextHelper.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getRemoteLoginContext> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.crypt.RemoteCryptography getCryptography() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.crypt.RemoteCryptography) broker.narrow(p4_replicate(remoteInterface.getCryptography()), com.sap.engine.services.security.remote.crypt.RemoteCryptography.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.crypt.RemoteCryptography)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getCryptography",params,p)),com.sap.engine.services.security.remote.crypt.RemoteCryptography.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getCryptography>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getCryptography>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getCryptography>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getCryptography>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(9);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.crypt.RemoteCryptography _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.crypt.RemoteCryptography)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.crypt.RemoteCryptography) broker.narrow(obj,com.sap.engine.services.security.remote.crypt.RemoteCryptography.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getCryptography> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.domains.RemoteProtectionDomains getProtectionDomains() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) broker.narrow(p4_replicate(remoteInterface.getProtectionDomains()), com.sap.engine.services.security.remote.domains.RemoteProtectionDomains.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getProtectionDomains",params,p)),com.sap.engine.services.security.remote.domains.RemoteProtectionDomains.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getProtectionDomains>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getProtectionDomains>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getProtectionDomains>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getProtectionDomains>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(10);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.domains.RemoteProtectionDomains _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) broker.narrow(obj,com.sap.engine.services.security.remote.domains.RemoteProtectionDomains.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getProtectionDomains> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions getSecuritySessions() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions) broker.narrow(p4_replicate(remoteInterface.getSecuritySessions()), com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getSecuritySessions",params,p)),com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getSecuritySessions>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getSecuritySessions>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getSecuritySessions>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getSecuritySessions>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(11);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions) broker.narrow(obj,com.sap.engine.services.security.remote.sessions.RemoteSecuritySessions.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getSecuritySessions> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.RemoteUserStoreFactory getRemoteUserStoreFactory() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.RemoteUserStoreFactory) broker.narrow(p4_replicate(remoteInterface.getRemoteUserStoreFactory()), com.sap.engine.services.security.remote.RemoteUserStoreFactory.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.RemoteUserStoreFactory)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getRemoteUserStoreFactory",params,p)),com.sap.engine.services.security.remote.RemoteUserStoreFactory.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteUserStoreFactory>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getRemoteUserStoreFactory>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteUserStoreFactory>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getRemoteUserStoreFactory>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(12);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.RemoteUserStoreFactory _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.RemoteUserStoreFactory)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.RemoteUserStoreFactory) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteUserStoreFactory.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getRemoteUserStoreFactory> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public com.sap.engine.services.security.remote.RemoteJACCUMEIntegration getRemoteJACCUMEIntegration() throws java.rmi.RemoteException {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw new java.rmi.NoSuchObjectException("");
      } else {
        remote = p4remote.delegate();
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) broker.narrow(p4_replicate(remoteInterface.getRemoteJACCUMEIntegration()), com.sap.engine.services.security.remote.RemoteJACCUMEIntegration.class);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getRemoteJACCUMEIntegration",params,p)),com.sap.engine.services.security.remote.RemoteJACCUMEIntegration.class);
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          if (target instanceof java.rmi.RemoteException) {
           throw (java.rmi.RemoteException)target;
          } else { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteJACCUMEIntegration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getRemoteJACCUMEIntegration>" + rex.getMessage());
        throw rex;
      } catch (java.rmi.RemoteException ex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getRemoteJACCUMEIntegration>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method<getRemoteJACCUMEIntegration>" +  ex.getMessage());
        throw (java.rmi.RemoteException) p4_replicate(ex);
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(13);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
          Object obj;
          com.sap.engine.services.security.remote.RemoteJACCUMEIntegration _result;
          obj = in.readObject();
          try {
             _result = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration)obj;
          } catch (java.lang.ClassCastException ex) {
             _result = (com.sap.engine.services.security.remote.RemoteJACCUMEIntegration) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteJACCUMEIntegration.class);
          }
        return _result;
      } catch (java.rmi.RemoteException ex) {
        throw ex;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getRemoteJACCUMEIntegration> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getUserStoreAccessCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getUserStoreAccessCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getUserStoreAccessCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getUserStoreAccessCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getUserStoreAccessCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(14);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getUserStoreAccessCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public int getActiveSessionsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getActiveSessionsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Integer) p4_invokeReflect(remote,"getActiveSessionsCount",params,p)).intValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getActiveSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getActiveSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(15);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        int _result = in.readInt();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getActiveSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public int getActiveSessionsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getActiveSessionsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Integer) p4_invokeReflect(remote,"getActiveSessionsCount",params,p)).intValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getActiveSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getActiveSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(16);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        int _result = in.readInt();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getActiveSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public int getLoggedUsersCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getLoggedUsersCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Integer) p4_invokeReflect(remote,"getLoggedUsersCount",params,p)).intValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getLoggedUsersCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getLoggedUsersCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(17);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        int _result = in.readInt();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getLoggedUsersCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public int getLoggedUsersCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getLoggedUsersCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Integer) p4_invokeReflect(remote,"getLoggedUsersCount",params,p)).intValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getLoggedUsersCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getLoggedUsersCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(18);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        int _result = in.readInt();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getLoggedUsersCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getTotalSessionsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getTotalSessionsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Long) p4_invokeReflect(remote,"getTotalSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getTotalSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getTotalSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(19);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getTotalSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getTotalSessionsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getTotalSessionsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getTotalSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getTotalSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getTotalSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(20);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getTotalSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getTimedOutSessionsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getTimedOutSessionsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Long) p4_invokeReflect(remote,"getTimedOutSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getTimedOutSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getTimedOutSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(21);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getTimedOutSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getTimedOutSessionsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getTimedOutSessionsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getTimedOutSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getTimedOutSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getTimedOutSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(22);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getTimedOutSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getLoggedOffSessionsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getLoggedOffSessionsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Long) p4_invokeReflect(remote,"getLoggedOffSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getLoggedOffSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getLoggedOffSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(23);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getLoggedOffSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getLoggedOffSessionsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getLoggedOffSessionsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getLoggedOffSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getLoggedOffSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getLoggedOffSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(24);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getLoggedOffSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getUnsuccessfullLogonAttemptsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getUnsuccessfullLogonAttemptsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Long) p4_invokeReflect(remote,"getUnsuccessfullLogonAttemptsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getUnsuccessfullLogonAttemptsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getUnsuccessfullLogonAttemptsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(25);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getUnsuccessfullLogonAttemptsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getUnsuccessfullLogonAttemptsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getUnsuccessfullLogonAttemptsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getUnsuccessfullLogonAttemptsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getUnsuccessfullLogonAttemptsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getUnsuccessfullLogonAttemptsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(26);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getUnsuccessfullLogonAttemptsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getInvalidSessionsCount()  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getInvalidSessionsCount();
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{};
        Class[] p = new Class[]{};
        try { 
          return ((Long) p4_invokeReflect(remote,"getInvalidSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getInvalidSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getInvalidSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(27);
        P4ObjectOutput out = call.getOutputStream();
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getInvalidSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public long getInvalidSessionsCount(java.lang.String _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        return remoteInterface.getInvalidSessionsCount( _param0);
      } catch (java.lang.ClassCastException rex) {
        Object[] params = new Object[]{_param0};
        Class[] p = new Class[]{java.lang.String.class};
        try { 
          return ((Long) p4_invokeReflect(remote,"getInvalidSessionsCount",params,p)).longValue();
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <getInvalidSessionsCount>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <getInvalidSessionsCount>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(28);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
        long _result = in.readLong();
        return _result;
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <getInvalidSessionsCount> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public void registerManagementListener(com.sap.engine.frame.state.ManagementListener _param0)  {

    if (isLocal) {
      java.rmi.Remote remote;
      if (p4remote == null) {
        throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
      } else {
        try {
          remote = p4remote.delegate();
        } catch (java.rmi.NoSuchObjectException nso) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
        }
      }
      try {
        com.sap.engine.services.security.remote.RemoteSecurity remoteInterface = (com.sap.engine.services.security.remote.RemoteSecurity) remote;
        ReplicateOutputStream out1 = p4_getReplicateOutput();
        ReplicateInputStream inn1 = p4_getReplicateInput(out1);
        remoteInterface.registerManagementListener((com.sap.engine.frame.state.ManagementListener) broker.narrow(p4_replicateWithStreams(inn1,out1,_param0),com.sap.engine.frame.state.ManagementListener.class));
        return;
      } catch (java.lang.ClassCastException rex) {
        ReplicateOutputStream outt = p4_getReplicateOutput();
        ReplicateInputStream inn = p4_getReplicateInput(outt);
        Object[] params = new Object[]{p4_replicateWithStreams(inn,outt,_param0)};
        Class[] p = new Class[]{(Class) p4_replicateWithStreams(inn,outt,com.sap.engine.frame.state.ManagementListener.class)};
        try { 
          p4_invokeReflect(remote,"registerManagementListener",params,p);
          return ;
        } catch (java.lang.NoSuchMethodException nsme) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
        } catch (java.lang.IllegalAccessException iae) {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
        } catch (java.lang.reflect.InvocationTargetException ite) {
          Throwable target = (Throwable) p4_replicate(ite.getTargetException());
          { 
           throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
          }
        } 
      } catch (java.lang.RuntimeException rex) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getCategory().logT(com.sap.engine.services.rmi_p4.exception.P4ExceptionConstants.SEVERITY_DEBUG, com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation(), "P4 Call exception: Exception in execute <registerManagementListener>");
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + " method <registerManagementListener>" + rex.getMessage());
        throw rex;
      } 
    }
      com.sap.engine.services.rmi_p4.Call call = null;
      try {
        call = p4_newCall(29);
        P4ObjectOutput out = call.getOutputStream();
        out.writeObject( _param0);
        p4_invoke(call);
        P4ObjectInput in = call.getResultStream();
      } catch (java.lang.Exception tr) {
        com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this.getClass() + "method <registerManagementListener> " + tr.getMessage());
         // ex.printStackTrace();
        if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
          throw (RuntimeException)tr;
        } else {
          throw (com.sap.engine.services.rmi_p4.P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
        }
      } finally {
        p4_done(call);
        call.releaseInputStream();
      }
  }



  public byte[] readByteArray(com.sap.engine.services.rmi_p4.P4ObjectInput in, int length){
    byte[] buffer = new byte[length];
    int readed = 0;
    int offset = 0;
    try {
      while (readed != -1 && offset < length) {
        readed = in.read(buffer, offset, length - offset);
        offset += readed;
      }
    } catch (java.io.IOException ioe) {
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().debugT(this + ". Problem while read byte[] from the stream : " + ioe.getMessage());
      com.sap.engine.services.rmi_p4.exception.P4Logger.getLocation().throwing(ioe);
    }
    return buffer;
  }


}
