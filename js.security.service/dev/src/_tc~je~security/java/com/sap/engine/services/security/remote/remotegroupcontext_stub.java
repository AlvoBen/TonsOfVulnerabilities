// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote;



import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  RMIC Generator
* @version 6.30
*/
public class RemoteGroupContext_Stub extends com.sap.engine.services.rmi_p4.StubImpl 
		implements com.sap.engine.services.security.remote.RemoteGroupContext {

	private static final String[] operations = {
			"listGroups()",
			"searchGroups(com.sap.engine.interfaces.security.userstore.context.SearchFilter)",
			"getGroupInfo(java.lang.String)",
			"createGroup(java.lang.String)",
			"deleteGroup(java.lang.String)",
			"addGroupToParent(java.lang.String,java.lang.String)",
			"removeGroupFromParent(java.lang.String,java.lang.String)",
			"getChildGroups(java.lang.String)",
			"getParentGroups(java.lang.String)",
			"addUserToGroup(java.lang.String,java.lang.String)",
			"removeUserFromGroup(java.lang.String,java.lang.String)",
			"getUsersOfGroup(java.lang.String)",
			"getGroupsOfUser(java.lang.String)",
			"listRootGroups()",
			"getSearchFilter()",
			"refresh(java.lang.String)"};

	public String[] p4_getOperations() {
		return operations;
	}

	public com.sap.engine.services.security.remote.RemoteIterator listGroups() throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.listGroups()), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"listGroups",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <listGroups>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <listGroups>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator searchGroups(com.sap.engine.interfaces.security.userstore.context.SearchFilter _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				ReplicateOutputStream out1 = p4_getReplicateOutput();
				ReplicateInputStream inn1 = p4_getReplicateInput(out1);
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.searchGroups((com.sap.engine.interfaces.security.userstore.context.SearchFilter) broker.narrow(p4_replicateWithStreams(inn1,out1,_param0),com.sap.engine.interfaces.security.userstore.context.SearchFilter.class))), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				ReplicateOutputStream outt = p4_getReplicateOutput();
				ReplicateInputStream inn = p4_getReplicateInput(outt);
				Object[] params = new Object[]{p4_replicateWithStreams(inn,outt,_param0)};
				Class[] p = new Class[]{(Class) p4_replicateWithStreams(inn,outt,com.sap.engine.interfaces.security.userstore.context.SearchFilter.class)};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"searchGroups",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <searchGroups>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <searchGroups>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteGroupInfo getGroupInfo(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteGroupInfo) broker.narrow(p4_replicate(remoteInterface.getGroupInfo( _param0)), com.sap.engine.services.security.remote.RemoteGroupInfo.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (com.sap.engine.services.security.remote.RemoteGroupInfo)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getGroupInfo",params,p)),com.sap.engine.services.security.remote.RemoteGroupInfo.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getGroupInfo>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getGroupInfo>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(2);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteGroupInfo _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteGroupInfo)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteGroupInfo) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteGroupInfo.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void createGroup(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.createGroup( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"createGroup",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <createGroup>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <createGroup>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(3);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void deleteGroup(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.deleteGroup( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"deleteGroup",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <deleteGroup>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <deleteGroup>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(4);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void addGroupToParent(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.addGroupToParent( _param0,  _param1);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"addGroupToParent",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <addGroupToParent>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <addGroupToParent>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(5);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void removeGroupFromParent(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.removeGroupFromParent( _param0,  _param1);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"removeGroupFromParent",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <removeGroupFromParent>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <removeGroupFromParent>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(6);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator getChildGroups(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.getChildGroups( _param0)), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getChildGroups",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getChildGroups>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getChildGroups>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(7);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator getParentGroups(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.getParentGroups( _param0)), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getParentGroups",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getParentGroups>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getParentGroups>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(8);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void addUserToGroup(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.addUserToGroup( _param0,  _param1);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"addUserToGroup",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <addUserToGroup>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <addUserToGroup>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(9);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void removeUserFromGroup(java.lang.String _param0, java.lang.String _param1) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.removeUserFromGroup( _param0,  _param1);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"removeUserFromGroup",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <removeUserFromGroup>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <removeUserFromGroup>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(10);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator getUsersOfGroup(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.getUsersOfGroup( _param0)), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getUsersOfGroup",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getUsersOfGroup>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getUsersOfGroup>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(11);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator getGroupsOfUser(java.lang.String _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.getGroupsOfUser( _param0)), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getGroupsOfUser",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getGroupsOfUser>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getGroupsOfUser>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(12);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.services.security.remote.RemoteIterator listRootGroups() throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(p4_replicate(remoteInterface.listRootGroups()), com.sap.engine.services.security.remote.RemoteIterator.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (com.sap.engine.services.security.remote.RemoteIterator)broker.narrow(p4_replicate(p4_invokeReflect(remote,"listRootGroups",params,p)),com.sap.engine.services.security.remote.RemoteIterator.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <listRootGroups>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <listRootGroups>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(13);
				P4ObjectOutput out = call.getOutputStream();
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.services.security.remote.RemoteIterator _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.services.security.remote.RemoteIterator) broker.narrow(obj,com.sap.engine.services.security.remote.RemoteIterator.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public com.sap.engine.interfaces.security.userstore.context.SearchFilter getSearchFilter()  {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				return (com.sap.engine.interfaces.security.userstore.context.SearchFilter) broker.narrow(p4_replicate(remoteInterface.getSearchFilter()), com.sap.engine.interfaces.security.userstore.context.SearchFilter.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (com.sap.engine.interfaces.security.userstore.context.SearchFilter)broker.narrow(p4_replicate(p4_invokeReflect(remote,"getSearchFilter",params,p)),com.sap.engine.interfaces.security.userstore.context.SearchFilter.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					{ 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getSearchFilter>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(14);
				P4ObjectOutput out = call.getOutputStream();
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					com.sap.engine.interfaces.security.userstore.context.SearchFilter _result;
					obj = in.readObject();
					try {
						 _result = (com.sap.engine.interfaces.security.userstore.context.SearchFilter)obj;
					} catch (ClassCastException ex) {
						 _result = (com.sap.engine.interfaces.security.userstore.context.SearchFilter) broker.narrow(obj,com.sap.engine.interfaces.security.userstore.context.SearchFilter.class);
					}
				return _result;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void refresh(java.lang.String _param0)  {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, null);
			} else {
				try {
					remote = p4remote.delegate();
				} catch (java.rmi.NoSuchObjectException nso) {
					throw (P4RuntimeException) broker.getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Object_is_Disconnected, nso);
				}
			}
			try {
				com.sap.engine.services.security.remote.RemoteGroupContext remoteInterface = (com.sap.engine.services.security.remote.RemoteGroupContext) remote;
				remoteInterface.refresh( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					p4_invokeReflect(remote,"refresh",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					{ 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <refresh>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(15);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


}
