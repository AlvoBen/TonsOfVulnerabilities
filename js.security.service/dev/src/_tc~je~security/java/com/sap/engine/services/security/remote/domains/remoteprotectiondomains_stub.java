// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote.domains;

import java.rmi.server.Operation;


import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  RMIC Generator
* @version 6.30
*/
public class RemoteProtectionDomains_Stub  extends com.sap.engine.services.rmi_p4.StubBase 
		implements com.sap.engine.services.security.remote.domains.RemoteProtectionDomains {

	private static final Operation[] operations = {
			new Operation("getPermissions(java.lang.String)"),
			new Operation("clearPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"),
			new Operation("getDomainsNames()"),
			new Operation("getAllKnownPermissions()"),
			new Operation("addKnownPermission(java.lang.String,java.lang.String[],java.lang.String[])"),
			new Operation("removeKnownPermission(java.lang.String,java.lang.String[],java.lang.String[])"),
			new Operation("grantPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"),
			new Operation("getInheritedPermissions(java.lang.String)"),
			new Operation("getGrantedPermissions(java.lang.String)"),
			new Operation("getDeniedPermissions(java.lang.String)")};

	public Operation[] getOperations() {
		return operations;
	}

	public java.util.Vector getPermissions(java.lang.String _param0) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getPermissions(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getPermissions>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (java.util.Vector) broker.narrow(replicate(remoteInterface.getPermissions( _param0)), java.util.Vector.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (java.util.Vector)broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getPermissions",params,p)),java.util.Vector.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getPermissions>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getPermissions>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.util.Vector _result;
					obj = in.readObject();
					try {
						 _result = (java.util.Vector)obj;
					} catch (ClassCastException ex) {
						 _result = (java.util.Vector) broker.narrow(obj,java.util.Vector.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void clearPermission(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2, java.lang.String _param3) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("clearPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <clearPermission>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.clearPermission( _param0,  _param1,  _param2,  _param3);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1,_param2,_param3};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class};
				try { 
					invokeReflect(p4remote.delegate(),"clearPermission",params,p);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <clearPermission>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <clearPermission>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				out.writeObject( _param3);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public java.lang.String[] getDomainsNames() throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getDomainsNames()");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getDomainsNames>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return remoteInterface.getDomainsNames();
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (java.lang.String[])broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getDomainsNames",params,p)),java.lang.String[].class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getDomainsNames>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getDomainsNames>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(2);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.lang.String[] _result;
					obj = in.readObject();
					try {
						 _result = (java.lang.String[])obj;
					} catch (ClassCastException ex) {
						 _result = (java.lang.String[]) broker.narrow(obj,java.lang.String[].class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public java.util.Vector getAllKnownPermissions() throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getAllKnownPermissions()");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getAllKnownPermissions>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (java.util.Vector) broker.narrow(replicate(remoteInterface.getAllKnownPermissions()), java.util.Vector.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{};
				Class[] p = new Class[]{};
				try { 
					return (java.util.Vector)broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getAllKnownPermissions",params,p)),java.util.Vector.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getAllKnownPermissions>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getAllKnownPermissions>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(3);
				P4ObjectOutput out = call.getOutputStream();
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.util.Vector _result;
					obj = in.readObject();
					try {
						 _result = (java.util.Vector)obj;
					} catch (ClassCastException ex) {
						 _result = (java.util.Vector) broker.narrow(obj,java.util.Vector.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void addKnownPermission(java.lang.String _param0, java.lang.String[] _param1, java.lang.String[] _param2) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("addKnownPermission(java.lang.String,java.lang.String[],java.lang.String[])");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <addKnownPermission>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.addKnownPermission( _param0,  _param1,  _param2);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,replicate(_param1),replicate(_param2)};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String[].class,java.lang.String[].class};
				try { 
					invokeReflect(p4remote.delegate(),"addKnownPermission",params,p);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <addKnownPermission>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <addKnownPermission>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(4);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void removeKnownPermission(java.lang.String _param0, java.lang.String[] _param1, java.lang.String[] _param2) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("removeKnownPermission(java.lang.String,java.lang.String[],java.lang.String[])");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <removeKnownPermission>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.removeKnownPermission( _param0,  _param1,  _param2);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,replicate(_param1),replicate(_param2)};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String[].class,java.lang.String[].class};
				try { 
					invokeReflect(p4remote.delegate(),"removeKnownPermission",params,p);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <removeKnownPermission>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <removeKnownPermission>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(5);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void grantPermission(java.lang.String _param0, java.lang.String _param1, java.lang.String _param2, java.lang.String _param3) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("grantPermission(java.lang.String,java.lang.String,java.lang.String,java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <grantPermission>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				remoteInterface.grantPermission( _param0,  _param1,  _param2,  _param3);
				return;
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0,_param1,_param2,_param3};
				Class[] p = new Class[]{java.lang.String.class,java.lang.String.class,java.lang.String.class,java.lang.String.class};
				try { 
					invokeReflect(p4remote.delegate(),"grantPermission",params,p);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <grantPermission>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <grantPermission>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(6);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				out.writeObject( _param3);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public java.util.Vector getInheritedPermissions(java.lang.String _param0) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getInheritedPermissions(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getInheritedPermissions>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (java.util.Vector) broker.narrow(replicate(remoteInterface.getInheritedPermissions( _param0)), java.util.Vector.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (java.util.Vector)broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getInheritedPermissions",params,p)),java.util.Vector.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getInheritedPermissions>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getInheritedPermissions>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(7);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.util.Vector _result;
					obj = in.readObject();
					try {
						 _result = (java.util.Vector)obj;
					} catch (ClassCastException ex) {
						 _result = (java.util.Vector) broker.narrow(obj,java.util.Vector.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public java.util.Vector getGrantedPermissions(java.lang.String _param0) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getGrantedPermissions(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getGrantedPermissions>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (java.util.Vector) broker.narrow(replicate(remoteInterface.getGrantedPermissions( _param0)), java.util.Vector.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (java.util.Vector)broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getGrantedPermissions",params,p)),java.util.Vector.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getGrantedPermissions>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getGrantedPermissions>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(8);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.util.Vector _result;
					obj = in.readObject();
					try {
						 _result = (java.util.Vector)obj;
					} catch (ClassCastException ex) {
						 _result = (java.util.Vector) broker.narrow(obj,java.util.Vector.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public java.util.Vector getDeniedPermissions(java.lang.String _param0) throws java.rmi.RemoteException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.domains.RemoteProtectionDomains remoteInterface = (com.sap.engine.services.security.remote.domains.RemoteProtectionDomains) p4remote.delegate();
				try{
					p4remote.checkPermission("getDeniedPermissions(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <getDeniedPermissions>", broker.debug);
					broker.log(sex, broker.debug);
					throw new java.rmi.RemoteException("Security Exception", sex);
				}
				return (java.util.Vector) broker.narrow(replicate(remoteInterface.getDeniedPermissions( _param0)), java.util.Vector.class);
			} catch (java.lang.ClassCastException rex) {
				Object[] params = new Object[]{_param0};
				Class[] p = new Class[]{java.lang.String.class};
				try { 
					return (java.util.Vector)broker.narrow(replicate(invokeReflect(p4remote.delegate(),"getDeniedPermissions",params,p)),java.util.Vector.class);
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable)replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget,ite.getTargetException());
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <getDeniedPermissions>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <getDeniedPermissions>", broker.debug);
				broker.log(ex, broker.debug);
				throw (java.rmi.RemoteException) replicate(ex);
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(9);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
					Object obj;
					java.util.Vector _result;
					obj = in.readObject();
					try {
						 _result = (java.util.Vector)obj;
					} catch (ClassCastException ex) {
						 _result = (java.util.Vector) broker.narrow(obj,java.util.Vector.class);
					}
				return _result;
			} catch (java.rmi.RemoteException ex) {
				throw (java.rmi.RemoteException) ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


}
