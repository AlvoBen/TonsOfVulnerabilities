// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.security.remote;

import java.rmi.server.Operation;


import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  RMIC Generator
* @version 6.30
*/
public class UserStoreListenerCallback_Stub  extends com.sap.engine.services.rmi_p4.StubBase 
		implements com.sap.engine.services.security.remote.UserStoreListenerCallback {

	private static final Operation[] operations = {
			new Operation("userStoreRegistered(java.lang.String)"),
			new Operation("userStoreUnregistered(java.lang.String)"),
			new Operation("userStoreActivated(java.lang.String)")};

	public Operation[] getOperations() {
		return operations;
	}

	public void userStoreRegistered(java.lang.String _param0) throws java.lang.SecurityException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.UserStoreListenerCallback remoteInterface = (com.sap.engine.services.security.remote.UserStoreListenerCallback) p4remote.getDelegate();
				try{
					p4remote.checkPermission("userStoreRegistered(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <userStoreRegistered>", broker.debug);
					broker.log(sex, broker.debug);
					throw sex;
				}
				remoteInterface.userStoreRegistered( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreRegistered>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreRegistered>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void userStoreUnregistered(java.lang.String _param0) throws java.lang.SecurityException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.UserStoreListenerCallback remoteInterface = (com.sap.engine.services.security.remote.UserStoreListenerCallback) p4remote.getDelegate();
				try{
					p4remote.checkPermission("userStoreUnregistered(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <userStoreUnregistered>", broker.debug);
					broker.log(sex, broker.debug);
					throw sex;
				}
				remoteInterface.userStoreUnregistered( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreUnregistered>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreUnregistered>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


	public void userStoreActivated(java.lang.String _param0) throws java.lang.SecurityException {

		Object state = null;
		if (isLocal) {
			try {
				com.sap.engine.services.security.remote.UserStoreListenerCallback remoteInterface = (com.sap.engine.services.security.remote.UserStoreListenerCallback) p4remote.getDelegate();
				try{
					p4remote.checkPermission("userStoreActivated(java.lang.String)");
				} catch (SecurityException sex) {
					broker.log("P4 Call exception: Exception in execute <userStoreActivated>", broker.debug);
					broker.log(sex, broker.debug);
					throw sex;
				}
				remoteInterface.userStoreActivated( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreActivated>", broker.debug);
				broker.log(rex, broker.debug);
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <userStoreActivated>", broker.debug);
				broker.log(rex, broker.debug);
					throw rex;
			}
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = newCall(2);
				P4ObjectOutput out = call.getOutputStream();
				out.writeObject( _param0);
				invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				done(call);
				call.releaseInputStream();
			}
	}


}
