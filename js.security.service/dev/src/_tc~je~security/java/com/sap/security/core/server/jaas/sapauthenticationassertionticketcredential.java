package com.sap.security.core.server.jaas;

import com.sap.engine.interfaces.security.auth.AuthenticationTraces;
import com.sap.tc.logging.Location;

/**
 * Credential wrapper for the SAP Authentication Assertion Ticket.
 *
 * @author Svetlana Stancheva
 * @version 6.40
 */
public class SAPAuthenticationAssertionTicketCredential extends SAPLogonTicketCredential {

  private static final Location LOCATION = Location.getLocation(AuthenticationTraces.LOGIN_MODULES_TICKET_LOCATION);
  
  /** <p> object identifier for SAPAuthenticationAssertionTicket:
   * "1.3.6.1.4.1.694.2.1.3"</p>
   * the gss specification does not specify which String
   * representation to take, alternative would be
   * {1 3 6 1 4 1 694 2 1 3} */
  // 1.3.6.1.4.1.694 (namespace reserved by SAP) 2 (security) 1 (gss)
  // Martin Rex coordinates the security brunch
  private static String OID = "1.3.6.1.4.1.694.2.1.3.1";

  /** SAP Logon Ticket of the user **/
  private String assertionTicket;

  public SAPAuthenticationAssertionTicketCredential(String ticket, String name){
    super(ticket, name);
  	assertionTicket = ticket;
  }

  /** returns the object identifier of the SAP Authentication Assertion Ticket mechanism */
  public String getMechType(){
  	return OID;
  }

  /** compares the two SAP Assertion Tickets */
  public boolean equals(Object ticketCredential) {
  	// check if object is of the right class
  	if (!(ticketCredential instanceof SAPAuthenticationAssertionTicketCredential)) {
  		return false;
  	}
  	
    String otherAssertionTicket = ((SAPAuthenticationAssertionTicketCredential) ticketCredential).getTicketString();
    
    // check if credential data is the same
    // using equals method of java.lang.String
    if (otherAssertionTicket.equals(assertionTicket)) {
      return true;
    }
   
    return false;
  }

  /** Returns the hash code of the SAP Authentication Assertion Ticket. */
  public int hashCode(){
  	// return hash code generated by hashCode() of java.lang.String
  	return assertionTicket.hashCode();
  }

}
