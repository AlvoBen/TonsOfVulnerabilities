

  /*
This file is generated by Code Generator
to wrap datatypes of attributes of CIMClass SAP_ITSAMJ2eeLicensingManagementService
WARNING:DO NOT CHANGE THE CODE MANUALLY. 
*/
package com.sap.engine.services.licensing.itsam;

import java.util.Date;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.ObjectName;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.openmbean.*;

  public class SAP_ITSAMJ2eeLicensingManagementServiceWrapper implements DynamicMBean    {   
 
 /* The wrapped object to be exposed as MBean */  
  private SAP_ITSAMJ2eeLicensingManagementService mbean;
  
  /* MBeanInfo */
  private static final MBeanInfo mbeanInfo;
  
 /* Initialize MBeanInfo */
  static {
    // attributes
    
       MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[11]; 
    
		  	
   
		     attributeInfo[ 0]		     
		      = new MBeanAttributeInfo("SystemId",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 1]		     
		      = new MBeanAttributeInfo("SystemType",	 					
	 					"java.lang.String","Description:",true,true,false);                               
        	  	
   
		     attributeInfo[ 2]		     
		      = new MBeanAttributeInfo("SystemNumber",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 3]		     
		      = new MBeanAttributeInfo("SystemTypes",	 					
	 					"[Ljava.lang.String;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 4]		     
		      = new MBeanAttributeInfo("InstallationNumber",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 5]		     
		      = new MBeanAttributeInfo("HardwareId",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 6]		     
		      = new MBeanAttributeInfo("Licenses",	 					
	 					"[Ljavax.management.openmbean.CompositeData;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 7]		     
		      = new MBeanAttributeInfo("SapStorageVendorId",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 8]		     
		      = new MBeanAttributeInfo("Caption",	 					
	 					"java.lang.String","Description:The Caption property is a short textual description (one- line string) of the object.",true,false,false);                               
        	  	
   
		     attributeInfo[ 9]		     
		      = new MBeanAttributeInfo("Description",	 					
	 					"java.lang.String","Description:The Description property provides a textual description of the object.",true,false,false);                               
        	  	
   
		     attributeInfo[ 10]		     
		      = new MBeanAttributeInfo("ElementName",	 					
	 					"java.lang.String","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.",true,false,false);                               
        
// operations
MBeanParameterInfo[] signature;
MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[4];

	
// for method installLicense
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("fileName", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("fileContent", "[B","Description:");
operationInfo[0] = new MBeanOperationInfo("installLicense", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method deleteLicense
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("systemID", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("hardwareID", "java.lang.String","Description:");
signature[2] = new MBeanParameterInfo("softwareProduct", "java.lang.String","Description:");
operationInfo[1] = new MBeanOperationInfo("deleteLicense", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method extendLicense
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("softwareProduct", "java.lang.String","Description:");
operationInfo[2] = new MBeanOperationInfo("extendLicense", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method checkLicense
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("softwareProduct", "java.lang.String","Description:");
operationInfo[3] = new MBeanOperationInfo("checkLicense", "Description:", signature, "boolean", MBeanOperationInfo.UNKNOWN);




mbeanInfo = new MBeanInfo("SAP_ITSAMJ2eeLicensingManagementService", "SAP_ITSAMJ2eeLicensingManagementService MBean", attributeInfo, null, operationInfo , null);

  }


	 /*
	  * Wraps given SAP_ITSAMJ2eeLicensingManagementService and provides a javax.management.DynamicMBean interface on top
   */
       public  SAP_ITSAMJ2eeLicensingManagementServiceWrapper(SAP_ITSAMJ2eeLicensingManagementService mbean){
              this.mbean = mbean;
       }
       
    /*
	  * Creates an empty wrapper for SAP_ITSAMJ2eeLicensingManagementService
   */
    public SAP_ITSAMJ2eeLicensingManagementServiceWrapper() 
		{
		}
			  /*
   * Sets a new SAP_ITSAMJ2eeLicensingManagementService to be wrapped and returns the old one
   */
  public SAP_ITSAMJ2eeLicensingManagementService setManagedObject(SAP_ITSAMJ2eeLicensingManagementService mbean) {
    SAP_ITSAMJ2eeLicensingManagementService old = this.mbean;
    this.mbean = mbean;
    return old;
  }

  /*
   * Returns the currently wrapped SAP_ITSAMJ2eeLicensingManagementService
   */
  public SAP_ITSAMJ2eeLicensingManagementService getManagedObject() {
    return this.mbean;
  }
		
		
    /*
   * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
   */
      public AttributeList getAttributes(String[] attributes) {
      
     AttributeList list = new AttributeList();
//		Check attributeNames to avoid NullPointerException later on
		 if (attributes == null) {
			 throw new RuntimeOperationsException(
				 new IllegalArgumentException(
					 "attributeNames[] cannot be null"),
				 "Cannot invoke a getter of SAP_ITSAMShortDumpManagementService");
		 }
//		if attributeNames is empty, return an empty result list
		 if (attributes.length == 0)
				 return list;

          if(attributes != null)
            {
                for (int i = 0; i < attributes.length; i++)
                {
                    String attribute = attributes[i];
                    try
                    {
                        Object result = getAttribute(attribute);
                        list.add(new Attribute(attribute, result));
                    }
                    catch (AttributeNotFoundException ignored)
                    {
                    //$JL-EXC$
                    }
                    catch (MBeanException ignored)
                    {
                    //$JL-EXC$
                    }
                    catch (ReflectionException ignored)
                    {
                    //$JL-EXC$
                    }
                }
    
            }
            return list;
	   }


 /**
  * @see javax.management.DynamicMBean#setAttributes(javax.management.AttributeList)
  */
	  public AttributeList setAttributes(AttributeList attributes) {
		//		Check attributesto avoid NullPointerException later on
		 if (attributes == null) {
			 throw new RuntimeOperationsException(
				 new IllegalArgumentException(
					 "AttributeList attributes cannot be null"),
				 "Cannot invoke a setter of SAP_ITSAMShortDumpManagementService" );
		 }
		
		AttributeList list = new AttributeList();
		
//		if attributeNames is empty, nothing more to do
		 if (attributes.isEmpty())
			 return list;
	            if (attributes != null)
		            {
		                for (int i = 0; i < attributes.size(); ++i)
		                {
		                    Attribute attribute = (Attribute) attributes.get(i);
		                    try
		                    {
		                        setAttribute(attribute);
		                        list.add(attribute);
		                    }
		                    catch (AttributeNotFoundException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (InvalidAttributeValueException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (MBeanException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (ReflectionException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                }
		            }
		    
		            return list;
	  }
    
     /**
   * @see javax.management.DynamicMBean#getMBeanInfo()
   */
	public MBeanInfo getMBeanInfo() {
     return mbeanInfo;
	  }   
    
 /**
   * @see javax.management.DynamicMBean\#setAttribute(javax.management.Attribute)
   */    
    public void setAttribute(Attribute attr) throws AttributeNotFoundException, InvalidAttributeValueException,
      MBeanException, ReflectionException {
      String name = attr.getName();
          
				if(name.equalsIgnoreCase( "SystemType"))
                    
        mbean.setSystemType((String) attr.getValue());
	        
         }             
  
   /**
   * @see javax.management.DynamicMBean#invoke(java.lang.String, java.lang.Object[], java.lang.String[])
   */
     public Object invoke(String operationName, Object param[], String signature[])
    throws MBeanException, ReflectionException {
     if (operationName == null) {
        throw new RuntimeOperationsException(
            new IllegalArgumentException(
                "Operation name cannot be null"),
            "Cannot invoke a null operation in " + "SAP_ITSAMJ2eeLicensingManagementService");
            }
            
            if(operationName.equalsIgnoreCase("installLicense") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && (signature[1].equals("[B")))
            {
            mbean.installLicense((String) param[0] , (byte[]) param[1]
			);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("deleteLicense") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && (signature[1].equals("java.lang.String") || signature[1].equalsIgnoreCase("string")) && (signature[2].equals("java.lang.String") || signature[2].equalsIgnoreCase("string")))
            {
            mbean.deleteLicense((String) param[0] , (String) param[1] , (String) param[2]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("extendLicense") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.extendLicense((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("checkLicense") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            return new Boolean(mbean.checkLicense((String) param[0]));
			
            }
            
            else { 
        // unrecognized operation name:
        throw new ReflectionException(
            new NoSuchMethodException(operationName), 
            "Cannot find the operation " + operationName +
                " in " + "SAP_ITSAMJ2eeLicensingManagementService");
    }
  }
   
     /*
   * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
   */
public Object getAttribute(String arg0 ) throws AttributeNotFoundException, MBeanException,   ReflectionException {
             if (arg0 == null) 
  throw new RuntimeOperationsException(
	 new IllegalArgumentException("Attribute name cannot be null"), 
	 "Cannot invoke a getter of " + "SAP_ITSAMJ2eeLicensingManagementService" +
		 " with null attribute name");  
		     
            if(arg0.equalsIgnoreCase("SystemId"))
	   	    return mbean.getSystemId();
					    
            if(arg0.equalsIgnoreCase("SystemType"))
	   	    return mbean.getSystemType();
					    
            if(arg0.equalsIgnoreCase("SystemNumber"))
	   	    return mbean.getSystemNumber();
					    
            if(arg0.equalsIgnoreCase("SystemTypes"))
	   	    return mbean.getSystemTypes();
					    
            if(arg0.equalsIgnoreCase("InstallationNumber"))
	   	    return mbean.getInstallationNumber();
					    
            if(arg0.equalsIgnoreCase("HardwareId"))
	   	    return mbean.getHardwareId();
					    if(arg0.equalsIgnoreCase("Licenses"))
	    	     try{
            return getCDataArrForSAP_ITSAMJ2eeLicense(mbean.getLicenses());} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}  
            if(arg0.equalsIgnoreCase("SapStorageVendorId"))
	   	    return mbean.getSapStorageVendorId();
					    
            if(arg0.equalsIgnoreCase("Caption"))
	   	    return mbean.getCaption();
					    
            if(arg0.equalsIgnoreCase("Description"))
	   	    return mbean.getDescription();
					    
            if(arg0.equalsIgnoreCase("ElementName"))
	   	    return mbean.getElementName();
					    
     else {
           throw(new AttributeNotFoundException("Cannot find " + arg0+ " attribute"));
             }
             
            
  }
 
// Conversion methods for CompositeData type Class SAP_ITSAMJ2eeHardwareEntry 
  public static CompositeData getCDataForSAP_ITSAMJ2eeHardwareEntry(com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"Host","HardwareId","Caption","Description","ElementName"};
					 Object[] attrobj={metric.getHost(),metric.getHardwareId(),metric.getCaption(),metric.getDescription(),metric.getElementName()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJ2eeHardwareEntry(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry getSAP_ITSAMJ2eeHardwareEntryForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry result = new com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry((String) data.get("Host"),(String) data.get("HardwareId"),(String) data.get("Caption"),(String) data.get("Description"),(String) data.get("ElementName"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJ2eeHardwareEntry() throws OpenDataException
		 {
		 				 String[] itemNames={"Host","HardwareId","Caption","Description","ElementName"};
                	String[] itemDescriptions={"Description:","Description:","Description:The Caption property is a short textual description (one- line string) of the object.","Description:The Description property provides a textual description of the object.","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJ2eeHardwareEntry","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry[] getSAP_ITSAMJ2eeHardwareEntryArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry[] arr = new com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJ2eeHardwareEntryForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJ2eeHardwareEntry(com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeHardwareEntry[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJ2eeHardwareEntry(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJ2eeLicense 
  public static CompositeData getCDataForSAP_ITSAMJ2eeLicense(com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"Status","SystemId","SystemNumber","SoftwareProduct","HardwareId","BeginDate","ExpirationDate","Type","Limit","InstallationNumber","RemoteHardwareEntries","Extensible","Caption","Description","ElementName"};
					 Object[] attrobj={metric.getStatus(),metric.getSystemId(),metric.getSystemNumber(),metric.getSoftwareProduct(),metric.getHardwareId(),metric.getBeginDate(),metric.getExpirationDate(),metric.getType(),metric.getLimit(),metric.getInstallationNumber(),getCDataArrForSAP_ITSAMJ2eeHardwareEntry(metric.getRemoteHardwareEntries()),new Boolean(metric.getExtensible()),metric.getCaption(),metric.getDescription(),metric.getElementName()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJ2eeLicense(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense getSAP_ITSAMJ2eeLicenseForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense result = new com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense((String) data.get("Status"),(String) data.get("SystemId"),(String) data.get("SystemNumber"),(String) data.get("SoftwareProduct"),(String) data.get("HardwareId"),(String) data.get("BeginDate"),(String) data.get("ExpirationDate"),(String) data.get("Type"),(String) data.get("Limit"),(String) data.get("InstallationNumber"),getSAP_ITSAMJ2eeHardwareEntryArrForCData((CompositeData[])data.get("RemoteHardwareEntries")),data.get("Extensible")==null? false : ((Boolean) data.get("Extensible")).booleanValue(),(String) data.get("Caption"),(String) data.get("Description"),(String) data.get("ElementName"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJ2eeLicense() throws OpenDataException
		 {
		 				 String[] itemNames={"Status","SystemId","SystemNumber","SoftwareProduct","HardwareId","BeginDate","ExpirationDate","Type","Limit","InstallationNumber","RemoteHardwareEntries","Extensible","Caption","Description","ElementName"};
                	String[] itemDescriptions={"Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:The Caption property is a short textual description (one- line string) of the object.","Description:The Description property provides a textual description of the object.","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMJ2eeHardwareEntry()),SimpleType.BOOLEAN,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJ2eeLicense","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense[] getSAP_ITSAMJ2eeLicenseArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense[] arr = new com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJ2eeLicenseForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJ2eeLicense(com.sap.engine.services.licensing.itsam.cd.SAP_ITSAMJ2eeLicense[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJ2eeLicense(crr[i]);
     	return cd;
					 }
     }

}
 