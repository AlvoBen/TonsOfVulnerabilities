
/*
This file is generated by Code Generator
for CIMClass SAP_ITSAMI18NService
*/

package com.sap.i18n.itsam;	

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.TimeZone;

import javax.management.ObjectName;

import com.sap.engine.frame.core.configuration.ConfigurationException;
import com.sap.i18n.cache.BackendDO;
import com.sap.i18n.cache.BackendDataCache;
import com.sap.i18n.cache.BackendDataCacheFactory;
import com.sap.i18n.cache.SAPCountryFormatRow;
import com.sap.i18n.cache.SAPIslamicCalendarInfo;
import com.sap.i18n.cache.SAPLanguageRow;
import com.sap.i18n.cache.SAPIslamicCalendarInfo.TISLCAL_Entry;
import com.sap.i18n.calendar.CalConfigCMBridge;
import com.sap.i18n.calendar.CalConfigR3Bridge;
import com.sap.i18n.countryformat.CountryFormatCMBridge;
import com.sap.i18n.countryformat.CountryFormatR3Bridge;
import com.sap.i18n.cpbase.LangUtil;
import com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPCalConfig;
import com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPCountryFormat;
import com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPLanguage;
import com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPTimeZone;
import com.sap.i18n.language.SAPLanguageCMBridge;
import com.sap.i18n.language.SAPLanguageR3Bridge;
import com.sap.i18n.saptimezone.SAPTimeZoneCMBridge;
import com.sap.i18n.saptimezone.SAPTimeZoneR3Bridge;
import com.sap.i18n.service.I18NConfigMngBridge;
import com.sap.i18n.service.I18NR3BridgeIntf;
import com.sap.i18n.service.I18NSyncFrame;
import com.sap.i18n.timezone.SAPTimeZone;
import com.sap.tc.logging.Category;
import com.sap.tc.logging.Location;
import com.sap.tc.logging.Severity;

/*
 * A CIM_Service is a Logical Element that contains the information necessary to
 * represent and manage the functionality provided by a Device and/or
 * SoftwareFeature. A Service is a general-purpose object to configure and
 * manage the implementation of functionality. It is not the functionality
 * itself.
 * 
 * @version 3.3
 */

public class SAP_ITSAMI18NService_Impl implements SAP_ITSAMI18NService {
	
	private final static Location m_oLoc = Location
			.getLocation("com.sap.i18n.itsam.SAP_ITSAMI18NService_Impl");

	private final static Category m_oLog = Category.SYS_SERVER;

	private static SimpleDateFormat m_sTimeFormat = new SimpleDateFormat(
			"HH:mm");

	public com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPTimeZone[] showSAPTimeZone() {
		String[] tzIDs = null;
		/* if data is available */
		if (SAPTimeZone.isABAPInfoAvaliable()) {
			/* read SAP-time-zoned-id */
			tzIDs = SAPTimeZone.getAvailableIDs();
		}
		if (tzIDs == null) {
			/* returns empty list */
			return new SAP_ITSAMSAPTimeZone[0];
		}
		/* re-sort the list of ids by rowoffset */
		TimeZone[] sortedTZs = sortList(tzIDs);
		SAP_ITSAMSAPTimeZone[] sapTZs = new SAP_ITSAMSAPTimeZone[tzIDs.length];
		for (int i = 0; i < sortedTZs.length; i++) {
			TimeZone tz = sortedTZs[i];// SAPTimeZone.getTimeZone(tzID);
			String utcdiffasStirng = formatTime(tz.getRawOffset());
			int nDST = tz.getDSTSavings();
			String DSTasString = "none";
			if (nDST != 0) {
				DSTasString = "+" + formatTime(nDST);
			}
			SAP_ITSAMSAPTimeZone saptz = new SAP_ITSAMSAPTimeZone(tz.getID(),
					DSTasString, tz.getDisplayName(), "(UTC+" + utcdiffasStirng
							+ ")");
			sapTZs[i] = saptz;
		}
		return sapTZs;
	}

	public com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPCalConfig[] showSAPCalConfig() {
		if (BackendDataCacheFactory.getCacheIslamicCalendar().isAvailable()) {

			BackendDO.Table tableTislcal = BackendDataCacheFactory.getCacheIslamicCalendar().getTable(TISLCAL_Entry.PROPERTIES);
			int iNum = tableTislcal.size();
			SAP_ITSAMSAPCalConfig[] entries = new SAP_ITSAMSAPCalConfig[iNum];
			for (int i=0; i < iNum; i++) {
				BackendDO.Row row = tableTislcal.get(i);
				SAP_ITSAMSAPCalConfig entry = new SAP_ITSAMSAPCalConfig(
						((SAPIslamicCalendarInfo.TISLCAL_Entry)row).get(TISLCAL_Entry.TABLETYPE),
						((SAPIslamicCalendarInfo.TISLCAL_Entry)row).getIslDateFormatted(),
						((SAPIslamicCalendarInfo.TISLCAL_Entry)row).getGregDateFormatted());
				entries[i] = entry;
			}
			
			return entries;
		}
		return new SAP_ITSAMSAPCalConfig[0];
	}

	/*
	 * refresh backend data
	 */
	
	public void refreshSAPLanguage(InputStream inputStream) {
		refresh(SAPLanguageCMBridge.getInstance(), SAPLanguageR3Bridge.getInstance(), inputStream);
	}

	public void refreshCalConfig(InputStream inputStream) {
		refresh(CalConfigCMBridge.getInstance(), CalConfigR3Bridge.getInstance(), inputStream);
	}

	public void refreshSAPTimeZone(InputStream inputStream) {
		refresh(SAPTimeZoneCMBridge.getInstance(), SAPTimeZoneR3Bridge.getInstance(), inputStream);
	}
	
	public void refreshCountryFormat(InputStream inputStream) {
		refresh(CountryFormatCMBridge.getInstance(), CountryFormatR3Bridge.getInstance(), inputStream);
	}
	
	private void refresh(I18NConfigMngBridge bridge2CfgMng, I18NR3BridgeIntf r3Bridge, InputStream inputStream) {
		try {
			/* delete old data from the sub-configuration */
			bridge2CfgMng.deleteConfiguration();
			I18NSyncFrame.initialData(bridge2CfgMng, CountryFormatR3Bridge.getInstance(), inputStream);

		} catch (ConfigurationException cfgexception) {
			m_oLog.warningT(m_oLoc, getLogWarning("Backend info")
					+ cfgexception.getMessage());
			m_oLoc.traceThrowableT(Severity.WARNING,
					getLocMessage("Backend info"), cfgexception);
		}
	}
	
	public void initDataFromFile(InputStream dataFromFile) {
		I18NSyncFrame.initDataFromFile(dataFromFile);
	}

	public com.sap.i18n.itsam.compositedata.SAP_ITSAMSAPLanguage[] showSAPLanguage() {
		SAP_ITSAMSAPLanguage[] sapLangs;
		String spras;
		String laiso;
		String iso2;
		String country;
		boolean dfltlang;
		String langtext;
		if (LangUtil.isSAPLanguagesAvailable()) {
			BackendDO langDO = BackendDataCacheFactory.getCacheLanguage().getRawData();
			BackendDO.Table table = langDO.getTable(SAPLanguageRow.PROPERTIES);
			int amountRows = table.size();
			sapLangs = new SAP_ITSAMSAPLanguage[amountRows];
			for (int i = 0; i < amountRows; i++) {
				SAPLanguageRow row = (SAPLanguageRow)table.get(i);
				spras = row.get(SAPLanguageRow.SPRAS);
				laiso = row.get(SAPLanguageRow.LAISO);
				country = row.get(SAPLanguageRow.COUNTRY);
				iso2 = row.get(SAPLanguageRow.ISO2);
				dfltlang = ("X".equals((String) row.get(4))) ? true : false;
				langtext = (String) row.get(5);
				SAP_ITSAMSAPLanguage saplang = new SAP_ITSAMSAPLanguage(
						country, iso2, laiso + " (" + langtext + ")", spras,
						dfltlang, langtext);
				sapLangs[i] = saplang;
			}
		} else
			sapLangs = new SAP_ITSAMSAPLanguage[0];
		return sapLangs;
	}

	public SAP_ITSAMSAPCountryFormat[] showCountryFormat() {
		SAP_ITSAMSAPCountryFormat[] sapCountryFormatMapping;
		
		String land;
		String xdezp;
		String datfm;
		String timefm;
		
		BackendDataCache cache = BackendDataCacheFactory.getCacheCountryFormat();
		if (cache.isAvailable()) {
			BackendDO langDO = cache.getRawData();
			BackendDO.Table table = langDO.getTable(SAPCountryFormatRow.PROPERTIES);
			int amountRows = table.size();
			sapCountryFormatMapping = new SAP_ITSAMSAPCountryFormat[amountRows];
			for (int i = 0; i < amountRows; i++) {
				SAPCountryFormatRow row = (SAPCountryFormatRow)table.get(i);
				land = row.get(SAPCountryFormatRow.LAND);
				xdezp = row.get(SAPCountryFormatRow.XDEZP);
				datfm = row.get(SAPCountryFormatRow.DATFM);
				timefm = row.get(SAPCountryFormatRow.TIMEFM);
				SAP_ITSAMSAPCountryFormat bean = new SAP_ITSAMSAPCountryFormat(land, xdezp, datfm, timefm);
				sapCountryFormatMapping[i] = bean;
			}
		} else
			sapCountryFormatMapping = new SAP_ITSAMSAPCountryFormat[0];
		return sapCountryFormatMapping;
	}
	
	

	public ObjectName RequestStateChange(short RequestedState,
			Date TimeoutPeriod) {
		// Generated Code. Implementation to be done here.
		return null;
	}

	private String getLogWarning(String data) {
		return "The refresh of "
				+ data
				+ " in the Configuration Manager failed due to a ConfigurationException. ExceptionMessage: ";
	}

	private String getLocMessage(String data) {
		return "Refresh of " + data + " failed. Error caused by: ";
	}

	private String formatTime(int time) {
		TimeZone localtz = TimeZone.getDefault();
		int utcdifflocal = localtz.getOffset(time);
		if (time < 0) {
			int abs_time = Math.abs(time);
			Date date = new Date(abs_time - utcdifflocal);
			return "-" + m_sTimeFormat.format(date);
		} else
			return m_sTimeFormat.format(new Date(time - utcdifflocal));
	}

	private TimeZone[] sortList(String[] ids) {
		int listlength = ids.length;
		TimeZone[] sortedTimeZoneList = new TimeZone[listlength];
		for (int i = 0; i < listlength; i++) {
			sortedTimeZoneList[i] = SAPTimeZone.getTimeZone(ids[i]);
		}
		Arrays.sort(sortedTimeZoneList, new Comparator<TimeZone>() {

			public int compare(TimeZone o1, TimeZone o2) {
				int o1_offset = (o1.getRawOffset() / (1000 * 3600));
				int o2_offset = (o2.getRawOffset() / (1000 * 3600));
				if (o1_offset < 0)
					o1_offset += 36;
				if (o2_offset < 0)
					o2_offset += 36;
				return o1_offset - o2_offset;
			}

		});
		return sortedTimeZoneList;
	}

}