/*
 * Generated by SAP SchemaToJava Generator NW05 on Thu Mar 31 10:07:41 EEST 2005
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.lib.descriptors.persistent;

import java.io.Serializable;

/**
 * Enumeration Java representation.
 * Represents type of namespace {} anonymous with xpath [/xs:schema/xs:complexType[11]/xs:attribute/xs:simpleType]
 */
public class Lock implements Serializable {

  public static final java.lang.String _read = "read";
  public static final java.lang.String _write = "write";

  public static final Lock read = new Lock(_read);
  public static final Lock write = new Lock(_write);

  //  Enumeration Content
  protected java.lang.String _value;

  public Lock(java.lang.String _value) {
    if (_read.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_write.equals(_value)) {
      this._value = _value;
      return;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+_value+"] passed.");
  }

  public java.lang.String getValue() {
    return _value;
  }

  public static Lock fromValue(java.lang.String value) {
    if (_read.equals(value)) {
      return read;
    }
    if (_write.equals(value)) {
      return write;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public static Lock fromString(String value) {
    if ("read".equals(value)) {
      return read;
    }
    if ("write".equals(value)) {
      return write;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public java.lang.String toString() {
    if (_read.equals(_value)) {
      return "read";
    }
    if (_write.equals(_value)) {
      return "write";
    }
    return java.lang.String.valueOf(_value);
  }

  public boolean equals(java.lang.Object obj) {
    if (obj != null) {
      if (obj instanceof Lock) {
        if (_value.equals(((Lock)obj)._value)) {
          return true;
        }
      }
    }
    return false;
  }

  public int hashCode() {
    return this._value.hashCode();
  }

}
