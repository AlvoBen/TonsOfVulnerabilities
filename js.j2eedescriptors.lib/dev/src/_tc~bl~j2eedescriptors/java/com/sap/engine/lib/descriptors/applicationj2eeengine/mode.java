/*
 * Generated by SAP SchemaToJava Generator NW05 on Tue Jul 19 13:29:43 EEST 2005
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.lib.descriptors.applicationj2eeengine;

/**
 * Enumeration Java representation.
 * Represents type of namespace {} anonymous with xpath [/xs:schema/xs:complexType[4]/xs:attribute/xs:simpleType]
 */
public class Mode implements java.io.Serializable {

  public static final java.lang.String _manual = "manual";
  public static final java.lang.String _lazy = "lazy";
  public static final java.lang.String _always = "always";

  public static final Mode manual = new Mode(_manual);
  public static final Mode lazy = new Mode(_lazy);
  public static final Mode always = new Mode(_always);

  //  Enumeration Content
  protected java.lang.String _value;

  public Mode(java.lang.String _value) {
    if (_manual.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_lazy.equals(_value)) {
      this._value = _value;
      return;
    }
    if (_always.equals(_value)) {
      this._value = _value;
      return;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+_value+"] passed.");
  }

  public java.lang.String getValue() {
    return _value;
  }

  public static Mode fromValue(java.lang.String value) {
    if (_manual.equals(value)) {
      return manual;
    }
    if (_lazy.equals(value)) {
      return lazy;
    }
    if (_always.equals(value)) {
      return always;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public static Mode fromString(String value) {
    if ("manual".equals(value)) {
      return manual;
    }
    if ("lazy".equals(value)) {
      return lazy;
    }
    if ("always".equals(value)) {
      return always;
    }
    throw new IllegalArgumentException("Invalid Enumeration value ["+value+"] passed.");
  }

  public java.lang.String toString() {
    if (_manual.equals(_value)) {
      return "manual";
    }
    if (_lazy.equals(_value)) {
      return "lazy";
    }
    if (_always.equals(_value)) {
      return "always";
    }
    return java.lang.String.valueOf(_value);
  }

  public boolean equals(java.lang.Object obj) {
    if (obj != null) {
      if (obj instanceof Mode) {
        if (_value.equals(((Mode)obj)._value)) {
          return true;
        }
      }
    }
    return false;
  }

  public int hashCode() {
    return this._value.hashCode();
  }

}
