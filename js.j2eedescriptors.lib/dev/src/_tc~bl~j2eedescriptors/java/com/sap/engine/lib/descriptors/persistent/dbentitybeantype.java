/*
 * Generated by SAP SchemaToJava Generator NW05 on Thu Mar 31 10:07:41 EEST 2005
 * Copyright (c) 2002 by SAP Labs Sofia AG.
 * url: http://www.saplabs.bg
 * All rights reserved.
 */
package com.sap.engine.lib.descriptors.persistent;

/**
 * Schema complexType Java representation.
 * Represents type {}db-entity-beanType
 */
public  class DbEntityBeanType implements java.io.Serializable,java.lang.Cloneable,com.sap.engine.services.webservices.jaxrpc.encoding.IdenticObject {

  // Element field for element {}ejb-name
  private java.lang.String _f_EjbName;
  /**
   * Set method for element {}ejb-name
   */
  public void setEjbName(java.lang.String _EjbName) {
    this._f_EjbName = _EjbName;
  }
  /**
   * Get method for element {}ejb-name
   */
  public java.lang.String getEjbName() {
    return this._f_EjbName;
  }

  // Element field for element {}table-name
  private java.lang.String _f_TableName;
  /**
   * Set method for element {}table-name
   */
  public void setTableName(java.lang.String _TableName) {
    this._f_TableName = _TableName;
  }
  /**
   * Get method for element {}table-name
   */
  public java.lang.String getTableName() {
    return this._f_TableName;
  }

  // Model group field class 
  public static class Choice1 implements java.io.Serializable,java.lang.Cloneable,com.sap.engine.services.webservices.jaxrpc.encoding.IdenticObject {

    public Choice1() {
    }


    // // Active choise field
    private int _c_validField = 0;
    private com.sap.engine.lib.descriptors.persistent.ReadOnly _f_ReadOnly;
    /**
     * Set method for element {}read-only
     */
    public void setReadOnly(com.sap.engine.lib.descriptors.persistent.ReadOnly _ReadOnly) {
      if (this._c_validField != 0 && this._c_validField != 1) {
        this.unsetContent();
      }
      this._f_ReadOnly = _ReadOnly;
      this._c_validField = 1;
    }
    /**
     * Get method for element {}read-only
     */
    public com.sap.engine.lib.descriptors.persistent.ReadOnly getReadOnly() {
      if (this._c_validField != 1) {
        return null;
      }
      return this._f_ReadOnly;
    }
    /**
     * Check method for element {}read-only
     */
    public boolean isSetReadOnly() {
      return (this._c_validField ==1);
    }
    private com.sap.engine.lib.descriptors.persistent.SelectForUpdate _f_SelectForUpdate;
    /**
     * Set method for element {}select-for-update
     */
    public void setSelectForUpdate(com.sap.engine.lib.descriptors.persistent.SelectForUpdate _SelectForUpdate) {
      if (this._c_validField != 0 && this._c_validField != 2) {
        this.unsetContent();
      }
      this._f_SelectForUpdate = _SelectForUpdate;
      this._c_validField = 2;
    }
    /**
     * Get method for element {}select-for-update
     */
    public com.sap.engine.lib.descriptors.persistent.SelectForUpdate getSelectForUpdate() {
      if (this._c_validField != 2) {
        return null;
      }
      return this._f_SelectForUpdate;
    }
    /**
     * Check method for element {}select-for-update
     */
    public boolean isSetSelectForUpdate() {
      return (this._c_validField ==2);
    }
    /**
     * Common get method for choice type.
     */
    public java.lang.Object getContent() {
      switch (this._c_validField) {
        case 1: return this._f_ReadOnly;
        case 2: return this._f_SelectForUpdate;
      }
      return null;
    }
    /**
     * Returns true if this choice has content set.
     */
    public boolean isSetContent() {
      return (this._c_validField == 0);
    }
    /**
     * Clears choice content.
     */
    public void unsetContent() {
      switch (this._c_validField) {
        case  1: {
          this._f_ReadOnly = null;
          break;
        }
        case  2: {
          this._f_SelectForUpdate = null;
          break;
        }
      }
      this._c_validField = 0;
    }

    /**
     * Equals method implementation.
     */
    public boolean equals(Object object) {
      if (object == null) return false;
      if (!(object instanceof Choice1)) return false;
      Choice1 typed = (Choice1) object;
      if (this._c_validField != typed._c_validField) return false;
      switch (this._c_validField) {
        case 1: {
          if (this._f_ReadOnly != null) {
            if (typed._f_ReadOnly == null) return false;
            if (!this._f_ReadOnly.equals(typed._f_ReadOnly)) return false;
          } else {
            if (typed._f_ReadOnly != null) return false;
          }
          break;
        }
        case 2: {
          if (this._f_SelectForUpdate != null) {
            if (typed._f_SelectForUpdate == null) return false;
            if (!this._f_SelectForUpdate.equals(typed._f_SelectForUpdate)) return false;
          } else {
            if (typed._f_SelectForUpdate != null) return false;
          }
          break;
        }
      }
      return true;
    }

    /**
     * Hashcode method implementation.
     */
    public int hashCode() {
      int result = 0;
      switch (this._c_validField) {
        case 1: {
          if (this._f_ReadOnly != null) {
            result+= this._f_ReadOnly.hashCode();
          }
          result = result * this._c_validField;
          break;
        }
        case 2: {
          if (this._f_SelectForUpdate != null) {
            result+= this._f_SelectForUpdate.hashCode();
          }
          result = result * this._c_validField;
          break;
        }
      }
      return result;
    }

    public java.lang.String get__ID() {
      return java.lang.String.valueOf(super.hashCode());
    }
  }

  private Choice1 _f_ChoiceGroup1;
  public void setChoiceGroup1(Choice1 _ChoiceGroup1) {
    this._f_ChoiceGroup1 = _ChoiceGroup1;
  }
  public Choice1 getChoiceGroup1() {
    return this._f_ChoiceGroup1;
  }

  // Element field for element {}field-map
  private java.util.ArrayList _f_FieldMap = new java.util.ArrayList();
  /**
   * Set method for element {}field-map
   */
  public void setFieldMap(com.sap.engine.lib.descriptors.persistent.FieldMapType[] _FieldMap) {
    this._f_FieldMap.clear();
    if (_FieldMap != null) {
      for (int i=0; i<_FieldMap.length; i++) {
        if (_FieldMap[i] != null)
          this._f_FieldMap.add(_FieldMap[i]);
      }
    }
  }
  /**
   * Get method for element {}field-map
   */
  public com.sap.engine.lib.descriptors.persistent.FieldMapType[] getFieldMap() {
    com.sap.engine.lib.descriptors.persistent.FieldMapType[] result = new com.sap.engine.lib.descriptors.persistent.FieldMapType[_f_FieldMap.size()];
    _f_FieldMap.toArray(result);
    return result;
  }

  // Element field for element {}finder-descriptor
  private java.util.ArrayList _f_FinderDescriptor = new java.util.ArrayList();
  /**
   * Set method for element {}finder-descriptor
   */
  public void setFinderDescriptor(com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] _FinderDescriptor) {
    this._f_FinderDescriptor.clear();
    if (_FinderDescriptor != null) {
      for (int i=0; i<_FinderDescriptor.length; i++) {
        if (_FinderDescriptor[i] != null)
          this._f_FinderDescriptor.add(_FinderDescriptor[i]);
      }
    }
  }
  /**
   * Get method for element {}finder-descriptor
   */
  public com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] getFinderDescriptor() {
    com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] result = new com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[_f_FinderDescriptor.size()];
    _f_FinderDescriptor.toArray(result);
    return result;
  }

  /**
   * Equals method implementation.
   */
  public boolean equals(Object object) {
    if (object == null) return false;
    if (!(object instanceof DbEntityBeanType)) return false;
    DbEntityBeanType typed = (DbEntityBeanType) object;
    if (this._f_EjbName != null) {
      if (typed._f_EjbName == null) return false;
      if (!this._f_EjbName.equals(typed._f_EjbName)) return false;
    } else {
      if (typed._f_EjbName != null) return false;
    }
    if (this._f_TableName != null) {
      if (typed._f_TableName == null) return false;
      if (!this._f_TableName.equals(typed._f_TableName)) return false;
    } else {
      if (typed._f_TableName != null) return false;
    }
    if (this._f_ChoiceGroup1 != null) {
      if (typed._f_ChoiceGroup1 == null) return false;
      if (!this._f_ChoiceGroup1.equals(typed._f_ChoiceGroup1)) return false;
    } else {
      if (typed._f_ChoiceGroup1 != null) return false;
    }
    com.sap.engine.lib.descriptors.persistent.FieldMapType[] _f_FieldMap1 = this.getFieldMap();
    com.sap.engine.lib.descriptors.persistent.FieldMapType[] _f_FieldMap2 = typed.getFieldMap();
    if (_f_FieldMap1 != null) {
      if (_f_FieldMap2 == null) return false;
      if (_f_FieldMap1.length != _f_FieldMap2.length) return false;
      for (int i1 = 0; i1 < _f_FieldMap1.length ; i1++) {
        if (_f_FieldMap1[i1] != null) {
          if (_f_FieldMap2[i1] == null) return false;
          if (!_f_FieldMap1[i1].equals(_f_FieldMap2[i1])) return false;
        } else {
          if (_f_FieldMap2[i1] != null) return false;
        }
      }
    } else {
      if (_f_FieldMap2 != null) return false;
    }
    com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] _f_FinderDescriptor1 = this.getFinderDescriptor();
    com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] _f_FinderDescriptor2 = typed.getFinderDescriptor();
    if (_f_FinderDescriptor1 != null) {
      if (_f_FinderDescriptor2 == null) return false;
      if (_f_FinderDescriptor1.length != _f_FinderDescriptor2.length) return false;
      for (int i1 = 0; i1 < _f_FinderDescriptor1.length ; i1++) {
        if (_f_FinderDescriptor1[i1] != null) {
          if (_f_FinderDescriptor2[i1] == null) return false;
          if (!_f_FinderDescriptor1[i1].equals(_f_FinderDescriptor2[i1])) return false;
        } else {
          if (_f_FinderDescriptor2[i1] != null) return false;
        }
      }
    } else {
      if (_f_FinderDescriptor2 != null) return false;
    }
    return true;
  }

  /**
   * Hashcode method implementation.
   */
  public int hashCode() {
    int result = 0;
    if (this._f_EjbName != null) {
      result+= this._f_EjbName.hashCode();
    }
    if (this._f_TableName != null) {
      result+= this._f_TableName.hashCode();
    }
    if (this._f_ChoiceGroup1 != null) {
      result+= this._f_ChoiceGroup1.hashCode();
    }
    com.sap.engine.lib.descriptors.persistent.FieldMapType[] _f_FieldMap1 = this.getFieldMap();
    if (_f_FieldMap1 != null) {
      for (int i1 = 0; i1 < _f_FieldMap1.length ; i1++) {
        if (_f_FieldMap1[i1] != null) {
          result+= _f_FieldMap1[i1].hashCode();
        }
      }
    }
    com.sap.engine.lib.descriptors.persistent.FinderDescriptorType[] _f_FinderDescriptor1 = this.getFinderDescriptor();
    if (_f_FinderDescriptor1 != null) {
      for (int i1 = 0; i1 < _f_FinderDescriptor1.length ; i1++) {
        if (_f_FinderDescriptor1[i1] != null) {
          result+= _f_FinderDescriptor1[i1].hashCode();
        }
      }
    }
    return result;
  }

  public java.lang.String get__ID() {
    return java.lang.String.valueOf(super.hashCode());
  }
}
