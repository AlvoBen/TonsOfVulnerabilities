/*
 This file is generated by Code Generator
 for CIMClass SAP_ITSAMJavaScheduler
 */

package com.sap.engine.services.scheduler.runtime.mbean;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.management.MBeanException;

import com.sap.engine.services.scheduler.runtime.Environment;
import com.sap.engine.services.scheduler.runtime.jxbp.SchedulerManager;
import com.sap.engine.services.scheduler.utils.JobFilterHelper;
import com.sap.scheduler.api.Filter;
import com.sap.scheduler.api.Scheduler;
import com.sap.scheduler.api.SchedulerAdministrator;
import com.sap.scheduler.api.SchedulerTask;
import com.sap.scheduler.api.SchedulerTaskID;
import com.sap.scheduler.api.SchedulerTime;
import com.sap.scheduler.api.TaskDoesNotExistException;
import com.sap.scheduler.api.TaskValidationException;
import com.sap.scheduler.api.Scheduler.FireTimeEvent;
import com.sap.scheduler.runtime.Job;
import com.sap.scheduler.runtime.JobDefinition;
import com.sap.scheduler.runtime.JobDefinitionID;
import com.sap.scheduler.runtime.JobExecutionRuntime;
import com.sap.scheduler.runtime.JobFilter;
import com.sap.scheduler.runtime.JobID;
import com.sap.scheduler.runtime.JobIterator;
import com.sap.scheduler.runtime.JobParameter;
import com.sap.scheduler.runtime.JobParameterDefinition;
import com.sap.scheduler.runtime.NoSuchJobException;
import com.sap.scheduler.runtime.SchedulerDefinition;
import com.sap.scheduler.runtime.SchedulerLogRecordIterator;
import com.sap.scheduler.runtime.SchedulerRemoveException;

/*
 * A CIM_Service is a Logical Element that contains the information necessary to
 * represent and manage the functionality provided by a Device and/or
 * SoftwareFeature. A Service is a general-purpose object to configure and
 * manage the implementation of functionality. It is not the functionality
 * itself.
 * 
 * @version 2.7.0
 */

public class SAP_ITSAMJavaScheduler_Impl2 extends SAP_ITSAMJavaScheduler_Impl {

    private String SystemCreationClassName = null;
    private String SystemName = null;
    private String CreationClassName = null;
    private String Name = null;
    private String Description = null;
    private com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[] AllSchedulers;
    private com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition BuiltinScheduler;
    private com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] JobDefinitions;
    private String SystemTimeZone = null;
    private String[] AllSchedulerTaskIds = null;
    
    // member's to set in the constructor
    private JobExecutionRuntime m_jert = null;
    private SchedulerAdministrator m_administrator = null;
    private Scheduler m_schedulerAPI = null;    
    private SchedulerManager m_manager = null;
    private Environment m_env = null;    
    
    
    public SAP_ITSAMJavaScheduler_Impl2(JobExecutionRuntime jert, SchedulerAdministrator administrator, Environment env) {
        m_jert = jert;
        m_administrator = administrator;
        m_env = env;
        m_manager = env.getSchedulerManager();
        m_schedulerAPI = env.getSAPJ2EEScheduler();
    }
  
    
    /*
     * The scoping System's CreationClassName. @return String
     */
    public String getSystemCreationClassName() throws MBeanException {
        // Generated Code. Implementation to be done here.
        return null;
    }

    /*
     * The scoping System's Name. @return String
     */
    public String getSystemName() throws MBeanException {
        // Generated Code. Implementation to be done here.
        return null;
    }

    /*
     * CreationClassName indicates the name of the class or the subclass used in
     * the creation of an instance. When used with the other key properties of
     * this class, this property allows all instances of this class and its
     * subclasses to be uniquely identified. @return String
     */

    public String getCreationClassName() throws MBeanException {
        // Generated Code. Implementation to be done here.
        return null;
    }

    /*
     * The Name property uniquely identifies the Service and provides an
     * indication of the functionality that is managed. This functionality is
     * described in more detail in the object's Description property. @return
     * String
     */

    public String getName() throws MBeanException {
        // Generated Code. Implementation to be done here.
        return null;
    }

    /*
     * The Description property provides a textual description of the object.
     * @return String
     */

    public String getDescription() throws MBeanException {
        // Generated Code. Implementation to be done here.
        return null;

    }
    
    // -------------------------------------------------------------------------
    // ----------------------- administrative methods --------------------------
    // -------------------------------------------------------------------------

    /*
     * 
     * @return SAP_ITSAMJavaSchedulerDefinition
     */
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[] getAllSchedulers() throws MBeanException {
        SAP_ITSAMJavaSchedulerDefinition[] result = null;
        try {
            SchedulerDefinition[] schedDef = m_jert.getAllSchedulers();
            ArrayList<SchedulerDefinition> list = new ArrayList<SchedulerDefinition>();
            
            // remove the internal Scheduler from the result
            for (int i = 0; i < schedDef.length; i++) {
                if ( !schedDef[i].getName().equals(SchedulerDefinition.SAP_SCHEDULER_NAME) ) {
                    list.add(schedDef[i]);
                }
            }
            
            result = new SAP_ITSAMJavaSchedulerDefinition[list.size()];
            
            for (int i = 0; i < list.size(); i++) {
                result[i] = SAP_ITSAM_Helper.convertSchedulerDefinitionToSAP_ITSAM(list.get(i));
            }
            
        } catch (SQLException sqle) {
          throw new MBeanException(sqle);
        }
        return result;
    }

    /*
     * 
     * @return SAP_ITSAMJavaSchedulerDefinition
     */
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition getBuiltinScheduler() throws MBeanException {
        SchedulerDefinition builtinScheduler = null;
        try {
            builtinScheduler = m_jert.getBuiltinScheduler();
        } catch (SQLException sqle) {
            throw new MBeanException(sqle);
        }        
        return SAP_ITSAM_Helper.convertSchedulerDefinitionToSAP_ITSAM(builtinScheduler);
    }
    
    
    /*
     * Every array element consists 
     * key: event-name
     * value: event-description 
     * 
     * @return SAP_ITSAMProperty[]
     */
    public SAP_ITSAMProperty[] getEventTypes() throws MBeanException {
        Properties props = m_jert.getEventTypes();
        SAP_ITSAMProperty[] result = new SAP_ITSAMProperty[props.size()];
                        
        int i = 0;
        for (Iterator iter = props.entrySet().iterator(); iter.hasNext();) {
            Map.Entry entry = (Map.Entry) iter.next();
            result[i] = new SAP_ITSAMProperty();
            result[i].setElementName((String)entry.getKey());
            result[i].setValue((String)entry.getValue());            
            
            i++;
        }
        
        return result;
    }
    

    /*
     * 
     * @return SAP_ITSAMJavaSchedulerJobDefinition
     */
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] getJobDefinitions() throws MBeanException {
        SAP_ITSAMJavaSchedulerJobDefinition[] result = null;
        try {
            JobDefinition[] jobDef = m_jert.getJobDefinitions();
            result = new SAP_ITSAMJavaSchedulerJobDefinition[jobDef.length];
            
            for (int i = 0; i < jobDef.length; i++) {
                JobParameterDefinition[] paramDef = jobDef[i].getParameters(); 
                result[i] = SAP_ITSAM_Helper.convertJobDefinitionToSAP_ITSAM(jobDef[i]); 
            }
        } catch (SQLException sqle) {
            throw new MBeanException(sqle);
        }
        
        return result;
    }
    

    public String getSystemTimeZone() throws MBeanException {
        return m_jert.getSystemTimeZone();
    }
    

    public String[] getAllSchedulerTaskIds() throws MBeanException {
        SchedulerTaskID[] schedTaskIDs = m_schedulerAPI.getAllSchedulerTaskIDs();
        String[] result = new String[schedTaskIDs.length];
        
        for (int i = 0; i < schedTaskIDs.length; i++) { 
            result[i] = schedTaskIDs[i].toString(); 
        }
        return result;
    }
    
    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask[] getAllSchedulerTasks() throws MBeanException {
         SchedulerTaskID[] schedTaskIDs = m_schedulerAPI.getAllSchedulerTaskIDs();
         SchedulerTask[] schedulerTasks = new SchedulerTask[schedTaskIDs.length];
         SAP_ITSAMJavaSchedulerTask[] result = null;
         
         try {
             for (int i = 0; i < schedTaskIDs.length; i++) {
                 schedulerTasks[i] = m_schedulerAPI.getTask(schedTaskIDs[i]);
             }
        
             result = new SAP_ITSAMJavaSchedulerTask[schedulerTasks.length];
             for (int j = 0; j < schedulerTasks.length; j++) {
                 // we provide in the SAP_ITSAMJavaSchedulerTask also the corresponding JobDefinitionName & ApplicationName
                 String jobDefName = m_jert.getJobDefinitionById(schedulerTasks[j].getJobDefinitionId()).getJobDefinitionName().getName();
                 String appName = m_jert.getJobDefinitionById(schedulerTasks[j].getJobDefinitionId()).getApplication();
                 
                 result[j] = SAP_ITSAM_Helper.convertSchedulerTaskToSAP_ITSAM(schedulerTasks[j], jobDefName, appName);
             }  
         } catch (Exception e) {
             throw new MBeanException(e);
         } 
         
         return result;
    }
    

    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition AddScheduler(String Name , String User , String Password , String Description , long InactivityGracePeriod , String[] Events) throws MBeanException {
        SchedulerDefinition schedDef = null;
        
        try {
            schedDef = m_manager.addScheduler(Name, User, Password, Description, InactivityGracePeriod, m_env.getEventManager().cleanupEventTypesForJXBP(Events));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
        return SAP_ITSAM_Helper.convertSchedulerDefinitionToSAP_ITSAM(schedDef);
    }
    

    public void CancelJob(String JobId) throws MBeanException {
        try {
            m_jert.cancelJob(JobID.parseID(JobId));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }
    

    public String ExecuteJob(String JobDefinitionId, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[] JobParameters, int RetentionPeriod, String RunAsUser) throws MBeanException {
        JobParameter[] jobParams = SAP_ITSAM_Helper.convertSAP_ITSAMToJobParameterArray(JobParameters);

        // now, call the impl
        JobID jobId = null;
        try {
            jobId = m_jert.executeJob(JobDefinitionID.parseID(JobDefinitionId), jobParams, new Integer(RetentionPeriod), null, null, RunAsUser);
        } catch (Exception e) {
            throw new MBeanException(e);
        }
        return jobId.toString();
    }
    

    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob[] GetChildJobs(String JobId) throws MBeanException {
        Job[] jobs = null;
        String schedulerName = null;
        String appName = null;
        try {
            jobs = m_jert.getChildJobs(JobID.parseID(JobId));
            // we provide in the SAP_ITSAMJavaSchedulerJob also the corresponding SchedulerName & ApplicationName
            Job job = m_jert.getJob(JobID.parseID(JobId));
            if (job != null) {
                schedulerName = m_jert.getSchedulerById(job.getScheduler()).getName();
                appName = m_jert.getJobDefinitionById(job.getJobDefinitionId()).getApplication();
            }
        } catch (Exception e) {
            throw new MBeanException(e);
        }
            
        SAP_ITSAMJavaSchedulerJob[] result = new SAP_ITSAMJavaSchedulerJob[jobs.length];        
        for (int i = 0; i < jobs.length; i++) {
            result[i] = SAP_ITSAM_Helper.convertJobToSAP_ITSAM(jobs[i], schedulerName, appName);            
        }        
        return result;
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob GetJob(String JobId) throws MBeanException {
        Job job = null;
        String schedulerName = null;
        String appName = null;
        try {
            job = m_jert.getJob(JobID.parseID(JobId));
            if (job == null) {
                return null;
            }
            // we provide in the SAP_ITSAMJavaSchedulerJob also the corresponding SchedulerName & ApplicationName
            schedulerName = m_jert.getSchedulerById(job.getScheduler()).getName();
            appName = m_jert.getJobDefinitionById(job.getJobDefinitionId()).getApplication();
        } catch (Exception e) {
            throw new MBeanException(e);
        }

        SAP_ITSAMJavaSchedulerJob result = SAP_ITSAM_Helper.convertJobToSAP_ITSAM(job, schedulerName, appName);       
        return result;
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition GetJobDefinitionById(String JobDefinitionId) throws MBeanException {
        JobDefinition jobDef = null;
        try {
            jobDef = m_jert.getJobDefinitionById(JobDefinitionID.parseID(JobDefinitionId));
            if (jobDef == null) {
                return null;
            }
        } catch (SQLException e) {
            new MBeanException(e);
        }
        return SAP_ITSAM_Helper.convertJobDefinitionToSAP_ITSAM(jobDef);
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition GetJobDefinitionByName(String JobDefinitionName) throws MBeanException {
        JobDefinition jobDef = null;
        try {
            jobDef = m_jert.getJobDefinitionByName(JobDefinitionName);
            if (jobDef == null) {
                return null;
            }
        } catch (SQLException e) {
            throw new MBeanException(e);
        }        
        return SAP_ITSAM_Helper.convertJobDefinitionToSAP_ITSAM(jobDef);
    }

        
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[] GetJobParameters(String JobId) throws MBeanException {
        JobParameter[] jobParams = null;
        try {
            jobParams = m_jert.getJobParameters(JobID.parseID(JobId));
        } catch (Exception e) {
            throw new MBeanException(e);
        }         
        return SAP_ITSAM_Helper.convertJobParameterArrayToSAP_ITSAM(jobParams);
    }

    
    public short GetJobStatus(String JobId) throws MBeanException {
        try {
            return m_jert.getJobStatus(JobID.parseID(JobId)).value();
        } catch (Exception e) {
            throw new MBeanException(e); 
        }
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition GetSchedulerByName(String Name) throws MBeanException {
        SchedulerDefinition schedDef = null;
        try {
            schedDef = m_jert.getSchedulerByName(Name);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
        return SAP_ITSAM_Helper.convertSchedulerDefinitionToSAP_ITSAM(schedDef);
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition GetSchedulerForUser(String Principal) throws MBeanException {
        SchedulerDefinition schedDef = null;
        try {
            schedDef = m_jert.getSchedulerForUser(Principal);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
        return SAP_ITSAM_Helper.convertSchedulerDefinitionToSAP_ITSAM(schedDef);
    }

    
    public String[] GetVendorData(String[] JobIds) throws MBeanException {
        JobID[] jobIdArray = SAP_ITSAM_Helper.convertStringArrayToJobIDArray(JobIds);
        try {
            return m_jert.getVendorData(jobIdArray);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
    }

    
    public boolean HasChildJobs(String JobId) throws MBeanException {
        try {
            return m_jert.hasChildJobs(JobID.parseID(JobId));
        } catch (Exception e) {
            throw new MBeanException(e);
        }
    }

    
    public boolean[] HaveChildJobs(String[] JobIds) throws MBeanException {
        JobID[] jobIdArray = SAP_ITSAM_Helper.convertStringArrayToJobIDArray(JobIds);
        try {
            return m_jert.haveChildJobs(jobIdArray);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
    }

    
    public void HoldJob(String JobId) throws MBeanException {
        
        throw new UnsupportedOperationException("HoldJob not supported.");
    }

    
    public boolean IsJobCancelled(String JobId) throws MBeanException {
        try {
            return m_jert.isJobCancelled(JobID.parseID(JobId));
        } catch (SQLException e) {
            throw new MBeanException(e);
        } 
    }
    
    
    public void RaiseEvent(String Type, String Parameter, String SchedulerId) throws MBeanException {

        throw new UnsupportedOperationException("RaiseEvent not supported.");
    }
    
    
    public void RemoveScheduler(String SchedulerName) throws MBeanException {
        try {
            SchedulerDefinition schedDef = m_manager.getSchedulerByName(SchedulerName);
            if (schedDef == null) {
                // no such scheduler, ignore
                return;
            }
            m_manager.removeScheduler(schedDef);
        } catch (SQLException sqle) {
            throw new MBeanException(sqle);
        } catch (SchedulerRemoveException rm) {
            throw new MBeanException(rm);
        }
    }

    
    public void ReleaseJob(String JobId) throws MBeanException {

        throw new UnsupportedOperationException("ReleaseJob not supported.");
    }
    
    
    public boolean RemoveJob(String JobId) throws MBeanException {
        try {
            m_jert.removeJob(JobID.parseID(JobId));
            return true;
        } catch (Exception e) {
            throw new MBeanException(e);
        }
    }


    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] RemoveJobDefinitions(String[] JobDefinitionId) throws MBeanException {
        JobDefinitionID[] jobDefIds = SAP_ITSAM_Helper.convertStringArrayToJobDefinitionIdArray(JobDefinitionId);
        JobDefinition[] resultJobDefs = null;
        
        try {
            resultJobDefs = m_jert.removeJobDefinitions(jobDefIds);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
        
        return SAP_ITSAM_Helper.convertJobDefinitionArrayToSAP_ITSAM(resultJobDefs);
    }
    
    
    public void SetFilter(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition Definition, String[] EventTypes) throws MBeanException {
        SchedulerDefinition schedDef = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerDefinition(Definition);
        try {
            m_jert.setFilter(schedDef, EventTypes);
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
    }

    
    public void AddFilters(String SchedulerTaskId, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] Filters) throws MBeanException {
        Filter[] filter = SAP_ITSAM_Helper.convertSAP_ITSAMToFilterArray(Filters);
        try {
            m_schedulerAPI.addFilters(SchedulerTaskID.parseID(SchedulerTaskId), filter);
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }

    
    public void CancelTask(String SchedulerTaskId) throws MBeanException {
        try {
            m_schedulerAPI.cancelTask(SchedulerTaskID.parseID(SchedulerTaskId));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }
    
    
    public void HoldTask(String SchedulerTaskId) throws MBeanException {
        try {
            m_schedulerAPI.holdTask(SchedulerTaskID.parseID(SchedulerTaskId));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }

    
    public void ReleaseTask(String SchedulerTaskId) throws MBeanException {
        try {
            m_schedulerAPI.releaseTask(SchedulerTaskID.parseID(SchedulerTaskId));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }


    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[] GetFireTimes(String SchedulerTaskId, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime StartTime, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime EndTime) throws MBeanException {
        SchedulerTime startT = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTime(StartTime);
        SchedulerTime endT = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTime(EndTime);
        
        FireTimeEvent[] events = null;
        try {
            events = m_schedulerAPI.getFireTimes(SchedulerTaskID.parseID(SchedulerTaskId), startT, endT);
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
        return SAP_ITSAM_Helper.convertFireTimeEventArrayToSAP_ITSAM(events);
    } 


    // TODO: in case the methods GetFireTimes(...) will be accessed by the NWA-UI of the scheduler
    // the call via the administrator should be moved to the API-Scheduler, because it might happen
    // that the NWA-UI run in the context of a read-only user which does not work for non-administrative 
    // users (exception will be thrown). Currently there's no call to these methods.
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[] GetFireTimes2(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime StartTime , com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime EndTime , int fetchSize) throws MBeanException {
        SchedulerTime startT = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTime(StartTime);
        SchedulerTime endT = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTime(EndTime);
        
        FireTimeEvent[] events = null;
        try {
            events = m_administrator.getFireTimes(startT, endT, fetchSize);  
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
        return SAP_ITSAM_Helper.convertFireTimeEventArrayToSAP_ITSAM(events);
    }

    public String GetFormattedSchedulerTime(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime Time) throws MBeanException {
        SchedulerTime schedTime = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTime(Time);
        return SAP_ITSAM_Helper.DATE_FORMATTER.format(schedTime.getTime());
    }

    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask GetTask(String SchedulerTaskId) throws MBeanException {
        SchedulerTask task = null;
        String jobDefName = null;
        String appName = null;
        try {
            task = m_schedulerAPI.getTask(SchedulerTaskID.parseID(SchedulerTaskId));
            // we provide in the SAP_ITSAMJavaSchedulerTask also the corresponding JobDefinitionName & ApplicationName
            jobDefName = m_jert.getJobDefinitionById(task.getJobDefinitionId()).getJobDefinitionName().getName();
            appName = m_jert.getJobDefinitionById(task.getJobDefinitionId()).getApplication();
        } catch (Exception e) {
            throw new MBeanException(e);
        }        
        return SAP_ITSAM_Helper.convertSchedulerTaskToSAP_ITSAM(task, jobDefName, appName);
    }

    
    public void RemoveFilters(String SchedulerTaskId, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] Filters) throws MBeanException {
        SchedulerTaskID taskId = SchedulerTaskID.parseID(SchedulerTaskId);
        Filter[] fil = SAP_ITSAM_Helper.convertSAP_ITSAMToFilterArray(Filters);
        try {
            m_schedulerAPI.removeFilters(taskId, fil);
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }

    
    public String Schedule(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask SchedulerTask, String RunAsUser) throws MBeanException {
        SchedulerTask task = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerTask(SchedulerTask);
        
        try {
            m_schedulerAPI.schedule(task);             
        } catch (TaskValidationException e) {
            throw new MBeanException(e);
        } 
        
        return task.getTaskId().toString();
    }

    
    public void SetFilters(String SchedulerTaskId, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] Filters) throws MBeanException {
        Filter[] fil = SAP_ITSAM_Helper.convertSAP_ITSAMToFilterArray(Filters);
        
        try {
            m_schedulerAPI.setFilters(SchedulerTaskID.parseID(SchedulerTaskId), fil);
        } catch (TaskDoesNotExistException e) {
            throw new MBeanException(e);
        } 
    }

  
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator GetJobLog(String JobId, int ResultSetSize, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator LogIterator) throws MBeanException {
        SchedulerLogRecordIterator logIter = null;
        SchedulerLogRecordIterator logIterTemp = SAP_ITSAM_Helper.convertSAP_ITSAMToSchedulerLogIterator(LogIterator);
        
        try {
            logIter = m_jert.getJobLogRecords(JobID.parseID(JobId), logIterTemp, ResultSetSize);
            
        } catch (NoSuchJobException e) {
            throw new MBeanException(e);
        } catch (SQLException e) {
            throw new MBeanException(e);
        } 
        return SAP_ITSAM_Helper.convertSchedulerLogIteratorToSAP_ITSAM(logIter);
    }
    
    
    public com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator GetJobs(String JobFilter, com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator JobIterator, int fetchSize) throws MBeanException {
        
        // do not pass jobs to the scheduler runtime, even if they were
        // passed
    	String notMoreAvailable = "<not available anymore>";
        
        JobIterator jobIterTemp = null;
        
        JobIterator jobIter = null;
        if (JobIterator != null) {
            String stateDescriptor = JobIterator.getStateDescriptor();
            if (stateDescriptor != null && !"".equals(stateDescriptor)) {
                jobIter = new JobIterator();
                jobIter.getStateDescriptor().readDescriptor(JobIterator.getStateDescriptor());
            }
        }
        JobFilter jobFil;
        try {
            jobFil = JobFilterHelper.parseString(JobFilter);
        } catch (IllegalArgumentException e1) {
            throw new MBeanException(e1);
        }
        
        // we provide in the SAP_ITSAMJavaSchedulerJob also the corresponding SchedulerName & ApplicationName
        // mapping looks as follows: 
        // Map with JobID as key and a String[]{SchedulerName, AppName} as value
        Map<JobID, String[]> names = new HashMap<JobID, String[]>();
        try {
            jobIterTemp = m_jert.getJobs(jobFil, jobIter, fetchSize);

            Job[] jobs = jobIterTemp.getJobs();         
            
            for (int i = 0; i < jobs.length; i++) {
                Job job = jobs[i];
                String schedulerName = notMoreAvailable;
                
                if ( m_jert.getSchedulerById(job.getScheduler()) != null ) {
                	schedulerName = m_jert.getSchedulerById(job.getScheduler()).getName();
                }
                
                String[] strArr = new String[]{schedulerName, 
                							   m_jert.getJobDefinitionById(job.getJobDefinitionId()).getApplication()};
                names.put(job.getId(), strArr);
            }            
        } catch (SQLException e) {
            throw new MBeanException(e);
        }

        return SAP_ITSAM_Helper.convertJobIteratorToSAP_ITSAM(jobIterTemp, names);
    }
    
    
    public void RemoveJobLog(String JobId) throws MBeanException {
        try {
            m_jert.removeJobLog(JobID.parseID(JobId));
        } catch (Exception e) {
            throw new MBeanException(e);
        } 
    }   

    
    public void RemoveJobs(String[] JobIds) throws MBeanException {
        try {
            m_jert.removeJobs(SAP_ITSAM_Helper.convertStringArrayToJobIDArray(JobIds));
        } catch (SQLException e) {
            throw new MBeanException(e);
        }
    }
    
}