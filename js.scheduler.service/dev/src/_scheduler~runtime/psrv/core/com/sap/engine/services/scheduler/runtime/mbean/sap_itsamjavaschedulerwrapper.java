

  /*
This file is generated by Code Generator
to wrap datatypes of attributes of CIMClass SAP_ITSAMJavaScheduler
WARNING:DO NOT CHANGE THE CODE MANUALLY. 
*/
package com.sap.engine.services.scheduler.runtime.mbean;

import java.util.Date;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.ObjectName;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.openmbean.*;

  public class SAP_ITSAMJavaSchedulerWrapper implements DynamicMBean    {   
 
 /* The wrapped object to be exposed as MBean */  
  private SAP_ITSAMJavaScheduler mbean;
  
  /* MBeanInfo */
  private static final MBeanInfo mbeanInfo;
  
 /* Initialize MBeanInfo */
  static {
    // attributes
    
       MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[12]; 
    
		  	
   
		     attributeInfo[ 0]		     
		      = new MBeanAttributeInfo("SystemCreationClassName",	 					
	 					"java.lang.String","Description:The scoping System's CreationClassName.",true,false,false);                               
        	  	
   
		     attributeInfo[ 1]		     
		      = new MBeanAttributeInfo("SystemName",	 					
	 					"java.lang.String","Description:The scoping System's Name.",true,false,false);                               
        	  	
   
		     attributeInfo[ 2]		     
		      = new MBeanAttributeInfo("CreationClassName",	 					
	 					"java.lang.String","Description:CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.",true,false,false);                               
        	  	
   
		     attributeInfo[ 3]		     
		      = new MBeanAttributeInfo("Name",	 					
	 					"java.lang.String","Description:The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.",true,false,false);                               
        	  	
   
		     attributeInfo[ 4]		     
		      = new MBeanAttributeInfo("Description",	 					
	 					"java.lang.String","Description:The Description property provides a textual description of the object.",true,false,false);                               
        	  	
   
		     attributeInfo[ 5]		     
		      = new MBeanAttributeInfo("AllSchedulers",	 					
	 					"[Ljavax.management.openmbean.CompositeData;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 6]		     
		      = new MBeanAttributeInfo("EventTypes",	 					
	 					"[Ljavax.management.openmbean.CompositeData;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 7]		     
		      = new MBeanAttributeInfo("BuiltinScheduler",	 					
	 					"javax.management.openmbean.CompositeData","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 8]		     
		      = new MBeanAttributeInfo("JobDefinitions",	 					
	 					"[Ljavax.management.openmbean.CompositeData;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 9]		     
		      = new MBeanAttributeInfo("SystemTimeZone",	 					
	 					"java.lang.String","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 10]		     
		      = new MBeanAttributeInfo("AllSchedulerTaskIds",	 					
	 					"[Ljava.lang.String;","Description:",true,false,false);                               
        	  	
   
		     attributeInfo[ 11]		     
		      = new MBeanAttributeInfo("AllSchedulerTasks",	 					
	 					"[Ljavax.management.openmbean.CompositeData;","Description:",true,false,false);                               
        
// operations
MBeanParameterInfo[] signature;
MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[37];

	
// for method AddScheduler
 signature = new MBeanParameterInfo[6];
signature[0] = new MBeanParameterInfo("Name", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("User", "java.lang.String","Description:");
signature[2] = new MBeanParameterInfo("Password", "java.lang.String","Description:");
signature[3] = new MBeanParameterInfo("Description", "java.lang.String","Description:");
signature[4] = new MBeanParameterInfo("InactivityGracePeriod", "long","Description:");
signature[5] = new MBeanParameterInfo("Events", "[Ljava.lang.String;","Description:");
operationInfo[0] = new MBeanOperationInfo("AddScheduler", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method CancelJob
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[1] = new MBeanOperationInfo("CancelJob", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method ExecuteJob
 signature = new MBeanParameterInfo[4];
signature[0] = new MBeanParameterInfo("JobDefinitionId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("JobParameters", "[Ljavax.management.openmbean.CompositeData;","Description:");
signature[2] = new MBeanParameterInfo("RetentionPeriod", "int","Description:");
signature[3] = new MBeanParameterInfo("RunAsUser", "java.lang.String","Description:");
operationInfo[2] = new MBeanOperationInfo("ExecuteJob", "Description:", signature, "java.lang.String", MBeanOperationInfo.UNKNOWN);
	
// for method GetChildJobs
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[3] = new MBeanOperationInfo("GetChildJobs", "Description:", signature, "[Ljavax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	
// for method GetJob
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[4] = new MBeanOperationInfo("GetJob", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobDefinitionById
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobDefinitionId", "java.lang.String","Description:");
operationInfo[5] = new MBeanOperationInfo("GetJobDefinitionById", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobDefinitionByName
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobDefinitionName", "java.lang.String","Description:");
operationInfo[6] = new MBeanOperationInfo("GetJobDefinitionByName", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobLog
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("ResultSetSize", "int","Description:");
signature[2] = new MBeanParameterInfo("LogIterator", "javax.management.openmbean.CompositeData","Description:");
operationInfo[7] = new MBeanOperationInfo("GetJobLog", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobParameters
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[8] = new MBeanOperationInfo("GetJobParameters", "Description:", signature, "[Ljavax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobs
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("JobFilter", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("JobIterator", "javax.management.openmbean.CompositeData","Description:");
signature[2] = new MBeanParameterInfo("fetchSize", "int","Description:");
operationInfo[9] = new MBeanOperationInfo("GetJobs", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetJobStatus
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[10] = new MBeanOperationInfo("GetJobStatus", "Description:", signature, "short", MBeanOperationInfo.UNKNOWN);
	
// for method GetSchedulerByName
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("Name", "java.lang.String","Description:");
operationInfo[11] = new MBeanOperationInfo("GetSchedulerByName", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetSchedulerForUser
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("Principal", "java.lang.String","Description:");
operationInfo[12] = new MBeanOperationInfo("GetSchedulerForUser", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method GetVendorData
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobIds", "[Ljava.lang.String;","Description:");
operationInfo[13] = new MBeanOperationInfo("GetVendorData", "Description:", signature, "[Ljava.lang.String;", MBeanOperationInfo.UNKNOWN);
	
// for method HasChildJobs
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[14] = new MBeanOperationInfo("HasChildJobs", "Description:", signature, "boolean", MBeanOperationInfo.UNKNOWN);
	
// for method HaveChildJobs
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobIds", "[Ljava.lang.String;","Description:");
operationInfo[15] = new MBeanOperationInfo("HaveChildJobs", "Description:", signature, "[Z", MBeanOperationInfo.UNKNOWN);
	
// for method HoldJob
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[16] = new MBeanOperationInfo("HoldJob", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method IsJobCancelled
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[17] = new MBeanOperationInfo("IsJobCancelled", "Description:", signature, "boolean", MBeanOperationInfo.UNKNOWN);
	
// for method RaiseEvent
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("Type", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("Parameter", "java.lang.String","Description:");
signature[2] = new MBeanParameterInfo("SchedulerId", "java.lang.String","Description:");
operationInfo[18] = new MBeanOperationInfo("RaiseEvent", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveScheduler
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("SchedulerName", "java.lang.String","Description:");
operationInfo[19] = new MBeanOperationInfo("RemoveScheduler", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method ReleaseJob
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[20] = new MBeanOperationInfo("ReleaseJob", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveJob
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[21] = new MBeanOperationInfo("RemoveJob", "Description:", signature, "boolean", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveJobDefinitions
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobDefinitionId", "[Ljava.lang.String;","Description:");
operationInfo[22] = new MBeanOperationInfo("RemoveJobDefinitions", "Description:", signature, "[Ljavax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveJobLog
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobId", "java.lang.String","Description:");
operationInfo[23] = new MBeanOperationInfo("RemoveJobLog", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveJobs
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("JobIds", "[Ljava.lang.String;","Description:");
operationInfo[24] = new MBeanOperationInfo("RemoveJobs", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method SetFilter
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("Definition", "javax.management.openmbean.CompositeData","Description:");
signature[1] = new MBeanParameterInfo("EventTypes", "[Ljava.lang.String;","Description:");
operationInfo[25] = new MBeanOperationInfo("SetFilter", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method AddFilters
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("Filters", "[Ljavax.management.openmbean.CompositeData;","Description:");
operationInfo[26] = new MBeanOperationInfo("AddFilters", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method CancelTask
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
operationInfo[27] = new MBeanOperationInfo("CancelTask", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method HoldTask
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
operationInfo[28] = new MBeanOperationInfo("HoldTask", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method ReleaseTask
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
operationInfo[29] = new MBeanOperationInfo("ReleaseTask", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method GetFireTimes
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("StartTime", "javax.management.openmbean.CompositeData","Description:");
signature[2] = new MBeanParameterInfo("EndTime", "javax.management.openmbean.CompositeData","Description:");
operationInfo[30] = new MBeanOperationInfo("GetFireTimes", "Description:", signature, "[Ljavax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	
// for method GetFireTimes2
 signature = new MBeanParameterInfo[3];
signature[0] = new MBeanParameterInfo("StartTime", "javax.management.openmbean.CompositeData","Description:");
signature[1] = new MBeanParameterInfo("EndTime", "javax.management.openmbean.CompositeData","Description:");
signature[2] = new MBeanParameterInfo("fetchSize", "int","Description:");
operationInfo[31] = new MBeanOperationInfo("GetFireTimes2", "Description:", signature, "[Ljavax.management.openmbean.CompositeData;", MBeanOperationInfo.UNKNOWN);
	
// for method GetTask
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
operationInfo[32] = new MBeanOperationInfo("GetTask", "Description:", signature, "javax.management.openmbean.CompositeData", MBeanOperationInfo.UNKNOWN);
	
// for method RemoveFilters
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("Filters", "[Ljavax.management.openmbean.CompositeData;","Description:");
operationInfo[33] = new MBeanOperationInfo("RemoveFilters", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method Schedule
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("SchedulerTask", "javax.management.openmbean.CompositeData","Description:");
signature[1] = new MBeanParameterInfo("RunAsUser", "java.lang.String","Description:");
operationInfo[34] = new MBeanOperationInfo("Schedule", "Description:", signature, "java.lang.String", MBeanOperationInfo.UNKNOWN);
	
// for method SetFilters
 signature = new MBeanParameterInfo[2];
signature[0] = new MBeanParameterInfo("SchedulerTaskId", "java.lang.String","Description:");
signature[1] = new MBeanParameterInfo("Filters", "[Ljavax.management.openmbean.CompositeData;","Description:");
operationInfo[35] = new MBeanOperationInfo("SetFilters", "Description:", signature, "void", MBeanOperationInfo.UNKNOWN);
	
// for method GetFormattedSchedulerTime
 signature = new MBeanParameterInfo[1];
signature[0] = new MBeanParameterInfo("Time", "javax.management.openmbean.CompositeData","Description:");
operationInfo[36] = new MBeanOperationInfo("GetFormattedSchedulerTime", "Description:", signature, "java.lang.String", MBeanOperationInfo.UNKNOWN);




mbeanInfo = new MBeanInfo("SAP_ITSAMJavaScheduler", "SAP_ITSAMJavaScheduler MBean", attributeInfo, null, operationInfo , null);

  }


	 /*
	  * Wraps given SAP_ITSAMJavaScheduler and provides a javax.management.DynamicMBean interface on top
   */
       public  SAP_ITSAMJavaSchedulerWrapper(SAP_ITSAMJavaScheduler mbean){
              this.mbean = mbean;
       }
       
    /*
	  * Creates an empty wrapper for SAP_ITSAMJavaScheduler
   */
    public SAP_ITSAMJavaSchedulerWrapper() 
		{
		}
			  /*
   * Sets a new SAP_ITSAMJavaScheduler to be wrapped and returns the old one
   */
  public SAP_ITSAMJavaScheduler setManagedObject(SAP_ITSAMJavaScheduler mbean) {
    SAP_ITSAMJavaScheduler old = this.mbean;
    this.mbean = mbean;
    return old;
  }

  /*
   * Returns the currently wrapped SAP_ITSAMJavaScheduler
   */
  public SAP_ITSAMJavaScheduler getManagedObject() {
    return this.mbean;
  }
		
		
    /*
   * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
   */
      public AttributeList getAttributes(String[] attributes) {
      
     AttributeList list = new AttributeList();
//		Check attributeNames to avoid NullPointerException later on
		 if (attributes == null) {
			 throw new RuntimeOperationsException(
				 new IllegalArgumentException(
					 "attributeNames[] cannot be null"),
				 "Cannot invoke a getter of SAP_ITSAMShortDumpManagementService");
		 }
//		if attributeNames is empty, return an empty result list
		 if (attributes.length == 0)
				 return list;

          if(attributes != null)
            {
                for (int i = 0; i < attributes.length; i++)
                {
                    String attribute = attributes[i];
                    try
                    {
                        Object result = getAttribute(attribute);
                        list.add(new Attribute(attribute, result));
                    }
                    catch (AttributeNotFoundException ignored)
                    {
                    //$JL-EXC$
                    }
                    catch (MBeanException ignored)
                    {
                    //$JL-EXC$
                    }
                    catch (ReflectionException ignored)
                    {
                    //$JL-EXC$
                    }
                }
    
            }
            return list;
	   }


 /**
  * @see javax.management.DynamicMBean#setAttributes(javax.management.AttributeList)
  */
	  public AttributeList setAttributes(AttributeList attributes) {
		//		Check attributesto avoid NullPointerException later on
		 if (attributes == null) {
			 throw new RuntimeOperationsException(
				 new IllegalArgumentException(
					 "AttributeList attributes cannot be null"),
				 "Cannot invoke a setter of SAP_ITSAMShortDumpManagementService" );
		 }
		
		AttributeList list = new AttributeList();
		
//		if attributeNames is empty, nothing more to do
		 if (attributes.isEmpty())
			 return list;
	            if (attributes != null)
		            {
		                for (int i = 0; i < attributes.size(); ++i)
		                {
		                    Attribute attribute = (Attribute) attributes.get(i);
		                    try
		                    {
		                        setAttribute(attribute);
		                        list.add(attribute);
		                    }
		                    catch (AttributeNotFoundException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (InvalidAttributeValueException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (MBeanException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                    catch (ReflectionException ignored)
		                    {
		                    //$JL-EXC$
		                    }
		                }
		            }
		    
		            return list;
	  }
    
     /**
   * @see javax.management.DynamicMBean#getMBeanInfo()
   */
	public MBeanInfo getMBeanInfo() {
     return mbeanInfo;
	  }   
    
 /**
   * @see javax.management.DynamicMBean\#setAttribute(javax.management.Attribute)
   */    
    public void setAttribute(Attribute attr) throws AttributeNotFoundException, InvalidAttributeValueException,
      MBeanException, ReflectionException {
      String name = attr.getName();
          
         }             
  
   /**
   * @see javax.management.DynamicMBean#invoke(java.lang.String, java.lang.Object[], java.lang.String[])
   */
     public Object invoke(String operationName, Object param[], String signature[])
    throws MBeanException, ReflectionException {
     if (operationName == null) {
        throw new RuntimeOperationsException(
            new IllegalArgumentException(
                "Operation name cannot be null"),
            "Cannot invoke a null operation in " + "SAP_ITSAMJavaScheduler");
            }
            
            if(operationName.equalsIgnoreCase("AddScheduler") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && (signature[1].equals("java.lang.String") || signature[1].equalsIgnoreCase("string")) && (signature[2].equals("java.lang.String") || signature[2].equalsIgnoreCase("string")) && (signature[3].equals("java.lang.String") || signature[3].equalsIgnoreCase("string")) && (signature[4].equals("java.lang.Long") || signature[4].equalsIgnoreCase("long")) && (signature[5].equals("[Ljava.lang.String;")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerDefinition(mbean.AddScheduler((String) param[0] , (String) param[1] , (String) param[2] , (String) param[3] , ((Long)param[4]).longValue() , (String[]) param[5]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("CancelJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.CancelJob((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("ExecuteJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("[Ljavax.management.openmbean.CompositeData;") && (signature[2].equals("java.lang.Integer") || signature[2].equalsIgnoreCase("int")) && (signature[3].equals("java.lang.String") || signature[3].equalsIgnoreCase("string")))
            {
            return mbean.ExecuteJob((String) param[0] , getSAP_ITSAMJavaSchedulerJobParameterArrForCData((CompositeData[]) param[1]) , ((Integer)param[2]).intValue() , (String) param[3]);
			
            }
            
            if(operationName.equalsIgnoreCase("GetChildJobs") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataArrForSAP_ITSAMJavaSchedulerJob(mbean.GetChildJobs(
	    	(String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerJob(mbean.GetJob((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobDefinitionById") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerJobDefinition(mbean.GetJobDefinitionById((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobDefinitionByName") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerJobDefinition(mbean.GetJobDefinitionByName((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobLog") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && (signature[1].equals("java.lang.Integer") || signature[1].equalsIgnoreCase("int")) && signature[2].equalsIgnoreCase("javax.management.openmbean.CompositeData"))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerLogIterator(mbean.GetJobLog((String) param[0] , ((Integer)param[1]).intValue() , getSAP_ITSAMJavaSchedulerLogIteratorForCData((CompositeData) param[2])));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobParameters") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataArrForSAP_ITSAMJavaSchedulerJobParameter(mbean.GetJobParameters(
	    	(String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobs") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("javax.management.openmbean.CompositeData") && (signature[2].equals("java.lang.Integer") || signature[2].equalsIgnoreCase("int")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerJobIterator(mbean.GetJobs((String) param[0] , getSAP_ITSAMJavaSchedulerJobIteratorForCData((CompositeData) param[1]) , ((Integer)param[2]).intValue()));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetJobStatus") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            return new Short(mbean.GetJobStatus((String) param[0]));
			
            }
            
            if(operationName.equalsIgnoreCase("GetSchedulerByName") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerDefinition(mbean.GetSchedulerByName((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetSchedulerForUser") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerDefinition(mbean.GetSchedulerForUser((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetVendorData") &&              
                (signature[0].equals("[Ljava.lang.String;")))
            {
            return mbean.GetVendorData((String[]) param[0]);
			
            }
            
            if(operationName.equalsIgnoreCase("HasChildJobs") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            return new Boolean(mbean.HasChildJobs((String) param[0]));
			
            }
            
            if(operationName.equalsIgnoreCase("HaveChildJobs") &&              
                (signature[0].equals("[Ljava.lang.String;")))
            {
            return mbean.HaveChildJobs((String[]) param[0]);
			
            }
            
            if(operationName.equalsIgnoreCase("HoldJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.HoldJob((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("IsJobCancelled") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            return new Boolean(mbean.IsJobCancelled((String) param[0]));
			
            }
            
            if(operationName.equalsIgnoreCase("RaiseEvent") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && (signature[1].equals("java.lang.String") || signature[1].equalsIgnoreCase("string")) && (signature[2].equals("java.lang.String") || signature[2].equalsIgnoreCase("string")))
            {
            mbean.RaiseEvent((String) param[0] , (String) param[1] , (String) param[2]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("RemoveScheduler") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.RemoveScheduler((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("ReleaseJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.ReleaseJob((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("RemoveJob") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            return new Boolean(mbean.RemoveJob((String) param[0]));
			
            }
            
            if(operationName.equalsIgnoreCase("RemoveJobDefinitions") &&              
                (signature[0].equals("[Ljava.lang.String;")))
            {
            try{return getCDataArrForSAP_ITSAMJavaSchedulerJobDefinition(mbean.RemoveJobDefinitions(
	    	(String[]) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("RemoveJobLog") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.RemoveJobLog((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("RemoveJobs") &&              
                (signature[0].equals("[Ljava.lang.String;")))
            {
            mbean.RemoveJobs((String[]) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("SetFilter") &&              
                signature[0].equalsIgnoreCase("javax.management.openmbean.CompositeData") && (signature[1].equals("[Ljava.lang.String;")))
            {
            mbean.SetFilter(getSAP_ITSAMJavaSchedulerDefinitionForCData((CompositeData) param[0]) , (String[]) param[1]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("AddFilters") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("[Ljavax.management.openmbean.CompositeData;"))
            {
            mbean.AddFilters((String) param[0] , getSAP_ITSAMJavaSchedulerFilterArrForCData((CompositeData[]) param[1]));
			return null;
            }
            
            if(operationName.equalsIgnoreCase("CancelTask") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.CancelTask((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("HoldTask") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.HoldTask((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("ReleaseTask") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            mbean.ReleaseTask((String) param[0]);
			return null;
            }
            
            if(operationName.equalsIgnoreCase("GetFireTimes") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("javax.management.openmbean.CompositeData") && signature[2].equalsIgnoreCase("javax.management.openmbean.CompositeData"))
            {
            try{return getCDataArrForSAP_ITSAMJavaSchedulerFireTimeEvent(mbean.GetFireTimes(
	    	(String) param[0] , getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData) param[1]) , getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData) param[2])));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetFireTimes2") &&              
                signature[0].equalsIgnoreCase("javax.management.openmbean.CompositeData") && signature[1].equalsIgnoreCase("javax.management.openmbean.CompositeData") && (signature[2].equals("java.lang.Integer") || signature[2].equalsIgnoreCase("int")))
            {
            try{return getCDataArrForSAP_ITSAMJavaSchedulerFireTimeEvent(mbean.GetFireTimes2(
	    	getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData) param[0]) , getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData) param[1]) , ((Integer)param[2]).intValue()));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("GetTask") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")))
            {
            try{return getCDataForSAP_ITSAMJavaSchedulerTask(mbean.GetTask((String) param[0]));
			} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}
            }
            
            if(operationName.equalsIgnoreCase("RemoveFilters") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("[Ljavax.management.openmbean.CompositeData;"))
            {
            mbean.RemoveFilters((String) param[0] , getSAP_ITSAMJavaSchedulerFilterArrForCData((CompositeData[]) param[1]));
			return null;
            }
            
            if(operationName.equalsIgnoreCase("Schedule") &&              
                signature[0].equalsIgnoreCase("javax.management.openmbean.CompositeData") && (signature[1].equals("java.lang.String") || signature[1].equalsIgnoreCase("string")))
            {
            return mbean.Schedule(getSAP_ITSAMJavaSchedulerTaskForCData((CompositeData) param[0]) , (String) param[1]);
			
            }
            
            if(operationName.equalsIgnoreCase("SetFilters") &&              
                (signature[0].equals("java.lang.String") || signature[0].equalsIgnoreCase("string")) && signature[1].equalsIgnoreCase("[Ljavax.management.openmbean.CompositeData;"))
            {
            mbean.SetFilters((String) param[0] , getSAP_ITSAMJavaSchedulerFilterArrForCData((CompositeData[]) param[1]));
			return null;
            }
            
            if(operationName.equalsIgnoreCase("GetFormattedSchedulerTime") &&              
                signature[0].equalsIgnoreCase("javax.management.openmbean.CompositeData"))
            {
            return mbean.GetFormattedSchedulerTime(getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData) param[0]));
			
            }
            
            else { 
        // unrecognized operation name:
        throw new ReflectionException(
            new NoSuchMethodException(operationName), 
            "Cannot find the operation " + operationName +
                " in " + "SAP_ITSAMJavaScheduler");
    }
  }
   
     /*
   * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
   */
public Object getAttribute(String arg0 ) throws AttributeNotFoundException, MBeanException,   ReflectionException {
             if (arg0 == null) 
  throw new RuntimeOperationsException(
	 new IllegalArgumentException("Attribute name cannot be null"), 
	 "Cannot invoke a getter of " + "SAP_ITSAMJavaScheduler" +
		 " with null attribute name");  
		     
            if(arg0.equalsIgnoreCase("SystemCreationClassName"))
	   	    return mbean.getSystemCreationClassName();
					    
            if(arg0.equalsIgnoreCase("SystemName"))
	   	    return mbean.getSystemName();
					    
            if(arg0.equalsIgnoreCase("CreationClassName"))
	   	    return mbean.getCreationClassName();
					    
            if(arg0.equalsIgnoreCase("Name"))
	   	    return mbean.getName();
					    
            if(arg0.equalsIgnoreCase("Description"))
	   	    return mbean.getDescription();
					    if(arg0.equalsIgnoreCase("AllSchedulers"))
	    	     try{
            return getCDataArrForSAP_ITSAMJavaSchedulerDefinition(mbean.getAllSchedulers());} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}  if(arg0.equalsIgnoreCase("EventTypes"))
	    	     try{
            return getCDataArrForSAP_ITSAMProperty(mbean.getEventTypes());} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}  if(arg0.equalsIgnoreCase("BuiltinScheduler"))
	    	     try{
            return getCDataForSAP_ITSAMJavaSchedulerDefinition(mbean.getBuiltinScheduler());} catch (OpenDataException e1){
			e1.printStackTrace();
			return e1;
			}   if(arg0.equalsIgnoreCase("JobDefinitions"))
	    	     try{
            return getCDataArrForSAP_ITSAMJavaSchedulerJobDefinition(mbean.getJobDefinitions());} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}  
            if(arg0.equalsIgnoreCase("SystemTimeZone"))
	   	    return mbean.getSystemTimeZone();
					    
            if(arg0.equalsIgnoreCase("AllSchedulerTaskIds"))
	   	    return mbean.getAllSchedulerTaskIds();
					    if(arg0.equalsIgnoreCase("AllSchedulerTasks"))
	    	     try{
            return getCDataArrForSAP_ITSAMJavaSchedulerTask(mbean.getAllSchedulerTasks());} catch (OpenDataException e1) {
				e1.printStackTrace();
				return e1;
			}  
     else {
           throw(new AttributeNotFoundException("Cannot find " + arg0+ " attribute"));
             }
             
            
  }
 
// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerDefinition 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","SchedulerID","SubscriberID","ElementName","Description","User","SchedulerStatus","LastAccess","LastAccessFormatted","InactivityGracePeriod","InactivityGracePeriodFormatted"};
					 Object[] attrobj={metric.getInstanceID(),metric.getSchedulerID(),metric.getSubscriberID(),metric.getElementName(),metric.getDescription(),metric.getUser(),new Short(metric.getSchedulerStatus()),new Long(metric.getLastAccess()),metric.getLastAccessFormatted(),new Long(metric.getInactivityGracePeriod()),metric.getInactivityGracePeriodFormatted()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerDefinition(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition getSAP_ITSAMJavaSchedulerDefinitionForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition((String) data.get("InstanceID"),(String) data.get("SchedulerID"),(String) data.get("SubscriberID"),(String) data.get("ElementName"),(String) data.get("Description"),(String) data.get("User"), data.get("SchedulerStatus")==null? 0 : ((Short) data.get("SchedulerStatus")).shortValue(), data.get("LastAccess")==null? 0 : ((Long) data.get("LastAccess")).longValue(),(String) data.get("LastAccessFormatted"), data.get("InactivityGracePeriod")==null? 0 : ((Long) data.get("InactivityGracePeriod")).longValue(),(String) data.get("InactivityGracePeriodFormatted"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerDefinition() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","SchedulerID","SubscriberID","ElementName","Description","User","SchedulerStatus","LastAccess","LastAccessFormatted","InactivityGracePeriod","InactivityGracePeriodFormatted"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:","Description:The user friendly name for this instance of SettingData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)","Description:The Description property provides a textual description of the object.","Description:","Description:","Description:","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.SHORT,SimpleType.LONG,SimpleType.STRING,SimpleType.LONG,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerDefinition","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[] getSAP_ITSAMJavaSchedulerDefinitionArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerDefinitionForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerDefinition[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerDefinition(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMProperty 
  public static CompositeData getCDataForSAP_ITSAMProperty(SAP_ITSAMProperty metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"ElementName","Value","Description","InstanceID"};
					 Object[] attrobj={metric.getElementName(),metric.getValue(),metric.getDescription(),metric.getInstanceID()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMProperty(),attrnames,attrobj);
							}
		}
public static SAP_ITSAMProperty getSAP_ITSAMPropertyForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				SAP_ITSAMProperty result = new SAP_ITSAMProperty((String) data.get("InstanceID"));
		         
		         if (data.get("ElementName") != null) {
			   result.setElementName((String) data.get("ElementName"));
						}if (data.get("Value") != null) {
			   result.setValue((String) data.get("Value"));
						}if (data.get("Description") != null) {
			   result.setDescription((String) data.get("Description"));
						} 
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMProperty() throws OpenDataException
		 {
		 				 String[] itemNames={"ElementName","Value","Description","InstanceID"};
                	String[] itemDescriptions={"Description:The user friendly name for this instance of SettingData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)","Description:","Description:The Description property provides a textual description of the object.","Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMProperty","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static SAP_ITSAMProperty[] getSAP_ITSAMPropertyArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  SAP_ITSAMProperty[] arr = new SAP_ITSAMProperty[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMPropertyForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMProperty(SAP_ITSAMProperty[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMProperty(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJobDefinitionName 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJobDefinitionName(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinitionName metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"ApplicationName","JobName"};
					 Object[] attrobj={metric.getApplicationName(),metric.getJobName()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJobDefinitionName(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinitionName getSAP_ITSAMJavaSchedulerJobDefinitionNameForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinitionName result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinitionName((String) data.get("ApplicationName"),(String) data.get("JobName"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJobDefinitionName() throws OpenDataException
		 {
		 				 String[] itemNames={"ApplicationName","JobName"};
                	String[] itemDescriptions={"Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJobDefinitionName","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerProperty 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerProperty(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","Locale","Properties"};
					 Object[] attrobj={metric.getInstanceID(),metric.getLocale(),getCDataArrForSAP_ITSAMProperty(metric.getProperties())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerProperty(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty getSAP_ITSAMJavaSchedulerPropertyForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty((String) data.get("InstanceID"),(String) data.get("Locale"),getSAP_ITSAMPropertyArrForCData((CompositeData[])data.get("Properties")));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerProperty() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","Locale","Properties"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMProperty()) };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerProperty","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty[] getSAP_ITSAMJavaSchedulerPropertyArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerPropertyForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerProperty(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerProperty[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerProperty(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJobParameterDefinition 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJobParameterDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","ElementName","Description","DataDefault","Display","Direction","Group","Type","Nullable","LocalizationInfo"};
					 Object[] attrobj={metric.getInstanceID(),metric.getElementName(),metric.getDescription(),metric.getDataDefault(),new Boolean(metric.getDisplay()),metric.getDirection(),metric.getGroup(),metric.getType(),new Boolean(metric.getNullable()),getCDataArrForSAP_ITSAMJavaSchedulerProperty(metric.getLocalizationInfo())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJobParameterDefinition(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition getSAP_ITSAMJavaSchedulerJobParameterDefinitionForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition((String) data.get("InstanceID"),(String) data.get("ElementName"),(String) data.get("Description"),(String) data.get("DataDefault"),data.get("Display")==null? false : ((Boolean) data.get("Display")).booleanValue(),(String) data.get("Direction"),(String) data.get("Group"),(String) data.get("Type"),data.get("Nullable")==null? false : ((Boolean) data.get("Nullable")).booleanValue(),getSAP_ITSAMJavaSchedulerPropertyArrForCData((CompositeData[])data.get("LocalizationInfo")));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJobParameterDefinition() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","ElementName","Description","DataDefault","Display","Direction","Group","Type","Nullable","LocalizationInfo"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:The user friendly name for this instance of SettingData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)","Description:The Description property provides a textual description of the object.","Description:","Description:","Description:","Description:","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.BOOLEAN,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.BOOLEAN,new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerProperty()) };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJobParameterDefinition","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition[] getSAP_ITSAMJavaSchedulerJobParameterDefinitionArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerJobParameterDefinitionForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerJobParameterDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameterDefinition[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerJobParameterDefinition(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJobDefinition 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJobDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","ElementName","Description","Application","JobDefinitionID","JobType","Name","Parameters","Properties","RemoveDate","RetentionPeriod","RetentionPeriodFormatted","LocalizationInfo"};
					 Object[] attrobj={metric.getInstanceID(),metric.getElementName(),metric.getDescription(),metric.getApplication(),metric.getJobDefinitionID(), new Integer(metric.getJobType()),getCDataForSAP_ITSAMJavaSchedulerJobDefinitionName(metric.getName()),getCDataArrForSAP_ITSAMJavaSchedulerJobParameterDefinition(metric.getParameters()),getCDataArrForSAP_ITSAMProperty(metric.getProperties()),metric.getRemoveDate(), new Integer(metric.getRetentionPeriod()),metric.getRetentionPeriodFormatted(),getCDataArrForSAP_ITSAMJavaSchedulerProperty(metric.getLocalizationInfo())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJobDefinition(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition getSAP_ITSAMJavaSchedulerJobDefinitionForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition((String) data.get("InstanceID"),(String) data.get("ElementName"),(String) data.get("Description"),(String) data.get("Application"),(String) data.get("JobDefinitionID"),data.get("JobType")==null? 0 : ((Integer) data.get("JobType")).intValue(),getSAP_ITSAMJavaSchedulerJobDefinitionNameForCData((CompositeData)data.get("Name")),getSAP_ITSAMJavaSchedulerJobParameterDefinitionArrForCData((CompositeData[])data.get("Parameters")),getSAP_ITSAMPropertyArrForCData((CompositeData[])data.get("Properties")),(Date) data.get("RemoveDate"),data.get("RetentionPeriod")==null? 0 : ((Integer) data.get("RetentionPeriod")).intValue(),(String) data.get("RetentionPeriodFormatted"),getSAP_ITSAMJavaSchedulerPropertyArrForCData((CompositeData[])data.get("LocalizationInfo")));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJobDefinition() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","ElementName","Description","Application","JobDefinitionID","JobType","Name","Parameters","Properties","RemoveDate","RetentionPeriod","RetentionPeriodFormatted","LocalizationInfo"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:The user friendly name for this instance of SettingData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)","Description:The Description property provides a textual description of the object.","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.INTEGER,getCTypeForSAP_ITSAMJavaSchedulerJobDefinitionName(),new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerJobParameterDefinition()),new ArrayType(1,getCTypeForSAP_ITSAMProperty()),SimpleType.DATE,SimpleType.INTEGER,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerProperty()) };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJobDefinition","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] getSAP_ITSAMJavaSchedulerJobDefinitionArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerJobDefinitionForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerJobDefinition(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobDefinition[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerJobDefinition(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerTime 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerTime(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"TimeZone","Time"};
					 Object[] attrobj={metric.getTimeZone(),metric.getTime()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerTime(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime getSAP_ITSAMJavaSchedulerTimeForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTime((String) data.get("TimeZone"),(Date) data.get("Time"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerTime() throws OpenDataException
		 {
		 				 String[] itemNames={"TimeZone","Time"};
                	String[] itemDescriptions={"Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.DATE };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerTime","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerFilter 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerFilter(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"StartTime","EndTime"};
					 Object[] attrobj={getCDataForSAP_ITSAMJavaSchedulerTime(metric.getStartTime()),getCDataForSAP_ITSAMJavaSchedulerTime(metric.getEndTime())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerFilter(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter getSAP_ITSAMJavaSchedulerFilterForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter(getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData)data.get("StartTime")),getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData)data.get("EndTime")));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerFilter() throws OpenDataException
		 {
		 				 String[] itemNames={"StartTime","EndTime"};
                	String[] itemDescriptions={"Description:","Description:"};
               OpenType[] itemTypes={getCTypeForSAP_ITSAMJavaSchedulerTime(),getCTypeForSAP_ITSAMJavaSchedulerTime() };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerFilter","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] getSAP_ITSAMJavaSchedulerFilterArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerFilterForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerFilter(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFilter[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerFilter(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJobParameter 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJobParameter(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","Type","Value"};
					 Object[] attrobj={metric.getInstanceID(),getCDataForSAP_ITSAMJavaSchedulerJobParameterDefinition(metric.getType()),metric.getValue()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJobParameter(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter getSAP_ITSAMJavaSchedulerJobParameterForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter((String) data.get("InstanceID"),getSAP_ITSAMJavaSchedulerJobParameterDefinitionForCData((CompositeData)data.get("Type")),(String) data.get("Value"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJobParameter() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","Type","Value"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,getCTypeForSAP_ITSAMJavaSchedulerJobParameterDefinition(),SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJobParameter","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[] getSAP_ITSAMJavaSchedulerJobParameterArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerJobParameterForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerJobParameter(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobParameter[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerJobParameter(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerRecurringEntry 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerRecurringEntry(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","StartTime","EndTime","Period"};
					 Object[] attrobj={metric.getInstanceID(),getCDataForSAP_ITSAMJavaSchedulerTime(metric.getStartTime()),getCDataForSAP_ITSAMJavaSchedulerTime(metric.getEndTime()),new Long(metric.getPeriod())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerRecurringEntry(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry getSAP_ITSAMJavaSchedulerRecurringEntryForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry((String) data.get("InstanceID"),getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData)data.get("StartTime")),getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData)data.get("EndTime")), data.get("Period")==null? 0 : ((Long) data.get("Period")).longValue());
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerRecurringEntry() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","StartTime","EndTime","Period"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,getCTypeForSAP_ITSAMJavaSchedulerTime(),getCTypeForSAP_ITSAMJavaSchedulerTime(),SimpleType.LONG };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerRecurringEntry","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry[] getSAP_ITSAMJavaSchedulerRecurringEntryArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerRecurringEntryForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerRecurringEntry(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerRecurringEntry[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerRecurringEntry(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerCronEntry 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerCronEntry(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","TimeZone","Years","Months","DaysOfMonth","DaysOfWeek","Hours","Minutes"};
					 Object[] attrobj={metric.getInstanceID(),metric.getTimeZone(),metric.getYears(),metric.getMonths(),metric.getDaysOfMonth(),metric.getDaysOfWeek(),metric.getHours(),metric.getMinutes()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerCronEntry(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry getSAP_ITSAMJavaSchedulerCronEntryForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry((String) data.get("InstanceID"),(String) data.get("TimeZone"),(String) data.get("Years"),(String) data.get("Months"),(String) data.get("DaysOfMonth"),(String) data.get("DaysOfWeek"),(String) data.get("Hours"),(String) data.get("Minutes"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerCronEntry() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","TimeZone","Years","Months","DaysOfMonth","DaysOfWeek","Hours","Minutes"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:","Description:","Description:","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerCronEntry","Description:The SettingData class represents configuration-related and operational parameters for one or more ManagedElement(s). A ManagedElement may have multiple SettingData objects associated with it. The current operational values for an Element's parameters are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values present in the SettingData object. For example, a modem may have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. Note that the CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model. This is because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry[] getSAP_ITSAMJavaSchedulerCronEntryArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerCronEntryForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerCronEntry(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerCronEntry[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerCronEntry(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerTask 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerTask(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"ElementName","Description","InstanceID","RetentionPeriod","RetentionPeriodFormatted","Filters","JobDefinitionId","JobDefinitionName","AppName","JobParameters","RecurringEntries","CronEntries","SchedulerTaskId","TaskStatus","TaskStatusDescription","SchedulingUser","RunAsUser","TaskSource"};
					 Object[] attrobj={metric.getElementName(),metric.getDescription(),metric.getInstanceID(), new Integer(metric.getRetentionPeriod()),metric.getRetentionPeriodFormatted(),getCDataArrForSAP_ITSAMJavaSchedulerFilter(metric.getFilters()),metric.getJobDefinitionId(),metric.getJobDefinitionName(),metric.getAppName(),getCDataArrForSAP_ITSAMJavaSchedulerJobParameter(metric.getJobParameters()),getCDataArrForSAP_ITSAMJavaSchedulerRecurringEntry(metric.getRecurringEntries()),getCDataArrForSAP_ITSAMJavaSchedulerCronEntry(metric.getCronEntries()),metric.getSchedulerTaskId(),metric.getTaskStatus(),metric.getTaskStatusDescription(),metric.getSchedulingUser(),metric.getRunAsUser(),metric.getTaskSource()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerTask(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask getSAP_ITSAMJavaSchedulerTaskForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask((String) data.get("ElementName"),(String) data.get("Description"),(String) data.get("InstanceID"),data.get("RetentionPeriod")==null? 0 : ((Integer) data.get("RetentionPeriod")).intValue(),(String) data.get("RetentionPeriodFormatted"),getSAP_ITSAMJavaSchedulerFilterArrForCData((CompositeData[])data.get("Filters")),(String) data.get("JobDefinitionId"),(String) data.get("JobDefinitionName"),(String) data.get("AppName"),getSAP_ITSAMJavaSchedulerJobParameterArrForCData((CompositeData[])data.get("JobParameters")),getSAP_ITSAMJavaSchedulerRecurringEntryArrForCData((CompositeData[])data.get("RecurringEntries")),getSAP_ITSAMJavaSchedulerCronEntryArrForCData((CompositeData[])data.get("CronEntries")),(String) data.get("SchedulerTaskId"),(String) data.get("TaskStatus"),(String) data.get("TaskStatusDescription"),(String) data.get("SchedulingUser"),(String) data.get("RunAsUser"),(String) data.get("TaskSource"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerTask() throws OpenDataException
		 {
		 				 String[] itemNames={"ElementName","Description","InstanceID","RetentionPeriod","RetentionPeriodFormatted","Filters","JobDefinitionId","JobDefinitionName","AppName","JobParameters","RecurringEntries","CronEntries","SchedulerTaskId","TaskStatus","TaskStatusDescription","SchedulingUser","RunAsUser","TaskSource"};
                	String[] itemDescriptions={"Description:The user friendly name for this instance of SettingData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)","Description:The Description property provides a textual description of the object.","Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.INTEGER,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerFilter()),SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerJobParameter()),new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerRecurringEntry()),new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerCronEntry()),SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerTask","Description:JobSettingData represents job characteristics and scheduling information for a CIM_Job. The settings may be applied to a job handling Service, a JobQueue or other destination to which jobs are submitted, and/or to individual CIM_Jobs. The applicability of the settings are defined using the ElementSettingData relationship. Since the Settings may be defined in several contexts and applied to many types of elements, this class is defined as a subclass of SettingData, versus ScopedSettingData.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask[] getSAP_ITSAMJavaSchedulerTaskArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerTaskForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerTask(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerTask[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerTask(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJob 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJob(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"InstanceID","JobID","TaskID","ElementName","StartTime","CancelRequest","EndDate","JobDefinitionId","Node","ParentId","RetentionPeriod","RetentionPeriodFormatted","ReturnCode","SchedulerID","SchedulerName","AppName","SubmitDate","User","VendorData","JobStatus","Name","Description"};
					 Object[] attrobj={metric.getInstanceID(),metric.getJobID(),metric.getTaskID(),metric.getElementName(),metric.getStartTime(),new Boolean(metric.getCancelRequest()),metric.getEndDate(),metric.getJobDefinitionId(),metric.getNode(),metric.getParentId(), new Integer(metric.getRetentionPeriod()),metric.getRetentionPeriodFormatted(),new Short(metric.getReturnCode()),metric.getSchedulerID(),metric.getSchedulerName(),metric.getAppName(),metric.getSubmitDate(),metric.getUser(),metric.getVendorData(),metric.getJobStatus(),metric.getName(),metric.getDescription()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJob(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob getSAP_ITSAMJavaSchedulerJobForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				if(data.get("InstanceID")==null){
                throw new IllegalArgumentException("InstanceID is a key property:cannot be null");
									}
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob((String) data.get("InstanceID"),(String) data.get("JobID"),(String) data.get("TaskID"),(String) data.get("ElementName"),(Date) data.get("StartTime"),data.get("CancelRequest")==null? false : ((Boolean) data.get("CancelRequest")).booleanValue(),(Date) data.get("EndDate"),(String) data.get("JobDefinitionId"),(String) data.get("Node"),(String) data.get("ParentId"),data.get("RetentionPeriod")==null? 0 : ((Integer) data.get("RetentionPeriod")).intValue(),(String) data.get("RetentionPeriodFormatted"), data.get("ReturnCode")==null? 0 : ((Short) data.get("ReturnCode")).shortValue(),(String) data.get("SchedulerID"),(String) data.get("SchedulerName"),(String) data.get("AppName"),(Date) data.get("SubmitDate"),(String) data.get("User"),(String) data.get("VendorData"),(String) data.get("JobStatus"),(String) data.get("Name"),(String) data.get("Description"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJob() throws OpenDataException
		 {
		 				 String[] itemNames={"InstanceID","JobID","TaskID","ElementName","StartTime","CancelRequest","EndDate","JobDefinitionId","Node","ParentId","RetentionPeriod","RetentionPeriodFormatted","ReturnCode","SchedulerID","SchedulerName","AppName","SubmitDate","User","VendorData","JobStatus","Name","Description"};
                	String[] itemDescriptions={"Description:Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: <OrgID>:<LocalID> Where <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. For DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.","Description:","Description:","Description:A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.","Description:The time that the Job was actually started. This may be represented by an actual date and time, or by an interval relative to the time that this property is requested. Note that this property is also present in the JobProcessingStatistics class. This is necessary to capture the processing information for recurring Jobs, since only the 'last' run time can be stored in this single-valued property.","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:","Description:A free form string representing the Job's status. The primary status is reflected in the inherited OperationalStatus property. JobStatus provides additional, implementation-specific details.","Description:The user friendly name for this instance of Job. In addition, the user friendly name can be used as a property for a search or query. (Note: Name does not have to be unique within a namespace.)","Description:The Description property provides a textual description of the object."};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.DATE,SimpleType.BOOLEAN,SimpleType.DATE,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.INTEGER,SimpleType.STRING,SimpleType.SHORT,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.DATE,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJob","Description:A concrete version of Job. This class represents a generic and instantiable unit of work, such as a batch or a print job.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob[] getSAP_ITSAMJavaSchedulerJobArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerJobForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerJob(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJob[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerJob(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerLogRecord 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerLogRecord(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"Message","Time","Severity"};
					 Object[] attrobj={metric.getMessage(),metric.getTime(), new Integer(metric.getSeverity())};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerLogRecord(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord getSAP_ITSAMJavaSchedulerLogRecordForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord((String) data.get("Message"),(Date) data.get("Time"),data.get("Severity")==null? 0 : ((Integer) data.get("Severity")).intValue());
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerLogRecord() throws OpenDataException
		 {
		 				 String[] itemNames={"Message","Time","Severity"};
                	String[] itemDescriptions={"Description:","Description:","Description:"};
               OpenType[] itemTypes={SimpleType.STRING,SimpleType.DATE,SimpleType.INTEGER };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerLogRecord","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord[] getSAP_ITSAMJavaSchedulerLogRecordArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerLogRecordForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerLogRecord(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogRecord[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerLogRecord(crr[i]);
     	return cd;
					 }
     }

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerLogIterator 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerLogIterator(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"LogRecords","StateDescriptor"};
					 Object[] attrobj={getCDataArrForSAP_ITSAMJavaSchedulerLogRecord(metric.getLogRecords()),metric.getStateDescriptor()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerLogIterator(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator getSAP_ITSAMJavaSchedulerLogIteratorForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerLogIterator(getSAP_ITSAMJavaSchedulerLogRecordArrForCData((CompositeData[])data.get("LogRecords")),(String) data.get("StateDescriptor"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerLogIterator() throws OpenDataException
		 {
		 				 String[] itemNames={"LogRecords","StateDescriptor"};
                	String[] itemDescriptions={"Description:","Description:"};
               OpenType[] itemTypes={new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerLogRecord()),SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerLogIterator","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerJobIterator 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerJobIterator(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"Jobs","StateDescriptor"};
					 Object[] attrobj={getCDataArrForSAP_ITSAMJavaSchedulerJob(metric.getJobs()),metric.getStateDescriptor()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerJobIterator(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator getSAP_ITSAMJavaSchedulerJobIteratorForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerJobIterator(getSAP_ITSAMJavaSchedulerJobArrForCData((CompositeData[])data.get("Jobs")),(String) data.get("StateDescriptor"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerJobIterator() throws OpenDataException
		 {
		 				 String[] itemNames={"Jobs","StateDescriptor"};
                	String[] itemDescriptions={"Description:","Description:"};
               OpenType[] itemTypes={new ArrayType(1,getCTypeForSAP_ITSAMJavaSchedulerJob()),SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerJobIterator","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 

// Conversion methods for CompositeData type Class SAP_ITSAMJavaSchedulerFireTimeEvent 
  public static CompositeData getCDataForSAP_ITSAMJavaSchedulerFireTimeEvent(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent metric) throws OpenDataException {
			  if(metric==null){
				  return null;
				}else{
					 String[] attrnames={"Time","Filtered","TaskId"};
					 Object[] attrobj={getCDataForSAP_ITSAMJavaSchedulerTime(metric.getTime()),new Boolean(metric.getFiltered()),metric.getTaskId()};

					return new CompositeDataSupport(getCTypeForSAP_ITSAMJavaSchedulerFireTimeEvent(),attrnames,attrobj);
							}
		}
public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent getSAP_ITSAMJavaSchedulerFireTimeEventForCData(CompositeData data) {
			 if(data==null){
				return null;
			}else{							
				
				
			/*throw an exception if the value of any key property is null in CData*/
				
				
			/*Initializes the read-only properties to default values if the value is null in CData with in the constructor*/				
				

				com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent result = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent(getSAP_ITSAMJavaSchedulerTimeForCData((CompositeData)data.get("Time")),data.get("Filtered")==null? false : ((Boolean) data.get("Filtered")).booleanValue(),(String) data.get("TaskId"));
		         
		          
					  return result;
					}
		  }
		 
		 public static CompositeType getCTypeForSAP_ITSAMJavaSchedulerFireTimeEvent() throws OpenDataException
		 {
		 				 String[] itemNames={"Time","Filtered","TaskId"};
                	String[] itemDescriptions={"Description:","Description:","Description:"};
               OpenType[] itemTypes={getCTypeForSAP_ITSAMJavaSchedulerTime(),SimpleType.BOOLEAN,SimpleType.STRING };
		
				return new CompositeType("SAP_ITSAMJavaSchedulerFireTimeEvent","Description:ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.",itemNames,itemDescriptions,itemTypes);
	  } 


public static com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[] getSAP_ITSAMJavaSchedulerFireTimeEventArrForCData(CompositeData[] cd){
			if(cd==null){
			return null;
			}else{
				  com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[] arr = new com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[cd.length] ;
				for(int i=0;i< cd.length;i++)
				arr[i] =  getSAP_ITSAMJavaSchedulerFireTimeEventForCData(cd[i]);
				return arr;
					}
	}

	
public static CompositeData[] getCDataArrForSAP_ITSAMJavaSchedulerFireTimeEvent(com.sap.engine.services.scheduler.runtime.mbean.SAP_ITSAMJavaSchedulerFireTimeEvent[] crr) throws OpenDataException{
			if(crr==null){
			return null;
			}else{
     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
     	for(int i=0;i<crr.length;i++)
     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMJavaSchedulerFireTimeEvent(crr[i]);
     	return cd;
					 }
     }

}
 