/*
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.deploy.ear.jar;

import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import com.sap.engine.lib.xml.Info;
import com.sap.engine.services.deploy.container.ContainerInfo;
import com.sap.engine.services.deploy.container.ContainerInterface;
import com.sap.engine.services.deploy.container.DeploymentException;
import com.sap.engine.services.deploy.container.rtgen.DirAnnotation;
import com.sap.engine.services.deploy.container.rtgen.GenerationException;
import com.sap.engine.services.deploy.container.rtgen.Generator;
import com.sap.engine.services.deploy.container.rtgen.ModuleDetector;
import com.sap.engine.services.deploy.container.rtgen.ModuleDetectorExt;
import com.sap.engine.services.deploy.ear.J2EEModule;
import com.sap.engine.services.deploy.ear.Module;
import com.sap.engine.services.deploy.ear.jar.moduledetect.AnyModuleDetector;
import com.sap.engine.services.deploy.ear.jar.moduledetect.J2EEDefaultModuleDetector;
import com.sap.engine.services.deploy.ear.jar.moduledetect.ModuleDetectorWrapper;
import com.sap.engine.services.deploy.ear.jar.moduledetect.VoidModuleDetector;
import com.sap.engine.services.deploy.ear.jar.modulematch.ModuleSource;
import com.sap.engine.services.deploy.server.DeployConstants;
import com.sap.engine.services.deploy.server.ExceptionConstants;
import com.sap.engine.services.deploy.server.cache.containers.Containers;
import com.sap.engine.services.deploy.server.utils.container.ContainerWrapper;

/**
 * @author Luchesar Cekov
 */
public class ModuleGeneratorTool {
	private File tempDir;
	private ModuleSource moduleSource;
	private EarDescriptor descriptor;

	public ModuleGeneratorTool(File aTempDir, ModuleSource aModuleSource,
			EarDescriptor aDescriptor) {
		tempDir = aTempDir;
		moduleSource = aModuleSource;
		descriptor = aDescriptor;
	}

	/*
	 * Detects all modules suitable for the registered containers. Generates
	 * additional modules.
	 */
	public void generateModules() throws DeploymentException, IOException {
		Containers containers = Containers.getInstance();
		ContainerWrapper container = null;
		ContainerInfo info = null;
		// for each container detect the modules depending on the ModuleDetector
		for (Iterator<ContainerWrapper> iter = containers.getContainersMap()
				.values().iterator(); iter.hasNext();) {
			container = iter.next();
			info = container.getContainerInfo();

			String[] conditionFile = info.getConditionalFileNames();

			if (conditionFile != null) {
				for (int i = 0; i < conditionFile.length; i++) {
					if (moduleSource.containsModuleFile(conditionFile[i])) {
						matchModules(container);
						break;
					}
				}
			} else {
				matchModules(container);
			}
		}
		generateOverExistingModules();
	}

	/*
	 * Calls the relevant generation method for every module Removes the module
	 * after generation if needed.
	 */
	private void generateOverExistingModules() throws GenerationException,
			IOException {
		for (Module m : descriptor.getAllModules()) {
			ContainerInterface ci = Containers.getInstance().getContainer(
					m.getModuleType());
			Generator gen = ci.getContainerInfo().getGenerator();
			if (gen == null) {
				continue;
			}
			generate(ci.getContainerInfo(), m);
			if (gen.removeModule(m.getUri())) {
				descriptor.removeModule(m);
			}
		}
	}

	/*
	 * Generate module files, mark them as auto generated and add them to the
	 * modules in the descriptor
	 */
	private void generate(ContainerInfo cInfo, Module module)
			throws GenerationException, IOException {
		Generator gen = cInfo.getGenerator();
		if (gen != null && gen.supportsFile(module.getUri())) {
			Module[] modules = gen.generate(new DirAnnotation(tempDir,
					descriptor.getAnnotations()), module.getUri());

			File tmpFile = null;
			for (int j = 0; j < modules.length; j++) {
				tmpFile = new File(tempDir, modules[j].getUri());
				if (!tmpFile.exists()) {
					GenerationException ge = new GenerationException(
							ExceptionConstants.FILE_NOT_PRESENT, new Object[] {
									modules[j].getUri(), tempDir });
					ge.setMessageID("ASJ.dpl_ds.005501");
					throw ge;
				}
				modules[j].setAutogenerated(true);
				descriptor.addModule(modules[j]);
			}
		}
	}

	/*
	 * Match modules that will be suitable for the container depending on the
	 * files and extensions the container is interested in.
	 */
	private void matchModules(final ContainerWrapper container)
			throws DeploymentException {
		ModuleDetectorWrapper detector = getDetector(container);

		ContainerInfo cInfo = container.getContainerInfo();
		String[] fileNames = cInfo.getFileNames();
		String[] fileExtensions = cInfo.getFileExtensions();
		Set<String> foundFileNames = new HashSet<String>();

		// searching for modules depending on the file names
		if (fileNames != null) {
			for (String file : fileNames) {
				if (moduleSource.containsModuleFile(file)) {// if the
															// application
															// contains the
															// module
					// the corresponding implementation of the detector is used
					foundFileNames.add(file);
				}
			}
		}

		// searching for modules depending on the file extensions
		if (fileExtensions != null) {
			for (int i = 0; i < fileExtensions.length; i++) {
				for (String moduleFile : moduleSource.listModuleFileNames()) {
					if (moduleFile.toLowerCase().endsWith(
							fileExtensions[i].toLowerCase())) {
						foundFileNames.add(moduleFile);
					}
				}
			}
		}

		// if there are conditional files the should be added to the modules too
		// it doesn't matter if any other modules are found
		String[] conditionalFileName = cInfo.getConditionalFileNames();
		if (conditionalFileName != null) {
			for (String moduleFile : conditionalFileName) {
				if (moduleSource.containsModuleFile(moduleFile)) {
					foundFileNames.add(moduleFile);
				}
			}
		}

		// adding the modules if any are found
		if (foundFileNames.size() != 0) {
			Module[] modules = detector.detectModules(new DirAnnotation(
					tempDir, descriptor.getAnnotations()), foundFileNames
					.toArray(new String[foundFileNames.size()]), descriptor
					.getProviderName()
					+ DeployConstants.DELIMITER_4_PROVIDER_AND_NAME
					+ descriptor.getDisplayName());
			if (modules != null) {
				for (Module module : modules) {
					moduleFound(module);
				}
			}
		}
	}

	/*
	 * Returns detector for container depending on the version and the existence
	 * of application.xml
	 */
	private ModuleDetectorWrapper getDetector(final ContainerWrapper container) {
		ModuleDetectorWrapper defaultDetector = container.getDetectorWrapper();
		ModuleDetectorWrapper fullDetector = new ModuleDetectorWrapper(
				new AnyModuleDetector(container.getContainerInfo().getName()),
				false);

		boolean javaEE5 = DplArchiveReader.JAVA_EE_5.equals(descriptor
				.getApplicationJ2EEVersion());
		boolean hasDetector = defaultDetector != null;
		boolean isJ2eeContainer = container.getContainerInfo()
				.isJ2EEContainer();
		boolean hasApplicationXML = descriptor.getHasApplicationXML();

		ModuleDetectorWrapper resultDetector = fullDetector;
		if (javaEE5 && hasDetector) {
			resultDetector = defaultDetector;
		}

		if (isJ2eeContainer) {
			if (hasApplicationXML) {
				resultDetector = new ModuleDetectorWrapper(
						new J2EEDefaultModuleDetector(descriptor,
								J2EEModule.Type
										.valueOf(container.getContainerInfo()
												.getJ2EEModuleName())), false);
			} else {
				if (hasDetector) {
					resultDetector = defaultDetector;
				} else {
					resultDetector = new ModuleDetectorWrapper(
							VoidModuleDetector.instance, false);
				}
			}
		}
		return resultDetector;
	}

	/*
	 * Checks if module is a file and adds it to the modules in the descriptor
	 */
	private void moduleFound(Module module) throws DeploymentException {
		if (module == null) {
			return;
		}
		if (!module.isFile()) {
			throw new DeploymentException(
					"ASJ.dpl_ds.006003 Wrong module detection. There is no such file \""
							+ module.getAbsolutePath() + "\"");
		}
		descriptor.addModule(module);
	}
}