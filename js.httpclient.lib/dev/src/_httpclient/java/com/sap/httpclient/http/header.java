/*
 * Copyright (c) 2006 by SAP AG, Walldorf.,
 * url: http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.httpclient.http;

import com.sap.httpclient.NameValuePair;

/**
 * Class representing a HTTP header. This class is also used for storing all the headers constants
 *
 * @author Nikolai Neichev
 */
public class Header extends NameValuePair {

  /**
   * Autogenerated header flag.
   */
  private boolean isAutogenerated = false;

  /**
   * Default constructor.
   */
  public Header() {
    this(null, null);
  }

  /**
   * Constructor with specified name and value
   *
   * @param name  the header name
   * @param value the header value
   */
  public Header(String name, String value) {
    super(name, value);
  }

  /**
   * Constructor with specified name and value
   *
   * @param name the header name
   * @param value the header value
   * @param isAutogenerated <tt>true</tt> if the header is autogenerated, <tt>false</tt> otherwise.
   */
  public Header(String name, String value, boolean isAutogenerated) {
    super(name, value);
    this.isAutogenerated = isAutogenerated;
  }

  /**
   * Returns a {@link String} representation of the header.
   *
   * @return the header as string
   */
  public String toText() {
    StringBuilder sb = new StringBuilder(64);
    sb.append( null == getName() ? "" : getName() );
    sb.append(": ");
    sb.append( null == getValue() ? "" : getValue() );
    sb.append("\r\n");
    return sb.toString();
  }

  /**
   * Returns a {@link String} representation of the header.
   *
   * @return the header as string
   */
  public String toString() {
    return toText();
  }

  /**
   * Returns an array of {@link HeaderElement}s constructed from the header.
   *
   * @return an array of header elements
   */
  public HeaderElement[] getElements() {
    return HeaderElement.parseElements(getValue());
  }

  /**
   * Returns the value of the auto-generated header flag.
   *
   * @return <tt>true</tt> if the header is autogenerated, <tt>false</tt> otherwise.
   */
  public boolean isAutogenerated() {
    return isAutogenerated;
  }

  // General header names constants ***************************************************************

  /**
   * The Cache-Control general-header field is used to specify directives that MUST be obeyed by all caching
   * mechanisms along the request/response chain.
   */
  public static String __CACHE_CONTROL = "Cache-Control";

  /**
   * The Connection general-header field allows the sender to specify options that are desired for that particular
   * connection and MUST NOT be communicated by proxies over further connections.
   */
  public static String __CONNECTION = "Connection";

  /**
   * The Date general-header field represents the date and time at which the message was originated, having the same
   * semantics as orig-date in RFC 822.
   */
  public static String __DATE = "Date";

  /**
   * The Pragma general-header field is used to include implementation-specific directives that might apply
   * to any recipient along the request/response chain.
   */
  public static String __PRAGMA = "Pragma";

  /**
   * The Trailer general field value indicates that the specified set of header fields is present in the trailer
   * of a message encoded with chunked transfer-coding.
   */
  public static String __TRAILER = "Trailer";

  /**
   * The Transfer-Encoding general-header field indicates what (if any) type of transformation has been applied to
   * the message body in order to safely transfer it between the sender and the recipient.
   */
  public static String __TRANSFER_ENCODING = "Transfer-Encoding";

  /**
   * The Upgrade general-header allows the client to specify what additional communication protocols it supports
   * and would like to use if the server finds it appropriate to switch protocols.
   */
  public static String __UPGRADE = "Upgrade";

  /**
   * The Via general-header field MUST be used by gateways and proxies to indicate the intermediate protocols and
   * recipients between the user agent and the server on requests, and between the origin server and the client
   * on responses.
   */
  public static String __VIA = "Via";

  /**
   * The Warning general-header field is used to carry additional information about the status or transformation
   * of a message which might not be reflected in the message.
   */
  public static String __WARING = "Warning";


  // Request header names constants ***************************************************************

  /**
   * The Accept request-header field can be used to specify certain media types which are acceptable for the response.
   */
  public static String ACCEPT = "Accept";

  /**
   * The Accept-Charset request-header field can be used to indicate what character sets are acceptable for the
   * response.
   */
  public static String ACCEPT_CHARSET = "Accept-Charset";

  /**
   * The Accept-Encoding request-header field is similar to Accept, but restricts the content-codings
   * that are acceptable in the response.
   */
  public static String ACCEPT_ENCODING = "Accept-Encoding";

  /**
   * The Accept-Language request-header field is similar to Accept, but restricts the set of natural languages
   * that are preferred as a response to the request.
   */
  public static String ACCEPT_LENGUAGE = "Accept-Language";

  /**
   * The Authorization field value consists of credentials containing the authentication information
   * of the user agent for the realm of the resource being requested.
   */
  public static String AUTHORISATION = "Authorization";

  /**
   * The Cookie request-header field contains a cookie, which holds the session information.
   */
  public static String COOKIE = "Cookie";

  /**
   * The Expect request-header field is used to indicate that particular server behaviors are required by the client.
   */
  public static String EXPECT = "Expect";

  /**
   * The From request-header field, if specified, SHOULD contain an Internet e-mail address for the human user who
   * controls the requesting user agent.
   */
  public static String FROM = "From";

  /**
   * The Host request-header field specifies the Internet host and port number of the resource being requested,
   * as obtained from the original URI specified by the user or referring resource
   */
  public static String HOST = "Host";

  /**
   * The If-Match request-header field is used with a method to make it conditional.
   */
  public static String IF_MATCH = "If-Match";

  /**
   * The If-Modified-Since request-header field is used with a method to make it conditional.
   */
  public static String IF_MODIFIED_SINCE = "If-Modified-Since";

  /**
   * The If-None-Match request-header field is used with a method to make it conditional.
   */
  public static String IF_NONE_MATCH = "If-None-Match";

  /**
   * If a client has a partial copy of an entity in its cache, and wishes to have an up-to-date copy of the entire entity in its
   * cache, it could use the Range request-header with a conditional GET (using either or both of If-Unmodified-Since and If-Match.)
   *  However, if the condition fails because the entity has been modified, the client would then have to make a second request
   * to obtain the entire current entity-body.
   */
  public static String IF_RANGE = "If-Range";

  /**
   * The If-Unmodified-Since request-header field is used with a method to make it conditional.
   */
  public static String IF_UNMODFIED_SINCE = "If-Unmodified-Since";

  /**
   * The Max-Forwards request-header field provides a mechanism with the TRACE and OPTIONS methods to limit
   * the number of proxies or gateways that can forward the request to the next inbound RFC 2616 HTTP/1.1 June, 1999
   * Fielding, et al Standards Track server. This can be useful when the client is attempting to trace a request chain,
   * which appears to be failing or looping in mid-chain.
   */
  public static String MAX_FORWARDS = "Max-Forwards";

  /**
   * The Proxy-Authorization request-header field allows the client to identify itself (or its user) to a proxy,
   *  which requires authentication.
   */
  public static String PROXY_AUTHORISATION = "Proxy-Authorization";

  /**
   * HTTP retrieval requests using conditional or unconditional GET methods MAY request one or more sub-ranges
   * of the entity, instead of the entire entity, using the Range request header, which applies to the entity
   * returned as the result of the request
   */
  public static String RANGE = "Range";

  /**
   * The Referer[sic] request-header field allows the client to specify, for the server's benefit, the address (URI)
   * of the resource from which the Request-URI was obtained (the "referrer", although the header field is misspelled.)
   */
  public static String REFERER = "Referer";

  /**
   * The TE request-header field indicates what extension transfer-codings it is willing to accept in the response
   * and whether or not it is willing to accept trailer fields in a chunked transfer-coding.
   */
  public static String TE = "TE";

  /**
   * The User-Agent request-header field contains information about the user agent originating the request.
   */
  public static String USER_AGENT = "User-Agent";

  // WEBDAV HEADERS

  /**
   * Used from the webdav COPY method to point the copy destination
   */
  public static String DESTINATION = "Destination";

  /**
   * Used from the webdav COPY method to specify the behaviour if there is a resource at the destination
   * Values are : "T" - overwrite ; "F" - fail
   */
  public static String OVERWRITE = "Overwrite";

  /**
   * Used to specify the Depth of a PROPFIND method or a COPY of collection
   */
  public static String DEPTH = "Depth";

  /**
   * Used with LOCK requests to indicates the behavior of the server
   */
  public static String TIMEOUT = "Timeout";

  /**
   * Used with the UNLOCK method to identify the lock to be removed.
   */
  public static String LOCK_TOKEN = "Lock-Token";

  /**
   * This header indicates that the resource supports the DAV schema and protocol as specified.
   */
  public static String DAV = "DAV";

  /**
   * The If header is intended to have similar functionality to the If-Match header defined in section 14.25
   * of [RFC2068]. However the If header is intended for use with any URI which represents state information,
   * referred to as a state token, about a resource as well as ETags.
   */
  public static String IF = "If";

  // Entity header names constants ****************************************************************

  /**
   * The Allow entity-header field lists the set of methods supported by the resource identified by the Request-URI.
   */
  public static String _ALLOW = "Allow";

  /**
   * The Content-Encoding entity-header field is used as a modifier to the media-type.
   */
  public static String _CONTENT_ENCODING = "Content-Encoding";

  /**
   * The Content-Language entity-header field describes the natural language(s) of the intended audience for the
   * enclosed entity.
   */
  public static String _CONTENT_LANGUAGE = "Content-Language";

  /**
   * The Content-Length entity-header field indicates the size of the entity-body, in decimal number of OCTETs,
   * sent to the recipient or, in the case of the HEAD method, the size of the entity-body that would have been
   * sent had the request been a GET.
   */
  public static String _CONTENT_LENGTH = "Content-Length";

  /**
   * The Content-Location entity-header field MAY be used to supply the resource location for the entity enclosed
   * in the message when that entity is accessible from a location separate from the requested resource's URI.
   */
  public static String _CONTENT_LOCATION = "Content-Location";

  /**
   * The Content-MD5 entity-header field, as defined in RFC 1864 [23], is an MD5 digest of the entity-body for the
   * purpose of providing an end-to-end message integrity check (MIC) of the entity-body.
   */
  public static String _CONTENT_MD5 = "Content-MD5";

  /**
   * The Content-Range entity-header is sent with a partial entity-body to specify where in the full entity-body the
   * partial body should be applied.
   */
  public static String _CONTENT_RANGE = "Content-Range";

  /**
   * The Content-Type entity-header field indicates the media type of the entity-body sent to the recipient or, in the
   * case of the HEAD method, the media type that would have been sent had the request been a GET.
   */
  public static String _CONTENT_TYPE = "Content-Type";

  /**
   * The Expires entity-header field gives the date/time after which the response is considered stale.
   */
  public static String _EXPIRES = "Expires";

  /**
   * The Last-Modified entity-header field indicates the date and time at which the origin server believes
   * the variant was last modified.
   */
  public static String _LAST_MODIFIED = "Last-Modified";

  // Cache headers and header values
  public static final String AGE = "Age";

  public static final String NO_CACHE = "no-cache";

  public static final String NO_STORE = "no-store";

  public static final String PUBLIC = "public";

  public static final String PRIVATE= "private";  

  public static final String MUST_REVALIDATE = "must-revalidate";

  public static final String PROXY_REVALIDATE = "proxy-revalidate";

  public static final String MAX_AGE = "max-age";

  public static final String S_MAXAGE = "s-maxage";

}