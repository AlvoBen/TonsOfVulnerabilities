
/*
This file is generated by Code Generator
for CIMClass SAP_ITSAMP4ManagementService
*/

package com.sap.engine.services.rmi_p4.jmx.model;	

import java.util.Iterator;
import java.util.Set;
import java.util.Vector;

import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.openmbean.CompositeData;

import com.sap.engine.interfaces.cross.jmx.model.compositedata.SAP_ITSAMCrossServiceRemoteObject;
import com.sap.engine.services.rmi_p4.exception.P4Logger;


/* 
ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema. 
@version  2.7.0	
*/	

public class SAP_ITSAMP4ManagementService_Impl implements SAP_ITSAMP4ManagementService{

private MBeanServer mbs;
	
private String CommunicationProtocolName=null;
	
private String ElementName=null;
	
private String Caption=null;
	
private String Description=null;
	
public SAP_ITSAMP4ManagementService_Impl(MBeanServer mbs) {
	this.mbs = mbs;
}

public String getCommunicationProtocolName(){
	return "P4"; 
}

/*
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. 
Note that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties. 
@return String
*/

public String getElementName(){
// Generated Code. Implementation to be done here.
return null; 
 
}

/*
The Caption property is a short textual description (one- line string) of the object. 
@return String
*/

public String getCaption(){
// Generated Code. Implementation to be done here.
return null; 
 
}

/*
The Description property provides a textual description of the object. 
@return String
*/

public String getDescription(){
// Generated Code. Implementation to be done here.
return null; 
 
}

public com.sap.engine.interfaces.cross.jmx.model.compositedata.SAP_ITSAMCrossServiceRemoteObject[] GetRemoteObjectsForClusterNode(String ClusterNodeId){
	try {
		ObjectName pattern = new ObjectName("*:type=SAP_ITSAMJ2eeCluster.SAP_ITSAMJ2eeInstance.SAP_ITSAMJ2eeNode.SAP_ITSAMP4ManagementServicePerNode,SAP_J2EEClusterNode=" + ClusterNodeId + ",*");
		Set resultSet =  mbs.queryNames(pattern, null);
		ObjectName crossServerMBean = null;
		if (resultSet.size() > 0) {
			crossServerMBean = (ObjectName) resultSet.iterator().next();
		 }
		return SAP_ITSAMP4ManagementServiceWrapper.getSAP_ITSAMCrossServiceRemoteObjectArrForCData((CompositeData[])mbs.getAttribute(crossServerMBean, "RemoteObjects")); 
	} catch (Exception e) {
	  //TODO
	  P4Logger.trace(P4Logger.ERROR, "SAP_ITSAMP4ManagementService_Impl.GetRemoteObjectsForClusterNode(String)", "Getting JMX object by cluster ID failed. Monitoring may not work propperly. Excepion: {0}", "ASJ.rmip4.rt1035", new Object []{e.toString()});
	}
	return null;
}

public com.sap.engine.interfaces.cross.jmx.model.compositedata.SAP_ITSAMCrossServiceRemoteObject[] GetRemoteObjectsForInstance(String InstanceName){
	try {
		Vector result = new Vector();
		
		ObjectName pattern = new ObjectName("*:type=SAP_ITSAMJ2eeCluster.SAP_ITSAMJ2eeInstance.SAP_ITSAMJ2eeNode.SAP_ITSAMP4ManagementServicePerNode,SAP_ITSAMJ2eeInstance.J2eeInstanceID=" + InstanceName + ",*");
		Set resultSet =  mbs.queryNames(pattern, null);
		
		boolean filter = false;
    if (resultSet.size() == 0) {
      pattern = new ObjectName("*:type=SAP_ITSAMJ2eeCluster.SAP_ITSAMJ2eeInstance.SAP_ITSAMJ2eeNode.SAP_ITSAMP4ManagementServicePerNode,*");
      resultSet =  mbs.queryNames(pattern, null);
      filter = true;
    }
		
		ObjectName crossServerMBean = null;
		Iterator iterator = resultSet.iterator();
		while (iterator.hasNext()) {
			crossServerMBean = (ObjectName) iterator.next();
			if (filter && crossServerMBean.toString().indexOf(InstanceName) == -1) {
			  continue;
			}
			String clusterName = crossServerMBean.getKeyProperty("SAP_ITSAMJ2eeNode.Name");
			convertRemoteObjectsToVector(SAP_ITSAMP4ManagementServiceWrapper.getSAP_ITSAMCrossServiceRemoteObjectArrForCData((CompositeData[])mbs.getAttribute(crossServerMBean, "RemoteObjects")), result, "", clusterName);
		 }
		 return convertVectorToRemoteObjects(result);
	} catch (Exception e) {
		//TODO 
    P4Logger.trace(P4Logger.ERROR, "SAP_ITSAMP4ManagementService_Impl.GetRemoteObjectsForInstance(String)", "Getting JMX object by cluster instance name failed. Monitoring may not work propperly. Excepion: {0}", "ASJ.rmip4.rt1036", new Object []{e.toString()});
	}
	return new com.sap.engine.interfaces.cross.jmx.model.compositedata.SAP_ITSAMCrossServiceRemoteObject[0];
}

public com.sap.engine.interfaces.cross.jmx.model.compositedata.SAP_ITSAMCrossServiceRemoteObject[] GetRemoteObjectsForCluster(){
	try {
		Vector result = new Vector();
		String instanceName = null;
		String clusterName = null;
		
		ObjectName pattern = new ObjectName("*:type=SAP_ITSAMJ2eeCluster.SAP_ITSAMJ2eeInstance.SAP_ITSAMJ2eeNode.SAP_ITSAMP4ManagementServicePerNode,*");
		Set resultSet =  mbs.queryNames(pattern, null);
		ObjectName crossServerMBean = null;
		Iterator iterator = resultSet.iterator();
		while (iterator.hasNext()) {
			crossServerMBean = (ObjectName) iterator.next();
			clusterName = crossServerMBean.getKeyProperty("SAP_ITSAMJ2eeNode.Name");
			instanceName = crossServerMBean.getKeyProperty("SAP_ITSAMJ2eeInstance.J2eeInstanceID"); 
			convertRemoteObjectsToVector(SAP_ITSAMP4ManagementServiceWrapper.getSAP_ITSAMCrossServiceRemoteObjectArrForCData((CompositeData[])mbs.getAttribute(crossServerMBean, "RemoteObjects")), result, instanceName, clusterName);
		 }
		 return convertVectorToRemoteObjects(result);
	} catch (Exception e) {
		//TODO 
    P4Logger.trace(P4Logger.ERROR, "SAP_ITSAMP4ManagementService_Impl.GetRemoteObjectsForCluster()", "Getting JMX object failed. Monitoring may not work propperly. Excepion: {0}", "ASJ.rmip4.rt1037", new Object []{e.toString()});
	}
	return null;
}


/********************************************************************/
/**************   private part **************************************/
/********************************************************************/

private void convertRemoteObjectsToVector(SAP_ITSAMCrossServiceRemoteObject[] protocol, Vector vector, String instanceName, String clusterName) {
	for (int i = 0; i < protocol.length; i++) {
		protocol[i].setInstanceID(instanceName);
		protocol[i].setClusterNodeID(clusterName);
		vector.add(protocol[i]);
	}
}
                                                                                        
private SAP_ITSAMCrossServiceRemoteObject[] convertVectorToRemoteObjects(Vector vector) {
	SAP_ITSAMCrossServiceRemoteObject[] result = new SAP_ITSAMCrossServiceRemoteObject[vector.size()];
	for (int i = 0; i < vector.size(); i++) {
		result[i] = (SAP_ITSAMCrossServiceRemoteObject)vector.elementAt(i);
	}	
	return result;
}

}