/*
 * Copyright (c) 2005 by SAP AG, Walldorf.,
 * http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */

package com.sap.engine.services.msp.itsam;

import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.openmbean.ArrayType;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;

import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerListener;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerListenerDetail;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerParameter;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerSystemInfo;

/**
 * This class is automatically generated by the CIM Java generator.<br>
 * 
 * @author Dimitar Mihaylov (i031671)
 * @version 7.10
 */
public class SAP_ITSAMMessageServerWrapper implements DynamicMBean    {   
	 
	 /* The wrapped object to be exposed as MBean */  
	  private SAP_ITSAMMessageServer_Impl mbean;
	  
	  /* MBeanInfo */
	  private static final MBeanInfo mbeanInfo;
	  
	 /* Initialize MBeanInfo */
	  static {
	    // attributes
	    
	    MBeanAttributeInfo[] attributeInfo = new MBeanAttributeInfo[5];
		
		 attributeInfo[0 ] = new MBeanAttributeInfo("HardwareId","string","Description:",true,false,false);

		 attributeInfo[1 ] = new MBeanAttributeInfo("SystemId","string","Description:",true,false,false);

		 attributeInfo[2 ] = new MBeanAttributeInfo("Parameters","SAP_ITSAMMessageServerParameter","Description:",true,false,false);

		 attributeInfo[3 ] = new MBeanAttributeInfo("SystemInfos","SAP_ITSAMMessageServerSystemInfo","Description:",true,false,false);

		 attributeInfo[4 ] = new MBeanAttributeInfo("Listeners","SAP_ITSAMMessageServerListener","Description:",true,false,false);

//	 operations
	MBeanParameterInfo[] signature;
	MBeanOperationInfo[] operationInfo = new MBeanOperationInfo[0];

	MBeanConstructorInfo[] constructorInfo = new MBeanConstructorInfo[0];
	    MBeanNotificationInfo[] notificationInfo = new MBeanNotificationInfo[0];
	  
	    mbeanInfo = new MBeanInfo("SAP_ITSAMMessageServer", "SAP_ITSAMMessageServer MBean", attributeInfo, constructorInfo, operationInfo, notificationInfo);
	  }


		 /*
		  * Wraps given SAP_ITSAMMessageServer and provides a javax.management.DynamicMBean interface on top
	   */
	       public  SAP_ITSAMMessageServerWrapper(SAP_ITSAMMessageServer_Impl mbean){
	              this.mbean = mbean;
	       }
	       
	    /*
		  * Creates an empty wrapper for SAP_ITSAMMessageServer
	   */
	    public SAP_ITSAMMessageServerWrapper() 
			{
			}
				  /*
	   * Sets a new SAP_ITSAMMessageServer to be wrapped and returns the old one
	   */
	  public SAP_ITSAMMessageServer_Impl setManagedObject(SAP_ITSAMMessageServer_Impl mbean) {
	    SAP_ITSAMMessageServer_Impl old = this.mbean;
	    this.mbean = mbean;
	    return old;
	  }

	  /*
	   * Returns the currently wrapped SAP_ITSAMMessageServer
	   */
	  public SAP_ITSAMMessageServer getManagedObject() {
	    return this.mbean;
	  }
			
			
	    /*
	   * @see javax.management.DynamicMBean#getAttributes(java.lang.String)
	   */
	      public AttributeList getAttributes(String[] arg0) {
			return null;
		   }

		  public AttributeList setAttributes(AttributeList arg0) {
			 return null;
		  }
	    
	     /**
	   * @see javax.management.DynamicMBean#getMBeanInfo()
	   */
		public MBeanInfo getMBeanInfo() {
	     return mbeanInfo;
		  }   
	    
	 /**
	   * @see javax.management.DynamicMBean\#setAttribute(javax.management.Attribute)
	   */    
	    public void setAttribute(Attribute attr) throws AttributeNotFoundException, InvalidAttributeValueException,
	      MBeanException, ReflectionException {
	      String name = attr.getName();
	          
	         }             
	  
	   /**
	   * @see javax.management.DynamicMBean#invoke(java.lang.String, java.lang.Object[], java.lang.String[])
	   */
	     public Object invoke(String operationName, Object param[], String signature[])
	    throws MBeanException, ReflectionException {
	     if (operationName == null) {
	        throw new RuntimeOperationsException(
	            new IllegalArgumentException(
	                "Operation name cannot be null"),
	            "Cannot invoke a null operation in " + "SAP_ITSAMMessageServer");
	            }
	            
	            else { 
	        // unrecognized operation name:
	        throw new ReflectionException(
	            new NoSuchMethodException(operationName), 
	            "Cannot find the operation " + operationName +
	                " in " + "SAP_ITSAMMessageServer");
	    }
	  }
	   
	     /*
	   * @see javax.management.DynamicMBean#getAttribute(java.lang.String)
	   */
	public Object getAttribute(String arg0 ) throws AttributeNotFoundException, MBeanException,   ReflectionException {
	             if (arg0 == null) 
	  throw new RuntimeOperationsException(
		 new IllegalArgumentException("Attribute name cannot be null"), 
		 "Cannot invoke a getter of " + "SAP_ITSAMMessageServer" +
			 " with null attribute name");  
			     if(arg0.equals("HardwareId"))
	                    
		   	    return mbean.getHardwareId();
						    if(arg0.equals("SystemId"))
	                    
		   	    return mbean.getSystemId();
						    if(arg0.equals("Parameters"))
		    	     try{
	            return getCDataArrForSAP_ITSAMMessageServerParameter(mbean.getParameters());} catch (OpenDataException e1) {
					e1.printStackTrace();
					return "ERROR"+e1.getMessage();
				}  if(arg0.equals("SystemInfos"))
		    	     try{
	            return getCDataArrForSAP_ITSAMMessageServerSystemInfo(mbean.getSystemInfos());} catch (OpenDataException e1) {
					e1.printStackTrace();
					return "ERROR"+e1.getMessage();
				}  if(arg0.equals("Listeners"))
		    	     try{
	            return getCDataArrForSAP_ITSAMMessageServerListener(mbean.getListeners());} catch (OpenDataException e1) {
					e1.printStackTrace();
					return "ERROR"+e1.getMessage();
				}  
	     else {
	           throw(new AttributeNotFoundException("Cannot find " + arg0+ " attribute"));
	             }
	             
	            
	  }
	   
	  public static CompositeData getCDataForSAP_ITSAMMessageServerParameter(SAP_ITSAMMessageServerParameter metric) throws OpenDataException {
	  
	  	 String[] attrnames={"Key","Value"};
		 Object[] attrobj={metric.getKey(),metric.getValue()};

		return new CompositeDataSupport(getCTypeForSAP_ITSAMMessageServerParameter(),attrnames,attrobj);
		
	}
	public static SAP_ITSAMMessageServerParameter getSAP_ITSAMMessageServerParameterForCData(CompositeData data) {
	    	SAP_ITSAMMessageServerParameter result = new SAP_ITSAMMessageServerParameter((String) data.get("Key"),(String) data.get("Value"));
			          
			  return result;}
			 
			 public static CompositeType getCTypeForSAP_ITSAMMessageServerParameter() throws OpenDataException
			 {
			 				 String[] itemNames={"Key","Value"};
	                	String[] itemDescriptions={"Description:","Description:"};
	               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING };
			
		return new CompositeType("SAP_ITSAMMessageServerParameter","Description:",itemNames,itemDescriptions,itemTypes);
		  } 



	public static SAP_ITSAMMessageServerParameter[] getSAP_ITSAMMessageServerParameterArrForCData(CompositeData[] cd){
			  SAP_ITSAMMessageServerParameter[] arr = null;
			for(int i=0;i< cd.length;i++)
			arr[i] =  getSAP_ITSAMMessageServerParameterForCData(cd[i]);
			return arr;
		}

		
	public static CompositeData[] getCDataArrForSAP_ITSAMMessageServerParameter(SAP_ITSAMMessageServerParameter[] crr) throws OpenDataException{
	     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
	     	for(int i=0;i<crr.length;i++)
	     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMMessageServerParameter(crr[i]);
	     	return cd;
	     }
	  
	  public static CompositeData getCDataForSAP_ITSAMMessageServerSystemInfo(SAP_ITSAMMessageServerSystemInfo metric) throws OpenDataException {
	  
	  	 String[] attrnames={"Key","Value"};
		 Object[] attrobj={metric.getKey(),metric.getValue()};

		return new CompositeDataSupport(getCTypeForSAP_ITSAMMessageServerSystemInfo(),attrnames,attrobj);
		
	}
	public static SAP_ITSAMMessageServerSystemInfo getSAP_ITSAMMessageServerSystemInfoForCData(CompositeData data) {
	    	SAP_ITSAMMessageServerSystemInfo result = new SAP_ITSAMMessageServerSystemInfo((String) data.get("Key"),(String) data.get("Value"));
			          
			  return result;}
			 
			 public static CompositeType getCTypeForSAP_ITSAMMessageServerSystemInfo() throws OpenDataException
			 {
			 				 String[] itemNames={"Key","Value"};
	                	String[] itemDescriptions={"Description:","Description:"};
	               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING };
			
		return new CompositeType("SAP_ITSAMMessageServerSystemInfo","Description:",itemNames,itemDescriptions,itemTypes);
		  } 



	public static SAP_ITSAMMessageServerSystemInfo[] getSAP_ITSAMMessageServerSystemInfoArrForCData(CompositeData[] cd){
			  SAP_ITSAMMessageServerSystemInfo[] arr = null;
			for(int i=0;i< cd.length;i++)
			arr[i] =  getSAP_ITSAMMessageServerSystemInfoForCData(cd[i]);
			return arr;
		}

		
	public static CompositeData[] getCDataArrForSAP_ITSAMMessageServerSystemInfo(SAP_ITSAMMessageServerSystemInfo[] crr) throws OpenDataException{
	     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
	     	for(int i=0;i<crr.length;i++)
	     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMMessageServerSystemInfo(crr[i]);
	     	return cd;
	     }
	  
	  public static CompositeData getCDataForSAP_ITSAMMessageServerListenerDetail(SAP_ITSAMMessageServerListenerDetail metric) throws OpenDataException {
	  
	  	 String[] attrnames={"Node","Status"};
		 Object[] attrobj={metric.getNode(),metric.getStatus()};

		return new CompositeDataSupport(getCTypeForSAP_ITSAMMessageServerListenerDetail(),attrnames,attrobj);
		
	}
	public static SAP_ITSAMMessageServerListenerDetail getSAP_ITSAMMessageServerListenerDetailForCData(CompositeData data) {
	    	SAP_ITSAMMessageServerListenerDetail result = new SAP_ITSAMMessageServerListenerDetail((String) data.get("Node"),(String) data.get("Status"));
			          
			  return result;}
			 
			 public static CompositeType getCTypeForSAP_ITSAMMessageServerListenerDetail() throws OpenDataException
			 {
			 				 String[] itemNames={"Node","Status"};
	                	String[] itemDescriptions={"Description:","Description:"};
	               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING };
			
		return new CompositeType("SAP_ITSAMMessageServerListenerDetail","Description:",itemNames,itemDescriptions,itemTypes);
		  } 



	public static SAP_ITSAMMessageServerListenerDetail[] getSAP_ITSAMMessageServerListenerDetailArrForCData(CompositeData[] cd){
			  SAP_ITSAMMessageServerListenerDetail[] arr = null;
			for(int i=0;i< cd.length;i++)
			arr[i] =  getSAP_ITSAMMessageServerListenerDetailForCData(cd[i]);
			return arr;
		}

		
	public static CompositeData[] getCDataArrForSAP_ITSAMMessageServerListenerDetail(SAP_ITSAMMessageServerListenerDetail[] crr) throws OpenDataException{
	     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
	     	for(int i=0;i<crr.length;i++)
	     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMMessageServerListenerDetail(crr[i]);
	     	return cd;
	     }
	  
	  public static CompositeData getCDataForSAP_ITSAMMessageServerListener(SAP_ITSAMMessageServerListener metric) throws OpenDataException {
	  
	  	 String[] attrnames={"Id","Name","Details"};
		 Object[] attrobj={metric.getId(),metric.getName(),getCDataArrForSAP_ITSAMMessageServerListenerDetail(metric.getDetails())};

		return new CompositeDataSupport(getCTypeForSAP_ITSAMMessageServerListener(),attrnames,attrobj);
		
	}
	public static SAP_ITSAMMessageServerListener getSAP_ITSAMMessageServerListenerForCData(CompositeData data) {
	    	SAP_ITSAMMessageServerListener result = new SAP_ITSAMMessageServerListener((String) data.get("Id"),(String) data.get("Name"),getSAP_ITSAMMessageServerListenerDetailArrForCData((CompositeData[])data.get("Details")));
			          
			  return result;}
			 
			 public static CompositeType getCTypeForSAP_ITSAMMessageServerListener() throws OpenDataException
			 {
			 				 String[] itemNames={"Id","Name","Details"};
	                	String[] itemDescriptions={"Description:","Description:","Description:"};
	               OpenType[] itemTypes={SimpleType.STRING,SimpleType.STRING,new ArrayType(1,getCTypeForSAP_ITSAMMessageServerListenerDetail()) };
			
		return new CompositeType("SAP_ITSAMMessageServerListener","Description:",itemNames,itemDescriptions,itemTypes);
		  } 



	public static SAP_ITSAMMessageServerListener[] getSAP_ITSAMMessageServerListenerArrForCData(CompositeData[] cd){
			  SAP_ITSAMMessageServerListener[] arr = null;
			for(int i=0;i< cd.length;i++)
			arr[i] =  getSAP_ITSAMMessageServerListenerForCData(cd[i]);
			return arr;
		}

		
	public static CompositeData[] getCDataArrForSAP_ITSAMMessageServerListener(SAP_ITSAMMessageServerListener[] crr) throws OpenDataException{
	     	CompositeDataSupport[] cd = new CompositeDataSupport[crr.length]; 
	     	for(int i=0;i<crr.length;i++)
	     	cd[i]=(CompositeDataSupport) getCDataForSAP_ITSAMMessageServerListener(crr[i]);
	     	return cd;
	     }

	}
 