/*
 * Copyright (c) 2005 by SAP AG, Walldorf.,
 * http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */

package com.sap.engine.services.msp.itsam;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TreeMap;

import com.sap.engine.services.msp.MSPRuntimeInterface;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerListener;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerListenerDetail;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerParameter;
import com.sap.engine.services.msp.itsam.compositedata.SAP_ITSAMMessageServerSystemInfo;
import com.sap.tc.logging.Category;
import com.sap.tc.logging.Location;
import com.sap.tc.logging.Severity;

/**
 * This class is automatically generated by the CIM Java generator.<br>
 * It transforms the data from a J2EE engine msp service into a CIM
 * compliant model data.
 * @author Dimitar Mihaylov (i031671)
 * @version 7.10
 */
public class SAP_ITSAMMessageServer_Impl implements SAP_ITSAMMessageServer{
	
  private static final Location location = Location.getLocation(SAP_ITSAMMessageServer_Impl.class);
  private static final Category category = Category.SYS_SERVER;
  
  private static final String UNABLE_TO_RETRIEVE_HARDWARE_ID = 
  		"Unable to retrieve hardware id";
  private static final String UNABLE_TO_RETRIEVE_SYSTEM_ID = 
  		"Unable to retrieve system id";
  private static final String UNABLE_TO_RETRIEVE_PARAMETERS = 
			"Unable to retrieve message server parameters";
  private static final String UNABLE_TO_RETRIEVE_MESSAGE_SERVER_INFO = 
			"Unable to retrieve message server information";
  private static final String UNABLE_TO_RETRIEVE_LISTENERS_INFO = 
			"Unable to retrieve information about registered listeners";

  private MSPRuntimeInterface msp;
  /**
   * Constructs a new instance and initializes it with a msp service runtime interface
   * @param msp the msp runtime interface
   */
	public SAP_ITSAMMessageServer_Impl(MSPRuntimeInterface msp) {
		this.msp = msp;
	}
	/**
	 * Returns the hardware id
	 * @return the hardware id
	 */
	public String getHardwareId(){
		String hardwareId = null;
		try {
			hardwareId = msp.getHardwareId();
		}
		catch (RemoteException e) {
			location.traceThrowableT(Severity.ERROR, UNABLE_TO_RETRIEVE_HARDWARE_ID, e);
		}
		return hardwareId;   
	}
	/**
	 * Returns the system id
	 * @return the system id
	 */
	public String getSystemId(){
		String systemId = null;
		try {
			systemId = msp.getSystemId();
		}
		catch (RemoteException e) {
			location.traceThrowableT(Severity.ERROR, UNABLE_TO_RETRIEVE_SYSTEM_ID, e);
		}
		return systemId;   
	}
	/**
	 * Returns the parameters of the message server
	 * @return the parameters
	 * @see SAP_ITSAMMessageServerParameter
	 */
	public SAP_ITSAMMessageServerParameter[] getParameters(){
		SAP_ITSAMMessageServerParameter[] params = null;
		TreeMap map = null;
		try {
			map = msp.getParameters();
		}
		catch (RemoteException e) {
			location.traceThrowableT(Severity.ERROR, UNABLE_TO_RETRIEVE_PARAMETERS, e);
		}
		if (map!=null) {
			params = new SAP_ITSAMMessageServerParameter[map.size()];
			Set set = map.keySet();
			Iterator it = set.iterator();
			int i=0;
			while (it.hasNext()) {
				String key = (String)it.next();
				String value = (String)map.get(key);
				params[i++] = new SAP_ITSAMMessageServerParameter(key, value);
			}
		}
		return params; 
	}					 
	/**
	 * Returns the system information (array of key/value pairs) of the message server
	 * @return an array with the system info key/value pairs
	 * @see SAP_ITSAMMessageServerSystemInfo
	 */
	public SAP_ITSAMMessageServerSystemInfo[] getSystemInfos(){
		SAP_ITSAMMessageServerSystemInfo[] infos = null;
		TreeMap map = null;
		try {
			map = msp.getInformation();
		}
		catch (RemoteException e) {
			location.traceThrowableT(Severity.ERROR, UNABLE_TO_RETRIEVE_MESSAGE_SERVER_INFO, e);
		}
		if (map!=null) {
			infos = new SAP_ITSAMMessageServerSystemInfo[map.size()];
			Set set = map.keySet();
			Iterator it = set.iterator();
			int i=0;
			while (it.hasNext()) {
				String key = (String)it.next();
				String value = (String)map.get(key);
				infos[i++] = new SAP_ITSAMMessageServerSystemInfo(key, value);
			}
		}
		return infos; 
	}					 

	private String[] extractCells(String row) {
		StringTokenizer tokenizer = new StringTokenizer(row, ";");
		List tokens = new ArrayList();
		while (tokenizer.hasMoreTokens()) {
			String token = tokenizer.nextToken();
			tokens.add(token);
		}
		String[] cells = new String[tokens.size()];
		cells = (String[])tokens.toArray(cells);
		return cells;
	}
	/**
	 * Returns information about the registered listeners on the message server.
	 * @return an array with the listener infos
	 * @see SAP_ITSAMMessageServerListener
	 * @see SAP_ITSAMMessageServerListenerDetail
	 */
	public SAP_ITSAMMessageServerListener[] getListeners(){
		SAP_ITSAMMessageServerListener[] listeners = null;
		TreeMap map = null;
		try {
			map = msp.getServiceInfo();
		}
		catch (RemoteException e) {
			location.traceThrowableT(Severity.ERROR, UNABLE_TO_RETRIEVE_LISTENERS_INFO, e);
		}
		if (map!=null) {
			String[][] table = new String[map.size()][];
			listeners = new SAP_ITSAMMessageServerListener[map.size()-2];
			Set set = map.keySet();
			Iterator it = set.iterator();
			int i=0;
			while (it.hasNext()) {
				String key = (String)it.next();
				String value = (String)map.get(key);
				table[i++] = extractCells(value);
			}
			for (i=0; i<table.length-2; i++) {
				String id = table[i][0];
				String name = table[i][1];
				SAP_ITSAMMessageServerListenerDetail[] details = new SAP_ITSAMMessageServerListenerDetail[table[i].length-2];
				for (int j=2; j<table[i].length; j++) {
					String node = table[table.length-1][j];
					String status = table[i][j];
					details[j-2] = new SAP_ITSAMMessageServerListenerDetail(node, status);
				}
				listeners[i] = new SAP_ITSAMMessageServerListener(id, name, details);
			}
		}
		return listeners; 
	}					 	
}