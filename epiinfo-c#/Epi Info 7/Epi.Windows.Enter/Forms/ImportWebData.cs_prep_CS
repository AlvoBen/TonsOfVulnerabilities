using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Epi;
using Epi.Data;
using Epi.Fields;
using Epi.Web.Common;
using Epi.Web.Common.Message;
using Epi.ImportExport;

namespace Epi.Enter.Forms
{



    public         class ImportWebDataForm : Form
    {
        //Private Members
        private bool isBatchImport = false; 
        private Project sourceProject;

        private Project destinationProject;
        private View destinationView;
        private IDbDriver sourceProjectDataDriver;
        private IDbDriver destinationProjectDataDriver;
        private Configuration config;
        private int lastRecordId;
        private BackgroundWorker importWorker;
        private BackgroundWorker requestWorker;
        private static object syncLock = new object();
        private Stopwatch stopwatch;
        private bool update = true;
        private bool append = true;
        private bool importFinished = false;
        private int Pages = 0;
        private int PageSize = 0;
        private string SurveyId = string.Empty;
        private string OrganizationKey = string.Empty;
        private string PublishKey = string.Empty;
        private ServiceManager.ManagerServiceClient client;
        private Dictionary wfList;
        private bool IsDraftMode;
        private int SurveyStatus;
        private int DownLoadType;
        //

        //Delegates
        private delegate void SetStatusDelegate(string statusMessage);
        //

        //Constructors



        public ImportWebDataForm()
        {
            InitializeComponent();
        }





        public ImportWebDataForm(View destinationView)
        {
            InitializeComponent();

            this.destinationProject = destinationView.Project;
            this.destinationView = destinationView;

            Construct();
        }
        //

        //Public Properties



        public bool IsBatchImport
        {
            get
            {
                return this.isBatchImport;
            }
            set
            {
                this.isBatchImport = value;
            }
        }
        //

        //Private Methods



        private void Construct()
        {
            try
            {
                this.destinationProjectDataDriver = destinationProject.CollectedData.GetDbDriver();
                this.config = Configuration.GetNewInstance();

                this.importWorker = new BackgroundWorker();
                this.importWorker.WorkerSupportsCancellation = true;

                this.requestWorker = new BackgroundWorker();
                this.requestWorker.WorkerSupportsCancellation = true;

                this.IsBatchImport = false;

                this.cmbImportType.SelectedIndex = 0;

                if (config.Settings.WebServiceAuthMode == 1) 
                {
                    System.ServiceModel.BasicHttpBinding binding = new System.ServiceModel.BasicHttpBinding();
                    binding.Name = "BasicHttpBinding";
                    binding.CloseTimeout = new TimeSpan(0, 1, 0);
                    binding.OpenTimeout = new TimeSpan(0, 1, 0);
                    binding.ReceiveTimeout = new TimeSpan(0, 10, 0);
                    binding.SendTimeout = new TimeSpan(0, 1, 0);
                    binding.AllowCookies = false;
                    binding.BypassProxyOnLocal = false;
                    binding.HostNameComparisonMode = System.ServiceModel.HostNameComparisonMode.StrongWildcard;
                    binding.MaxBufferPoolSize = config.Settings.WebServiceMaxBufferPoolSize;
                    binding.MaxReceivedMessageSize = config.Settings.WebServiceMaxReceivedMessageSize;
                    binding.MessageEncoding = System.ServiceModel.WSMessageEncoding.Text;
                    binding.TextEncoding = System.Text.Encoding.UTF8;
                    binding.TransferMode = System.ServiceModel.TransferMode.Buffered;
                    binding.UseDefaultWebProxy = true;
                    binding.ReaderQuotas.MaxDepth = config.Settings.WebServiceReaderMaxDepth;
                    binding.ReaderQuotas.MaxStringContentLength = config.Settings.WebServiceReaderMaxStringContentLength;
                    binding.ReaderQuotas.MaxArrayLength = config.Settings.WebServiceReaderMaxArrayLength;
                    binding.ReaderQuotas.MaxBytesPerRead = config.Settings.WebServiceReaderMaxBytesPerRead;
                    binding.ReaderQuotas.MaxNameTableCharCount = config.Settings.WebServiceReaderMaxNameTableCharCount;

                    binding.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                    binding.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                    binding.Security.Transport.ProxyCredentialType = System.ServiceModel.HttpProxyCredentialType.None;
                    binding.Security.Transport.Realm = string.Empty;

                    binding.Security.Message.ClientCredentialType = System.ServiceModel.BasicHttpMessageCredentialType.UserName;

                    System.ServiceModel.EndpointAddress endpoint = new System.ServiceModel.EndpointAddress(config.Settings.WebServiceEndpointAddress);

                    client = new ServiceManager.ManagerServiceClient(binding, endpoint);

                    client.ClientCredentials.Windows.AllowedImpersonationLevel = System.Security.Principal.TokenImpersonationLevel.Impersonation;
                    client.ChannelFactory.Credentials.Windows.ClientCredential = System.Net.CredentialCache.DefaultNetworkCredentials;
                }
                else
                {


                    if (config.Settings.WebServiceBindingMode.Equals("wshttp", StringComparison.OrdinalIgnoreCase))
                    {
                        System.ServiceModel.WSHttpBinding binding = new System.ServiceModel.WSHttpBinding();
                        binding.Name = "WSHttpBinding";
                        binding.CloseTimeout = new TimeSpan(0, 1, 0);
                        binding.OpenTimeout = new TimeSpan(0, 1, 0);
                        binding.ReceiveTimeout = new TimeSpan(0, 10, 0);
                        binding.SendTimeout = new TimeSpan(0, 1, 0);
                        binding.BypassProxyOnLocal = false;
                        binding.TransactionFlow = false;
                        binding.HostNameComparisonMode = System.ServiceModel.HostNameComparisonMode.StrongWildcard;
                        binding.MaxBufferPoolSize = config.Settings.WebServiceMaxBufferPoolSize;
                        binding.MaxReceivedMessageSize = config.Settings.WebServiceMaxReceivedMessageSize;
                        binding.MessageEncoding = System.ServiceModel.WSMessageEncoding.Text;
                        binding.TextEncoding = System.Text.Encoding.UTF8;
                        binding.UseDefaultWebProxy = true;
                        binding.AllowCookies = false;

                        binding.ReaderQuotas.MaxDepth = config.Settings.WebServiceReaderMaxDepth;
                        binding.ReaderQuotas.MaxStringContentLength = config.Settings.WebServiceReaderMaxStringContentLength;
                        binding.ReaderQuotas.MaxArrayLength = config.Settings.WebServiceReaderMaxArrayLength;
                        binding.ReaderQuotas.MaxBytesPerRead = config.Settings.WebServiceReaderMaxBytesPerRead;
                        binding.ReaderQuotas.MaxNameTableCharCount = config.Settings.WebServiceReaderMaxNameTableCharCount;

                        binding.ReliableSession.Ordered = true;
                        binding.ReliableSession.InactivityTimeout = new TimeSpan(0, 10, 0);
                        binding.ReliableSession.Enabled = false;

                        binding.Security.Mode = System.ServiceModel.SecurityMode.Message;
                        binding.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                        binding.Security.Transport.ProxyCredentialType = System.ServiceModel.HttpProxyCredentialType.None;
                        binding.Security.Transport.Realm = string.Empty;
                        binding.Security.Message.ClientCredentialType = System.ServiceModel.MessageCredentialType.Windows;
                        binding.Security.Message.NegotiateServiceCredential = true;

                        System.ServiceModel.EndpointAddress endpoint = new System.ServiceModel.EndpointAddress(config.Settings.WebServiceEndpointAddress);

                        client = new ServiceManager.ManagerServiceClient(binding, endpoint);

                    }
                    else
                    {
                        System.ServiceModel.BasicHttpBinding binding = new System.ServiceModel.BasicHttpBinding();
                        binding.Name = "BasicHttpBinding";
                        binding.CloseTimeout = new TimeSpan(0, 1, 0);
                        binding.OpenTimeout = new TimeSpan(0, 1, 0);
                        binding.ReceiveTimeout = new TimeSpan(0, 10, 0);
                        binding.SendTimeout = new TimeSpan(0, 1, 0);
                        binding.AllowCookies = false;
                        binding.BypassProxyOnLocal = false;
                        binding.HostNameComparisonMode = System.ServiceModel.HostNameComparisonMode.StrongWildcard;
                        binding.MaxBufferPoolSize = config.Settings.WebServiceMaxBufferPoolSize;
                        binding.MaxReceivedMessageSize = config.Settings.WebServiceMaxReceivedMessageSize;
                        binding.MessageEncoding = System.ServiceModel.WSMessageEncoding.Text;
                        binding.TextEncoding = System.Text.Encoding.UTF8;
                        binding.TransferMode = System.ServiceModel.TransferMode.Buffered;
                        binding.UseDefaultWebProxy = true;
                        binding.ReaderQuotas.MaxDepth = config.Settings.WebServiceReaderMaxDepth;
                        binding.ReaderQuotas.MaxStringContentLength = config.Settings.WebServiceReaderMaxStringContentLength;
                        binding.ReaderQuotas.MaxArrayLength = config.Settings.WebServiceReaderMaxArrayLength;
                        binding.ReaderQuotas.MaxBytesPerRead = config.Settings.WebServiceReaderMaxBytesPerRead;
                        binding.ReaderQuotas.MaxNameTableCharCount = config.Settings.WebServiceReaderMaxNameTableCharCount;


                        binding.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly;
                        binding.Security.Transport.ClientCredentialType = System.ServiceModel.HttpClientCredentialType.Windows;
                        binding.Security.Transport.ProxyCredentialType = System.ServiceModel.HttpProxyCredentialType.None;
                        binding.Security.Transport.Realm = string.Empty;

                        System.ServiceModel.EndpointAddress endpoint = new System.ServiceModel.EndpointAddress(config.Settings.WebServiceEndpointAddress);

                        client = new ServiceManager.ManagerServiceClient(binding, endpoint);
                    }

                }
                this.wfList = new Dictionary(StringComparer.OrdinalIgnoreCase);
            }
            catch (Exception ex)
            {
                SetStatusMessage("Error: Web service information was not found.");
            }
        }




        private void GetRequest()
        {
            if (requestWorker.WorkerSupportsCancellation)
            {
                requestWorker.CancelAsync();
            }

            this.Cursor = Cursors.WaitCursor;

            requestWorker = new BackgroundWorker();
            requestWorker.WorkerSupportsCancellation = true;
            requestWorker.DoWork += new System.ComponentModel.DoWorkEventHandler(requestWorker_DoWork);
            requestWorker.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(requestWorker_WorkerCompleted);
            requestWorker.RunWorkerAsync();
        }

        private QueryParameter GetQueryParameterForField(WebFieldData fieldData, Page sourcePage)
        {
            Field dataField = destinationView.Fields[fieldData.FieldName];
            if (!(
                dataField is GroupField ||
                dataField is RelatedViewField ||
                dataField is UniqueKeyField ||
                dataField is RecStatusField ||
                dataField is GlobalRecordIdField ||
                dataField is ImageField ||
                fieldData.FieldValue == null ||
                string.IsNullOrEmpty(fieldData.FieldValue.ToString())
                ))
            {
                String fieldName = ((Epi.INamedObject)dataField).Name;
                switch (dataField.FieldType)
                {
                    case MetaFieldType.Date:
                    case MetaFieldType.DateTime:
                    case MetaFieldType.Time:
                        return new QueryParameter("@" + fieldName, DbType.DateTime, Convert.ToDateTime(fieldData.FieldValue));
                    case MetaFieldType.Checkbox:
                        return new QueryParameter("@" + fieldName, DbType.Boolean, Convert.ToBoolean(fieldData.FieldValue));
                    case MetaFieldType.CommentLegal:
                    case MetaFieldType.LegalValues:
                    case MetaFieldType.Codes:
                    case MetaFieldType.Text:
                    case MetaFieldType.TextUppercase:
                    case MetaFieldType.PhoneNumber:
                    case MetaFieldType.UniqueRowId:
                    case MetaFieldType.ForeignKey:
                    case MetaFieldType.GlobalRecordId:
                        if (fieldData.FieldValue.ToString().Length > 255)
                        {
                            fieldData.FieldValue = fieldData.FieldValue.ToString().Substring(0, 255);
                            AddStatusMessage("The field data for " + fieldData.FieldName + " in record " + fieldData.RecordGUID + " has been truncated because it exceeds 255 characters.");
                        }
                        return new QueryParameter("@" + fieldName, DbType.String, fieldData.FieldValue);
                    case MetaFieldType.Multiline:
                        return new QueryParameter("@" + fieldName, DbType.String, fieldData.FieldValue);
                    case MetaFieldType.Number:
                    case MetaFieldType.YesNo:
                    case MetaFieldType.RecStatus:
                        return new QueryParameter("@" + fieldName, DbType.Single, fieldData.FieldValue);
                    case MetaFieldType.Option:
                        return new QueryParameter("@" + fieldName, DbType.Int16, fieldData.FieldValue);
                    case MetaFieldType.Image:
                        this.BeginInvoke(new SetStatusDelegate(AddWarningMessage), "The data for " + fieldName + " was not imported. This field type is not supported.");
                        break;
                    default:
                        throw new ApplicationException("Not a supported field type");
                }
            }

            return null;
        }




        private void StopImport()
        {
            btnCancel.Enabled = true;
            btnOK.Enabled = true;

            textProject.Enabled = true;
            textData.Enabled = true;
            textOrganization.Enabled = true;
            progressBar.Visible = false;
            progressBar.Style = ProgressBarStyle.Continuous;

            importFinished = true;

            this.Cursor = Cursors.Default;
        }




        private void DoImport(SurveyAnswerRequest Request)
        {
            {
                try
                {
                    stopwatch = new Stopwatch();
                    stopwatch.Start();

                        int recordCount = 0; 
                        int gridRowCount = 0;












                        progressBar.Maximum = recordCount * (destinationView.Pages.Count + 1);
                        progressBar.Maximum = progressBar.Maximum + gridRowCount;

                        string importTypeDescription = "Records with matching ID fields will be updated and unmatched records will be appended.";


















                        update = false;
                        append = true;
                        importTypeDescription = "Records with no matching ID fields will be appended. Records with matching ID fields will be ignored.";
                        DownLoadType = cmbImportType.SelectedIndex;
                        AddStatusMessage("Import initiated for form " + textProject.Text + ". " + importTypeDescription);

                        btnCancel.Enabled = false;
                        btnOK.Enabled = false;

                        textProject.Enabled = false;
                        textData.Enabled = false;
                        textOrganization.Enabled = false;

                        if (importWorker.WorkerSupportsCancellation)
                        {
                            importWorker.CancelAsync();
                        }

                        this.Cursor = Cursors.WaitCursor;

                        importWorker = new BackgroundWorker();
                        importWorker.WorkerSupportsCancellation = true;
                        importWorker.DoWork += new System.ComponentModel.DoWorkEventHandler(worker_DoWork);
                        importWorker.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(worker_WorkerCompleted);
                        importWorker.RunWorkerAsync(Request);

                }
                catch (System.ServiceModel.CommunicationException ex)
                {
                    this.BeginInvoke(new SetStatusDelegate(AddErrorStatusMessage), "Couldn't properly communicate with web service. Import halted.");

                    if (stopwatch != null)
                    {
                        stopwatch.Stop();
                    }

                    btnCancel.Enabled = true;
                    btnOK.Enabled = true;

                    textProject.Enabled = true;
                    textData.Enabled = true;
                    textOrganization.Enabled = true;
                    progressBar.Visible = false;

                    importFinished = true;

                    this.Cursor = Cursors.Default;
                }
                catch (Exception ex)
                {
                    this.BeginInvoke(new SetStatusDelegate(AddErrorStatusMessage), "Import from web failed.");

                    if (stopwatch != null)
                    {
                        stopwatch.Stop();
                    }

                    btnCancel.Enabled = true;
                    btnOK.Enabled = true;

                    textProject.Enabled = true;
                    progressBar.Visible = false;

                    importFinished = true;

                    this.Cursor = Cursors.Default;
                }
            }
        }





        private void SetStatusMessage(string message)
        {
            textProgress.Text = message;
        }





        private void IncrementProgressBarValue(double value)
        {
            progressBar.Style = ProgressBarStyle.Continuous;
            progressBar.Increment((int)value);
        }





        private void SetProgressBarMaximum(double value)
        {
            progressBar.Maximum = ((int)value);
        }







        private void ProcessBaseTable(Dictionary result, View destinationView, List destinationGUIDList)
        {

            this.BeginInvoke(new SetStatusDelegate(SetStatusMessage), "Processing records on base table...");

            int recordsInserted = 0;
            int recordsUpdated = 0;


            string destinationTable = destinationView.TableName;

            foreach (KeyValuePair surveyAnswer in result)
            {
                    QueryParameter paramRecordStatus = new QueryParameter("@RECSTATUS", DbType.Int32, 1);

                    if (importWorker.CancellationPending)
                    {
                        this.BeginInvoke(new SetStatusDelegate(AddStatusMessage), "Import cancelled.");
                        return;
                    }

                    WordBuilder fieldNames = new WordBuilder(StringLiterals.COMMA);
                    WordBuilder fieldValues = new WordBuilder(StringLiterals.COMMA);
                    List fieldValueParams = new List();

                    fieldNames.Append("GlobalRecordId");
                    fieldValues.Append("@GlobalRecordId");

                    string GUID = surveyAnswer.Key; // sourceReader["GlobalRecordId"].ToString();
                    string FKEY = string.Empty; // sourceReader["FKEY"].ToString(); // FKEY not needed, no related forms to process

                    QueryParameter paramFkey = new QueryParameter("@FKEY", DbType.String, FKEY); // don't add      yet
                    QueryParameter paramGUID = new QueryParameter("@GlobalRecordId", DbType.String, GUID);
                    fieldValueParams.Add(paramGUID);

                    if (destinationGUIDList.Contains(GUID))
                    {
                        if (update)
                        {




















































                        }
                    }
                    else
                    {
                        if (append)
                        {
                            if (!string.IsNullOrEmpty(FKEY))
                            {
                                fieldNames.Append("FKEY");
                                fieldValues.Append("@FKEY");
                                fieldValueParams.Add(paramFkey);
                            }
                            fieldNames.Append("RECSTATUS");
                            fieldValues.Append("@RECSTATUS");
                            fieldValueParams.Add(paramRecordStatus);


                            StringBuilder sb = new StringBuilder();
                            sb.Append(" insert into ");
                            sb.Append(destinationProjectDataDriver.InsertInEscape(destinationTable));
                            sb.Append(StringLiterals.SPACE);
                            sb.Append(Util.InsertInParantheses(fieldNames.ToString()));
                            sb.Append(" values (");
                            sb.Append(fieldValues.ToString());
                            sb.Append(") ");
                            Query insertQuery = destinationProjectDataDriver.CreateQuery(sb.ToString());
                            insertQuery.Parameters = fieldValueParams;

                            System.Diagnostics.Debug.Print(insertQuery.SqlStatement);
                            destinationProjectDataDriver.ExecuteNonQuery(insertQuery);

                            foreach (Page page in destinationView.Pages)
                            {
                                sb = new StringBuilder();
                                sb.Append(" insert into ");
                                sb.Append(destinationProjectDataDriver.InsertInEscape(page.TableName));
                                sb.Append(StringLiterals.SPACE);
                                sb.Append("([GlobalRecordId])");
                                sb.Append(" values (");
                                sb.Append("'" + GUID + "'");
                                sb.Append(") ");
                                insertQuery = destinationProjectDataDriver.CreateQuery(sb.ToString());
                                destinationProjectDataDriver.ExecuteNonQuery(insertQuery);
                            }

                            recordsInserted++;
                        }
                    }
                    this.BeginInvoke(new SetProgressBarDelegate(IncrementProgressBarValue), 1);
                }











            this.BeginInvoke(new SetStatusDelegate(AddStatusMessage), "On base table '" + destinationTable + "', " + recordsInserted.ToString() + " record(s) inserted and " + recordsUpdated.ToString() + " record(s) updated.");
        }

        private object FormatWebFieldData(string fieldName, object value)
        {
            if (destinationView.Fields.Contains(fieldName))
            {
                Field field = destinationView.Fields[fieldName];

                if (field is CheckBoxField || field is YesNoField)
                {
                    if (value.ToString().ToLower().Equals("yes"))
                    {
                        value = true;
                    }
                    else if (value.ToString().ToLower().Equals("no"))
                    {
                        value = false;
                    }
                }

                if (field is NumberField && !string.IsNullOrEmpty(value.ToString()))
                {
                    double result = -1;
                    if (double.TryParse(value.ToString(), out result))
                    {
                        value = result;
                    }
                }
            }
            return value;
        }





        private Dictionary ParseXML(SurveyAnswerResponse pSurveyAnswer)
        {
            Dictionary result = new Dictionary(StringComparer.OrdinalIgnoreCase);
            SetFilterProperties(DownLoadType);

            foreach (Epi.Web.Common.DTO.SurveyAnswerDTO surveyAnswer in pSurveyAnswer.SurveyResponseList)
            {
                if (SurveyStatus == 0)
                {
                    if ((surveyAnswer.IsDraftMode == IsDraftMode))
                    {
                        AddSurveyAnswerResult(result, surveyAnswer);
                    }
                }
                else
                {
                    if ((surveyAnswer.IsDraftMode == IsDraftMode) && (surveyAnswer.Status == SurveyStatus))
                    {
                        AddSurveyAnswerResult(result, surveyAnswer);
                    }
                }
            }

            return result;
        }

        private void AddSurveyAnswerResult(Dictionary result, Epi.Web.Common.DTO.SurveyAnswerDTO surveyAnswer)
        {
            result.Add(surveyAnswer.ResponseId, new Dictionary(StringComparer.OrdinalIgnoreCase));
            System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
            doc.LoadXml(surveyAnswer.XML);

            foreach (XmlNode docElement in doc.SelectNodes("//ResponseDetail"))
            {
                string fieldName = docElement.Attributes.GetNamedItem("QuestionName").Value;
                object fieldValue = FormatWebFieldData(fieldName, docElement.InnerText);

                WebFieldData wfData = new WebFieldData();
                wfData.RecordGUID = surveyAnswer.ResponseId;
                wfData.FieldName = fieldName;
                wfData.FieldValue = fieldValue;
                wfData.Status = surveyAnswer.Status;

                if (result[surveyAnswer.ResponseId].Keys.Contains(wfData.FieldName) == false)
                {
                    result[surveyAnswer.ResponseId].Add(wfData.FieldName, wfData);
                }
            }
        }





        private int ParseXMLForProgressBar(SurveyAnswerResponse result)
        {
            int count = 0;

            foreach (Epi.Web.Common.DTO.SurveyAnswerDTO surveyAnswer in result.SurveyResponseList)
            {
                WebFieldData wfData = new WebFieldData();

                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.LoadXml(surveyAnswer.XML);

                foreach (XmlElement docElement in doc.ChildNodes)
                {
                    if (docElement.Name.ToLower().Equals("surveyresponse"))
                    {
                        foreach (XmlElement surveyElement in docElement.ChildNodes)
                        {
                            if (surveyElement.Name.ToLower().Equals("page") && surveyElement.Attributes.Count > 0 && surveyElement.Attributes[0].Name.ToLower().Equals("pagenumber"))
                            {
                                foreach (XmlElement pageElement in surveyElement.ChildNodes)
                                {
                                    if (pageElement.Name.ToLower().Equals("responsedetail"))
                                    {
                                        if (wfData.Status == 3)
                                        {
                                            count++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return count;
        }

        private WebFieldData FindWebFieldData(List surveyResponses, string GUID, string fieldName, int pageNumber)
        {
            foreach (WebFieldData webFieldData in surveyResponses)
            {
                if (webFieldData.RecordGUID == GUID && webFieldData.FieldName == fieldName && webFieldData.Page == pageNumber)
                {
                    return webFieldData;
                }
            }

            return new WebFieldData(); 
        }







        private void ProcessPages(Dictionary pFieldDataList, View destinationView, List destinationGUIDList)
        {
            Dictionary pagedFieldDataDictionary = new Dictionary();

            for (int i = 0; i < destinationView.Pages.Count; i++)
            {
                this.BeginInvoke(new SetStatusDelegate(SetStatusMessage), "Processing records on page " + (i + 1).ToString() + " of " + destinationView.Pages.Count.ToString() + "...");

                int recordsInserted = 0;

                Page destinationPage = destinationView.Pages[i];

                foreach(KeyValuePair kvp in pFieldDataList)
                {
                    string currentGUID = string.Empty;
                    string lastGUID = string.Empty;

                    WordBuilder fieldNames = new WordBuilder(StringLiterals.COMMA);
                    WordBuilder fieldValues = new WordBuilder(StringLiterals.COMMA);
                    List fieldValueParams = new List();

                    List GUIDList = new List();

                    foreach (Field PageField in destinationPage.Fields)
                    {

                        if (PageField is IDataField)
                        {
                            IDataField field = PageField as IDataField;
                            string FieldName = ((Epi.INamedObject)field).Name;

                            currentGUID = kvp.Key;

                            if (importWorker.CancellationPending)
                            {
                                this.BeginInvoke(new SetStatusDelegate(AddStatusMessage), "Import cancelled.");
                                return;
                            }

                            if (kvp.Value.ContainsKey(FieldName))
                            {
                                string GUID = kvp.Value[FieldName].RecordGUID;

                                string updateHeader = string.Empty;
                                string whereClause = string.Empty;
                                fieldValueParams = new List();
                                StringBuilder sb = new StringBuilder();


                                sb.Append(SqlKeyWords.UPDATE);
                                sb.Append(StringLiterals.SPACE);
                                sb.Append(destinationProjectDataDriver.InsertInEscape(destinationPage.TableName));
                                sb.Append(StringLiterals.SPACE);
                                sb.Append(SqlKeyWords.SET);
                                sb.Append(StringLiterals.SPACE);

                                updateHeader = sb.ToString();

                                sb.Remove(0, sb.ToString().Length);


                                sb.Append(SqlKeyWords.WHERE);
                                sb.Append(StringLiterals.SPACE);
                                sb.Append(destinationProjectDataDriver.InsertInEscape(ColumnNames.GLOBAL_RECORD_ID));
                                sb.Append(StringLiterals.EQUAL);
                                sb.Append("'");
                                sb.Append(GUID);
                                sb.Append("'");
                                whereClause = sb.ToString();

                                sb.Remove(0, sb.ToString().Length);

                                sb.Append(StringLiterals.LEFT_SQUARE_BRACKET);
                                sb.Append(FieldName);
                                sb.Append(StringLiterals.RIGHT_SQUARE_BRACKET);
                                sb.Append(StringLiterals.EQUAL);

                                sb.Append(StringLiterals.COMMERCIAL_AT);
                                sb.Append(FieldName);

                                QueryParameter param = GetQueryParameterForField(kvp.Value[FieldName], destinationPage);
                                if (param != null)
                                {
                                    Query updateQuery = destinationProjectDataDriver.CreateQuery(updateHeader + StringLiterals.SPACE + sb.ToString() + StringLiterals.SPACE + whereClause);
                                    updateQuery.Parameters.Add(param);
                                    destinationProjectDataDriver.ExecuteNonQuery(updateQuery);

                                    if (!GUIDList.Contains(GUID))
                                    {
                                        GUIDList.Add(GUID);
                                        recordsInserted++;
                                        this.BeginInvoke(new SetProgressBarDelegate(IncrementProgressBarValue), 1);
                                    }
                                }
                            }
                        }
                    }









                }
            }
        }





        private void AddStatusMessage(string statusMessage)
        {
            string message = DateTime.Now + ": " + statusMessage;
            lbxStatus.Items.Add(message);
            Logger.Log(message);
        }





        private void AddWarningMessage(string statusMessage)
        {
            string message = DateTime.Now + ": Warning: " + statusMessage;
            lbxStatus.Items.Add(message);
            Logger.Log(message);
        }





        private void AddErrorStatusMessage(string statusMessage)
        {
            string message = DateTime.Now + ": Error: " + statusMessage;
            lbxStatus.Items.Add(message);
            Logger.Log(message);
        }





        private bool FormsAreAlike()
        {



























































































            return true;
        }

        private void SetFilterProperties(int UserSelection)
            {

            switch (UserSelection)
                {
                case 0:
                    IsDraftMode = true;
                    SurveyStatus = 3;
                    break;
                case 1:
                    IsDraftMode = true;
                   SurveyStatus = 0;
                    break;
                case 2:
                    IsDraftMode = false;
                    SurveyStatus = 3;
                    break;
                case 3:
                    IsDraftMode = false;
                     SurveyStatus = 0;
                    break;


                }

            }
        //

        //Event Handlers
        private void rbtnSingleImport_CheckedChanged(object sender, EventArgs e)
        {








            IsBatchImport = false;









        }

        private void btnOK_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(textProject.Text))
            {
                progressBar.Style = ProgressBarStyle.Marquee;
                progressBar.Visible = true;
                progressBar.Value = 0;
                progressBar.Minimum = 0;

                this.SurveyId = textProject.Text;
                this.OrganizationKey = textOrganization.Text;
                this.PublishKey = textData.Text;

                lbxStatus.Items.Clear();



                textProgress.Text = string.Empty;
                AddStatusMessage("Request for web data initiated by user " + System.Security.Principal.WindowsIdentity.GetCurrent().Name.ToString());

                if (importWorker.WorkerSupportsCancellation)
                {
                    importWorker.CancelAsync();
                }

                this.Cursor = Cursors.WaitCursor;

                requestWorker = new BackgroundWorker();
                requestWorker.WorkerSupportsCancellation = true;
                requestWorker.DoWork += new System.ComponentModel.DoWorkEventHandler(requestWorker_DoWork);
                requestWorker.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(requestWorker_WorkerCompleted);
                requestWorker.RunWorkerAsync(SurveyId);
            }

        }






        private void requestWorker_WorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            if (e.Result != null && e.Result is SurveyAnswerRequest)
            {
                SurveyAnswerRequest Request = (SurveyAnswerRequest)e.Result;
                AddStatusMessage("Request for web data completed.");
                DoImport(Request);
            }
            else
            {
                AddErrorStatusMessage("Communication with the web service failed.");
                StopImport();
            }
        }






        private void requestWorker_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            lock (syncLock)
            {
                try
                {
                    Epi.Web.Common.Message.SurveyAnswerRequest Request = new Epi.Web.Common.Message.SurveyAnswerRequest();
                    Request.Criteria.SurveyId = SurveyId;
                    Request.Criteria.UserPublishKey = new Guid(PublishKey);
                    Request.Criteria.OrganizationKey = new Guid(OrganizationKey);
                    Request.Criteria.ReturnSizeInfoOnly = true;
                    Epi.Web.Common.Message.SurveyAnswerResponse Result = client.GetSurveyAnswer(Request);
                    Pages = Result.NumberOfPages;
                    PageSize = Result.PageSize;

                    e.Result = Request;
                }
                catch (System.ServiceModel.CommunicationException ex)
                {
                    e.Result = null;
                }
                catch (Exception ex)
                {
                    e.Result = null;
                }
            }
        }






        private void worker_WorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            stopwatch.Stop();

            if (e.Result is Exception)
            {
                this.BeginInvoke(new SetStatusDelegate(AddStatusMessage), "Import failed. Time elapsed: " + stopwatch.Elapsed.ToString());
                this.BeginInvoke(new SetStatusDelegate(SetStatusMessage), "Import failed. Time elapsed: " + stopwatch.Elapsed.ToString());
            }
            else
            {
                this.BeginInvoke(new SetStatusDelegate(AddStatusMessage), "Import complete. Time elapsed: " + stopwatch.Elapsed.ToString());
                this.BeginInvoke(new SetStatusDelegate(SetStatusMessage), "Import complete. Time elapsed: " + stopwatch.Elapsed.ToString());
            }

            StopImport();
        }






        private void worker_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            lock (syncLock)
            {
                if (e.Argument is SurveyAnswerRequest)
                {
                    SurveyAnswerRequest Request = e.Argument as SurveyAnswerRequest;
                    Request.Criteria.SurveyId = SurveyId;

                    Request.Criteria.UserPublishKey = new Guid(PublishKey);
                    Request.Criteria.OrganizationKey = new Guid(OrganizationKey);
                    Request.Criteria.ReturnSizeInfoOnly = false;

                    List Results = new List();

                    for (int i = 1; i <= Pages; i++)
                    {
                        Request.Criteria.PageNumber = i;
                        Request.Criteria.PageSize = PageSize;
                        try
                        {
                            Epi.Web.Common.Message.SurveyAnswerResponse Result = client.GetSurveyAnswer(Request);
                            Results.Add(Result);
                        }
                        catch (Exception ex)
                        {
                            this.BeginInvoke(new SetStatusDelegate(AddErrorStatusMessage), ex.Message);
                            e.Result = ex;
                            return;
                        }
                    }

                    this.BeginInvoke(new SetMaxProgressBarValueDelegate(SetProgressBarMaximum), Results.Count);

                    foreach(SurveyAnswerResponse Result in Results)
                    {
                        try
                        {
                            Query selectQuery = destinationProjectDataDriver.CreateQuery("SELECT [GlobalRecordId] FROM [" + destinationView.TableName + "]");
                            IDataReader destReader = destinationProjectDataDriver.ExecuteReader(selectQuery);
                            List destinationGUIDList = new List();
                            while (destReader.Read())
                            {
                                destinationGUIDList.Add(destReader[0].ToString());
                            }

                            wfList = ParseXML(Result);

                            ProcessBaseTable(wfList, destinationView, destinationGUIDList);
                            ProcessPages(wfList, destinationView, destinationGUIDList);


                        }
                        catch (Exception ex)
                        {
                            this.BeginInvoke(new SetStatusDelegate(AddErrorStatusMessage), ex.Message);
                            e.Result = ex;
                            return;
                        }
                    }
                }
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            if (importFinished)
            {
                this.DialogResult = System.Windows.Forms.DialogResult.OK;
            }
            else
            {
                this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            }
            this.Close();
        }

        private void ImportDataForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (importWorker.IsBusy)
            {
                DialogResult result = Epi.Windows.MsgBox.ShowQuestion("Aborting the import process and may cause impartially-updated or incomplete records to exist. Proceed with abort?");
                if (result == DialogResult.Yes)
                {
                    importWorker.CancelAsync();
                }
                else
                {
                    e.Cancel = true;
                }
            }
        }

        private void ImportDataForm_Load(object sender, EventArgs e)
        {
            AddStatusMessage("Loaded data import dialog. Ready.");
        }

        private void textProject_TextChanged(object sender, EventArgs e)
        {
            if (textProject.Text.Length == 0)
            {
                btnOK.Enabled = false;
            }
            else
            {
                btnOK.Enabled = true;
            }
        }
        //
    }
}

 