using System;
using System.Windows.Forms;
using System.ComponentModel;
using System.ComponentModel.Design;
using Epi;
using Epi.Enter;
using Epi.Windows;
using Epi.Diagnostics;

namespace Epi.Windows.Enter
{



    public class EnterWindowsModule : IWindowsModule, IProjectHost
    {
        //Private Attributes
        private EnterMainForm form = null;
        private Container container = null;
        private IModuleManager moduleManager;
        private string ProjectFilePath = null;
        private string SelectedView = null;
        //Private Attributes

        //Constructors




        public EnterWindowsModule()
        {
            container = new ModuleContainer(this);
        }
        //Constructors

        //Protected Properties




        public string ModuleName
        {
            get
            {
                return "Enter";
            }
        }

        //Protected Properties

        //Public Methods





        [System.Diagnostics.DebuggerStepThrough()]
        public object GetService(Type serviceType)
        {
            if (serviceType == this.GetType())
            {
                return this;
            }
            return null;
                /*
            else if (serviceType == typeof(EnterCommandProcessor)  || serviceType == typeof(ICommandProcessor))
            {
                return this.Processor;
            }
            else
            {
                return base.GetService(serviceType);
            }*/
        }




  public void Dispose()
        {

            if (this.container != null)
            {
                this.container.Dispose();
            }

            form = null;



        }

        //Public Methods

        //Private Methods
        /*
        private bool MsgResponse(EpiMessages msg, MessageType msgtype)
        {
            MessageBoxButtons buttons;
            switch (msgtype)
            {
                case MessageType.OkOnly:
                    buttons = MessageBoxButtons.OK;
                    MessageBox.Show(msg.Message, msg.Caption, buttons);
                    return true;
                case MessageType.YesNo:
                    buttons = MessageBoxButtons.YesNo;
                    DialogResult result;
                    result = MessageBox.Show(msg.Message, msg.Caption, buttons);
                    if (result == DialogResult.Yes)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                default:
                    return false;
            }
        }*/

        // 

        //Protected Methods




        public void Load(IModuleManager moduleManager, ICommandLine commandLine)
        {

            this.moduleManager = moduleManager;
            try
            {
                if (form == null)
                {
                    form = new EnterMainForm(this);
                    container.Add(form);
                    form.Closed += new EventHandler(MainForm_Closed);
                    form.Disposed += new EventHandler(MainForm_Disposed);
                    form.Show();
                    form.Activate();


                    System.IntPtr handle = form.Handle;


                    if (commandLine != null)
                    {
                        string titleArgument = commandLine.GetArgument("title");
                        if (titleArgument != null)
                        {
                            form.Text = titleArgument;
                        }

                        if (commandLine.GetArgument("project") != null)
                        {
                            Project p = new Project(commandLine.GetArgument("project"));
                            form.FireOpenViewEvent(p.Views[commandLine.GetArgument("view")]);
                        }
                        else
                        {
                            if (!form.IsDisposed)
                            {
                                form.Show();
                                if (form.WindowState == FormWindowState.Minimized)
                                {
                                    form.WindowState = FormWindowState.Normal;
                                }
                                form.Activate();
                            }
                        }
                    }

                }
                else
                {
                    if (!form.IsDisposed)
                    {
                        form.Show();
                        if (form.WindowState == FormWindowState.Minimized)
                        {
                            form.WindowState = FormWindowState.Normal;
                        }
                        form.Activate();
                    }

                }
            }
            finally
            {
            }


        }




  public void Unload()
        {



            if (form != null && !form.IsDisposed)
            {


                form.Close();
            }
            else
            {
                this.Dispose();
            }    
        }

        //Protected Methods

        //Event Handlers






        public void MainForm_Disposed(object sender, EventArgs e)
        {
            this.Dispose();
        }






        public void MainForm_Closed(object sender, EventArgs e)
        {
            this.Dispose();
        }
        //Event Handlers

        public Project CurrentProject { get {return _CurrentProject; } set{ _CurrentProject=value; } } Project _CurrentProject;
        public IModuleManager ModuleManager
        {
            get { return this.moduleManager; }
        }

        public void SetAllReferencesToNull()
        {
            this.form = null;
            this.container = null;
            this.moduleManager = null;
            this.ProjectFilePath = null;
            this.SelectedView = null;
        }

    }
}
 