//Namespaces

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
// 

namespace Epi
{



 public sealed class CommandLine : ICommandLine
    {
        //Private Data Members
        string[] arguments;
        private IDictionary dictionary;
        // 

        //Constructors





        public CommandLine(string[] arguments)
  {
            this.arguments = arguments;
   this.dictionary = new Hashtable();

            string commandString = string.Empty;
            IEnumerator argumentsEnum = arguments.GetEnumerator();
            while (argumentsEnum.MoveNext())
            {
                commandString += argumentsEnum.Current + " ";
            }

            string[] commands = commandString.Split( CxNull, StringSplitOptions.RemoveEmptyEntries);

            for (int i = 0; i < commands.Length; i++)
            {
                string argument = commands[i];
                string key = string.Empty;
                string value = string.Empty;























                int seperatorPos = argument.IndexOf(':');
                if (seperatorPos == -1)
                {
                    key = argument.Substring(0).ToLower(CultureInfo.InvariantCulture);
                    if (key == "?")
                    {
                        key = "help";
                    }
                }
                else
                {
                    key = argument.Substring(0, seperatorPos).ToLower(CultureInfo.InvariantCulture);
                    value = argument.Substring(seperatorPos + 1);
                }

                List list = (List)this.dictionary[key];
                if (list == null)
                {
                    list = new List();
                    this.dictionary.Add(key, list);
                }

                list.Add(value.Trim());
            }
        }

        // 

        //Public Methods





        public string GetArgument(string name)
  {
            List list = (List)this.dictionary[name];
   if (list == null)
   {
    return null;
   }
   if (list.Count != 1)
   {
    throw new InvalidOperationException();
   }
   return (string) list[0];
  }






  public string[] GetArguments(string name)
  {
            List list = (List)this.dictionary[name];
   if (list != null)
   {
    string[] textArray1 = new string[list.Count];
    list.CopyTo(textArray1, 0);
    return textArray1;
   }
   return null;
        }

        // 

        //Public Properties



        public string[] ArgumentStrings
        {
            get
            {
                return this.arguments;
            }
        }
        //
    }
}

 