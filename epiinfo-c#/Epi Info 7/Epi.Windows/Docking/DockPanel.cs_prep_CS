using System;
using System.Drawing;
using System.ComponentModel;
using System.Collections;
using System.Diagnostics;
using System.Windows.Forms;
using System.Xml;
using System.Reflection;
using System.Security.Permissions;
using System.Drawing.Drawing2D;

namespace Epi.Windows.Docking
{




 public         class DockPanel : System.Windows.Forms.Panel
 {
  //Construction and dispose




  public DockPanel(System.ComponentModel.IContainer container)
  {
   container.Add(this);
   InitializeComponent();

   Init();
  }




  public DockPanel()
  {
   InitializeComponent();
   Init();
  }

  private void Init()
  {
   SetStyle(ControlStyles.DoubleBuffer, true);
   SetStyle(ControlStyles.AllPaintingInWmPaint, true);
  }
  //

  //Variables
  private RectangleF tabRect = Rectangle.Empty;

  private Size minFormSize;
  private Size maxFormSize;

  private DockWindow form;
  //

  //Properties



  [Browsable(false)]
  public RectangleF TabRect
  {
   get { return tabRect; }
   set { tabRect = value; }
  }




  [Browsable(false)]
  public DockWindow Form
  {
   get { return form; }
   set { form = value; }
  }




  [Browsable(false)]
  public Size MinFormSize
  {
   get { return minFormSize; }
   set { minFormSize = value; }
  }




  [Browsable(false)]
  public Size MaxFormSize
  {
   get { return maxFormSize; }
   set { maxFormSize = value; }
  }
  //

  //Overrides





  protected override void OnMouseDown(MouseEventArgs e)
  {
   if (Parent != null)
    Parent.Focus();

   base.OnMouseDown (e);
  }






  protected override bool IsInputKey(Keys keyData)
  {
   return true;
  }






  protected override void OnPaint(PaintEventArgs e)
  {
   base.OnPaint (e);

   if (PostPaint != null)
    PostPaint(this, e);
  }





  public override string ToString()
  {
   return form.Text;
  }
  //

  //Own events



  public event PaintEventHandler PostPaint;




  public event EventHandler Activated;




  public event EventHandler Deactivate;





  public void SetFocus(bool activate)
  {
   if (activate && (Activated != null))
    Activated(this, new EventArgs());
   else if (!activate && (Deactivate != null))
    Deactivate(this, new EventArgs());
  }
  //

  //XML r/w




  internal void WriteXml(XmlTextWriter writer)
  {
   writer.WriteStartElement("panel");
   writer.WriteAttributeString("dock", this.Dock.ToString());
   writer.WriteAttributeString("width", this.Width.ToString());
   writer.WriteAttributeString("height", this.Height.ToString());
   writer.WriteAttributeString("type", form.GetType().AssemblyQualifiedName);
   form.WriteXml(writer);
   writer.WriteEndElement();
  }





  internal void ReadXml(XmlReader reader)
  {
   try
   {
    string s;

    switch (reader.GetAttribute("dock"))
    {
     case "Fill":
      this.Dock = DockStyle.Fill;
      break;
     case "Top":
      this.Dock = DockStyle.Top;
      break;
     case "Bottom":
      this.Dock = DockStyle.Bottom;
      break;
     case "Left":
      this.Dock = DockStyle.Left;
      break;
     case "Right":
      this.Dock = DockStyle.Right;
      break;
     default:
      return;
    }

    s = reader.GetAttribute("width");
    if (s != null)
     this.Width = Int32.Parse(s);

    s = reader.GetAttribute("height");
    if (s != null)
     this.Height = Int32.Parse(s);

    s = reader.GetAttribute("type");
    if (s == null)
     return;

    Type type = Type.GetType(s, true);

    if (type == null)
     return;

    ConstructorInfo info = type.GetConstructor(Type.EmptyTypes);

    if (info == null)
     return;

    DockWindow wnd = info.Invoke(new object[0]) as DockWindow;
    wnd.ControlContainer = this;
    this.form = wnd;
    wnd.CreateContainer();
    wnd.ReadXml(reader);
   }
   catch (Exception ex)
   {
    Console.WriteLine("DockPanel.ReadXml: " + ex.Message);
   }
  }
  //




  public void SelectTab()
  {
   if (this.Parent is DockContainer)
   {
    (this.Parent as DockContainer).SelectTab(this);
    (this.Parent as DockContainer).Select();
   }
  }
 }
}

 