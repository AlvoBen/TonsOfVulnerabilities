using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.ComponentModel;
using System.Collections;
using System.Diagnostics;
using System.Windows.Forms;
using System.Xml;
using System.Collections.ObjectModel;

namespace Epi.Windows.Docking
{



 public enum DockVisualStyle
 {



  VS2003,




  VS2005
 }





    [Designer(typeof(System.Windows.Forms.Design.ControlDesigner))]
 public         class DockManager : DockContainer
 {
  //Construct and dispose




  public DockManager(System.ComponentModel.IContainer container)
  {
   container.Add(this);
   InitializeComponent();

   Init();
  }




  public DockManager()
  {
   InitializeComponent();

   Init();
  }




  void Init()
  {

   SetStyle(ControlStyles.DoubleBuffer, true);
   SetStyle(ControlStyles.AllPaintingInWmPaint, true);


   DockType = DockContainerType.Document;
   removeable = false;


   dragWindowHandler = new DockEventHandler(this.DragWindow);

   DockManager.RegisterManager(this);
  }

  //

  //Variables
  private DockPanel activeDoc = null;
  private DockContainer autoHideContainer = null;

  private Collection autoHideL = new Collection();
  private Collection autoHideT = new Collection();
  private Collection autoHideR = new Collection();
  private Collection autoHideB = new Collection();
  //

  //Properties



        [Category("DockDotNET"), Description("Gets or sets the visual style of the docking framework.")]
  public DockVisualStyle VisualStyle
  {
   get { return DockManager.Style; }
   set { DockManager.Style = value; }
  }




        [Category("DockDotNET"), Description("Gets or sets the flag that controls fast, but less breathtaking drawing when a moving a window to enhance performance.")]
  public bool FastDrawing
  {
   get { return DockManager.FastMoveDraw; }
   set { DockManager.FastMoveDraw = value; }
  }
  //

  //Control management





  protected override void OnControlAdded(ControlEventArgs e)
  {
   if (!(e.Control is DockContainer) && !(e.Control is DockPanel) && !(e.Control is FlatButton))
   {
    if (Parent != null)
     Parent.Controls.Add(e.Control);
    else
     this.Controls.Remove(e.Control);

    Invalidate();
   }
   else
   {
    base.OnControlAdded(e);
   }
  }
  //

  //Paint





  protected override void OnPaint(PaintEventArgs e)
  {
   StringFormat sf = StringFormat.GenericDefault;
   Graphics g = e.Graphics;
   SizeF size;
   int start = 3;
   int end = 0;
   int yOff = 0;

   sf.Trimming = StringTrimming.EllipsisCharacter;



   if (panList.Count == 0)
   {
    g.Clear(SystemColors.Control);

    Rectangle rc = new Rectangle(dockOffsetL, dockOffsetT, this.Width - dockOffsetL - dockOffsetR, this.Height - dockOffsetT - dockOffsetB);
    g.FillRectangle(SystemBrushes.ControlDark, rc);


   }
   else
   {
    base.OnPaint(e);
   }

   //AutoHide Top
   start = 3 + dockOffsetL;

   foreach (DockContainer c in autoHideT)
   {
    foreach (DockPanel p in c.panList)
    {
     size = g.MeasureString(p.Form.Text, this.Font);

     end = start + (int)size.Width + 18;

     g.DrawString(p.Form.Text, this.Font, SystemBrushes.ControlDarkDark, start + 18, 3);
     g.DrawIcon(p.Form.Icon, new Rectangle(start + 3, 2, 16, 16));
     g.DrawLine(SystemPens.ControlDark, start, 0, start, 17);
     g.DrawLine(SystemPens.ControlDark, start, 17, start + 2, 19);
     g.DrawLine(SystemPens.ControlDark, start + 2, 19, end - 2, 19);
     g.DrawLine(SystemPens.ControlDark, end - 2, 19, end, 17);
     g.DrawLine(SystemPens.ControlDark, end, 0, end, 17);

     size.Height = 20;
     size.Width += 18;

     p.TabRect = new RectangleF(start, 0, size.Width, dockOffsetT);

     start += (int)size.Width;
    }

    start += 16;
   }
   //

   //AutoHide Bottom
   start = 3 + dockOffsetL;
   yOff = this.Height;

   foreach (DockContainer c in autoHideB)
   {
    foreach (DockPanel p in c.panList)
    {
     size = g.MeasureString(p.Form.Text, this.Font);

     end = start + (int)size.Width + 18;

     g.DrawString(p.Form.Text, this.Font, SystemBrushes.ControlDarkDark, start + 18, yOff - 3 - size.Height);
     g.DrawIcon(p.Form.Icon, new Rectangle(start + 3, this.Height - dockOffsetB + 5, 16, 16));
     g.DrawLine(SystemPens.ControlDark, start, yOff, start, yOff - 17);
     g.DrawLine(SystemPens.ControlDark, start, yOff - 17, start + 2, yOff - 19);
     g.DrawLine(SystemPens.ControlDark, start + 2, yOff - 19, end - 2, yOff - 19);
     g.DrawLine(SystemPens.ControlDark, end - 2, yOff - 19, end, yOff - 17);
     g.DrawLine(SystemPens.ControlDark, end, yOff, end, yOff - 17);

     size.Height = 20;
     size.Width += 18;

     p.TabRect = new RectangleF(start, this.Height - size.Height - 2, size.Width, dockOffsetB + 2);

     start += (int)size.Width;
    }

    start += 16;
   }
   //

   g.RotateTransform(90);

   //AutoHide Left
   start = 3 + dockOffsetT;

   foreach (DockContainer c in autoHideL)
   {
    foreach (DockPanel p in c.panList)
    {
     size = g.MeasureString(p.Form.Text, this.Font);

     end = start + (int)size.Width + 18;

     g.DrawString(p.Form.Text, this.Font, SystemBrushes.ControlDarkDark, start + 18, -size.Height);
     g.DrawIcon(p.Form.Icon, new Rectangle(2, start+3, 16, 16));
     g.DrawLine(SystemPens.ControlDark, start, 0, start, -17);
     g.DrawLine(SystemPens.ControlDark, start, -17, start + 2, -19);
     g.DrawLine(SystemPens.ControlDark, start + 2, -19, end - 2, -19);
     g.DrawLine(SystemPens.ControlDark, end - 2, -19, end, -17);
     g.DrawLine(SystemPens.ControlDark, end, 0, end, -17);

     size.Height = 20;
     size.Width += 18;

     p.TabRect = new RectangleF(0, start, dockOffsetL, size.Width);

     start += (int)size.Width;
    }

    start += 16;
   }
   //

   //AutoHide Right
   start = 3 + dockOffsetT;
   yOff = -this.Width;

   foreach (DockContainer c in autoHideR)
   {
    foreach (DockPanel p in c.panList)
    {
     size = g.MeasureString(p.Form.Text, this.Font);

     end = start + (int)size.Width + 18;

     g.DrawString(p.Form.Text, this.Font, SystemBrushes.ControlDarkDark, start + 18, yOff + 3);
     g.DrawIcon(p.Form.Icon, new Rectangle(this.Width - dockOffsetR + 5, start + 3, 16, 16));
     g.DrawLine(SystemPens.ControlDark, start, yOff, start, yOff + 17);
     g.DrawLine(SystemPens.ControlDark, start, yOff + 17, start + 2, yOff + 19);
     g.DrawLine(SystemPens.ControlDark, start + 2, yOff + 19, end - 2, yOff + 19);
     g.DrawLine(SystemPens.ControlDark, end - 2, yOff + 19, end, yOff + 17);
     g.DrawLine(SystemPens.ControlDark, end, yOff, end, yOff + 17);

     size.Height = 20;
     size.Width += 18;

     p.TabRect = new RectangleF(this.Width - size.Height - 2, start, dockOffsetR, size.Width + 2);

     start += (int)size.Width;
    }

    start += 16;
   }
   //
  }
  //

  //AutoHide
  internal void AutoHideContainer(DockContainer c, DockStyle dst, bool hide)
  {
   if (c == null)
    return;

   switch (dst)
   {
    case DockStyle.Left:
     dockOffsetL = UpdateAutoHideList(c, hide, autoHideL);
     break;
    case DockStyle.Top:
     dockOffsetT = UpdateAutoHideList(c, hide, autoHideT);
     break;
    case DockStyle.Right:
     dockOffsetR = UpdateAutoHideList(c, hide, autoHideR);
     break;
    case DockStyle.Bottom:
     dockOffsetB = UpdateAutoHideList(c, hide, autoHideB);
     break;
    default:
     dockOffsetL = UpdateAutoHideList(c, false, autoHideL);
     dockOffsetT = UpdateAutoHideList(c, false, autoHideT);
     dockOffsetR = UpdateAutoHideList(c, false, autoHideR);
     dockOffsetB = UpdateAutoHideList(c, false, autoHideB);
     break;
   }

   AdjustBorders();
  }

  private int UpdateAutoHideList(DockContainer c, bool hide, Collection list)
  {
   if (hide)
   {
    list.Add(c);
   }
   else if (list.Contains(c))
   {
    autoHideContainer = null;
    list.Remove(c);
    this.Controls.Remove(c);
   }

   if (list.Count > 0)
    return 22;
   else
    return 0;
  }





  protected override void OnMouseMove(MouseEventArgs e)
  {
   base.OnMouseMove(e);
   Rectangle rc;
   Size size;

   if (autoHideContainer != null)
    if (autoHideContainer.fading)
     return;

   //AutoHide Left
   foreach (DockContainer c in autoHideL)
   {
    foreach (DockPanel p in c.panList)
    {
     rc = new Rectangle((int)p.TabRect.Left, (int)p.TabRect.Top, (int)p.TabRect.Width, (int)p.TabRect.Height);

     if (RectangleToScreen(rc).Contains(MousePosition.X, MousePosition.Y))
     {
      c.ActivePanel = p;

      if (c != autoHideContainer)
      {
       disableOnControlAdded = true;
       disableOnControlRemove = true;

       this.Controls.Remove(autoHideContainer);
       autoHideContainer = c;
       size = c.Size;
       c.Dock = DockStyle.None;
       c.Location = new Point(dockOffsetL, dockOffsetT);
       c.Size = new Size(size.Width, this.Height - dockOffsetT - dockOffsetB);
       c.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Bottom;
       this.Controls.Add(c);
       c.FadeIn();

       disableOnControlAdded = false;
       disableOnControlRemove = false;
      }

      return;
     }
    }
   }
   //

   //AutoHide Right
   foreach (DockContainer c in autoHideR)
   {
    foreach (DockPanel p in c.panList)
    {
     rc = new Rectangle((int)p.TabRect.Left, (int)p.TabRect.Top, (int)p.TabRect.Width, (int)p.TabRect.Height);

     if (RectangleToScreen(rc).Contains(MousePosition.X, MousePosition.Y))
     {
      c.ActivePanel = p;

      if (c != autoHideContainer)
      {
       this.Controls.Remove(autoHideContainer);
       autoHideContainer = c;
       size = c.Size;
       c.Dock = DockStyle.None;
       c.Location = new Point(this.Width - size.Width - dockOffsetR, dockOffsetT);
       c.Size = new Size(size.Width, this.Height - dockOffsetT - dockOffsetB);
       c.Anchor = AnchorStyles.Right | AnchorStyles.Top | AnchorStyles.Bottom;
       this.Controls.Add(c);
       c.FadeIn();
      }

      return;
     }
    }
   }
   //

   //AutoHide Top
   foreach (DockContainer c in autoHideT)
   {
    foreach (DockPanel p in c.panList)
    {
     rc = new Rectangle((int)p.TabRect.Left, (int)p.TabRect.Top, (int)p.TabRect.Width, (int)p.TabRect.Height);

     if (RectangleToScreen(rc).Contains(MousePosition.X, MousePosition.Y))
     {
      c.ActivePanel = p;

      if (c != autoHideContainer)
      {
       this.Controls.Remove(autoHideContainer);
       autoHideContainer = c;
       size = c.Size;
       c.Dock = DockStyle.None;
       c.Location = new Point(dockOffsetL, dockOffsetT);
       c.Size = new Size(this.Width - dockOffsetL - dockOffsetR, size.Height);
       c.Anchor = AnchorStyles.Right | AnchorStyles.Top | AnchorStyles.Left;
       this.Controls.Add(c);
       c.FadeIn();
      }

      return;
     }
    }
   }
   //

   //AutoHide Bottom
   foreach (DockContainer c in autoHideB)
   {
    foreach (DockPanel p in c.panList)
    {
     rc = new Rectangle((int)p.TabRect.Left, (int)p.TabRect.Top, (int)p.TabRect.Width, (int)p.TabRect.Height);

     if (RectangleToScreen(rc).Contains(MousePosition.X, MousePosition.Y))
     {
      c.ActivePanel = p;

      if (c != autoHideContainer)
      {
       this.Controls.Remove(autoHideContainer);
       autoHideContainer = c;
       size = c.Size;
       c.Dock = DockStyle.None;
       c.Location = new Point(dockOffsetL, this.Height - size.Height - dockOffsetB);
       c.Size = new Size(this.Width - dockOffsetL - dockOffsetR, size.Height);
       c.Anchor = AnchorStyles.Right | AnchorStyles.Bottom | AnchorStyles.Left;
       this.Controls.Add(c);
       c.FadeIn();
      }

      return;
     }
    }
   }
   //

   if (autoHideContainer != null)
   {
    if (!autoHideContainer.RectangleToScreen(autoHideContainer.ClientRectangle).Contains(MousePosition.X, MousePosition.Y))
     autoHideContainer.FadeOut();
   }
  }





  protected override void OnMouseLeave(EventArgs e)
  {
   base.OnMouseLeave(e);

   if (autoHideContainer != null)
   {
    if (autoHideContainer.fading)
     return;

    if (!autoHideContainer.RectangleToScreen(autoHideContainer.ClientRectangle).Contains(MousePosition.X, MousePosition.Y))
     autoHideContainer.FadeOut();
   }
  }

  internal void ReleaseAutoHideContainer()
  {
   this.Controls.Remove(autoHideContainer);
   autoHideContainer = null;
  }
  //

  //Parent form





  protected override void OnParentChanged(EventArgs e)
  {
   if (Parent is Form)
   {
    Form frm = Parent as Form;
    frm.KeyDown += new KeyEventHandler(InvokeKeyDown);
    frm.KeyUp += new KeyEventHandler(InvokeKeyUp);
    frm.Deactivate += new EventHandler(DeactivateParent);
    frm.Activated += new EventHandler(ActivateParent);
   }

   base.OnParentChanged(e);
  }







  private void DeactivateParent(object sender, EventArgs e)
  {
   try
   {
    foreach (DockPanel p in DockManager.ListDocument)
    {
     DockContainer c = p.Form.HostContainer;
     if (c == null)
      continue;

     if ((c.ActivePanel == p) && (c.ContainsFocus))
     {
      activeDoc = p;
      p.SetFocus(false);
      break;
     }
    }
   }
   catch (Exception ex)
   {
    Console.WriteLine("DockManager.DeactivateParent: "+ex.Message);
   }
   finally
   {
    Invalidate(true);
   }
  }







  private void ActivateParent(object sender, EventArgs e)
  {
   try
   {
    if (activeDoc != null)
     activeDoc.SetFocus(true);
   }
   catch (Exception ex)
   {
    Console.WriteLine("DockManager.ActivateParent: "+ex.Message);
   }
   finally
   {
    Invalidate(true);
   }
  }
  //

  //XML r/w




  override internal void WriteXml(XmlTextWriter writer)
  {
   writer.WriteStartElement("manager");
   writer.WriteAttributeString("parent", Parent.GetType().FullName);

   foreach (DockContainer c in conList)
    c.WriteXml(writer);

   foreach (DockPanel p in panList)
    p.WriteXml(writer);

   writer.WriteEndElement();
  }





  override internal void ReadXml(XmlReader reader)
  {
   base.ReadXml(reader);
  }
  //

  //Static variables and functions
  //Variables
  private static Collection listPanel = new Collection();
  private static Collection listDocument = new Collection();
  private static Collection listTool = new Collection();

  private static ArrayList contList = new ArrayList();
  private static ArrayList formList = new ArrayList();
  private static ArrayList managerList = new ArrayList();
  private static DockEventHandler dragEvent;
  private static DockVisualStyle style = DockVisualStyle.VS2005;
  private static bool fastMoveDraw = true;
  private static OverlayForm dockGuide = null;
  private static bool noGuidePlease = false;
  //

  //Properties



  public static Collection ListPanel
  {
   get { return listPanel; }
   set { listPanel = value; }
  }




  public static Collection ListDocument
  {
   get { return listDocument; }
   set { listDocument = value; }
  }




  public static Collection ListTool
  {
   get { return listTool; }
   set { listTool = value; }
  }




  public static DockVisualStyle Style
  {
   get { return style; }
   set { style = value; }
  }




  public static bool FastMoveDraw
  {
   get { return fastMoveDraw; }
   set { fastMoveDraw = value; }
  }

  internal static OverlayForm DockGuide
  {
   get { return dockGuide; }
   set { dockGuide = value; }
  }

  internal static bool NoGuidePlease
  {
   get { return noGuidePlease; }
   set { noGuidePlease = value; }
  }
  //

  //Register
  //Container
  internal static void RegisterContainer(DockContainer cont)
  {
   if (contList.Contains(cont))
    return;

   if (cont == null)
    throw new ArgumentNullException("The container must not be null.");

   cont.Disposed += new EventHandler(ObjectDisposed);
   contList.Add(cont);

   dragEvent += cont.dragWindowHandler;
  }

  internal static void UnRegisterContainer(DockContainer cont)
  {
   if (!contList.Contains(cont))
    return;

   dragEvent -= cont.dragWindowHandler;
   contList.Remove(cont);
  }
  //

  //Form
  internal static void RegisterForm(DockForm form)
  {
   if (formList.Contains(form))
    return;

   if (form == null)
    throw new ArgumentNullException("The form must not be null.");

   form.Disposed += new EventHandler(ObjectDisposed);
   formList.Add(form);
  }

  internal static void FormActivated(DockForm form)
  {

   if (!formList.Contains(form))
    return;

   formList.Remove(form);
   formList.Insert(0, form);
  }

  internal static int GetZIndex(DockForm form)
  {
   return formList.IndexOf(form);
  }

  internal static DockForm GetFormAtPoint(Point pt, int startIndex)
  {
   for (int i = startIndex; i < formList.Count; i++)
   {
    DockForm f = formList[i] as DockForm;

    if (f.Bounds.Contains(pt) & f.Visible)
     return f;
   }

   return null;
  }




  public static void DebugFormList()
  {
   foreach (DockForm f in formList)
   {
    Console.WriteLine(f.Text);
   }
  }

  internal static void UnRegisterForm(DockForm form)
  {
   if (!formList.Contains(form))
    return;

   formList.Remove(form);
  }
  //

  //Manager
  internal static void RegisterManager(DockManager manager)
  {
   if (managerList.Contains(manager))
    return;

   if (manager == null)
    throw new ArgumentNullException("The manager must not be null.");

   manager.Disposed += new EventHandler(ObjectDisposed);
   managerList.Add(manager);
  }

  internal static void UnRegisterManager(DockManager manager)
  {
   if (!managerList.Contains(manager))
    return;

   managerList.Remove(manager);
  }
  //

  //Window
  internal static void RegisterWindow(DockWindow wnd)
  {
   if (wnd == null)
    throw new ArgumentNullException("The window must not be null.");

   if (listPanel.Contains(wnd.ControlContainer))
    return;

   wnd.Disposed += new EventHandler(ObjectDisposed);

   listPanel.Add(wnd.ControlContainer);
   if (wnd.DockType == DockContainerType.Document)
    listDocument.Add(wnd.ControlContainer);
   else if (wnd.DockType == DockContainerType.ToolWindow)
    listTool.Add(wnd.ControlContainer);
  }

  internal static void UnRegisterWindow(DockWindow wnd)
  {
   if (wnd == null)
    throw new ArgumentNullException("The window must not be null.");

   if (!listPanel.Contains(wnd.ControlContainer))
    return;

   contList.Remove(wnd.ControlContainer);
   if (wnd.DockType == DockContainerType.Document)
    listDocument.Remove(wnd.ControlContainer);
   else if (wnd.DockType == DockContainerType.ToolWindow)
    listTool.Remove(wnd.ControlContainer);
  }
  //

  static void ObjectDisposed(object sender, EventArgs e)
  {
   if (sender is DockContainer)
    UnRegisterContainer(sender as DockContainer);
   else if (sender is DockForm)
    UnRegisterForm(sender as DockForm);
   else if (sender is DockManager)
    UnRegisterManager(sender as DockManager);
   else if (sender is DockWindow)
    UnRegisterWindow(sender as DockWindow);
   else
    throw new ArgumentException("Only DockForm, DockContainer, DockManager and DockWindow objects may be handled by the DockServer.");
  }
  //

  //Drag event
  internal static void InvokeDragEvent(object sender, DockEventArgs e)
  {
   if (dragEvent != null)
    dragEvent(sender, e);

   if (!e.ShowDockGuide)
    HideDockGuide();
  }
  //

  //DockGuide
  internal static void UpdateDockGuide(DockContainer target, DockEventArgs e)
  {
   if ((target == null) | noGuidePlease | (style != DockVisualStyle.VS2005) | fastMoveDraw)
   {
    HideDockGuide();
    return;
   }

   if (dockGuide == null)
    dockGuide = new OverlayForm();

   dockGuide.TargetHost = target;
   dockGuide.Size = target.Size;

   if (!dockGuide.Visible)
    dockGuide.Show();

   if (target.Parent != null)
    dockGuide.Location = target.RectangleToScreen(target.ClientRectangle).Location;
   else
    dockGuide.Location = target.Location;

   dockGuide.BringToFront();


   DockStyle dstStyle = dockGuide.HitTest(e.Point);

   if (dstStyle != DockStyle.None)
    e.Point = target.GetVirtualDragDest(dstStyle);
   else
    e.Handled = true;

   e.ShowDockGuide = true;
  }

  internal static void HideDockGuide()
  {
   if (dockGuide != null)
    dockGuide.Hide();
  }
  //

  //XML r/w




  public static void WriteXml(string file)
  {
   XmlTextWriter writer = new XmlTextWriter(file, System.Text.Encoding.UTF8);
   writer.Formatting = Formatting.Indented;
   writer.WriteStartDocument(true);

   writer.WriteStartElement("docktree");

   foreach (DockManager m in managerList)
    m.WriteXml(writer);

   foreach (DockForm f in formList)
    f.WriteXml(writer);

   writer.WriteEndElement();

   writer.WriteEndDocument();
   writer.Close();
  }





  public static void ReadXml(string file)
  {
   XmlTextReader reader = null;

   try
   {

    reader = new XmlTextReader(file);
    reader.WhitespaceHandling = WhitespaceHandling.None;


    while (reader.Read())
    {
     if (!reader.IsStartElement())
      continue;

     switch (reader.Name)
     {
      case "form":
       Console.WriteLine("form");

       DockForm form = new DockForm();
       form.Opacity = 0;
       form.Show();
       form.ReadXml(reader.ReadSubtree());


        form.Opacity = 1;


       break;

      case "manager":
       Console.WriteLine("manager");

       string hostType = reader.GetAttribute("parent");
       if (hostType != null)
       {
        foreach (DockManager m in managerList)
         if (m.Parent.GetType().FullName == hostType)
          m.ReadXml(reader.ReadSubtree());
       }
       break;
     }
    }
   }
   finally
   {
    if (reader != null)
     reader.Close();
   }
  }
  //
  //
 }
}

 