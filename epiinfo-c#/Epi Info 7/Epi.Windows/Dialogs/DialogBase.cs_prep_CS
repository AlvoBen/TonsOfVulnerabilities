using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using Epi;
using Epi.Windows;

namespace Epi.Windows.Dialogs
{



    public         class DialogBase : FormBase
 {
        //Constructors




        public DialogBase()
        {
            InitializeComponent();
        }





        public DialogBase(MainForm frm)
        {
            //Input Validation
            if (frm == null)
            {

            }
            //Input Validation

            InitializeComponent();
            errorMessages = new List();
            if (frm != null)
            {

                this.mainForm = frm;
                mainForm.WireUpEventHandlers(this);
            }
        }
        //Constructors

        //Private Attributes
        private List errorMessages = new List();
        private bool isInWizard = false;



        protected  MainForm mainForm = null; 
        //Private Attributes

  //Protected Class Members
  //

        //Protected Properties




        protected List ErrorMessages
        {
            get
            {
                return errorMessages;
            }
        }

        //Protected Properties

        //Protected Methods





        protected bool IsInputValid()
        {
            return ValidateInput();
        }





        protected virtual bool ValidateInput()
        {
            errorMessages.Clear();
            return (errorMessages.Count == 0); 
        }




        public virtual void CheckForInputSufficiency()
        {
        }




        protected void ShowErrorMessages()
        {
            string errorMessagesString = String.Empty;
            foreach (string str in ErrorMessages)
            {
                if (!String.IsNullOrEmpty(errorMessagesString))
                {
                    errorMessagesString += Environment.NewLine;
                }
                errorMessagesString += str;
            }

            if (!String.IsNullOrEmpty(errorMessagesString))
            {
                MsgBox.ShowError(errorMessagesString);
            }

            ErrorMessages.Clear();
        }





        protected void BeginBusy(string message)
        {
            if (this.BeginBusyEvent != null)
            {
                BeginBusyEvent(message);
            }
        }




        protected void EndBusy()
        {
            if (this.EndBusyEvent != null)
            {
                EndBusyEvent();
            }
        }





        protected void UpdateStatus(string message)
        {
            if (this.UpdateStatusEvent != null)
            {
                UpdateStatusEvent(message);
            }
        }







        protected void ProgressReportBegin(int min, int max, int step)
        {
            if (this.ProgressReportBeginEvent != null)
            {
                ProgressReportBeginEvent(min, max, step);
            }
        }




        protected void ProgressReportEnd()
        {
            if (this.ProgressReportEndEvent != null)
            {
                ProgressReportEndEvent();
            }
        }




        protected void ProgressReportUpdate()
        {
            if (this.ProgressReportUpdateEvent != null)
            {
                ProgressReportUpdateEvent();
            }
        }





        protected virtual string SelectProjectPath()
        {
            string path = string.Empty;
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = SharedStrings.SELECT_PROJECT;
            openFileDialog.Filter = "Epi7 " + SharedStrings.PROJECT_FILE + " ( *" + Epi.FileExtensions.EPI_PROJ + ")|*" + Epi.FileExtensions.EPI_PROJ;
            openFileDialog.FilterIndex = 1;
            openFileDialog.Multiselect = false;
            openFileDialog.CheckFileExists = true;
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                path = openFileDialog.FileName.Trim();
            }
            return path;
        }










        protected virtual Project SelectProject()
        {
            try
            {
                Project project = null;













                string projectFilePath = this.SelectProjectPath();
                if (!string.IsNullOrEmpty(projectFilePath))




                {
                    IProjectManager manager = Module.GetService(typeof(IProjectManager)) as IProjectManager;
                    if (manager == null)
                    {
                        throw new GeneralException("Project manager is not registered.");
                    }
                    if (projectFilePath.EndsWith(".mdb"))
                    {
                        MessageBox.Show("The functionality to process MS Access files will be available in a future release.", "Coming Soon", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        project = manager.OpenProject(projectFilePath);
                        if (project == null)
                        {
                            MsgBox.ShowError(SharedStrings.INVALID_PROJECT_FILE);
                        }
                    }
                }







                return project;
            }
            finally
            {
            }
        }

        //Protected Methods

        //Public Properties



        public bool IsInWizard
        {
            get
            {
                return isInWizard;
            }
            set
            {
                this.isInWizard = value;
            }
        }




        public IWindowsModule Module
        {
            get
            {
                if (mainForm != null)
                {
                    return mainForm.Module;
                }
                else
                {
                    throw new GeneralException("Dialog main form could not be accessed.");

                }
            }
        }




        public MainForm MainForm
        {
            get
            {
                return mainForm;
            }
        }

        //Public Properties

        //Public Events




        public event BeginBusyEventHandler BeginBusyEvent;




        public event EndBusyEventHandler EndBusyEvent;




        public event UpdateStatusEventHandler UpdateStatusEvent;




        public event ProgressReportBeginEventHandler ProgressReportBeginEvent;




        public event ProgressReportUpdateEventHandler ProgressReportUpdateEvent;




        public event SimpleEventHandler ProgressReportEndEvent;
        //Public Events
    }
}

 