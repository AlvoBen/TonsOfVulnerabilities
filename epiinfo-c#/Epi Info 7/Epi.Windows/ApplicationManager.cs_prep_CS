//Namespaces

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Data;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Channels.Tcp;
using System.Runtime.Remoting.Messaging;
using System.Security.Permissions;
using System.Threading;
using System.Windows.Forms;

using Epi.Windows;
using Epi.Collections;
using VariableCollection = Epi.Collections.NamedObjectCollection;
using EpiInfo.Plugin;

// 

namespace Epi.Windows
{



    public sealed class ApplicationManager : System.MarshalByRefObject, IModuleManager, IProjectManager
    {
        //Private Static Members
        private static string[] commandLineArguments;
        private static ThreadExceptionEventHandler threadExceptionEventHandler;
        private static ExecutionMode Mode = ExecutionMode.NotSet;

        // 

        //Public Methods





        public static void Start(string[] args)
        {
            if (LoadConfiguration(args))
            {

                ApplicationManager.commandLineArguments = args;


                /*
                ApplicationManager server = new ApplicationManager();
                server.StartInternal(ApplicationManager.commandLineArguments);
                */

                new ApplicationManager().StartInternal(ApplicationManager.commandLineArguments);
                System.Windows.Forms.Application.Run();


                /*





                string setupGuid = Util.GetFileGuid(Configuration.GetNewInstance().ConfigFilePath).ToString();
                string mutexName = "Local\\EI7" + setupGuid; // note: mutex name length <= 260

                Mutex mutex = null;
                bool mutexCreatedNew = false;








                mutex = new Mutex(true, mutexName, out mutexCreatedNew);

                if (mutexCreatedNew)
                {



                    ApplicationManager server = new ApplicationManager();
                    server.StartInternal(ApplicationManager.commandLineArguments);



                        System.Windows.Forms.Application.Run();

                }
                else
                {
                    MsgBox.ShowError(SharedStrings.WARNING_APPLICATION_RUNNING);
                    Application.Exit();
                }*/



                //Deprecated Code



























































                //

            }
        }

        //

        //Private Methods






        private static bool LoadConfiguration(string[] args)
        {

            string configFilePath = Configuration.DefaultConfigurationPath;

            bool configurationOk = true;
            try
            {
                string directoryName = Path.GetDirectoryName(configFilePath);
                if (!Directory.Exists(directoryName))
                {
                    Directory.CreateDirectory(directoryName);
                }

                if (!File.Exists(configFilePath))
                {

                    Configuration defaultConfig = Configuration.CreateDefaultConfiguration();
                    Configuration.Save(defaultConfig);
                }

                Configuration.Load(configFilePath);
            }
            catch (ConfigurationException)
            {
                configurationOk = RecoverFromConfigurationError(configFilePath);
            }
            catch (Exception ex)
            {
                configurationOk = ex.Message == "";
            }

            return configurationOk;
        }





        private static void OnUnhandledException(Exception ex)
        {

            Epi.Windows.MsgBox.ShowException(ex);

        }






        private static bool RecoverFromConfigurationError(string configFilePath)
        {
            DialogResult result = MsgBox.ShowQuestion(SharedStrings.RESTORE_CONFIGURATION_Q, MessageBoxButtons.YesNo);
            if ((result == DialogResult.Yes) || (result == DialogResult.OK))
            {
                if (string.IsNullOrEmpty(configFilePath))
                {
                    throw new ArgumentNullException("configFilePath");
                }

                try
                {
                    if (File.Exists(configFilePath))
                    {

                        string timeStamp = DateTime.Now.ToString().Replace(StringLiterals.FORWARD_SLASH, StringLiterals.UNDER_SCORE);
                        timeStamp = timeStamp.Replace(StringLiterals.BACKWARD_SLASH, StringLiterals.UNDER_SCORE);
                        timeStamp = timeStamp.Replace(StringLiterals.COLON, StringLiterals.UNDER_SCORE);
                        timeStamp = timeStamp.Replace(StringLiterals.SPACE, StringLiterals.UNDER_SCORE);


                        string oldConfigFilePath = configFilePath + "." + timeStamp;
                        File.Copy(configFilePath, oldConfigFilePath);
                        File.Delete(configFilePath);
                    }

                    Configuration defaultConfig = Configuration.CreateDefaultConfiguration();
                    Configuration.Save(defaultConfig);
                    Configuration.Load(configFilePath);
                    return true;

                }
                catch (Exception)
                {
                    return false;
                }

            }
            return false;
        }

        // 

        //Private Fields




        private readonly List moduleCollection;





        private readonly ProjectCollection projectCollection;




        private readonly IServiceContainer services;




        private bool unloading = false;
        // 

        //Contructors and Destructors




        private ApplicationManager()
        {
            this.moduleCollection = new List();
            this.projectCollection = new ProjectCollection();
            this.services = new ServiceContainer();
        }





        ~ApplicationManager()
        {
            this.Dispose(false);
        }

        // 

        //Project Management





        Project IProjectManager.OpenProject(string filePath)
        {
            Project project = null;

            if (this.projectCollection.Contains(filePath))
            {
                project = this.projectCollection[filePath];

            }
            else
            {
                if (!File.Exists(filePath))
                {
                    throw new FileNotFoundException(SharedStrings.FILE_NOT_FOUND, filePath);
                }

                project = new Project(filePath);

                lock (this.projectCollection.SyncRoot)
                {
                    this.projectCollection.Add(project);
                }
            }

            return project;
        }





        Project IProjectManager.CreateNewProject()
        {
            Project project = new Project();

            lock (this.projectCollection.SyncRoot)
            {
                this.projectCollection.Add(project);
            }
            return project;
        }

        // 

        //Application Management








        public IModule CreateModuleInstance(string typeName)
        {
            IModule module;


            Type type = null;
            string path = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);

            DataRow[] result = Configuration.GetNewInstance().Modules.Select("Name='" + typeName + "'");
            if (result.Length == 1)
            {
                type = GetModuleType(((Epi.DataSets.Config.ModuleRow)result[0]).Type);
            }
            else
            {
                type = Type.GetType(typeName);
            }

            if (type == null)
                throw new GeneralException("Could not load module type."); // TODO: Hard coded string




            module = Activator.CreateInstance(type) as IModule;

            return module;
        }

















        private static void AttachExceptionHandler()
        {
            if (ApplicationManager.threadExceptionEventHandler == null)
            {
                ApplicationManager.threadExceptionEventHandler = new ThreadExceptionEventHandler(ApplicationManager.Application_ThreadException);
                System.Windows.Forms.Application.ThreadException += threadExceptionEventHandler;
            }
        }




        private static void DetachExceptionHandler()
        {
            if (ApplicationManager.threadExceptionEventHandler != null)
            {
                System.Windows.Forms.Application.ThreadException -= threadExceptionEventHandler;
                ApplicationManager.threadExceptionEventHandler = null;
            }
        }




        private static void CreateWindowsResources()
        {
            Configuration config = Configuration.GetNewInstance();


            if (!Directory.Exists(config.Directories.Configuration))
            {
                Directory.CreateDirectory(config.Directories.Configuration);
            }


            if (!Directory.Exists(config.Directories.Templates))
            {
                Directory.CreateDirectory(config.Directories.Templates);
            }


            if (!Directory.Exists(config.Directories.Output))
            {
                Directory.CreateDirectory(config.Directories.Output);
            }


            string projectsDirectory = config.Directories.Project;
            if (!string.IsNullOrEmpty(projectsDirectory))
            {
                if (!Directory.Exists(config.Directories.Project))
                {
                    Directory.CreateDirectory(config.Directories.Project);
                }
            }


            string logDir = config.Directories.LogDir;
            if (!string.IsNullOrEmpty(logDir))
            {
                if (!Directory.Exists(logDir))
                {
                    Directory.CreateDirectory(logDir);
                }
            }


            if (!File.Exists(Files.MnuFilePath))
            {
                using (FileStream fs = new FileStream(Files.MnuFilePath, FileMode.CreateNew, FileAccess.Write))
                {
                    using (Stream resourceStream = Epi.Resources.ResourceLoader.GetMnuFile())
                    {
                        Util.CopyStream(resourceStream, fs);
                        fs.Close();
                    }
                }
            }


            string samplePrj = Path.Combine(config.Directories.Configuration, "Sample7.prj");
            if (File.Exists(samplePrj))
            {
                if ((File.GetAttributes(samplePrj) & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
                {
                    File.SetAttributes(samplePrj, File.GetAttributes(samplePrj) | FileAttributes.ReadOnly);
                }









            }
            string sampleMdb = Path.Combine(config.Directories.Configuration, "Sample7.mdb");
            if (File.Exists(sampleMdb))
            {
                if ((File.GetAttributes(sampleMdb) & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
                {
                    File.SetAttributes(sampleMdb, File.GetAttributes(sampleMdb) | FileAttributes.ReadOnly);
                }









            }
        }




        private void PublishServices(IServiceContainer serviceContainer, bool overwriteExistingServices)
        {
            PublishService(this.GetType(), this, serviceContainer, overwriteExistingServices);
            PublishService(typeof(IModuleManager), this, serviceContainer, overwriteExistingServices);
            PublishService(typeof(IProjectManager), this, serviceContainer, overwriteExistingServices);
            PublishService(typeof(IServiceContainer), serviceContainer, serviceContainer, overwriteExistingServices);
            PublishService(typeof(IServiceProvider), serviceContainer, serviceContainer, overwriteExistingServices);
        }




        private static void PublishService(Type type, object service, IServiceContainer serviceContainer, bool overwriteExistingService)
        {
            if (serviceContainer.GetService(type) != null)
            {
                if (overwriteExistingService)
                {
                    serviceContainer.RemoveService(type, false);
                    serviceContainer.AddService(type, service);
                }
            }
            else
            {
                serviceContainer.AddService(type, service);
            }
        }





        private void StartInternal(string[] commandLineArguments)
        {
            IServiceContainer serviceContainer = (IServiceContainer)this.GetService(typeof(IServiceContainer));
            this.PublishServices(serviceContainer, false);
            this.CreateInterProcessCommunicationServer(3);

            System.Windows.Forms.Application.EnableVisualStyles();
            System.Windows.Forms.Application.DoEvents();


            ApplicationManager.CreateWindowsResources();


            System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(Configuration.GetNewInstance().Settings.Language);


            Configuration.Environment = ExecutionEnvironment.WindowsApplication;
            Configuration.MasterServiceProvider = this;

            ICommandLine commandLine = new CommandLine(commandLineArguments);


            string moduleToLoad = "Menu";


            string moduleArgument = commandLine.GetArgument("l");
            if (moduleArgument != null)
            {
                moduleToLoad = moduleArgument;
            }

            try
            {

                IModule module = this.CreateModuleInstance(moduleToLoad);
                module.Load(this, commandLine);
            }
            catch (Exception ex)
            {
                throw new ApplicationException(string.Format(SharedStrings.CANNOT_LOAD_APPLICATION, moduleToLoad), ex);
            }
            finally
            {
            }
        }






        private static Type GetModuleType(string typeName)
        {
            try
            {
                Type type = Type.GetType(typeName);
                if (!typeof(IWindowsModule).IsAssignableFrom(type))
                {
                    type = null;
                }
                return type;
            }
            catch (Exception ex)
            {
                throw new GeneralException(string.Format(SharedStrings.CANNOT_LOAD_APPLICATION, typeName), ex);
            }
        }




        private void CloseOnZeroActiveModules()
        {
            lock (this.moduleCollection)
            {
                if (this.moduleCollection.Count < 1)
                {
                    this.Dispose(true);
                }
            }
        }

        // 

        //IModuleManager




        void IModuleManager.Attach(IModule module)
        {
            lock (this.moduleCollection)
            {
                this.moduleCollection.Add(module);
            }
        }





        void IModuleManager.Detach(IModule module)
        {
            try
            {




                if (!unloading)
                {
                    lock (this.moduleCollection)
                    {
                        bool exists = this.moduleCollection.Remove(module);
                    }
                }
                else
                {
                    this.moduleCollection.Remove(module);
                }
            }
            catch
            {


                this.Dispose();
                return;
            }


            this.CloseOnZeroActiveModules();
        }




        void IModuleManager.UnloadAll()
        {
            try
            {
                unloading = true;
                lock (this.moduleCollection)
                {
                    IModule[] loadedModules = this.moduleCollection.ToArray();
                    foreach (IModule module in loadedModules)
                    {
                        module.Unload();
                    }
                }
            }
            finally
            {

                unloading = false;
            }
        }
        // 

        //Remoting





        static public string RemoteServerUrl
        {
            get
            {
                return @"tcp://127.0.0.1:" + Configuration.GetNewInstance().Settings.FrameworkTcpPort + "/" + GetUniqueRemotingUri(Configuration.GetNewInstance().ConfigFilePath);
            }
        }





        static public ApplicationManager CreateInterProcessCommunicationClient()
        {
            if (Mode == ExecutionMode.Server)
            {
                throw new InvalidOperationException("Client proxy cannot be created in      AppDomain because a server has been created.");
            }

            Mode = ExecutionMode.Client;

            IDictionary properties = new Hashtable(3);
            properties.Add("bindTo", "127.0.0.1");
            properties.Add("port", 0);
            TcpChannel tcpChannel = new TcpChannel(properties, null, null);
            ChannelServices.RegisterChannel(tcpChannel, false);

            return RemotingServices.Connect(typeof(ApplicationManager), RemoteServerUrl) as ApplicationManager;
        }





        [SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.Infrastructure)]
        public override object InitializeLifetimeService()
        {
            return null;
        }




        private void CreateInterProcessCommunicationServer(int maximumRetries)
        {
            ThreadExceptionEventHandler terminator = new ThreadExceptionEventHandler(Application_FatalError);
            Application.ThreadException += terminator;

            if (Mode == ExecutionMode.Client)
            {
                throw new InvalidOperationException("Server cannot be created in      AppDomain because a client has been created");
            }
            else if (Mode == ExecutionMode.Server)
            {
                return;
            }

            int retryCount = 0;

            try
            {
                Configuration config = Configuration.GetNewInstance();
                while (true)
                {
                    try
                    {
                        IDictionary properties = new Hashtable(3);
                        properties.Add("bindTo", "127.0.0.1");
                        properties.Add("port", config.Settings.FrameworkTcpPort);
                        TcpChannel tcpChannel = new TcpChannel(properties, null, null);
                        ChannelServices.RegisterChannel(tcpChannel, false);

                        RemotingServices.Marshal(this, GetUniqueRemotingUri(config.ConfigFilePath));


                        break;
                    }
                    catch (Exception ex)
                    {
                        System.Diagnostics.Debug.WriteLine(ex.Message);

                        SocketException sex = ex as SocketException;
                        if (sex != null)
                        {

                            if (sex.ErrorCode == 10048)
                            {

                                config.Settings.FrameworkTcpPort += 1;
                                Configuration.Save(config);
                            }
                        }

                        if (++retryCount > maximumRetries)
                        {
                            throw;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new GeneralException("Framework interprocess communication initalization failed. Please restart and try again.", ex);
            }

            Mode = ExecutionMode.Server;
            Application.ThreadException -= terminator;



            AttachExceptionHandler();
        }





        private static string GetUniqueRemotingUri(string path)
        {
            int volumeSeperatorPos = path.IndexOf(Path.VolumeSeparatorChar);
            if (volumeSeperatorPos > -1)
            {
                path = path.Substring(volumeSeperatorPos + 1, path.Length - volumeSeperatorPos - 1);
            }

            path = path.Trim('\\').Replace("\\", "/") + ".rem";

            return path;
        }





        public void StartRemotely(string[] commandLineArguments)
        {
            this.StartInternal(commandLineArguments);
        }
        // 

        //Private Event Handlers

        private static void Application_ThreadException(object sender, ThreadExceptionEventArgs e)
        {
            ApplicationManager.OnUnhandledException(e.Exception);
        }

        private static void Application_FatalError(object sender, ThreadExceptionEventArgs e)
        {

            string msg = "A fatal error was encountered. The application cannot continue. \n\nCause: " + e.Exception.Message;
            Logger.Log(msg);
            MessageBox.Show(msg);


            Application.ExitThread();
        }

        // 

        //Nested Types
        enum ExecutionMode { NotSet, Server, Client }

        //Nested Types




        private class ProjectCollection : ICollection, IEnumerable
        {
            //Private Data Members

            private object syncRoot = null;


            private System.Collections.Generic.List projects;

            // 

            //Constructors
            public ProjectCollection()
            {
                syncRoot = new object();
                projects = new System.Collections.Generic.List();
            }
            // 

            //Public Methods






            public bool Contains(string filePath)
            {
                Guid guid = Util.GetFileGuid(filePath);
                return this.Contains(guid);
            }






            public bool Contains(Project project)
            {
                return this.projects.Contains(project);
            }






            protected bool Contains(Guid guid)
            {
                foreach (Project project in projects)
                {
                    if (project.Id == guid)
                        return true;
                }
                return false;
            }





            public void Add(Project project)
            {
                if (this.Contains(project))
                {
                    throw new ArgumentException("Project already exists in collection.", "project");
                }
                this.projects.Add(project);
            }





            public void Remove(Project project)
            {
                if (!this.Contains(project))
                {
                    throw new ArgumentException("Project does not exists in collection.", "project");
                }
                this.projects.Remove(project);
            }

            // 

            //Protected Properties






            protected Project this[Guid guid]
            {
                get
                {
                    foreach (Project project in this.projects)
                    {
                        if (project.Id == guid)
                            return project;
                    }
                    throw new ArgumentException("Project guid does not exists in collection.", "guid");
                }
            }






            public Project this[string filePath]
            {
                get
                {
                    Guid guid = Util.GetFileGuid(filePath);
                    return this[guid];
                }
            }

            //

            //ICollection Members




            public bool IsSynchronized
            {
                get
                {
                    return false;
                }
            }




            public int Count
            {
                get
                {
                    return this.projects.Count;
                }
            }






            public void CopyTo(Array array, int index)
            {
                throw new NotSupportedException("CopyTo doesn't work here.");
            }

            public object SyncRoot
            {
                get
                {
                    return this.syncRoot;
                }
            }

            // 

            //IEnumerable Members

            IEnumerator IEnumerable.GetEnumerator()
            {
                return this.projects.GetEnumerator();
            }

            // 
        }




        public delegate void VoidDelegate();

        //IDisposable Members



        public void Dispose()
        {

            this.Dispose(true);


        }






        private void Dispose(bool disposing)
        {
            if (disposing)
            {


                Monitor.TryEnter(this.moduleCollection);

                for (int i = 0; i < this.moduleCollection.Count; i++)
                {
                    this.moduleCollection[i].Dispose();
                }


                Application.ExitThread();
            }
        }
        // 

        //IServiceProvider Members









        [System.Diagnostics.DebuggerStepThrough()]
        public object GetService(Type serviceType)
        {
            if (serviceType == this.GetType())
            {
                return this;
            }
            else
            {
                return this.services.GetService(serviceType);
            }
        }

        // 
    }
}

 