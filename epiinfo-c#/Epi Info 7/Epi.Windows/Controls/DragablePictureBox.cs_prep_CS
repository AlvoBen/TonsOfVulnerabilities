//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

//

namespace Epi.Windows.Controls
{



 public class DragablePictureBox : System.Windows.Forms.PictureBox, IDragable, IFieldControl
 {

  //Private Members

  private bool isMouseDown = false;
  private int x;
  private int y;
  private int fieldId;
  private bool hasMoved = false;
  private Epi.Fields.Field field;
        private ControlTracker controlTracker;
        private Enums.TrackerStatus trackerStatus;

  //

  //Constructors




  public DragablePictureBox()
  {
   InitializeComponent();
  }

  //

  //Override Methods





  protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
  {
   base.OnPaint (e);
  }

  //

  //Private Methods




  private void InitializeComponent()
  {
   this.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DragableButton_MouseDown);
   this.MouseMove += new System.Windows.Forms.MouseEventHandler(this.DragableButton_MouseMove);
   this.MouseLeave += new System.EventHandler(this.DragableButton_MouseLeave);
   base.DragOver += new DragEventHandler(DragableButton_DragOver);
  }

  //

  //Event Handlers






  private void DragableButton_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
  {
   if (isMouseDown)
   {
    DataObject data = new DataObject("DragControl",this);
    this.DoDragDrop(data,DragDropEffects.Move);
    isMouseDown = false;
    this.hasMoved = true;
   }
  }






  private void DragableButton_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
  {
   isMouseDown = true;
   x = e.X;
   y = e.Y;
  }






  private void DragableButton_MouseLeave(object sender, System.EventArgs e)
  {
   isMouseDown = false;
  }






  private void DragableButton_DragOver(object sender, DragEventArgs e)
  {
   e.Effect = DragDropEffects.Move;
  }

  //

  //Public Properties




  public int XOffset
  {
   get
   {
    return this.x;
   }
   set
   {
    this.x = value;
   }
  }




  public int YOffset
  {
   get
   {
    return this.y;
   }
   set
   {
    this.y = value;
   }
  }




  public int FieldId
  {
   get
   {
    return fieldId;
   }
   set
   {
    fieldId = value;
   }
  }




  public Epi.Fields.Field Field
  {
   get
   {
    return field;
   }
   set
   {
    field = value;
   }
  }




  public bool HasMoved
  {
   get
   {
    return hasMoved;
   }
   set
   {
    hasMoved = value;
   }
  }

  //

        //IFieldControl Members




        public bool IsFieldGroup
        {
            get
            {
                return false;
            }
            set
            {

            }
        }




        public Epi.Fields.GroupField GroupField
        {
            get
            {
                return null;
            }
            set
            {

            }
        }

        public ControlTracker Tracker
        {
            get { return controlTracker; }
            set { controlTracker = value; }
        }

        public Enums.TrackerStatus TrackerStatus
        {
            get { return trackerStatus; }
            set
            {
                controlTracker.TrackerStatus = value;
                this.trackerStatus = value;
            }
        }

        //

 }

}
 