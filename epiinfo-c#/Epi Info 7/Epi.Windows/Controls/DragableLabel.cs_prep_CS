//Namespaces

using System;
using System.Windows.Forms;

//

namespace Epi.Windows.Controls
{



 public class DragableLabel : PairedLabel, IDragable, IFieldControl
 {
  //Private Members

  private int x;
  private int y;
        private bool hasMoved = false;

        private int fieldId;
  private int horizontalDistanceToControl;
  private int verticalDistanceToControl;
  private bool isMouseDown = false;
  private Epi.Fields.Field field;
        private ControlTracker controlTracker;
        private Enums.TrackerStatus trackerStatus;

  //

  //Constructors




  public DragableLabel()
  {
   InitializeComponent();
  }

  //

  //Override Methods





  protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
  {
            if (Text == string.Empty)
            {
                ControlPaint.DrawBorder(e.Graphics, this.ClientRectangle, System.Drawing.Color.LightGray, ButtonBorderStyle.Solid);
            }
            else
            {
                base.OnPaint (e);
            }
  }

  //

  //Private Methods




  private void InitializeComponent()
  {
   base.DragOver += new System.Windows.Forms.DragEventHandler(this.DragableLabel_DragOver);
   base.MouseMove += new System.Windows.Forms.MouseEventHandler(this.DragableLabel_MouseMove);
   base.MouseLeave += new System.EventHandler(this.DragableLabel_MouseLeave);
   base.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DragableLabel_MouseDown);
  }

  //

  //Public Properties




  public int XOffset
  {
   get
   {
    return this.x;
   }
   set
   {
                this.x = value;
   }
  }




  public int YOffset
  {
   get
   {
                return this.y;
   }
   set
   {
                this.y = value;
   }
  }




  public int FieldId
  {
   get
   {
    return fieldId;
   }
   set
   {
    fieldId = value;
   }
  }




  public Epi.Fields.Field Field
  {
   get
   {
    return field;
   }
   set
   {
    field = value;
   }
  }





        public ControlTracker ControlTracker
        {
            get
            {
                return controlTracker;
            }
            set
            {
                controlTracker = value;
            }
        }




  public bool HasMoved
  {
   get
   {
    return hasMoved;
   }
   set
   {
    hasMoved = value;
   }
  }




  public int HorizontalDistanceToControl
  {
   get
   {
    return this.horizontalDistanceToControl;
   }
  }




  public int VerticalDistanceToControl
  {
   get
   {
    return this.verticalDistanceToControl;
   }
  }

  //

  //Event Handlers






  private void DragableLabel_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
  {
   isMouseDown = true;
            x = e.X;
            y = e.Y;

            if (this.LabelFor != null)
   {
    horizontalDistanceToControl = this.LabelFor.Left - this.Left;
    verticalDistanceToControl = this.LabelFor.Top - this.Top;
   }
  }






  private void DragableLabel_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
  {
   if (isMouseDown)
   {
    DataObject data = new DataObject("DragControl",this);
    this.DoDragDrop(data, DragDropEffects.Move);
    isMouseDown = false;
    this.hasMoved = true;
   }
  }






  private void DragableLabel_MouseLeave(object sender, System.EventArgs e)
  {
   isMouseDown = false;
  }






  private void DragableLabel_DragOver(object sender, System.Windows.Forms.DragEventArgs e)
  {
   e.Effect = DragDropEffects.Move;
  }

  //

        //IFieldControl Members




        public bool IsFieldGroup
        {
            get
            {
                return false;
            }
            set
            {

            }
        }




        public Epi.Fields.GroupField GroupField
        {
            get
            {
                return null;
            }
            set
            {

            }
        }

        public ControlTracker Tracker
        {
            get { return controlTracker; }
            set { controlTracker = value; }
        }

        public Enums.TrackerStatus TrackerStatus
        {
            get { return trackerStatus; }
            set
            {
                controlTracker.TrackerStatus = value;
                this.trackerStatus = value;
            }
        }

        //
 }
}

 