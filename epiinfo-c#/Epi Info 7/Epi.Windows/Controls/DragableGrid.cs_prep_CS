//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;

//

namespace Epi.Windows.Controls
{



 public class DragableGrid : System.Windows.Forms.DataGridView, IDragable, IFieldControl
 {

  //Private Members

  private bool isMouseDown = false;
  private int x;
  private int y;
  private bool hasMoved = false;
  private int fieldId;
  private Epi.Fields.Field field;
        private ControlTracker controlTracker;
        private Enums.TrackerStatus trackerStatus;

  //

  //Constructors




  public DragableGrid()
  {
   InitializeComponent();
  }

  //

  //Override Methods





  protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
  {
   base.OnPaint (e);
  }

  //

  //Private Methods




  private void InitializeComponent()
  {
   this.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DragableGrid_MouseDown);
   this.MouseMove += new System.Windows.Forms.MouseEventHandler(this.DragableGrid_MouseMove);
   this.MouseLeave += new System.EventHandler(this.DragableGrid_MouseLeave);
   base.DragOver +=new System.Windows.Forms.DragEventHandler(DragableGrid_DragOver);
  }

  //

  //Event Handlers






  private void DragableGrid_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
  {










  }






  private void DragableGrid_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
  {
   isMouseDown = true;
   x = e.X;
   y = e.Y;
  }






  private void DragableGrid_MouseLeave(object sender, System.EventArgs e)
  {
   isMouseDown = false;
  }






  private void DragableGrid_DragOver(object sender, System.Windows.Forms.DragEventArgs e)
  {
   e.Effect = DragDropEffects.Move;
  }

  //

  //Public Properties




  public int XOffset
  {
   get
   {
    return this.x;
   }
   set
   {
    this.x = value;
   }
  }




  public int YOffset
  {
   get
   {
    return this.y;
   }
   set
   {
    this.y = value;
   }
  }




  public bool HasMoved
  {
   get
   {
    return hasMoved;
   }
   set
   {
    hasMoved = value;
   }
  }




  public int FieldId
  {
   get
   {
    return fieldId;
   }
   set
   {
    fieldId = value;
   }
  }




  public Epi.Fields.Field Field
  {
   get
   {
    return field;
   }
   set
   {
    field = value;
   }
  }

  //

        //IFieldControl Members




        public bool IsFieldGroup
        {
            get
            {
                return false;
            }
            set
            {

            }
        }




        public Epi.Fields.GroupField GroupField
        {
            get
            {
                return null;
            }
            set
            {

            }
        }

        public ControlTracker Tracker
        {
            get { return controlTracker; }
            set { controlTracker = value; }
        }

        public Enums.TrackerStatus TrackerStatus
        {
            get { return trackerStatus; }
            set
            {
                controlTracker.TrackerStatus = value;
                this.trackerStatus = value;
            }
        }

        //

 }
}

 