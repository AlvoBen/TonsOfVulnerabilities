//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Windows.Forms;
using System.Text;
using Epi.Data.Services;
using Epi.Windows;

//

namespace Epi.Windows.Controls
{




    public         class SettingsPanel : System.Windows.Forms.UserControl
 {

  //Public Event Handlers




  public event System.EventHandler RepresentationOfYesChanged;




  public event System.EventHandler RepresentationOfNoChanged;




  public event System.EventHandler RepresentationOfMissingChanged;




  public event System.EventHandler ShowSelectCriteriaChanged;




  public event System.EventHandler ShowGraphicsChanged;




  public event System.EventHandler ShowHyperlinksChanged;




  public event System.EventHandler ShowPromptChanged;




  public event System.EventHandler ShowPercentsChanged;




  public event System.EventHandler ShowTablesOutputChanged;




  public event System.EventHandler ShowIncludeMissingChanged;




  public event System.EventHandler StatisticsLevelChanged;




  public event System.EventHandler ProcessRecordsChanged;




  public event System.EventHandler RepresentationOfYesTextChanged;




  public event System.EventHandler RepresentationOfNoTextChanged;




  public event System.EventHandler RepresentationOfMissingTextChanged;

  //

  //Constructor




  public SettingsPanel()
  {

   InitializeComponent();
  }

  //

  //Public Methods




  public void LoadMe()
  {
   LoadLists();
   ShowSettings();
  }




  public void LoadLists()
  {
   LoadRepresentionsOfYes();
   LoadRepresentionsOfNo();
   LoadRepresentionsOfMissing();
  }




        public void ShowSettings(Configuration pConfig = null)
  {
            Configuration config = null;

            if (pConfig == null)
            {
                config = Configuration.GetNewInstance();
            }
            else
            {
                config = pConfig;
            }



            Epi.DataSets.Config.SettingsRow settings = config.Settings;


            cmbYesAs.SelectedItem = settings.RepresentationOfYes;
            cmbNoAs.SelectedItem = settings.RepresentationOfNo;
            cmbMissingAs.SelectedItem = settings.RepresentationOfMissing;


   cbxShowPrompt.Checked = settings.ShowCompletePrompt;
            cbxSelectCriteria.Checked = settings.ShowSelection;
   cbxPercents.Checked = settings.ShowPercents;
   cbxGraphics.Checked = settings.ShowGraphics;
   cbxHyperlinks.Checked = settings.ShowHyperlinks;
   cbxTablesOutput.Checked = settings.ShowTables;


            WinUtil.SetSelectedRadioButton(settings.StatisticsLevel.ToString(), gbxStatistics);
            numericUpDownPrecision.Value = settings.PrecisionForStatistics;


            WinUtil.SetSelectedRadioButton(settings.RecordProcessingScope.ToString(), gbxProcessRecords);
            cbxIncludeMissing.Checked = settings.IncludeMissingValues;
  }




        public void GetSettings(Configuration newConfig)
  {
            Epi.DataSets.Config.SettingsRow settings = newConfig.Settings;


            settings.RepresentationOfYes = cmbYesAs.Text;
            settings.RepresentationOfNo = cmbNoAs.Text;
            settings.RepresentationOfMissing = cmbMissingAs.Text;


            settings.ShowCompletePrompt = cbxShowPrompt.Checked;
            settings.ShowSelection = cbxSelectCriteria.Checked;
            settings.ShowPercents = cbxPercents.Checked;
            settings.ShowGraphics = cbxGraphics.Checked;
            settings.ShowTables = cbxTablesOutput.Checked;
            settings.ShowHyperlinks = cbxHyperlinks.Checked;


            settings.StatisticsLevel = Int32.Parse(WinUtil.GetSelectedRadioButton(gbxStatistics).Tag.ToString());
            settings.PrecisionForStatistics = numericUpDownPrecision.Value;


            settings.RecordProcessingScope = Int32.Parse(WinUtil.GetSelectedRadioButton(gbxProcessRecords).Tag.ToString());
            settings.IncludeMissingValues = cbxIncludeMissing.Checked;
  }

  //Public Methods

  //Public Properties




  public string RepresentationOfYes
  {
   get
   {
    return cmbYesAs.Text;
   }
  }




  public string RepresentationOfNo
  {
   get
   {
    return cmbNoAs.Text;
   }
  }




  public string RepresentationOfMissing
  {
   get
   {
    return cmbMissingAs.Text;
   }
  }




  public bool ShowPrompt
  {
   get
   {
    return cbxShowPrompt.Checked;
   }
  }




  public bool ShowGraphics
  {
   get
   {
    return cbxGraphics.Checked;
   }
  }




  public bool ShowHyperlinks
  {
   get
   {
    return cbxHyperlinks.Checked;
   }
  }




  public bool ShowSelectCriteria
  {
   get
   {
    return cbxSelectCriteria.Checked;
   }
  }




  public bool ShowPercents
  {
   get
   {
    return cbxPercents.Checked;
   }
  }




  public bool ShowTablesOutput
  {
   get
   {
    return cbxTablesOutput.Checked;
   }
  }




  public bool ShowIncludeMissing
  {
   get
   {
    return cbxIncludeMissing.Checked;
   }
  }




  public RadioButton StatisticLevel
  {
   get
   {
                return WinUtil.GetSelectedRadioButton(gbxStatistics);
   }
  }




  public RadioButton ProcessRecords
  {
   get
   {
                return WinUtil.GetSelectedRadioButton(gbxProcessRecords);
   }
  }

  //

  //Private Methods




  private void LoadRepresentionsOfYes()
  {
            string currentRepresentationOfYes = Configuration.GetNewInstance().Settings.RepresentationOfYes;
            DataView dv = AppData.Instance.RepresentationsOfYesDataTable.DefaultView;
            cmbYesAs.Items.Clear();
            if (!string.IsNullOrEmpty(currentRepresentationOfYes))
            {
                cmbYesAs.Items.Add(currentRepresentationOfYes);
            }
            dv.Sort = ColumnNames.POSITION;
            foreach (DataRowView row in dv)
            {
                string name = row[ColumnNames.NAME].ToString();
                if (name != currentRepresentationOfYes)
                {
                    cmbYesAs.Items.Add(row[ColumnNames.NAME]);
                }
            }
            cmbYesAs.SelectedIndex = 0;
  }




  private void LoadRepresentionsOfNo()
  {
            string currentRepresentationOfNo = Configuration.GetNewInstance().Settings.RepresentationOfNo;
            DataView dv = AppData.Instance.RepresentationsOfNoDataTable.DefaultView;
            cmbNoAs.Items.Clear();
            if (!string.IsNullOrEmpty(currentRepresentationOfNo))
            {
                cmbNoAs.Items.Add(currentRepresentationOfNo);
            }
            dv.Sort = ColumnNames.POSITION;
            foreach (DataRowView row in dv)
            {
                string name = row[ColumnNames.NAME].ToString();
                if (name != currentRepresentationOfNo)
                {
                    cmbNoAs.Items.Add(name);
                }
            }
            cmbNoAs.SelectedIndex = 0;
        }




  private void LoadRepresentionsOfMissing()
  {
            string currentRepresentationOfMissing = Configuration.GetNewInstance().Settings.RepresentationOfMissing;
            DataView dv = AppData.Instance.RepresentationsOfMissingDataTable.DefaultView;
            cmbMissingAs.Items.Clear();
            if (!string.IsNullOrEmpty(currentRepresentationOfMissing))
            {
                cmbMissingAs.Items.Add(currentRepresentationOfMissing);
            }
            dv.Sort = ColumnNames.POSITION;
            foreach (DataRowView row in dv)
            {
                string name = row[ColumnNames.NAME].ToString();
                if (name != currentRepresentationOfMissing)
                {
                    cmbMissingAs.Items.Add(name);
                }
            }
            cmbMissingAs.SelectedIndex = 0;
        }


  //Private Methods

  //Event Handlers

  private void SettingsPanel_Load(object sender, System.EventArgs e)
  {



  }






  private void cmbYesAs_SelectedIndexChanged(object sender, System.EventArgs e)
  {
   if (this.RepresentationOfYesChanged != null)
   {
    this.RepresentationOfYesChanged(sender, e);
   }

  }






  private void cmbYesAs_TextChanged(object sender, System.EventArgs e)
  {
   if (this.RepresentationOfYesTextChanged != null)
   {
    this.RepresentationOfYesTextChanged(sender, e);
   }

  }






  private void cmbNoAs_SelectedIndexChanged(object sender, System.EventArgs e)
  {
   if (this.RepresentationOfNoChanged != null)
   {
    this.RepresentationOfNoChanged(sender, e);
   }
  }

  private void cmbNoAs_TextChanged(object sender, EventArgs e)
  {
   if (this.RepresentationOfNoTextChanged != null)
   {
    this.RepresentationOfNoTextChanged(sender,e);
   }
  }






  private void cmbMissingAs_SelectedIndexChanged(object sender, System.EventArgs e)
  {
   if (this.RepresentationOfMissingChanged != null)
   {
    this.RepresentationOfMissingChanged(sender, e);
   }
  }






  private void cmbMissingAs_TextChanged(object sender, EventArgs e)
  {
   if (this.RepresentationOfMissingTextChanged != null)
   {
    this.RepresentationOfMissingTextChanged(sender,e);
   }
  }






  private void cbxShowPrompt_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowPromptChanged != null)
   {
    this.ShowPromptChanged(sender, e);
   }
  }






  private void cbxSelectCriteria_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowSelectCriteriaChanged != null)
   {
    this.ShowSelectCriteriaChanged(sender, e);
   }
  }






  private void cbxGraphics_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowGraphicsChanged != null)
   {
    this.ShowGraphicsChanged(sender, e);
   }
  }






  private void cbxPercents_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowPercentsChanged != null)
   {
    this.ShowPercentsChanged(sender, e);
   }
  }






  private void cbxHyperlinks_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowHyperlinksChanged != null)
   {
    this.ShowHyperlinksChanged(sender, e);
   }
  }






  private void cbxTablesOutput_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowTablesOutputChanged != null)
   {
    this.ShowTablesOutputChanged(sender, e);
   }
  }






  private void StatisticsRadioButtonClick(object sender, System.EventArgs e)
  {
   if (this.StatisticsLevelChanged != null)
   {
    this.StatisticsLevelChanged(sender, e);
   }

  }






  private void ProcessRecordsRadioButtonClick(object sender, System.EventArgs e)
  {
   if (this.ProcessRecordsChanged != null)
   {
    this.ProcessRecordsChanged(sender, e);
   }

  }






  private void cbxIncludeMissing_CheckedChanged(object sender, System.EventArgs e)
  {
   if (this.ShowIncludeMissingChanged != null)
   {
    this.ShowIncludeMissingChanged(sender, e);
   }
  }


  //Event Handlers



 }
}

 