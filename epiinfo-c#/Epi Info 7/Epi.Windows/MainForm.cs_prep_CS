using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.IO;
using System.Windows.Forms;
using System.Threading;
using Epi;
using Epi.Windows.Dialogs;
using Epi.Windows;
using Epi.Core.AnalysisInterpreter;

namespace Epi.Windows
{





    public         class MainForm : FormBase, IServiceProvider
 {
  //Private Members
  private string formName = string.Empty;
        private IWindowsModule module = null;


  //Private Members

        //Constructor



        public MainForm()
        {
            InitializeComponent();



            this.tsslCaps.Enabled = base.IsKeyToggled((int)Keys.CapsLock);
            this.tsslNUM.Enabled = base.IsKeyToggled((int)Keys.NumLock);
            this.tsslINS.Enabled = base.IsKeyToggled((int)Keys.Insert);

            this.KeyUp += new KeyEventHandler(OnKeyUp);
        }




  public MainForm(IWindowsModule mod)
        {
            //Input Validation
            if (mod == null)
            {
                throw new ArgumentNullException("mod");
            }
            //Input Validation

            InitializeComponent();
            this.module = mod;

            this.tsslLocale.ToolTipText = SharedStrings.CURRENT_LOCALE + "; " + SharedStrings.CLICK_TO_CHANGE;

            this.tsslCaps.Enabled = base.IsKeyToggled((int)Keys.CapsLock);
            this.tsslNUM.Enabled = base.IsKeyToggled((int)Keys.NumLock);
            this.tsslINS.Enabled = base.IsKeyToggled((int)Keys.Insert);

            this.KeyUp += new KeyEventHandler(OnKeyUp);
  }

  //Constructors

        [System.Diagnostics.DebuggerStepThrough()]
        object IServiceProvider.GetService(Type serviceType)
        {
            return this.GetService(serviceType);
        }






        [System.Diagnostics.DebuggerStepThrough()]
        protected override object GetService(Type serviceType)
        {
            if (serviceType == this.GetType())
            {
                return this;
            }

            else if (serviceType == typeof(AmbientProperties))
            {
                return null;
            }
            else
            {
                object service = this.module.GetService(serviceType);
                if (service == null)
                {

                    service = base.GetService(serviceType);
                }
                return service;
            }
        }

        //Public Properties




  public IWindowsModule Module
        {
            get
            {
                return this.module;
            }

            set { this.module = value; }
        }

        public string TemplateNode { get {return _TemplateNode; } set{ _TemplateNode=value; } } string _TemplateNode;





        //Public Properties

        //Protected Properties




  protected string FormName
  {
   get
   {
    return formName;
   }
   set
   {
    formName = value;
   }
  }




        [Obsolete("Use FormName Property", false)]
        protected string WindowTitle
        {
            get
            {
                return FormName;
            }
            set
            {
                FormName = value;
            }
        }




  protected IModuleManager ModuleManager
        {
            get
            {

                IModuleManager factory = this.GetService(typeof(IModuleManager)) as IModuleManager;
                if (factory == null)
                {
                    MessageBox.Show("Module factory service not registered."); // TODO: Hard coded string
                    return null;
                }
                return factory;
            }
        }


  //"Protected Properties"

  //Protected Methods






  public void BeginBusy(string str)
  {
   UpdateStatus(str, false);
   this.Cursor = Cursors.WaitCursor;
  }



        public void EndBusy()
  {
   this.Cursor = Cursors.Default;
            UpdateStatus(SharedStrings.READY, false);
  }

        public void BeginIndeterminate()
        {
            try
            {
                this.BeginInvoke((ThreadStart)


 CxPlaceHolder);
            }
            catch (Exception ex)
            {

            }
        }

        public void EndIndeterminate()
        {
            try
            {
                this.BeginInvoke((ThreadStart)



 CxPlaceHolder);
            }
            catch (Exception ex)
            {

            }
        }





        public void UpdateStatus(string str)
  {
            this.tsslMessage.Text = str;
            Logger.Log(str);
            Application.DoEvents();
  }







        public void UpdateStatus(string str, bool shouldAddLogEntry, bool doEvents = false)
        {
            this.tsslMessage.Text = str;
            if (shouldAddLogEntry)
            {
                Logger.Log(DateTime.Now + ":  " + str);
            }
            if (doEvents)
            {
                Application.DoEvents();
            }
        }






        public void UpdateAppSpecificInfo(string str)
        {
            this.tsslAppSpecificInfo.Text = str;
        }




        protected void UpdateAppSpecificInfoDefault()
        {
            UpdateAppSpecificInfo(string.Empty);
        }







        protected void ProgressReportBegin(int min, int max, int step)
        {
            progressBar.Minimum = min;
            progressBar.Maximum = max;
            progressBar.Step = step;
        }




        protected void ProgressReportUpdate()
        {
            progressBar.PerformStep();
        }




  protected void ProgressReportEnd()
        {
            progressBar.Minimum = 0;
            progressBar.Maximum = 0;
            progressBar.Step = 0;
        }




  protected virtual void OnExit()
  {
   this.Close();
  }




  protected virtual void OnOptionsChanged()
  {
  }






  protected void SetWindowTitle(string objectName)
  {
            string windowTitle = string.Empty;
            if (!string.IsNullOrEmpty(FormName))
            {
                windowTitle = FormName;
            }
   if (!string.IsNullOrEmpty(objectName))
   {
                if (!string.IsNullOrEmpty(windowTitle))
                {
                    windowTitle  +=  " - " ;
                }

                windowTitle += Util.InsertInSquareBrackets(objectName);
   }
            if (!string.IsNullOrEmpty(windowTitle))
            {
                this.Text = windowTitle;
            }

  }




  protected virtual void SetWindowTitle()
  {
   SetWindowTitle(string.Empty);
  }




  protected void UpdateWindowTitle()
  {
   SetWindowTitle();
  }





        public void WireUpEventHandlers(DialogBase dlg)
        {
            dlg.BeginBusyEvent += new BeginBusyEventHandler(BeginBusy);
            dlg.UpdateStatusEvent += new UpdateStatusEventHandler(UpdateStatus);
            dlg.EndBusyEvent += new EndBusyEventHandler(EndBusy);

            dlg.ProgressReportBeginEvent += new ProgressReportBeginEventHandler(ProgressReportBegin);
            dlg.ProgressReportUpdateEvent += new ProgressReportUpdateEventHandler(ProgressReportUpdate);
            dlg.ProgressReportEndEvent += new SimpleEventHandler(ProgressReportEnd);
        }

  //Protected Methods

        //Event Handlers






  private void MainForm_Load(object sender, System.EventArgs e)
  {
   if (!this.DesignMode)
   {
                ApplicationIdentity appId = new ApplicationIdentity(typeof(Configuration).Assembly);

                this.tsslLocale.Text = Thread.CurrentThread.CurrentUICulture.Name;
                this.tsslVersion.Text = appId.Version;
                this.tsslCaps.Enabled = base.IsKeyToggled((int)Keys.CapsLock);
                this.tsslNUM.Enabled = base.IsKeyToggled((int)Keys.NumLock);
                this.tsslINS.Enabled = base.IsKeyToggled((int)Keys.Insert);

                this.KeyUp += new KeyEventHandler(OnKeyUp);
                ShowHideStatusStrip();
    UpdateWindowTitle();
   }
  }






  private void mniAboutEpiInfo_Activate(object sender, System.EventArgs e)
  {
            OnAboutClicked();
  }






  private void mniExit_Activate(object sender, System.EventArgs e)
  {
   OnExit();
  }






  private void mniOptions_Activate(object sender, System.EventArgs e)
  {
            OnOptionsClicked();
  }




  protected void OnAboutClicked()
        {
            AboutEpiInfoDialog dlg = new AboutEpiInfoDialog(this);
   dlg.ShowDialog();
        }






        protected virtual void OnKeyUp(object sender, KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.CapsLock:
                    this.tsslCaps.Enabled = base.IsKeyToggled((int)Keys.CapsLock);
                    break;

                case Keys.NumLock:
                    this.tsslNUM.Enabled = base.IsKeyToggled((int)Keys.NumLock);
                    break;

                case Keys.Insert:
                    this.tsslINS.Enabled = base.IsKeyToggled((int)Keys.Insert);
                    break;

                default:
                    break;
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            bool retval = base.ProcessCmdKey(ref msg, keyData);
            if ((keyData == Keys.CapsLock) || (keyData == Keys.NumLock) || (keyData == Keys.Insert))
            {
                OnKeyUp(this, new KeyEventArgs(keyData));
            }
            return retval;
        }




  protected void OnOptionsClicked()
        {
            OnOptionsClicked(OptionsDialog.OptionsTabIndex.General);
        }





  protected void OnOptionsClicked(OptionsDialog.OptionsTabIndex tabIndex)
        {
   OptionsDialog dlg = new OptionsDialog(this, tabIndex);
            try
            {
                dlg.ApplyChanges += new OptionsDialog.ApplyChangesHandler(OnApplyChanges);
                DialogResult result = dlg.ShowDialog();
                if (result == DialogResult.OK)
                {
                    OnOptionsChanged();
                }
            }
            finally
            {
                dlg.Close();
                dlg.Dispose();
            }
        }






        protected virtual void OnApplyChanges(object sender, EventArgs args)
        {
            OnOptionsChanged();
        }






        private void tsslLocale_Click(object sender, EventArgs e)
        {
            OnOptionsClicked(OptionsDialog.OptionsTabIndex.Language);
        }






        public void UpgradeProjectManager_ImportStarted(object o, ImportStartedEventArgs e)
        {
            ProgressReportBegin(0, e.ObjectCount, 1);
        }






        public void UpgradeProjectManager_ImportStatus(object sender, MessageEventArgs e)
        {
            UpdateStatus(e.Message, e.CreateLogEntry);
        }




        public void UpgradeProjectManager_ImportEnded()
        {
            ProgressReportEnd();
        }






        public void UpgradeProjectManager_ViewImported(object sender, EventArgs e)
        {
            ProgressReportUpdate();
        }






        public void UpgradeProjectManager_ProgressReportUpdate(object sender, EventArgs e)
        {
            ProgressReportUpdate();
        }




        protected void OnViewStatusBarClicked(ToolStripMenuItem menuItem)
        {

            menuItem.Checked = !(menuItem.Checked);


            Configuration config = Configuration.GetNewInstance();
            config.Settings.ShowStatusBar = menuItem.Checked;
            Configuration.Save(config);


            ShowHideStatusStrip();
        }

        //Event Handlers

        //Private Methods
        private void ShowHideStatusStrip()
        {
            Configuration Config = Configuration.GetNewInstance();
            this.statusStrip1.Visible = Config.Settings.ShowStatusBar;
        }
        //Private Methods
    }
}
 