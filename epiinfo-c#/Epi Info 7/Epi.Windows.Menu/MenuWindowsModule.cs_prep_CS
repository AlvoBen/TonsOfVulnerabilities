using System;
using System.ComponentModel;
using System.Windows.Forms;
using Epi.Windows;

namespace Epi.Windows.Menu
{



    public class MenuWindowsModule : ModuleBase, IWindowsModule
 {
        //Private Attributes
        private MenuMainForm form = null;
        private Container container = null;

        private string mnuFile = String.Empty;
        //Private Attributes

        //Constructors



        public MenuWindowsModule()
  {
            container = new ModuleContainer(this);
        }
        //Constructors

        //Protected Properties



        protected override string ModuleName
  {
   get
   {
    return "Menu";
   }
        }
        //Protected Properties

        //Public Methods
        //Public Methods

        //Public Properties
        //Public Properties

        //Protected Methods



        protected override void Load(IModuleManager moduleManager, ICommandLine commandLine)
        {
            base.Load(moduleManager, commandLine);

            try
            {
                if (form == null)
                {

                    form = new MenuMainForm(this);
                    container.Add(form);
                    form.Closed += new EventHandler(MainForm_Closed);
                    form.Disposed += new EventHandler(MainForm_Disposed);



                    try
                    {

                    }
                    catch (Exception ex)
                    {

                        MsgBox.ShowException(ex);
                    }


                    form.Show();
                    form.Activate();


                    System.IntPtr handle = form.Handle;










                    base.OnLoaded();
                }
                else
                {
                    if (!form.IsDisposed)
                    {
                        form.Show();
                        if (form.WindowState == FormWindowState.Minimized)
                        {
                            form.WindowState = FormWindowState.Normal;
                        }
                        form.Activate();
                    }

                }
            }
            catch (Exception ex)
            {
                MsgBox.ShowException(ex);
            }
            finally
            {
            }
        }



  protected override void Unload()
        {
            if (form != null && !form.IsDisposed)
            {


                form.Close();
            }
            else
            {
                this.Dispose();
            }
        }
        //Protected Methods

        //Event Handlers





  public void MainForm_Disposed(object sender, EventArgs e)
        {
            this.Dispose();
        }





  public void MainForm_Closed(object sender, EventArgs e)
        {
            this.Dispose();
        }
        //Event Handlers

        //Private Methods

        //Private Methods


    }
}

 