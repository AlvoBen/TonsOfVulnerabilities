using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Data;
using System.Reflection;
using System.Windows.Forms;
using Epi;
using Epi.Resources;
using Epi.Windows;

using Epi.Windows.Dialogs;
using Epi.Windows.Menu.Dialogs;

namespace Epi.Windows.Menu
{



    public         class MenuMainForm : MainForm
    {
        //Private Attributes
        private Array menuData = null;
        //Private Attributes

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public MenuMainForm()
        {
            InitializeComponent();
        }





        public MenuMainForm(MenuWindowsModule mod) : base(mod)
        {
            InitializeComponent();
            Construct();
        }













        private void Construct()
        {
            this.Text = "Epi Info 7 - Menu";// SharedStrings.MENU;
        }

        private void ChangeAllButtonStyles(bool useDefault)
        {
            ChangeButtonStyle(btnMakeView, useDefault);
            ChangeButtonStyle(btnWebsite, useDefault);
            ChangeButtonStyle(btnEnterData, useDefault);
            ChangeButtonStyle(btnExit, useDefault);
            ChangeButtonStyle(btnWebsite, useDefault);
            ChangeButtonStyle(btnCreateReports, useDefault);
            ChangeButtonStyle(btnCreateMaps, useDefault);
            ChangeButtonStyle(btnAnalyze, useDefault);
            ChangeButtonStyle(btnDashboard, useDefault);
        }

        private void ChangeButtonStyle(Button b, bool useDefault)
        {
            if (useDefault)
            {
                b.ForeColor = SystemColors.ControlText;
                b.BackColor = SystemColors.Control;
                b.FlatStyle = FlatStyle.Standard;
            }
            else
            {
                b.ForeColor = Color.FromArgb(0, 18, 100);
                b.BackColor = Color.White;
                b.FlatStyle = FlatStyle.Flat;
                b.FlatAppearance.BorderColor = Color.White;
                b.FlatAppearance.MouseDownBackColor = Color.White;
                b.FlatAppearance.MouseOverBackColor = Color.FromArgb(206, 228, 241);
            }
        }

        //Constructors

        //Public Properties




        public new MenuWindowsModule Module
        {
            get
            {
                return (MenuWindowsModule) base.Module;
            }
        }




        public MenuStrip MenuStrip
        {
            get
            {
                return this.mnuMainMenu;
            }
        }

        //Public Properties

        //Event Handlers

        private void MenuMainForm_Load(object sender, System.EventArgs e)
        {
            string retValue = String.Empty;

            DisplayBackgroundImage();












            this.Show();
            CheckForUpdates();
            CheckForAlerts();
        }

        private void CheckForUpdates()
        {
            BackgroundWorker updateChecker = new BackgroundWorker();
            updateChecker.DoWork += new DoWorkEventHandler(updateChecker_DoWork);
            updateChecker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(updateChecker_Completed);
            updateChecker.RunWorkerAsync();
        }

        private void CheckForAlerts()
        {
            BackgroundWorker alertChecker = new BackgroundWorker();
            alertChecker.DoWork += new DoWorkEventHandler(alertChecker_DoWork);
            alertChecker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(alertChecker_Completed);
            alertChecker.RunWorkerAsync();
        }

        void alertChecker_Completed(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Result != null)
            {
                string message = (string)e.Result;
                if (!string.IsNullOrEmpty(message))
                {
                    MessageBox.Show(message, "Alert Service", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    Configuration config = Configuration.GetNewInstance();
                    config.Settings.LastAlertDate = DateTime.Now;
                    Configuration.Save(config);
                }
            }
        }

        void updateChecker_Completed(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Result != null)
            {
                List elements = (List)e.Result;
                if (elements.Count > 0)
                {
                    UpdateDetailDialog updateDetails = new UpdateDetailDialog(elements);
                    updateDetails.ShowDialog();
                }
            }
        }

        void alertChecker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                ApplicationIdentity appId = new ApplicationIdentity(typeof(Configuration).Assembly);
                Version thisVersion = appId.VersionObject;

                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.Load("http://ftp.cdc.gov/pub/software/epi_info/alert.xml");
                List elements = new List();
                bool doAlert = false;
                string message = string.Empty;
                foreach (System.Xml.XmlElement element in doc.DocumentElement.ChildNodes)
                {
                    if (element.Name.Equals("alertDateTime"))
                    {
                        DateTime alertDateTime = DateTime.Parse(element.InnerText, null, System.Globalization.DateTimeStyles.AssumeUniversal);
                        if (Configuration.GetNewInstance().Settings.LastAlertDate < alertDateTime)
                        {
                            doAlert = true;
                        }
                    }
                    if (element.Name.Equals("message"))
                    {
                        message = element.InnerText;
                    }
                }
                if (doAlert)
                {
                    e.Result = message;
                }
            }
            catch (Exception ex)
            {

            }
        }

        void updateChecker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                Configuration config = Configuration.GetNewInstance();
                if (config.Settings.CheckForUpdates == true)
                {

                    ApplicationIdentity appId = new ApplicationIdentity(typeof(Configuration).Assembly);
                    Version thisVersion = appId.VersionObject;

                    System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                    doc.Load("http://ftp.cdc.gov/pub/software/epi_info/versions.xml");
                    List elements = new List();
                    foreach (System.Xml.XmlElement element in doc.DocumentElement.ChildNodes)
                    {
                        if (element.Name.Equals("version"))
                        {
                            string versionNumber = element.Attributes["number"].Value;
                            string[] splits = versionNumber.Split('.');
                            int majorVersion = Int32.Parse(splits[0]);
                            int minorVersion = Int32.Parse(splits[1]);
                            int build = Int32.Parse(splits[2]);
                            int revision = Int32.Parse(splits[3]);

                            if (thisVersion.Major < majorVersion)
                            {
                                elements.Add(element);
                            }
                            else if (thisVersion.Minor < minorVersion)
                            {
                                elements.Add(element);
                            }
                            else if (thisVersion.Build < build)
                            {
                                elements.Add(element);
                            }
                            else if (thisVersion.Revision < revision)
                            {
                                elements.Add(element);
                            }
                        }
                    }
                    e.Result = elements;
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void MakeView_Activate(object sender, System.EventArgs e)
        {
            LoadModule("MAKEVIEW");
        }
        private void EnterData_Activate(object sender, System.EventArgs e)
        {
            LoadModule("ENTER");
        }
        private void AnalyzeData_Activate(object sender, System.EventArgs e)
        {
            LoadModule("ANALYSIS");
        }
        private void CreateMaps_Activate(object sender, System.EventArgs e)
        {
            LoadModule("EPIMAP");
        }
        private void CreateReports_Activate(object sender, System.EventArgs e)
        {
            LoadModule("EPIREPORT");
        }
        private void mnuButtons_Activate(object sender, System.EventArgs e)
        {







        }















        private void Website_Activate(object sender, System.EventArgs e)
        {
            OpenEpiInfoWebsite();
        }






        protected override void OnApplyChanges(object sender, EventArgs args)
        {
            OnOptionsChanged();
        }

        private void mnuExtractStrings_Activate(object sender, System.EventArgs e)
        {


        }


        private void Contents_Activate(object sender, System.EventArgs e)
        {

            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/index.htm");
        }

        private void Exit_Activate(object sender, EventArgs e)
        {
            IModuleManager manager = this.GetService(typeof(IModuleManager)) as IModuleManager;
            if (manager != null)
            {
                manager.UnloadAll();
            }
        }

        private void AboutEpiInfo_Activate(object sender, EventArgs e)
        {
            OnAboutClicked();
        }

        private void Options_Activate(object sender, EventArgs e)
        {
            OnOptionsClicked();
        }




        protected void SelectMenu(object sender, System.EventArgs e)
        {
            ToolStripMenuItem itemClicked = new ToolStripMenuItem();
            itemClicked = (ToolStripMenuItem)sender;

            for (int i = 0; i <= menuData.GetUpperBound(0); i++)
            {
                if (string.Compare(menuData.GetValue(i, 2).ToString(), itemClicked.Text, true) == 0)
                {
                    MessageBox.Show("Execute Command Block: " + menuData.GetValue(i, 3).ToString(), "Menu"); // TODO: Non-standard string concatenation. Use ShareStrings resouirce
                }
            }
            return;
        }

        private void toolStripMenuItemStatusBar_Click(object sender, EventArgs e)
        {
            OnViewStatusBarClicked(sender as ToolStripMenuItem);
        }

        private void epiInfoLogsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            WinUtil.OpenTextFile(Logger.GetLogFilePath());
        }

        //Event Handlers

        //Public Methods

        //Public Methods

        //Protected Methods




        protected override void OnOptionsChanged()
        {
            DisplayBackgroundImage();
            base.OnOptionsChanged();
        }


        //Protected Methods

        //Private Methods




        private void LoadModule(string moduleType)
        {
            try
            {
                BeginBusy(SharedStrings.LOADING_MODULE);

                string commandText = null;

                switch (moduleType              ) // to fix a problem for Turkish users where ToUpper doesn't do what it's supposed to do
                {
                    case "ENTER":
                    commandText = Environment.CurrentDirectory + "\\Enter.exe";
                    break;
                    case "MAKEVIEW":
                    commandText = Environment.CurrentDirectory + "\\MakeView.exe";
                    break;
                    case "ANALYSIS":
                    commandText = Environment.CurrentDirectory + "\\Analysis.exe";
                    break;
                    case "DASHBOARD":
                    commandText = Environment.CurrentDirectory + "\\AnalysisDashboard.exe";
                    break;
                    case "EPIMAP":
                    commandText = Environment.CurrentDirectory + "\\Mapping.exe";
                    break;
                    case "EPIREPORT":
                    commandText = Environment.CurrentDirectory + "\\EpiReport.exe";
                    break;
                }

                if (!string.IsNullOrEmpty(commandText))
                {
                    System.Diagnostics.Process proc = new System.Diagnostics.Process();
                    proc.StartInfo.FileName = commandText;
                    proc.StartInfo.UseShellExecute = true;
                    proc.Start();
                }

                /*

                IModuleManager manager = this.Module.GetService(typeof(IModuleManager)) as IModuleManager;
                if (manager == null)
                {
                    MessageBox.Show("Module manager service not registered."); // TODO: Hard coded string
                    return;
                }

                IModule module = manager.CreateModuleInstance(moduleType);
                module.Load(manager, null);
                 */
            }
            catch (Exception ex)
            {
                MsgBox.ShowException(ex);
            }
            finally
            {
                EndBusy();
            }
        }




        private void OpenEpiInfoWebsite()
        {
            System.Diagnostics.Process.Start("http://www.cdc.gov/epiinfo");

        }



        private void DisplayBackgroundImage()
        {
            try
            {
                Configuration config = Configuration.GetNewInstance();
                string imageFile = config.Settings.BackgroundImage;

                if (string.IsNullOrEmpty(imageFile))
                {
                    DisplayDefaultBackgroundImage();
                    ChangeAllButtonStyles(false);
                }
                else
                {

                    this.BackgroundImageLayout = ImageLayout.Stretch;
                    this.BackgroundImage = Image.FromFile(imageFile);
                    ChangeAllButtonStyles(true);
                }
            }
            catch (FileNotFoundException ex)
            {
                MsgBox.ShowException(ex);

            }
        }




        private void DisplayDefaultBackgroundImage()
        {
            try
            {


                this.BackgroundImageLayout = ImageLayout.Stretch;
                this.BackgroundImage = ResourceLoader.GetImage(ResourceLoader.IMAGES_BACKGROUND); 



            }
            catch (FileNotFoundException ex)
            {
                MsgBox.ShowException(ex);

            }
        }

        private void HideButtons()
        {
            this.btnMakeView.Visible = false;
            this.btnEnterData.Visible = false;
            this.btnAnalyze.Visible = false;
            this.btnDashboard.Visible = false;
            this.btnCreateMaps.Visible = false;
            this.btnCreateReports.Visible = false;
            this.btnWebsite.Visible = false;
            this.btnExit.Visible = false;
        }
        //Private Methods

        private void populationSurveyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.PopulationSurvey).Show();
        }

        private void cohortOrCrossToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.Cohort).Show();
        }

        private void unmatchedCasecontrolToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.UnmatchedCaseControl).Show();
        }

        private void tables2x2ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.TwoByTwo).Show();
        }

        private void chiSquareForTrendToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.ChiSquareForTrend).Show();
        }

        private void btnDashboard_Click(object sender, EventArgs e)
        {
            LoadModule("DASHBOARD");
        }

        private void videosToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
                doc.Load("http://ftp.cdc.gov/pub/software/epi_info/sites.xml");
                List elements = new List();
                foreach (System.Xml.XmlElement element in doc.DocumentElement.ChildNodes)
                {
                    if (element.Name.Equals("videos"))
                    {
                        string url = element.InnerText;
                        System.Diagnostics.Process.Start(url);
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void communityMessageBoardToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("http://www.phconnect.org/group/epiinfo/forum");
        }

        private void contactHelpdeskToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("mailto://epiinfo@cdc.gov");
        }

        private void openEpicomToolStripMenuItem_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("http://openepi.com");
        }

        private void mnuPoisson_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.Poisson).Show();
        }

        private void mnuBinomial_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.Binomial).Show();
        }

        private void mnuMatchedPairCaseControl_Click(object sender, EventArgs e)
        {
            new StatCalc(StatCalc.Calculators.MatchedPairCaseControl).Show();
        }

    }
}
 