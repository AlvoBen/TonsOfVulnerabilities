using System;
using System.Windows.Forms;
using System.ComponentModel;
using System.ComponentModel.Design;
using Epi;
using Epi.Analysis;
using Epi.Windows;
using Epi.Diagnostics;

namespace Epi.Windows.Analysis
{




    public class AnalysisWindowsModule : AnalysisEngine, IWindowsModule, IProjectHost
    {
        //Private Attributes
        private Forms.AnalysisMainForm form = null;
        private Container container = null;
        //Pricate Attributes

        //Private Methods

        private string DialogResponse(CommandProcessorResults results)
        {
            return string.Empty;
        }
        //

        //Constructors




  public AnalysisWindowsModule()
  {
            container = new ModuleContainer(this);


        }











        //Constructors

        //Public Properties




















        //Public Properties

        //Protected Properties




        protected override string ModuleName
  {
   get
   {
    return "Analysis";
   }
        }


        //Protected Properties

        //Public Methods













        [System.Diagnostics.DebuggerStepThrough()]
        public override object GetService(Type serviceType)
        {
            if (serviceType == this.GetType())
            {
                return this;
            }
            else if (serviceType == typeof(IProjectHost))
            {
                return this;
            }
                /*
            else if (serviceType == typeof(Session))
            {
                return this.Processor.Session;
            }*/

            /*else if (serviceType == typeof(AnalysisCommandProcessor) || serviceType == typeof(ICommandProcessor))
            {
                return this.Processor;
            }*/
            else
            {
                return base.GetService(serviceType);
            }
        }




  public override void Dispose()
        {

            this.container.Dispose();





            form = null;


            base.Dispose();
        }

        //Public Methods

        //Protected Methods




        protected override void Load(IModuleManager moduleManager, ICommandLine commandLine)
        {





            base.Load(moduleManager, commandLine);

            try
            {

                Configuration config = Configuration.GetNewInstance();
                string filePath = config.CurrentProjectFilePath;
                if (!string.IsNullOrEmpty(filePath))
                {



                    try
                    {
                        CurrentProject = new Project(filePath);
                    }
                    catch (Exception ex)
                    {
                        MsgBox.ShowException(ex);
                        config.CurrentProjectFilePath = string.Empty;
                        Configuration.Save(config);
                    }
                }

                if (form == null)
                {
                    base.OnLoaded();
                    form = new Forms.AnalysisMainForm(this);
                    container.Add(form);
                    form.Closed += new EventHandler(MainForm_Closed);
                    form.Disposed += new EventHandler(MainForm_Disposed);
                    form.Show();
                    if (!Util.IsEmpty(form))
                    {
                        form.Activate();


                        System.IntPtr handle = form.Handle;


                        if (commandLine != null)
                        {
                            string titleArgument = commandLine.GetArgument("title");
                            if (titleArgument != null)
                            {
                                form.Text = titleArgument;
                            }
                        }
                    }
                }
                else
                {
                    if (!form.IsDisposed)
                    {
                        form.Show();
                        if (form.WindowState == FormWindowState.Minimized)
                        {
                            form.WindowState = FormWindowState.Normal;
                        }
                        form.Activate();
                    }
                }






            }
            catch (Exception ex)
            {
                throw new GeneralException(SharedStrings.MODULE_NOT_LOADED + ": \n" + ex.Message, ex);
            }
            finally
            {
                if (Util.IsEmpty(form))
                {
                    this.Dispose();
                    Application.ExitThread();
                }
            }
        }




  protected override void Unload()
        {
            if (form != null && !form.IsDisposed)
            {


                form.Close();
            }
            else
            {
                this.Dispose();
            }
        }

        //Protected Methods

        //Event Handlers






  public void MainForm_Disposed(object sender, EventArgs e)
        {
            this.Dispose();
        }






  public void MainForm_Closed(object sender, EventArgs e)
        {
            this.Dispose();
        }
        //Event Handlers
 } 
} 
 