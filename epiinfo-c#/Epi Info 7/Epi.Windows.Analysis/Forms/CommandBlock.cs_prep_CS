//Namespaces

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Epi.Windows;
using Epi.Windows.Analysis;
using Epi.Analysis;
using Epi.Windows.Analysis.Dialogs;
using Epi.Windows.Controls;
using Epi.Windows.Dialogs;
using Epi.Windows.Docking;
using Epi.Data.Services;
using Epi.Core.AnalysisInterpreter;


//

namespace Epi.Windows.Analysis.Forms
{

    //Delegates
    public enum CommandBlockProcessingMode
    {
        Save_And_Execute,
        Save_Only
    }







    public delegate void CommandBlockGenerationEventHandler(string commandSyntax, CommandProcessingMode processingMode);

    //




    public         class CommandBlock : DockWindow
    {

        //Private Members

        private AnalysisWindowsModule module;
        new private Epi.Windows.Analysis.Forms.AnalysisMainForm mainForm;
        private System.ComponentModel.ComponentResourceManager resources;
        private System.ComponentModel.ComponentResourceManager commandResources;

        //

        //Events




        public event CommandGenerationEventHandler CommandGenerated;

        //

        //Constructors




        public CommandBlock()
        {
            InitializeComponent();
            Construct();
        }





        public CommandBlock(AnalysisMainForm mainForm)
        {
            this.mainForm = mainForm;
            this.module = (AnalysisWindowsModule) mainForm.Module;
            InitializeComponent();
            Construct();


        }

        //

        //Private Methods

        private void Construct()
        {
            BuildCommandTree();
        }




        private AnalysisWindowsModule Module
        {
            get
            {
                return this.module;
            }
        }




        private void BuildCommandTree()
        {
            TreeValueNode node = new TreeValueNode();
            SuspendLayout();
            node.Name = "commandNode";
            node.Text = "Analysis Commands";
            resources.ApplyResources(node, "commandNode");

            int commandGroupId = 0;
            TreeValueNode commandGroupNode = new TreeValueNode();
            commandGroupNode.Name = "commandGroupNode";
            commandResources.ApplyResources(commandGroupNode, "commandGroupNode");

            node.Value = 0;
            node.ImageIndex = 72;
            node.SelectedImageIndex = 72;
            tvCommands.Nodes.Add(node);

            DataTable commandGroups = AppData.Instance.CommandGroupsDataTable;
            DataTable commands = AppData.Instance.CommandsDataTable;

            foreach (DataRow commandGroup in commandGroups.Rows)
            {
                commandGroupId = System.Convert.ToInt16((commandGroup[ColumnNames.ID]));
                commandGroupNode = AddCommandGroupsToTreeView(commandGroup[ColumnNames.NAME].ToString(), commandGroupId);
                DataRow[] commandDataRows = commands.Select("CommandGroups_Id = " + commandGroupId.ToString(), "CommandGroups_id");
                foreach (DataRow command in commandDataRows)
                {
                    AddCommandsToTreeView(command[ColumnNames.NAME].ToString(), System.Convert.ToInt16(command[ColumnNames.ID]), commandGroupNode);
                }
            }
            ResumeLayout();
            tvCommands.ExpandAll();
        }







        private TreeValueNode AddCommandGroupsToTreeView(string commandGroupName, int commandGroupId)
        {
            TreeValueNode node = new TreeValueNode();

            commandResources.ApplyResources(node, commandGroupName);


            node.Value = commandGroupId;







                node.ImageIndex = 72;
                node.SelectedImageIndex = 72;

            tvCommands.Nodes[0].Nodes.Add(node);
            return node;
        }








        private TreeValueNode AddCommandsToTreeView(string commandName, int commandId, System.Windows.Forms.TreeNode commandGroupNode)
        {
            TreeValueNode node = new TreeValueNode();

            resources.ApplyResources(node, commandName);

            node.Name = commandName;
            node.Value = commandId;

            ////*********************************************************
            ////******* Only put in for the partner demo... remove after!
            ////*********************************************************


            node.ImageIndex = 71;
            node.SelectedImageIndex = 71;






            commandGroupNode.Nodes.Add(node);
            return node;
        }




        private void DisplayNoDataSourceMessage()
        {
            this.mainForm.ProgramEditor.ShowErrorMessage(SharedStrings.NO_DATA_SOURCE);

        }







        private void DesignVariableCommand(VariableCommands command)
        {

            try
            {





                switch (command)
                {
                    case VariableCommands.Assign:
                        DesignAndProcessCommand(new AssignDialog(mainForm, true));
                        break;
                    case VariableCommands.Define:
                        DesignAndProcessCommand(new DefineVariableDialog(mainForm, true));
                        break;
                    case VariableCommands.DefineGroup:
                        DesignAndProcessCommand(new DefineGroupDialog(mainForm));
                        break;
                    case VariableCommands.Display:
                        DesignAndProcessCommand(new DisplayDialog(mainForm));
                        break;
                    case VariableCommands.Recode:
                        DesignAndProcessCommand(new RecodeDialog(mainForm));
                        break;
                    case VariableCommands.Undefine:

                        DesignAndProcessCommand(new UndefineVariableDialog(mainForm));
                        break;
                    default:
                        break;
                } 
            } 
            finally
            {

            }

        }





        private void DesignUserInteractionCommand(UserInteractionCommands command)
        {
            try
            {
                switch (command)
                {
                    case UserInteractionCommands.Beep:
                        DesignAndProcessCommand(new BeepDialog(mainForm));
                        break;
                    case UserInteractionCommands.Dialog:
                        DesignAndProcessCommand(new DialogDialog(mainForm, true));
                        break;
                    case UserInteractionCommands.Help:
                        DisplayFeatureNotImplementedMessage();

                        break;
                    case UserInteractionCommands.Quit:
                        DesignAndProcessCommand(new QuitDialog(mainForm));
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }





        private void DesignStatisticsCommand(StatisticsCommands command)
        {
            try
            {
                switch (command)
                {
                    case StatisticsCommands.Frequencies:
                        DesignAndProcessCommand(new FrequencyDialog(mainForm));
                        break;
                    case StatisticsCommands.Graph:

                        DesignAndProcessCommand(new GraphDialog(mainForm));
                        break;
                    case StatisticsCommands.List:
                        DesignAndProcessCommand(new ListDialog(mainForm));
                        break;
                    case StatisticsCommands.Map:
                        DisplayFeatureNotImplementedMessage();

                        break;
                    case StatisticsCommands.Match:
                        DisplayFeatureNotImplementedMessage();

                        break;
                    case StatisticsCommands.Means:
                        DesignAndProcessCommand(new MeansDialog(mainForm));
                        break;
                    case StatisticsCommands.Summarize:

                        DesignAndProcessCommand(new SummarizeDialog(mainForm));
                        break;
                    case StatisticsCommands.Tables:

                        DesignAndProcessCommand(new TablesDialog(mainForm));
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }






        private void DesignAdvancedStatisticsCommand(AdvancedStatisticsCommands command)
        {
            try
            {
                Rule_Context Context = this.mainForm.EpiInterpreter.Context;
                switch (command)
                {
                    case AdvancedStatisticsCommands.CoxProportionalHazards:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new CoxProportionalHazardsDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.KaplanMeierSurvival:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new KaplanMeierSurvivalDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.LinearRegression:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new LinearRegressionDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.LogisticRegression:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new LogisticRegressionDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.ComplexSampleTables:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new ComplexSampleTablesDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.ComplexSampleMeans:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new ComplexSampleMeansDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case AdvancedStatisticsCommands.ComplexSampleFrequencies:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new ComplexSampleFrequencyDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }






        private void DesignSelectIfCommand(SelectIfCommands command)
        {

            try
            {
                Rule_Context Context = this.mainForm.EpiInterpreter.Context;
                switch (command)
                {
                    case SelectIfCommands.CancelSelect:

                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new CancelSelect(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case SelectIfCommands.CancelSort:
                        DesignAndProcessCommand(new CancelSort(mainForm));
                        break;
                    case SelectIfCommands.If:

                        DesignAndProcessCommand(new IfDialog(mainForm));
                        break;
                    case SelectIfCommands.Select:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new SelectDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case SelectIfCommands.Sort:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new SortDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    default:
                        break;
                } 
            } 
            finally
            {

            }
        }





        private void DesignOutputCommand(OutputCommands command)
        {
            try
            {
                switch (command)
                {
                    case OutputCommands.Closeout:
                        DesignAndProcessCommand(new CloseoutDialog(mainForm));
                        break;
                    case OutputCommands.Header:
                        DesignAndProcessCommand(new HeaderoutDialog(mainForm));
                        break;
                    case OutputCommands.Printout:
                        DesignAndProcessCommand(new PrintoutDialog(mainForm));
                        break;
                    case OutputCommands.Reports:
                        DesignAndProcessCommand(new ReportDialog(mainForm));
                        break;
                    case OutputCommands.Routeout:
                        DesignAndProcessCommand(new RouteoutDialog(mainForm));
                        break;
                    case OutputCommands.StoreOutput:
                        DesignAndProcessCommand(new StoringOutputDialog(mainForm));
                        break;
                    case OutputCommands.Type:
                        DesignAndProcessCommand(new TypeoutDialog(mainForm));
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }





        private void DesignDataCommand(DataCommands command)
        {

            try
            {

                Rule_Context Context = this.mainForm.EpiInterpreter.Context;
                this.mainForm.ProgramEditor.ShowErrorMessage("");
                switch (command)
                {
                    case DataCommands.DeleteFile:

                        DesignAndProcessCommand(new DeleteFileTableDialog(mainForm));
                        break;
                    case DataCommands.DeleteRecord:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new DeleteRecordsDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case DataCommands.Merge:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new MergeDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case DataCommands.Read:

                        DesignAndProcessCommand(new ReadDataSourceDialog(mainForm));
                        break;
                    case DataCommands.Relate:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new RelateDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case DataCommands.UndeleteRecord:

                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new UndeleteRecordsDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    case DataCommands.Write:
                        if (Context.CurrentRead != null)
                        {
                            DesignAndProcessCommand(new WriteDialog(mainForm));
                        }
                        else
                        {
                            DisplayNoDataSourceMessage();
                        }
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }





        private void DesignOptionCommand(OptionCommands command)
        {
            try
            {
                switch (command)
                {
                    case OptionCommands.Set:
                        DesignAndProcessCommand(new SetDialog(mainForm));
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }







        private void DesignAndProcessCommand(Epi.Windows.Analysis.Dialogs.CommandDesignDialog dlg)
        {
            //Input Validation
            if (dlg == null)
            {
                throw new System.ArgumentNullException("dlg");
            }
            // Input Validation

            try
            {
                DialogResult result = dlg.ShowDialog();
                if (result == DialogResult.OK)
                {

                    if (!string.IsNullOrEmpty(dlg.CommandText))
                    {
                        if (CommandGenerated != null)
                        {
                            Epi.Windows.Analysis.Forms.CommandProcessingMode Mode = (Epi.Windows.Analysis.Forms.CommandProcessingMode) dlg.ProcessingMode;
                            CommandGenerated(dlg.CommandText, Mode);
                        }
                    }
                    dlg.Close();
                }
            } 
            finally
            {

                if (this.tvCommands.SelectedNode.Parent != null)
                {
                    tvCommands.SelectedNode = this.tvCommands.SelectedNode.Parent;
                }
                else
                {
                    throw new System.ArgumentNullException("Parent node is null");
                }



            }
        }


        private void DesignUserDefinedCommand(UserDefinedCommands command)
        {
            try
            {
                switch (command)
                {
                    case UserDefinedCommands.RunSavedProgram:
                        DesignAndProcessCommand(new RunSavedPGMDialog(mainForm));
                        break;
                    case UserDefinedCommands.DefineCommand:
                        DesignAndProcessCommand(new DefineUserCommandDialog(mainForm));
                        break;
                    case UserDefinedCommands.ExecuteFile:
                        DesignAndProcessCommand(new ExecuteDialog(mainForm));

                        break;
                    case UserDefinedCommands.UserCommand:
                        DesignAndProcessCommand(new UserCommandDialog(mainForm));
                        break;
                    default:
                        break;
                }
            } 
            finally
            {

            }
        }

        //

        //Event Handlers






        private void tvCommands_AfterSelect(object sender, System.Windows.Forms.TreeViewEventArgs e)
        {
            try
            {
                Rule_Context Context = this.mainForm.EpiInterpreter.Context;
                if (Context.DataSet.Tables["output"] != null)
                {
                    Context.ReadDataSource(Context.DataSet.Tables["output"]);
                }
                if (e.Node.Parent != null)
                {
                    if (tvCommands.Nodes[0] == e.Node.Parent)
                    {

                        switch ((CommandGroups)((TreeValueNode)e.Node).Value)
                        {
                            case CommandGroups.UserDefined:
                                DesignUserDefinedCommand((UserDefinedCommands)((TreeValueNode)e.Node).Value);
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {

                    }
                    if (e.Node.Parent.Parent != null)
                    {

                        switch ((CommandGroups)((TreeValueNode)e.Node.Parent).Value)
                        {
                            case CommandGroups.AdvancedStatistics:
                                DesignAdvancedStatisticsCommand((AdvancedStatisticsCommands)((TreeValueNode)e.Node).Value);
                             break;
                            case CommandGroups.Data:
                                DesignDataCommand((DataCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.Options:
                                DesignOptionCommand((OptionCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.Output:
                                DesignOutputCommand((OutputCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.SelectIf:
                                DesignSelectIfCommand((SelectIfCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.Statistics:
                                if (Context.CurrentRead != null)
                                {
                                    DesignStatisticsCommand((StatisticsCommands)((TreeValueNode)e.Node).Value);
                                }
                                else
                                {
                                    DisplayNoDataSourceMessage();
                                }
                                break;
                            case CommandGroups.UserDefined:
                                DesignUserDefinedCommand((UserDefinedCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.UserInteraction:
                                DesignUserInteractionCommand((UserInteractionCommands)((TreeValueNode)e.Node).Value);
                                break;
                            case CommandGroups.Variables:
                                DesignVariableCommand((VariableCommands)((TreeValueNode)e.Node).Value);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
            catch (Exception)
            {

            }
        }






        private void tvCommands_Click(object sender, System.EventArgs e)
        {







        }






        private void tvCommands_BeforeExpand(object sender, System.Windows.Forms.TreeViewCancelEventArgs e)
        {
            if (e.Node.Parent != null)
            {










            }
        }






        private void tvCommands_AfterExpand(object sender, System.Windows.Forms.TreeViewEventArgs e)
        {
            e.Node.ImageIndex = 72;
            e.Node.SelectedImageIndex = 72;
        }






        private void tvCommands_AfterCollapse(object sender, System.Windows.Forms.TreeViewEventArgs e)
        {
            e.Node.ImageIndex = 73;
            e.Node.SelectedImageIndex = 73;
        }

        //

    }
}

 