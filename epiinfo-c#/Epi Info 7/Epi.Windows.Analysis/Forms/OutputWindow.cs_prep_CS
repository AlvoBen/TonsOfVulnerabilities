//Namespaces

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Windows.Forms;
using Epi.Windows.Docking;
using Epi.Web;
using System.Security.Permissions;
using Epi.Core.AnalysisInterpreter;
using Epi.Analysis;
using Epi.Data;
using Epi.Data.SqlServer;
using Epi.Data.Office;

//Namespaces

namespace Epi.Windows.Analysis.Forms
{



    [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]
    public         class OutputWindow : DockWindow
    {
        public OutputEventQueue eventQueue = null;


         //Public Interface
        //Constructors



        public OutputWindow()
        {
            InitializeComponent();
            if (!this.DesignMode)           
            {
                ResetOutput();
                Navigate(OutputFile);

                eventQueue = new OutputEventQueue();
                eventQueue.DialogDelegateMethod += this.Dialog;
                eventQueue.TryGetFileDialogMethod += this.TryGetFileDialog;
                eventQueue.Changed += new OutputEventQueue.ChangedEventHandler(







 CxPlaceHolder);
            }
        }





        public delegate void delegateAdjustDocTitle();






        public OutputWindow(AnalysisMainForm mainForm)
            : this()
        {
            this.mainForm = mainForm;
        }
        //





        //Public Properties

        public Dictionary HeaderLevels
        {
            get
            {
                if (headerLevels == null)
                {
                    headerLevels = new Dictionary();

                    for (int i = 0; i < 2; i++)
                    {
                        headerLevels.Add(i, new HeaderLevel(i));
                    }
                }

                return headerLevels;
            }

            set
            {
                headerLevels = value;
            }
        }


        //Public Properties

        //Public Methods





        public void Navigate(string address)
        {
            if (String.IsNullOrEmpty(address)) return;
            if (address.Equals("about:blank")) return;
            if (!address.StartsWith("file://"))
            {
                address = "file://" + address;
            }
            try
            {
                if (webBrowser1 != null)
                {
                    webBrowser1.Refresh(WebBrowserRefreshOption.Completely);
                    webBrowser1.Navigate(new Uri(address));
                }
            }
            catch (System.UriFormatException)
            {
                return;
            }
        }





        public void SetHeaderLevel(HeaderLevel header)
        {
            if (this.HeaderLevels.ContainsKey(header.LevelNumber))
            {
                this.HeaderLevels[header.LevelNumber] = header;
            }
            else
            {
                this.HeaderLevels.Add(header.LevelNumber, header);
            }
        }





        public void SendToOutput(CommandProcessorResults results)
        {
            if (results.ResetOutput)
            {
                ResetOutput();
            }
            if (!string.IsNullOrEmpty(results.HtmlOutput))
            {

                string currentAnchorName = "#Results" + currentAnchorNumber.ToString();

                string hyperlinks = HTML.Anchor(currentAnchorName);
                currentAnchorNumber--;
                if (currentAnchorNumber >= 0)
                {
                    hyperlinks += HTML.HyperLink("Back", "#Results" + currentAnchorNumber);
                }
                currentAnchorNumber += 2;
                hyperlinks += "&nbsp;&nbsp;";
                hyperlinks += HTML.HyperLink("Forward", "#Results" + currentAnchorNumber);
                hyperlinks += HTML.Tag("br");

                results.HtmlOutput = hyperlinks + results.HtmlOutput;
                using (StreamWriter writer = File.AppendText(OutputFile))
                {
                    writer.WriteLine(results.HtmlOutput);
                    writer.Flush();
                    writer.Close();
                }
                Regex commandRegEx = new Regex(@"(?\w+[\s*\w*]*\s*)</h3>");
                Match cmdMatch = commandRegEx.Match(results.HtmlOutput);

                string commandName = String.Empty;
                if (cmdMatch.Success)
                {
                    if (OutputFile.Equals(EpiHome))
                    {
                        SetOutputFile(string.Empty);
                        File.Copy(EpiHome, OutputFile, true);
                    }
                    commandName = cmdMatch.Result("${cmd}");
                }
                string address = "file://" + OutputFile + currentAnchorName;
                Uri URL = new Uri(address);
                if (URL.IsFile)
                {
                    if (!String.IsNullOrEmpty(commandName))
                    {
                        sessionHistory.Add(DateTime.Now.ToShortTimeString(), URL, commandName.Trim());
                    }
                }
                else
                {
                    sessionHistory.Add(DateTime.Now.ToShortTimeString(), URL, URL.Segments[URL.Segments.GetUpperBound(0)]);
                }
                Navigate(address);
                Focus();

            }
        }







        public void SendToOutput(string command, string htmlOutput, bool resetOutput)
        {
            this.isReplaceRouteOut = resetOutput;
            if (resetOutput)
            {
                ResetOutput();
            }

            StreamWriter outputStream = null;

            try
            {
                string CurrentText = null;
                if (File.Exists(this.outputFile))
                {
                    StreamReader inputStream = File.OpenText(this.outputFile);
                    CurrentText = inputStream.ReadToEnd();
                    inputStream.Close();
                }

                outputStream = File.CreateText(this.OutputFile);
                outputStream.Write(CurrentText);

                if (!string.IsNullOrEmpty(htmlOutput))
                {
                    string hyperlinks = String.Empty;
                    string currentAnchorName = String.Empty;

                    if (!String.IsNullOrEmpty(command))
                    {
                        currentAnchorName = "#Results" + currentAnchorNumber.ToString();
                        hyperlinks = HTML.Anchor(currentAnchorName);
                        currentAnchorNumber++;
                    }

                    htmlOutput = hyperlinks + HTML.H3(command) + htmlOutput;
                    outputStream.WriteLine(htmlOutput);
                    outputStream.Flush();

                    if (!String.IsNullOrEmpty(routeoutFile))
                    {
                        CurrentText = string.Empty;
                        StreamWriter routeoutStream = null;

                        if (File.Exists(this.routeoutFile))
                        {
                            StreamReader inputStream = File.OpenText(this.routeoutFile);
                            CurrentText = inputStream.ReadToEnd();
                            inputStream.Close();

                            routeoutStream = File.CreateText(this.routeoutFile);
                            routeoutStream.Write(CurrentText);
                            routeoutStream.Write(htmlOutput);
                            routeoutStream.Flush();
                            routeoutStream.Close();
                        }
                        else
                        {
                            routeoutStream = File.CreateText(this.routeoutFile);

                            if (!hasRouteOutHeader)
                            {
                                string outputTemplate = Epi.Resources.ResourceLoader.GetAnalysisOutputTemplate();
                                outputTemplate = InsertHeaderStyles(outputTemplate);
                                routeoutStream.Write(outputTemplate);
                                routeoutStream.Flush();
                                hasRouteOutHeader = true;
                            }

                            routeoutStream.Write(htmlOutput);
                            routeoutStream.Flush();
                            routeoutStream.Close();
                        }
                    }

                    string address = "file://" + OutputFile + currentAnchorName;
                    Uri URL = new Uri(address);

                    if (URL.IsFile)
                    {
                        if (!String.IsNullOrEmpty(command))
                        {
                            sessionHistory.Add(DateTime.Now.ToShortTimeString(), URL, command.Trim());
                        }
                    }
                    else
                    {
                        sessionHistory.Add(DateTime.Now.ToShortTimeString(), URL, URL.Segments[URL.Segments.GetUpperBound(0)]);
                    }

                    Navigate(address);
                    Focus();
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                if(outputStream != null)
                {
                    outputStream.Flush();
                    outputStream.Close();
                }
            }
        }





        public void SetOutputFile(string fileName)
        {

            if (string.IsNullOrEmpty(fileName) || fileName.Equals(String.Empty))
            {
                this.outputFile = OutputFile;
            }
            else
            {
                this.outputFile = fileName;
            }
        }





        public void Printout()
        {
            webBrowser1.Print();
        }

        /* Old Printout command







        public void Printout(string urlString)
        {
            Uri urlPrevious = webBrowser1.Url;
            webBrowser1.Navigate(new Uri(urlString));
            Printout();
            webBrowser1.Url = urlPrevious;
        }*/

        //
        //Public Interface

        //Protected Interface

        //Protected Properties

        //Protected Properties

        //Protected Methods

        //Protected Methods

        //Protected Events

        //Protected Events
        //Protected Interface

        //Private Members
        //Private Enums and Constants

        //Private Enums and Constants

        //Private Attributes
        private string outputFile;
        private bool hasHeader = false;
        private bool hasRouteOutHeader = false;
        private Dictionary headerLevels;
        private bool isReplaceRouteOut = false;
        private string epiHome;
        private int currentAnchorNumber = 0;
        private string displayedAnchor = String.Empty;
        private Uri currentUri;
        private SessionHistory sessionHistory = new SessionHistory();
        private ResultsHistory resultsHistory = new ResultsHistory();
        new private Epi.Windows.Analysis.Forms.AnalysisMainForm mainForm;

        private string routeoutFile = string.Empty;

        //Private Attributes

        //Private Properties



        private string OutputFile
        {
            get
            {
                Configuration config = Configuration.GetNewInstance();
                StreamWriter outstream = null;


                if (string.IsNullOrEmpty(this.outputFile))
                {
                    int counter = 1;
                    while (true)
                    {
                        if (!File.Exists(Path.Combine(config.Directories.Output, "output" + counter + ".html")))
                        {
                            outputFile = Path.Combine(config.Directories.Output, "output" + counter + ".html");

                            string outputTemplate = Epi.Resources.ResourceLoader.GetAnalysisOutputTemplate();
                            try
                            {
                                outstream = File.CreateText(outputFile);

                                outstream.Write(outputTemplate);
                                hasHeader = true;

                            }
                            catch (Exception ex)
                            {

                            }
                            finally
                            {
                                if (outstream != null)
                                {
                                    outstream.Flush();
                                }
                            }
                            break;
                        }
                        counter++;
                    }




                    if (string.IsNullOrEmpty(Path.GetDirectoryName(this.outputFile)))
                    {
                        outputFile = Path.Combine(config.Directories.Output, outputFile);
                    }


                    if (!(this.outputFile.EndsWith(".html") || this.outputFile.EndsWith(".htm")))
                    {
                        outputFile = outputFile + ".html";
                    }


                    bool fileExists = File.Exists(this.outputFile);
                    if (!fileExists || (fileExists && isReplaceRouteOut))
                    {
                        if (outstream == null)
                        {
                            outstream = File.CreateText(outputFile);
                        }

                        if(!hasHeader)
                        {
                        outstream.Write(Epi.Resources.ResourceLoader.GetAnalysisOutputTemplate());
                        hasHeader = true;
                        outstream.Flush();
                            }
                        File.SetAttributes(outputFile, FileAttributes.Normal);
                        /*
                        if (!string.IsNullOrEmpty(this.routeoutFile) && this.routeoutFile != "")
                        {
                            if (File.Exists(this.routeoutFile))
                            {
                                File.Delete(this.routeoutFile);
                            }

                        }
                        this.isReplaceRouteOut = false;*/
                    }

                    outstream.Flush();
                    outstream.Close();
                }
                return outputFile;
            }
        }




        private string EpiHome
        {
            get
            {
                if (String.IsNullOrEmpty(this.epiHome))
                {
                    Configuration config = Configuration.GetNewInstance();
                    this.epiHome = Path.Combine(config.Directories.Output, "EpiHome.html");
                    string outputTemplate = Epi.Resources.ResourceLoader.GetAnalysisOutputTemplate();
                    if (!hasHeader)
                    {
                        outputTemplate = InsertHeaderStyles(outputTemplate);
                        hasHeader = true;
                    }
                    StreamWriter outStream = File.CreateText(this.epiHome);
                    outStream.Write(outputTemplate);
                    outStream.Flush();
                    outStream.Close();



                    File.SetAttributes(this.epiHome, FileAttributes.Normal);
                }
                return this.epiHome;
            }
        }

        private string InsertHeaderStyles(string outputTemplate)
        {
            int styleStart = outputTemplate.IndexOf("<style");
            int styleEnd = outputTemplate.IndexOf(">", styleStart + 1);
            foreach(HeaderLevel level in this.HeaderLevels.Values)
            {
                outputTemplate = outputTemplate.Insert(styleEnd + 1, level.CssText);
            }
            return outputTemplate;
        }
        //Private Properties

        //Private Methods
        private void ResetOutput()
        {
            Configuration config = Configuration.GetNewInstance();
            this.hasHeader = false;
            this.hasRouteOutHeader = false;

            this.epiHome = string.Empty;
            /*
            if (!String.IsNullOrEmpty(routeoutFile))
            {
                if (File.Exists(this.routeoutFile))
                {
                    File.Delete(this.routeoutFile);
                }
            }*/
            this.outputFile = string.Empty;

            SetOutputFile(string.Empty);
            currentAnchorNumber = 0;
            ToggleButtons(false);
        }

        private void ToggleButtons(bool on)
        {
            tsbBookmark.Enabled = on;
            tsbGoBack.Enabled = on;
            tsbGoForward.Enabled = on;
            tsbHistory.Enabled = on;
            tsbPrint.Enabled = on;
        }
        //Private Methods

        //Private Events





        private void tsbGoBack_Click(object sender, EventArgs e)
        {
            int prevIndex = sessionHistory.CommandHistory.IndexOf(currentUri.AbsoluteUri);
            Navigate(sessionHistory.CommandHistory[prevIndex - 1]);
        }






        private void tsbGoForward_Click(object sender, EventArgs e)
        {
            int prevIndex = sessionHistory.CommandHistory.IndexOf(currentUri.AbsoluteUri);
            Navigate(sessionHistory.CommandHistory[prevIndex + 1]);
        }






        private void tsbGoToLast_Click(object sender, EventArgs e)
        {
            Navigate(sessionHistory.CommandHistory[sessionHistory.CommandHistory.Count - 1]);
        }





        private void tsbPrint_Click(object sender, EventArgs e)
        {
            webBrowser1.ShowPrintDialog();


        }






        private void tsbHistory_Click(object sender, EventArgs e)
        {
            Navigate(sessionHistory.HistoryFile);
        }





        private void tsbOpen_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDlg = new OpenFileDialog();
            Configuration config = Configuration.GetNewInstance();


            openFileDlg.Title = "Browse";
            if (Directory.Exists(config.Directories.Output))
                openFileDlg.InitialDirectory = config.Directories.Output;
            else
                openFileDlg.InitialDirectory = "c:\\";

            openFileDlg.Filter = "HTML files|*.htm;*.html|XML Files|*.xml|Picture Files|*.gif;*.jpeg;*.jpg;*.tif;*.bmp;*.png";
            openFileDlg.FilterIndex = 0;
            openFileDlg.RestoreDirectory = true;


            if (openFileDlg.ShowDialog(this) == DialogResult.OK)
            {
                if (File.Exists(openFileDlg.FileName))
                    Navigate(openFileDlg.FileName);
            }
        }






        private void tsbBookmark_Click(object sender, EventArgs e)
        {
            Dialogs.BookmarkDialog bookmarkDlg = new Dialogs.BookmarkDialog((Epi.Windows.Analysis.Forms.AnalysisMainForm)MainForm);
            if (bookmarkDlg.ShowDialog(this) == DialogResult.OK)
                sessionHistory.Add("Bookmark", webBrowser1.Url, bookmarkDlg.Bookmark);
        }






        private void webBrowser1_DocumentTitleChanged(object sender, System.EventArgs e)
        {


            Invoke(new delegateAdjustDocTitle(AdjustDocumentTitle));

        }

        private void AdjustDocumentTitle()
        {
            if (webBrowser1.Url.IsFile)
            {
                FileInfo fileInfo = new FileInfo(webBrowser1.Url.LocalPath);
                this.Text = webBrowser1.DocumentTitle + StringLiterals.COLON + fileInfo.Name;
            }
            else
            {
                this.Text = "Analysis Output: " + webBrowser1.DocumentTitle;
            }

            ModifyTitleWithHeader();
        }

        private void ModifyTitleWithHeader()
        {
            if (this.HeaderLevels.ContainsKey(1))
            {
                HeaderLevel levelOne = this.HeaderLevels[1];
                if (!String.IsNullOrEmpty(levelOne.Text))
                {
                    if (levelOne.ShouldAppend)
                    {
                        this.Text += levelOne.Text;
                    }
                    else
                    {
                        this.Text = levelOne.Text;
                    }
                }
            }
        }






        private void webBrowser1_CanGoForwardChanged(object sender, System.EventArgs e)
        {

        }






        private void webBrowser1_CanGoBackChanged(object sender, System.EventArgs e)
        {

        }






        private void tsbWindowState_Click(object sender, EventArgs e)
        {
            bool Restore = tsbWindowState.Text.Equals("Restore");
            if (MainForm is AnalysisMainForm)
            {
                ((AnalysisMainForm)MainForm).ToggleToolWindows(Restore);
            }
            if (Restore)
            {
                tsbWindowState.Text = "Maximize";
            }
            else
            {
                tsbWindowState.Text = "Restore";
            }
        }

        private void webBrowser1_Navigated(object sender, WebBrowserNavigatedEventArgs e)
        {
            tsbHistory.Enabled = !(sessionHistory.CommandHistory.Count == 0);

            if (!String.IsNullOrEmpty(e.Url.Fragment))
            {
                currentUri = e.Url;
                tsbGoBack.Enabled = !(sessionHistory.CommandHistory.IndexOf(currentUri.AbsoluteUri) <= 0);
                tsbGoForward.Enabled = !(sessionHistory.CommandHistory.IndexOf(currentUri.AbsoluteUri) == (sessionHistory.CommandHistory.Count - 1));
                tsbGoToLast.Enabled = !(sessionHistory.CommandHistory.IndexOf(currentUri.AbsoluteUri) == (sessionHistory.CommandHistory.Count - 1));
            }
        }

        private void webBrowser1_Navigating(object sender, WebBrowserNavigatingEventArgs e)
        {

        }

        private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            if (e.Url.Equals(sessionHistory.HistoryFile))
            {
            }
            else
            {
            }
        }
        //Private Events
        //Private Members

        //IAnalysisCheckCode Members





        public void Display(Dictionary pDisplayArgs)
        {
            Rule_Context Context = this.mainForm.EpiInterpreter.Context;
            StringBuilder htmlBuilder = new StringBuilder();
            string fileName = String.Empty;
            string tableName = String.Empty;
            string relateName = String.Empty;
            string htmlOutput = String.Empty;
            int rowCount = 0;
            DataTable table;
            if(pDisplayArgs.ContainsKey("COMMANDNAME"))
            {
                switch(pDisplayArgs["COMMANDNAME"])
                {
                    case CommandNames.DEFINE:


                        break;

                    case CommandNames.READ:

                        if (pDisplayArgs.ContainsKey("FILENAME"))
                        {
                            fileName = pDisplayArgs["FILENAME"];
                        }
                        if (pDisplayArgs.ContainsKey("TABLENAME"))
                        {
                            tableName = pDisplayArgs["TABLENAME"];
                        }
                        if (pDisplayArgs.ContainsKey("ROWCOUNT"))
                        {
                            rowCount = Int32.Parse(pDisplayArgs["ROWCOUNT"]);
                        }

                        htmlOutput = DisplayRenderer.RenderHtml(this.mainForm.EpiInterpreter.Context, CommandNames.READ, fileName, tableName, rowCount);
                        this.SendToOutput(String.Empty, htmlOutput, true);


                        break;

                    case "RecordSet":
                        if (pDisplayArgs.ContainsKey("SQL"))
                        {
                            tableName = pDisplayArgs["SQL"];
                        }
                        if (pDisplayArgs.ContainsKey("ROWCOUNT"))
                        {
                            rowCount = Int32.Parse(pDisplayArgs["ROWCOUNT"]);
                        }

                        htmlOutput = DisplayRenderer.RenderHtml(this.mainForm.EpiInterpreter.Context, CommandNames.READ, fileName, tableName, rowCount);
                        this.SendToOutput(String.Empty, htmlOutput, true);



                        break;

                    case "Define Connection":
                        htmlBuilder = new StringBuilder();
                        htmlBuilder.Append("Connection:</b>&nbsp;");
                        htmlBuilder.Append(pDisplayArgs["Connection"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);
                        break;

                    case CommandNames.RELATE:
                        if (pDisplayArgs.ContainsKey("FILENAME"))
                        {
                            fileName = pDisplayArgs["FILENAME"];
                        }
                        if (pDisplayArgs.ContainsKey("TABLENAME"))
                        {
                            tableName = pDisplayArgs["TABLENAME"];
                        }
                        if (pDisplayArgs.ContainsKey("ROWCOUNT"))
                        {
                            rowCount = Int32.Parse(pDisplayArgs["ROWCOUNT"]);
                        }

                        htmlOutput = DisplayRenderer.RenderHtml(Context, CommandNames.RELATE, fileName, tableName, rowCount);
                        this.SendToOutput(string.Empty, htmlOutput, true);
                        break;

                    case CommandNames.GRAPH:
                        htmlBuilder = new StringBuilder();
                        htmlBuilder.Append(pDisplayArgs["DATA"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);
                        break;

                    case CommandNames.LIST:
                        htmlBuilder = new StringBuilder();
                        htmlBuilder.Append(pDisplayArgs["DATA"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);

                        break;
                    case CommandNames.MERGE:
                        htmlBuilder = new StringBuilder();

                        htmlBuilder.Append("<hr/><th colspan=2>MERGE</th></tr>");

                        foreach(System.Collections.Generic.KeyValuePair E in pDisplayArgs)
                        {
                            htmlBuilder.Append(string.Format("{0}</b></td>{1}</td></tr>",E.Key,E.Value));

                        }
                        htmlBuilder.Append("</table>");
                        this.SendToOutput(String.Empty, htmlBuilder.ToString(), false);

                        break;

                    case CommandNames.WRITE:
                        htmlBuilder = new StringBuilder();

                        htmlBuilder.Append("<hr/><th colspan=2>WRITE</th></tr>");

                        foreach (System.Collections.Generic.KeyValuePair E in pDisplayArgs)
                        {
                            htmlBuilder.Append(string.Format("{0}</b></td>{1}</td></tr>", E.Key, E.Value));

                        }
                        htmlBuilder.Append("</table>");
                        this.SendToOutput(String.Empty, htmlBuilder.ToString(), false);

                        break;
                    case CommandNames.FREQ:
                        htmlBuilder = new StringBuilder();


                        htmlBuilder.Append(pDisplayArgs["HTMLRESULTS"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);
                        break;

                    case CommandNames.MEANS:
                        htmlBuilder = new StringBuilder();


                        htmlBuilder.Append(pDisplayArgs["HTMLRESULTS"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);
                        break;

                    case CommandNames.TABLES:
                        DataSet ds = Context.DataInfo.GetDataSet2x2(Context, pDisplayArgs["parameter1"], pDisplayArgs["parameter2"]);
                        if (ds != null && ds.Tables.Count>0)
                        {
                            htmlOutput = DisplayRenderer.TableDataHTML(pDisplayArgs["parameter1"], pDisplayArgs["parameter2"], ds.Tables[0], ds.Tables[0].Columns.Count);
                            this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlOutput, false);

                        }
                        break;
                    case CommandNames.SELECT:
                        if (Context.CurrentRead != null)
                        {
                            htmlOutput = DisplayRenderer.RenderHtml(Context, CommandNames.SELECT, Context.CurrentRead.File, Context.CurrentRead.Identifier, Context.GetOutput().Count);
                            this.SendToOutput(String.Empty, htmlOutput, false);

                        }
                        break;
                    case CommandNames.SORT:
                        if (Context.CurrentRead != null)
                        {
                            htmlOutput = DisplayRenderer.RenderHtml(Context, CommandNames.SORT, Context.CurrentRead.File, Context.CurrentRead.Identifier, Context.GetOutput().Count);
                            this.SendToOutput(String.Empty, htmlOutput, false);

                        }
                        break;

                    case CommandNames.TYPEOUT:
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], pDisplayArgs["DATA"], false);
                        break;

                    case CommandNames.SUMMARIZE:
                    case CommandNames.DISPLAY:
                    case CommandNames.REGRESS:
                    case CommandNames.LOGISTIC:
                    case CommandNames.COXPH:
                    case CommandNames.KMSURVIVAL:
                    case CommandNames.DELETE:
                    case CommandNames.UNDELETE:
                    case CommandNames.MATCH:
                        htmlBuilder = new StringBuilder();
                        htmlBuilder.Append(pDisplayArgs["HTMLRESULTS"]);
                        this.SendToOutput(pDisplayArgs["COMMANDTEXT"], htmlBuilder.ToString(), false);
                        break;

                    case CommandNames.HEADER:
                        int levelNumber = Convert.ToInt32(pDisplayArgs["LEVELNUMBER"]);
                        HeaderLevel newLevel = new HeaderLevel(levelNumber);
                        bool result = false;

                        bool.TryParse(pDisplayArgs["SHOULDRESET"], out result);
                        if (result == true)
                        {
                            newLevel.Reset();
                        }
                        else
                        {
                            newLevel.Text = pDisplayArgs["TEXT"];
                            newLevel.Color = pDisplayArgs["COLOR"];
                            newLevel.Size = pDisplayArgs["SIZE"];

                            if (bool.TryParse(pDisplayArgs["SHOULDAPPEND"], out result))
                            {
                                newLevel.ShouldAppend = result;
                            }

                            if (bool.TryParse(pDisplayArgs["SHOULDBOLD"], out result))
                            {
                                newLevel.ShouldBold = result;
                            }

                            if (bool.TryParse(pDisplayArgs["SHOULDITALICIZE"], out result))
                            {
                                newLevel.ShouldItalicize = result;
                            }

                            if (bool.TryParse(pDisplayArgs["SHOULDUNDERLINE"], out result))
                            {
                                newLevel.ShouldUnderline = result;
                            }
                        }

                        if (this.HeaderLevels.ContainsKey(levelNumber))
                        {
                            this.HeaderLevels[levelNumber] = newLevel;
                        }
                        else
                        {
                            this.HeaderLevels.Add(levelNumber, newLevel);
                        }

                        if (newLevel.LevelNumber == 1)
                        {
                            Invoke(new delegateAdjustDocTitle(AdjustDocumentTitle));
                        }

                        string displayText = pDisplayArgs["TEXT"];

                        if (newLevel.ShouldBold)
                        {
                            displayText = HTML.Bold(displayText);
                        }

                        if (newLevel.ShouldItalicize)
                        {
                            displayText = HTML.Italics(displayText);
                        }

                        if (newLevel.ShouldUnderline)
                        {
                            displayText = HTML.Underline(displayText);
                        }
                        int size = 0;

                        if (int.TryParse(newLevel.Size, out size))
                        {
                            displayText = HTML.Tag(displayText, "font", "color", newLevel.Color, "size", newLevel.Size);
                        }

                        this.SendToOutput("", displayText, false);
                        break;
                }
            }
        }






        public void Dialog(string pTextPrompt, string pTitleText)
        {

            MsgBox.Show(pTextPrompt, pTitleText);
        }

        public void ShowGridTable(List dt, List identifierList, Epi.View epiView)
        {
            Epi.Analysis.Dialogs.GridListDialog dialog = new Epi.Analysis.Dialogs.GridListDialog();

            if (epiView != null)
            {
                dialog.EpiView = epiView;
            }
            dialog.DataSource = dt;
            dialog.IdentifierList = identifierList;

            dialog.ShowDialog();
        }








        public void Dialog(string pTextPrompt, ref object pVariable, string pListType, string pTitleText)
        {
            DialogResult result = MsgBox.Show(pTextPrompt, pTitleText, MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                pVariable = true;
            }
            else
            {
                pVariable = false;
            }
        }









        public bool Dialog(string text, string caption, string mask, string modifier, ref object input)
        {
            bool ret = false;

            if (modifier.ToUpper().Equals("READ") || modifier.ToUpper().Equals("WRITE"))
            {
                string filePath;
                if (TryGetFileDialog((string)input, caption, modifier.ToUpper().Equals("READ"), out filePath))
                {
                    ret = true;
                    input = filePath;
                }
            }
            else
            {
                Epi.Windows.Dialogs.InputDialog dialog = new Epi.Windows.Dialogs.InputDialog(text, caption, mask, input);
                DialogResult result = dialog.ShowDialog();
                input = dialog.Input;
                ret = result == DialogResult.OK ? true : false;
            }
            return ret;
        }








        public bool TryGetFileDialog(string filter, string caption, bool isReadOnly, out string filePath)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Title = caption;
            openFileDialog.ShowHelp = false;
            filter = filter.Replace("\"","");
            filter = filter.Trim();
            openFileDialog.Filter = filter == null ? string.Empty : filter;
            openFileDialog.FilterIndex = 1;
            openFileDialog.Multiselect = false;
            openFileDialog.CheckFileExists = isReadOnly;
            DialogResult dialogResult = openFileDialog.ShowDialog();

            if (dialogResult == DialogResult.OK)
            {
                filePath = openFileDialog.FileName.Trim();
                return true;
            }
            else
            {
                filePath = string.Empty;
                return false;
            }
        }


        public void DisplayStatusMessage(Dictionary pStatusArgs)
        {
            ((AnalysisMainForm)mainForm).UpdateStatus(pStatusArgs["status"]);
        }





        public void Quit()
        {
            this.mainForm.Close();
        }





        public void RunProgram(string command)
        {
            ((AnalysisMainForm)mainForm).RunCommand(command);
        }







        public void ChangeOutput(string fileName, bool isReplaceRouteOut, bool useRouteOut)
        {
            this.isReplaceRouteOut = isReplaceRouteOut;


            if (isReplaceRouteOut)
            {
                if (!String.IsNullOrEmpty(fileName))
                {
                    if (File.Exists(fileName))
                    {
                        File.Delete(fileName);
                    }
                }
            }


            if (useRouteOut)
            {

                routeoutFile = fileName;
            }
            else
            {

                routeoutFile = string.Empty;
            }
        }





        public void Printout(string fileName)
        {
            using (System.Diagnostics.Process proc = new System.Diagnostics.Process())
            {
                if (String.IsNullOrEmpty(fileName))
                {
                    proc.StartInfo.FileName = outputFile;
                }
                else
                {
                    proc.StartInfo.FileName = fileName.Trim('\'');
                }
                proc.StartInfo.Verb = "Print";
                proc.Start();
            }
        }

        public event BeginBusyEventHandler IndeterminateTaskStarted;
        public event EndBusyEventHandler IndeterminateTaskEnded;
        private Epi.Analysis.Dialogs.WaitDialog waitDialog;

        public void ShowWaitDialog(string message)
        {
            try
            {
                waitDialog = new Epi.Analysis.Dialogs.WaitDialog();
                waitDialog.Prompt = message;
                waitDialog.Show();
            }
            catch (Exception ex)
            {

            }
        }

        public void HideWaitDialog()
        {
            try
            {
                if (waitDialog != null)
                {
                    waitDialog.Close();
                }
            }
            catch (Exception ex)
            {

            }
        }

        public void ReportIndeterminateTaskStarted(string message)
        {
            if (IndeterminateTaskStarted != null)
            {
                IndeterminateTaskStarted(message);
            }
        }

        public void ReportIndeterminateTaskEnded()
        {
            if (IndeterminateTaskEnded != null)
            {
                IndeterminateTaskEnded();
            }
        }

        //

        private void OutputEventChangedHandler(object s, OutputEventArg arg)
        {
            MethodInvoker invoker = new MethodInvoker(
























































 CxPlaceHolder
            );

            this.Invoke(invoker);

        }

    }




    public        class DisplayRenderer
    {









        public static string RenderHtml(Rule_Context pContext, string commandName, string fileName, string tableName, int rowCount)
        {

            StringBuilder sb = new StringBuilder();
            Epi.DataSets.Config.SettingsRow settings = Configuration.GetNewInstance().Settings;

            if (pContext.CurrentRead != null && pContext.CurrentRead.RelatedTables != null)
            {
                sb.Append(HTML.Italics(SharedStrings.CURRENT_VIEW + ":&nbsp;"));
                if (fileName.ToLower().Contains("password="))
                {
                    sb.Append(HTML.Bold(tableName));
                }
                else
                {
                    sb.Append(HTML.Bold(String.Format("{0}:{1}", fileName.Trim( CxNull), tableName)));
                }

                foreach (string table in pContext.CurrentRead.RelatedTables)
                {
                    sb.Append(HTML.Tag("br"));
                    sb.Append(HTML.Italics("&nbsp&nbsp&nbsp&nbspRelate:&nbsp;"));
                    sb.Append(HTML.Bold(table));
                }
            }
            else
            {
                sb.Append(HTML.Italics(SharedStrings.CURRENT_VIEW + ":&nbsp;"));
                if (pContext.CurrrentConnection.ToLower().Contains("password="))
                {
                    sb.Append(String.Format("RecordSet:&nbsp;&nbsp;{0}</b>", tableName));
                }
                else
                {
                    sb.Append(String.Format("{0}</b><br/>RecordSet:&nbsp;&nbsp;{1}</b>", pContext.CurrrentConnection.Trim( CxNull), tableName));
                }
            }
            if (pContext.SelectString.ToString() != String.Empty)
            {
                sb.Append(HTML.Tag("br"));
                sb.Append(HTML.Italics("Selection:&nbsp;&nbsp;"));
                sb.Append("&nbsp;");
                sb.Append(HTML.Bold(EpiExpression(pContext, pContext.SelectString.ToString())));
            }

            if (pContext.SortExpression.ToString() != string.Empty)
            {
                sb.Append(HTML.Tag("br"));
                sb.Append(HTML.Italics("Sort By:&nbsp;&nbsp;"));
                sb.Append(HTML.Bold(EpiExpression(pContext, pContext.SortExpression.ToString())));
            }
            sb.Append(HTML.Tag("br"));
            sb.Append(HTML.Italics(SharedStrings.RECORD_COUNT + ":&nbsp;&nbsp;"));
            sb.Append(HTML.Bold(rowCount.ToString()));

            if (pContext.CurrentRead == null)
            {
                sb.Append("&nbsp;&nbsp;&nbsp;");
            }
            else
            {
                string scope = string.Empty;
                switch (settings.RecordProcessingScope)
                {
                    case 1:
                        scope = SharedStrings.DELETED_RECORDS_EXCLUDED;
                        break;
                    case 2:
                        scope = SharedStrings.DELETED_RECORDS_ONLY;
                        break;
                    default:
                        scope = SharedStrings.DELETED_RECORDS_INCLUDED;
                        break;
                }
                sb.Append("&nbsp;");
                sb.Append(HTML.Italics("(" + scope + ")&nbsp;&nbsp;&nbsp;"));
            }
            sb.Append(HTML.Italics("Date:"));
            sb.Append("&nbsp;&nbsp;");
            sb.Append(HTML.Bold(DateTime.Now.ToString()));
            sb.Append(HTML.Tag("br"));
            sb.Append(HTML.Tag("br"));


            return sb.ToString();
        }

        private static bool IsBoolean(IVariable var)
        {
            return (var.DataType == DataType.Boolean || var.DataType == DataType.YesNo);
        }

        private static bool IsBoolean(Rule_Context pContext, string name)
        {
            return IsBoolean(pContext.MemoryRegion.GetVariable(name));
        }

        private static string RepresentationOfValue(string val, bool isBoolean)
        {
            Configuration config = Configuration.GetNewInstance();

            if (isBoolean)

            {
                return (val == "0") ? config.Settings.RepresentationOfNo : config.Settings.RepresentationOfYes;
            }
            else
            {
                return val;
            }
        }









        public static string TableHeadingHTML(Rule_Context pContext, DataTable distinct, string outcome, string exposure)
        {
            Configuration config = Configuration.GetNewInstance();
            StringBuilder sb = new StringBuilder();
            IMemoryRegion module = pContext.MemoryRegion;

            IVariable oVar = module.GetVariable(outcome);
            string outcomeWord = (config.Settings.ShowCompletePrompt) ?
                oVar.PromptText.ToString() : oVar.Name;
            IVariable eVar = module.GetVariable(exposure);
            string exposureWord = (config.Settings.ShowCompletePrompt) ?
                eVar.PromptText.ToString() : eVar.Name.ToString();

            sb.Append(" ").Append(outcomeWord).Append("</b></caption>");

            sb.Append("");
            sb.Append("<th nowrap>").Append(exposureWord).Append("</th>");
            foreach (DataRow row in distinct.Rows)
            {
                foreach (DataColumn col in distinct.Columns)
                {
                    IVariable var = module.GetVariable(col.ColumnName);
                    DataType thisType = var.DataType;
                    bool isBoolean = (thisType == DataType.Boolean || thisType == DataType.YesNo);

                    sb.Append("");
                    if (row[col.ColumnName] == null ||
                        string.IsNullOrEmpty(row[col.ColumnName].ToString()))
                    {
                        sb.Append(config.Settings.RepresentationOfMissing);
                    }
                    else
                    {
                        string val = RepresentationOfValue(row[col.ColumnName].ToString(), isBoolean);
                        sb.Append(val);
                    }
                    sb.Append("</th>");
                }
            }
            sb.Append("TOTAL</th>");
            sb.Append("</tr>");

            return sb.ToString();
        }










        public static string TableRowHTML(string row, string col, int rowCount, int colCount, bool isBooleanField)     
        {
            StringBuilder sb = new StringBuilder();
            string rowWord = row;
            if (isBooleanField)
            {
                rowWord = RepresentationOfValue(row, true);
            }
            sb.Append("");
            sb.Append("<td align=right>");
            sb.Append(row);
            sb.Append("</b>row %col %</td>");











            sb.Append("<td align=right>").Append(rowCount).Append("100.0100.0").Append("</td>");
            sb.Append("</tr>");
            return sb.ToString();
        }









        public static string TableDataHTML(string exposureField, string outcomeField, DataTable table2x2, int colCount)
        {
            StringBuilder sb = new StringBuilder();
            Dictionary exposureList = new Dictionary();

            Dictionary exposureTotals = new Dictionary();
            Dictionary outcomeTotals = new Dictionary();

            int grandTotal = 0;

            foreach (DataRow r in table2x2.Rows)
            {
                string currExposure = r[ColumnNames.EXPOSURE].ToString();
                string currOutcome = r[ColumnNames.OUTCOME].ToString();
                int currCount = (int)r[ColumnNames.COUNT];
                grandTotal += currCount;

                bool isBoolOutcome = false;
                bool isBoolExposure = false;
                int outcomeCount = currCount;
                int exposureCount = currCount;

                if (isBoolExposure)
                {
                    if (exposureCount == 1)
                    {
                        currExposure += "#TRUE";
                        AddToTotal(exposureTotals, currExposure, exposureCount);
                    }
                    else
                    {
                        currExposure += "#FALSE";
                        exposureCount = 1;
                        AddToTotal(exposureTotals, currExposure, exposureCount);
                    }
                }
                else
                {
                    AddToTotal(exposureTotals, currExposure, exposureCount);
                }

                if (isBoolOutcome)
                {
                    if (outcomeCount == 1)
                    {
                        currOutcome += "#TRUE";
                        AddToTotal(outcomeTotals, currOutcome, outcomeCount);
                    }
                    else
                    {
                        currOutcome += "#FALSE";
                        outcomeCount = 1;
                        AddToTotal(outcomeTotals, currOutcome, outcomeCount);
                    }
                }
                else
                {
                    AddToTotal(outcomeTotals, currOutcome, outcomeCount);
                }
            }

            string[] keys = new string[outcomeTotals.Keys.Count];
            outcomeTotals.Keys.CopyTo(keys,0);

            sb.Append("");
            sb.AppendFormat("&nbsp;</td><td align=center colspan={0}>{1}</b></td></tr>", keys.Length, outcomeField);
            sb.Append(HeaderHtml(keys, exposureField));

            StringBuilder rowBuilder = new StringBuilder();
            int exposureTotal=0;

            foreach (DataRow row in table2x2.Rows)
            {

                string exposure = row[0].ToString();
                rowBuilder = new StringBuilder();
                exposureTotal = (int)row[1];
                rowBuilder.Append(RowHtml(exposure));

                for (int colIndex = 2; colIndex < table2x2.Columns.Count; colIndex++)
                {
                    string outcome = table2x2.Columns[colIndex].ColumnName;
                    int currCount = 0;
                    int.TryParse(row[colIndex].ToString(),out currCount);
                    bool isBoolField = (table2x2.Columns[colIndex].GetType() == typeof(bool));

                    if (isBoolField)
                    {
                        if (currCount == 1)
                        {
                            outcome += "#TRUE";
                            int outcomeTotal = outcomeTotals[outcome];
                            rowBuilder.Append(ColumnHtml(currCount, exposureTotal, outcomeTotal));
                        }
                        else
                        {
                            outcome += "#FALSE";
                            currCount = 1;
                            int outcomeTotal = outcomeTotals[outcome];
                            rowBuilder.Append(ColumnHtml(currCount, exposureTotal, outcomeTotal));
                        }
                    }
                    else
                    {

                        int outcomeTotal = outcomeTotals[outcome];
                        rowBuilder.Append(ColumnHtml(currCount, exposureTotal, outcomeTotal));
                    }
                }


                rowBuilder.Append(ColumnHtml(exposureTotal, exposureTotal, grandTotal));
                rowBuilder.Append("</tr>");
                sb.Append(rowBuilder.ToString());
            }

            StringBuilder tr = new StringBuilder();
            tr.Append("Total</i></b><br/>Row %<br/>Col %</td>");
            for (int colIndex = 2; colIndex < table2x2.Columns.Count; colIndex++)
            {
                string currentOutcome = table2x2.Columns[colIndex].ColumnName;
                int colTotal = outcomeTotals[currentOutcome];
                tr.Append(ColumnHtml(colTotal, colTotal, grandTotal));
            }
            tr.Append(ColumnHtml(grandTotal, grandTotal, grandTotal));

            tr.Append("</tr>");

            sb.Append(tr.ToString());
            sb.Append("</table>");
            return sb.ToString();
        }

        private static void AddToTotal(Dictionary totals, string key, int count)
        {
            if (totals.ContainsKey(key))
            {
                totals[key] += count;
            }
            else
            {
                totals.Add(key, count);
            }
        }







        public static string HeaderHtml(string[] columns, string exposureField)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("");
            sb.AppendFormat("<td align=center>{0}</b></td>", exposureField);
            for(int i=0; i<columns.Length; i++)
            {
                sb.AppendFormat("<td align=center>{0}</b></td>", columns[i]);
            }
            sb.Append("<td align=center>Total</b></td>");
            sb.Append("</tr>");
            return sb.ToString();
        }








        public static string ColumnHtml(int colCount, int rowTotal, int colTotal)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<td align=right>");
            sb.Append(colCount).Append("");
            double rowPct = ((double)colCount / (double)rowTotal) * 100;
            sb.Append(rowPct.ToString("#0.0")).Append("");
            double colPct = ((double)colCount / colTotal) * 100;
            sb.Append(colPct.ToString("#0.0"));
            sb.Append("</td>");
            return sb.ToString();
        }






        public static string RowHtml(string rowName)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("<td align=right>");
            sb.Append(rowName);
            sb.Append("</b><br/>");
            sb.Append("Row %");
            sb.Append("<br/>");
            sb.Append("Col %");
            sb.Append("</td>");
            return sb.ToString();
        }






        public static string TotalsHTML(DataTable table2x2)
        {
            StringBuilder sb = new StringBuilder();
            return sb.ToString();
        }







        public static string TotalsHTML(int colCount, ulong rowTotal)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("");
            sb.Append("<td align=right>").Append(SharedStrings.TOTAL);
            sb.Append("</b>Row %Col %").Append("</td>");
            for (int i = 0; i < colCount; i++)
            {
                sb.Append("<td align=right>").Append("count").Append(i.ToString());
                sb.Append("pct").Append(i.ToString());
                sb.Append("").Append("100").Append("</td>");
            }
            sb.Append("<td align=right>").Append(rowTotal).Append("100.0100.0</td>");
            sb.Append("</tr>");
            return sb.ToString();
        }








        public static string TableHTML(Rule_Context pContext, string outcomeName, string exposureName)
        {
            StringBuilder sb = new StringBuilder();
            try
            {

                DataSet ds = pContext.DataInfo.GetDataSet2x2(pContext, outcomeName, exposureName);
                sb.Append("<table border align=left>");
                sb.Append(TableHeadingHTML(pContext, ds.Tables["DistinctOutcomes"], outcomeName, exposureName));
                sb.Append(TableDataHTML(outcomeName, exposureName, ds.Tables["Table2x2"], ds.Tables["DistinctOutcomes"].Rows.Count));
                sb.Append("</table>");
                return sb.ToString();
            }
            catch (Exception ex)
            {
                throw new GeneralException(SharedStrings.DATA_TABLE_NOT_CREATED, ex);
            }
        }

        private static string EpiExpression(Rule_Context pContext, string whereClause)
        {
            string expression = string.Empty;
            if (!string.IsNullOrEmpty(whereClause))
            {
                string where = whereClause.Replace("is null", " = (.)").Replace("is not null", "    (.)");
                bool isBoolean = false;
                int result = 0;
                string s = string.Empty;
                string[] expStrings = where.Split( CxNull);

                for (int i = 0; i < expStrings.Length; i++)
                {
                    if (string.IsNullOrEmpty(expStrings[i]))
                    {
                        s = string.Empty;
                    }
                    else if (Regex.IsMatch(expStrings[i], @"[()=]"))
                    {
                        s = expStrings[i];
                    }
                    else if (expStrings[i] == "  ")
                    {
                        s = expStrings[i];
                    }
                    else if (expStrings[i].Equals("and", StringComparison.CurrentCultureIgnoreCase) || expStrings[i].Equals("or", StringComparison.CurrentCultureIgnoreCase))
                    {
                        s = expStrings[i];
                    }
                    else if (!int.TryParse(expStrings[i], out result))        
                    {
                        s = expStrings[i].ToString();
                        /*
                        s = expStrings[i];
                        IVariable var = null;
                        try
                        {
                            var = pContext.MemoryRegion.GetVariable(s);
                        }
                        catch
                        {
                            var = null;
                        }
                        if (var != null)                    
                        {
                            isBoolean = (var.DataType == DataType.Boolean || var.DataType == DataType.YesNo);
                        }
                        else
                        {
                            s = expStrings[i].ToString();
                        }*/
                    }
                    else if (isBoolean && int.TryParse(expStrings[i], out result))
                    {
                        if (result == 0)
                        {
                            s = "(-)";
                        }
                        if (result == 1)
                        {
                            s = "(+)";
                        }
                        isBoolean = false;
                    }
                    else
                    {
                        s = expStrings[i].ToString();
                    }
                    if (!string.IsNullOrEmpty(expression))
                    {
                        expression += " ";
                    }
                    expression += s;
                }

            }
            return expression;
        }




    }
}

 