using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using Epi.Collections;
using System.ComponentModel.Design;

namespace Epi.Analysis
{



    public class AnalysisEngine : ModuleBase, IProjectHost
    {

        //Private Attributes

        private Project currentProject;
        //Private Attributes

        //Constructors



        public AnalysisEngine()
        {
        }






        public AnalysisEngine(IModuleManager moduleManager, ICommandLine commandLine)
        {
            Load(moduleManager, commandLine);
        }

        //Constructors

        //Public Properties



        public Project CurrentProject
        {
            get
            {
                return currentProject;
            }
            set
            {
                currentProject = value;
            }

        }

        /*



        public AnalysisCommandProcessor Processor
        {
            get
            {
                return this.processor;
            }
        }*/
        //Public Properties

        //Protected Properties



        protected override string ModuleName
        {
            get { return "Analysis Engine"; }
        }
        //Protected Properties

        //Protected Methods






        protected override void Load(IModuleManager moduleManager, ICommandLine commandLine)
        {
            base.Load(moduleManager, commandLine);


        }



        protected override void Unload()
        {
            base.OnUnloaded();
        }
        //Protected Methods

        //Public Methods













        [System.Diagnostics.DebuggerStepThrough()]
        public override object GetService(Type serviceType)
        {
            if (serviceType == this.GetType())
            {
                return this;
            }
            else if (serviceType == typeof(IProjectHost))
            {
                return this;
            }
                /*
            else if (serviceType == typeof(Session))
            {
                return this.Processor.Session;
            }
            else if (serviceType == typeof(AnalysisCommandProcessor) || serviceType == typeof(ICommandProcessor))
            {
                return this.Processor;
            }*/
            else
            {
                return base.GetService(serviceType);
            }
        }






        public Project CreateProject(string projectPath)
        {
            Project project = null;

            if (FileExtensions.HasExtension(projectPath, FileExtensions.MDB))
            {
                throw new NotImplementedException(SharedStrings.EPI3_PROJECTS);
            }
            else
            {
                project = new Project(projectPath);
                if (project == null)
                {
                    throw new GeneralException(SharedStrings.INVALID_PROJECT_FILE);
                }
            }
            return project;
        }

        //Public Methods

    }
}
 