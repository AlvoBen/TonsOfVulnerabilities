using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Text;
using Epi.Analysis;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class MatchDialog : CommandDesignDialog
 {
  //Constructor




        [Obsolete("Use of default constructor not allowed", true)]
  public MatchDialog()
  {
   InitializeComponent();
  }





        public MatchDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
  {
   InitializeComponent();
            Construct();
  }
  //Constructors

        //Private Properties

        string strExposure = "";
        string strOutcome = "";
        string strWeight = "";

        //Private Properties


        //Private Methods

        private void Construct()
        {
            if (!this.DesignMode)
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
        }
        //Private Methods

        //Event Handlers
        private void btnClear_Click(object sender, System.EventArgs e)
        {
            cmbOutcomeVar.Items.Clear();
            cmbExpVar.Items.Clear();
            cmbWeight.Items.Clear();
            lbxMatchVars.Items.Clear();
            MatchDialog_Load(this, null);
        }






        private void SomethingChanged(object sender, EventArgs e)
        {
            CheckForInputSufficiency();
        }






        private void cmbOutcomeVar_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbOutcomeVar.SelectedIndex >= 0)
            {

                string strOld = strOutcome;
                string strNew = cmbOutcomeVar.Text;


                if ((strOld.Length != 0) && (strOld != strNew))
                {


                    cmbExpVar.Items.Add(strOld);
                    cmbMatchVar.Items.Add(strOld);
                    cmbWeight.Items.Add(strOld);
                }


                strOutcome = strNew;

                cmbExpVar.Items.Remove(strNew);
                cmbMatchVar.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
            }

            CheckForInputSufficiency();
        }






        private void cmbExpVar_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbExpVar.SelectedIndex >= 0)
            {

                string strOld = strExposure;
                string strNew = cmbExpVar.Text;


                if ((strOld.Length != 0) && (strOld != strNew))
                {

                    cmbOutcomeVar.Items.Add(strOld);

                    cmbMatchVar.Items.Add(strOld);
                    cmbWeight.Items.Add(strOld);
                }


                strExposure = strNew;
                cmbOutcomeVar.Items.Remove(strNew);

                cmbMatchVar.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
            }
            CheckForInputSufficiency();
        }






        private void MatchDialog_Load(object sender, EventArgs e)
        {
            VariableType scopeWord = VariableType.DataSource | VariableType.DataSourceRedefined |
                                     VariableType.Standard | VariableType.Global | VariableType.Permanent;
            FillVariableCombo(cmbOutcomeVar, scopeWord);
            cmbOutcomeVar.SelectedIndex = -1;
            FillVariableCombo(cmbExpVar, scopeWord);
            cmbExpVar.SelectedIndex = -1;
            FillVariableCombo(cmbMatchVar, scopeWord);
            cmbExpVar.SelectedIndex = -1;
            FillVariableCombo(cmbWeight, scopeWord);
            cmbWeight.SelectedIndex = -1;
        }







        private void lbxMatchVars_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbxMatchVars.SelectedIndex >= 0)   
            {
                string s = this.lbxMatchVars.SelectedItem.ToString();
                lbxMatchVars.Items.Remove(s);

                char[] cTrimParens = { '[', ']' };
                s = s.Trim(cTrimParens);
                cmbExpVar.Items.Add(s);
                cmbOutcomeVar.Items.Add(s);
                cmbWeight.Items.Add(s);
                cmbMatchVar.Items.Add(s);
                CheckForInputSufficiency();
            }
        }
        private void cmbMatchVar_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbMatchVar.Text != string.Empty)
            {
                string s = cmbMatchVar.Text;
                lbxMatchVars.Items.Add(FieldNameNeedsBrackets(s) ? Util.InsertInSquareBrackets(s) : s);
                cmbExpVar.Items.Remove(s);
                cmbOutcomeVar.Items.Remove(s);
                cmbMatchVar.Items.Remove(s);
                cmbWeight.Items.Remove(s);
                CheckForInputSufficiency();
            }

        }

        //

        //Protected Methods





        protected override bool ValidateInput()
        {
            base.ValidateInput();
            if (string.IsNullOrEmpty(cmbOutcomeVar.Text.Trim()))
            {
                ErrorMessages.Add(SharedStrings.EMPTY_VARNAME);
            }
            if (string.IsNullOrEmpty(this.cmbExpVar.Text.Trim()))
            {
                ErrorMessages.Add(SharedStrings.EMPTY_VARNAME);
            }
            if (this.cbxMatch.Checked && lbxMatchVars.Items.Count < 1)
            {
                ErrorMessages.Add(SharedStrings.EMPTY_VARNAME);
            }
            return (ErrorMessages.Count == 0);
        }




        protected override void GenerateCommand()
        {
            StringBuilder sb = new StringBuilder();

            if (cbxMatch.Checked)
            {
                sb.Append(CommandNames.MATCH);
            }
            else
            {
                sb.Append(CommandNames.TABLES);
            }
            sb.Append(StringLiterals.SPACE);
            sb.Append(cmbExpVar.Text);
            sb.Append(StringLiterals.SPACE);
            sb.Append(FieldNameNeedsBrackets(cmbOutcomeVar.Text) ? Util.InsertInSquareBrackets(cmbOutcomeVar.Text) : cmbOutcomeVar.Text);
            sb.Append(StringLiterals.SPACE);
            if (cbxMatch.Checked)
            {
                sb.Append(CommandNames.MATCHVAR);
                sb.Append(StringLiterals.EQUAL);
                foreach (string s in lbxMatchVars.Items)
                {
                    sb.Append(s);
                    sb.Append(StringLiterals.SPACE);
                }
            }
            else if (lbxMatchVars.Items.Count > 0)
            {
                sb.Append(CommandNames.STRATAVAR);
                sb.Append(StringLiterals.EQUAL);
                foreach (string s in this.lbxMatchVars.Items)
                {
                    sb.Append(s);
                    sb.Append(StringLiterals.SPACE);
                }
            }

            CommandText = sb.ToString();
        }




        public override void CheckForInputSufficiency()
        {
            bool inputValid = ValidateInput();
            btnOK.Enabled = inputValid;
            btnSaveOnly.Enabled = inputValid;
        }
        //Protected Methods

    }
}
 