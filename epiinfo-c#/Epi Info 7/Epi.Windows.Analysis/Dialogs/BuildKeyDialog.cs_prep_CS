using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Text;
using Epi.Analysis;
using Epi.Collections;
using Epi.Core.AnalysisInterpreter;
using Epi.Data;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{
    public         class BuildKeyDialog : CommandDesignDialog
    {
        //Private Members
        string relatedTable = string.Empty;
        private object selectedDataSource = null;
        List relatedFields = new List();
        List currentFields = new List();

        List relatedFields2 = new List();
        List currentFields2 = new List();

        bool LoadIsFinished = false;



        public string key = string.Empty;
        //

        //Public Properties



        public string RelatedTable
        {
            get
            {
                return relatedTable;
            }

            set
            {
                relatedTable = value;
            }
        }




        public object SelectedDataSource
        {
            get
            {
                return selectedDataSource;
            }
            set
            {
                selectedDataSource = value;
            }
        }




        public string Key
        {
            get
            {
                return key;
            }

            set
            {
                key = value;
            }
        }
        //

        //Constructors



        [Obsolete("Use of default constructor not allowed", true)]
        public BuildKeyDialog()
        {
            InitializeComponent();
        }




        public BuildKeyDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
        {
            InitializeComponent();
            Construct();

        }

        private void Construct()
        {
            if (!this.DesignMode)
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);

            }
        }
        //

        //Event Handlers
        private void ClickHandler(object sender, System.EventArgs e)
        {
            ToolStripButton btn = (ToolStripButton)sender;
            txtKeyComponent.Text += StringLiterals.SPACE;
            if ((string)btn.Tag == null)
            {
                txtKeyComponent.Text += btn.Text;
            }
            else
            {
                txtKeyComponent.Text += (string)btn.Tag;
            }
            txtKeyComponent.Text += StringLiterals.SPACE;
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            txtKeyComponent.Text = string.Empty;
            currentFields.Clear();
            relatedFields.Clear();
            currentFields2.Clear();
            relatedFields2.Clear();

        }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/classic-analysis/How-to-Manage-Data-Use-the-MERGE-Command.html");
        }


        private void BuildKeyDialog_Load(object sender, EventArgs e)
        {
            if (SelectedDataSource != null)
            {
                if (SelectedDataSource is IDbDriver)
                {
                    IDbDriver db = SelectedDataSource as IDbDriver;
                    relatedFields = db.GetTableColumnNames(RelatedTable);

                }
                else if (SelectedDataSource is Project)
                {
                    Project project = SelectedDataSource as Project;

                    if(project.Views.Exists(relatedTable))
                    {
                        foreach(Epi.Fields.IField field in project.Views[RelatedTable].Fields)
                        {
                            relatedFields.Add(field.Name);
                        }
                    }
                    else
                    {
                        relatedFields = project.GetTableColumnNames(RelatedTable);
                    }
                }
                if (this.EpiInterpreter.Context.DataSet != null)
                {
                    foreach (DataColumn column in this.EpiInterpreter.Context.DataSet.Tables["Output"].Columns)
                    {
                        currentFields.Add(column.ColumnName);
                    }
                }
                currentFields.Sort();
            }


            relatedFields.Sort();
            currentFields.Sort();


            lbxRelatedTableFields.DataSource = relatedFields;

            lbxCurrentTableFields.DataSource = currentFields;

            lbxCurrentTableFields.SelectedIndex = -1;
            lbxRelatedTableFields.SelectedIndex = -1;
            this.LoadIsFinished = true;

        }




















































        protected override void btnOK_Click(object sender, EventArgs e)
        {
            if (currentFields2.Count == relatedFields2.Count)
            {
                StringBuilder builtKey = new StringBuilder();
                for (int i = 0; i < currentFields2.Count; i++)
                {
                    if (i > 0)
                    {
                        builtKey.Append(StringLiterals.SPACE);
                        builtKey.Append("AND");
                        builtKey.Append(StringLiterals.SPACE);
                    }
                    builtKey.Append(currentFields2[i]);
                    builtKey.Append(StringLiterals.SPACE);
                    builtKey.Append(StringLiterals.COLON);
                    builtKey.Append(StringLiterals.COLON);
                    builtKey.Append(StringLiterals.SPACE);
                    builtKey.Append(relatedFields2[i]);
                }
                this.Key = builtKey.ToString();
                this.DialogResult = DialogResult.OK;
                this.Hide();
            }
            else
            {
                MsgBox.ShowError(SharedStrings.ERROR_RELATE_KEYS);
            }
        }
        //

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {



















        }

        private void lbxRelatedTableFields_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.LoadIsFinished &&
                lbxCurrentTableFields.SelectedIndex != -1 &&
                lbxRelatedTableFields.SelectedIndex != -1
                )
            {

                string strSelectedVar = lbxCurrentTableFields.SelectedItem.ToString();
                AddLabel.Text = FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar;


                AddLabel.Text += StringLiterals.SPACE;
                AddLabel.Text += " = ";
                AddLabel.Text += StringLiterals.SPACE;

                strSelectedVar = lbxRelatedTableFields.SelectedItem.ToString();
                AddLabel.Text += FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar;
            }
            else
            {
                AddLabel.Text = "";
            }
        }

        private void lbxCurrentTableFields_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.LoadIsFinished &&
                lbxCurrentTableFields.SelectedIndex != -1 &&
                lbxRelatedTableFields.SelectedIndex != -1)
            {

                string strSelectedVar = lbxCurrentTableFields.SelectedItem.ToString();
                AddLabel.Text = FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar;


                AddLabel.Text += StringLiterals.SPACE;
                AddLabel.Text += " = ";
                AddLabel.Text += StringLiterals.SPACE;

                strSelectedVar = lbxRelatedTableFields.SelectedItem.ToString();
                AddLabel.Text += FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar;
            }
            else
            {
                AddLabel.Text = "";
            }
        }

        private void BackCommandButton_Click(object sender, EventArgs e)
        {

            if(txtKeyComponent.Text.Length > 0)
            {
                txtKeyComponent.Text = txtKeyComponent.Text.Remove(txtKeyComponent.Text.Length - 1);
            }
        }

        private void EraseWordCommandButton_Click(object sender, EventArgs e)
        {
            if (txtKeyComponent.Text.Length > 0 && txtKeyComponent.Text.LastIndexOf(" ") > 0)
            {
                txtKeyComponent.Text = txtKeyComponent.Text.Remove(txtKeyComponent.Text.LastIndexOf(" "));
            }
        }

        private void AddCommandButton_Click(object sender, EventArgs e)
        {
            if (lbxCurrentTableFields.SelectedIndex != -1 &&
                lbxRelatedTableFields.SelectedIndex != -1 )
            {



                string strSelectedVar = lbxCurrentTableFields.SelectedItem.ToString();
                currentFields2.Add(FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar);
                txtKeyComponent.AppendText(FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar);
                lbxCurrentTableFields.SelectedIndex = -1;


                txtKeyComponent.AppendText(StringLiterals.SPACE);
                txtKeyComponent.AppendText(" = ");
                /*
                switch (this.listBox1.Text)
                {
                    case "\"Yes\"":
                        txtKeyComponent.Text += "(+)";
                        break;
                    case "\"No\"":
                        txtKeyComponent.Text += "(-)";
                        break;
                    case "\"Missing\"":
                        txtKeyComponent.Text += "(.)";
                        break;
                    default:
                        txtKeyComponent.Text += this.listBox1.Text;
                        break;
                }*/

                txtKeyComponent.AppendText(StringLiterals.SPACE);

                strSelectedVar = lbxRelatedTableFields.SelectedItem.ToString();
                relatedFields2.Add(FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar);
                txtKeyComponent.AppendText(FieldNameNeedsBrackets(strSelectedVar) ? Util.InsertInSquareBrackets(strSelectedVar) : strSelectedVar);
                lbxRelatedTableFields.SelectedIndex = -1;

                txtKeyComponent.AppendText("\n");

                AddLabel.Text = "";
            }


        }

        //Private Methods

        //


    }
}
 