using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Data;
using Epi.Analysis;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class MeansDialog : CommandDesignDialog
 {
        private string SetClauses = null;

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public MeansDialog()
        {
            InitializeComponent();
            Construct();
        }





        public MeansDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
        {
            InitializeComponent();
            Construct();
        }

        private void Construct()
        {
            if (!this.DesignMode)           
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
















        }
        //Constructors

        //Private Properties

        private string strMeansOf = "*";
        private string strCrossTab = "";
        private string strWeight = "";
        private string strStrata = "";

        //Private Properties

        //Private Methods

        //

        //Public Methods



        public override void CheckForInputSufficiency()
        {
            bool inputValid = ValidateInput();
            btnOK.Enabled = inputValid;
            btnSaveOnly.Enabled = inputValid;
        }
        //Public Methods

        //Event Handlers





        private void btnClear_Click(object sender, System.EventArgs e)
        {
            cmbMeansOf.Items.Clear();
            cmbMeansOf.Text = string.Empty;
            cmbStratifyBy.Items.Clear();
            cmbCrossTab.Items.Clear();
            cmbCrossTab.Text = string.Empty;
            cmbWeight.Items.Clear();
            cmbWeight.Text = string.Empty;
            txtOutput.Text = string.Empty;
            lbxStratifyBy.Items.Clear();
            MeansDialog_Load(this, null);
        }






        private void cmbMeansOf_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbMeansOf.SelectedIndex >= 0)   
            {

                string strOld = strMeansOf;
                string strNew = cmbMeansOf.Text;

                if (!strOld.Equals(StringLiterals.STAR))
                {

                    if ((strOld.Length != 0) && (strOld != strNew))
                    {


                        cmbCrossTab.Items.Add(strOld);
                        cmbStratifyBy.Items.Add(strOld);
                        cmbWeight.Items.Add(strOld);
                    }
                }

                strMeansOf = strNew;

                cmbCrossTab.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
            }

            CheckForInputSufficiency();

        }






        private void cmbStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbStratifyBy.SelectedIndex >= 0)
            {
                string strNew = cmbStratifyBy.Text;

                cmbMeansOf.Items.Remove(strNew);
                cmbCrossTab.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
                lbxStratifyBy.Items.Add(FieldNameNeedsBrackets(strNew) ? Util.InsertInSquareBrackets(strNew) : strNew);
            }
        }






        private void MeansDialog_Load(object sender, EventArgs e)
        {
            VariableType scopeWord = VariableType.DataSource | VariableType.DataSourceRedefined |
                                                    VariableType.Standard;
            FillVariableCombo(cmbMeansOf, scopeWord);


            cmbMeansOf.SelectedIndex = -1;
            FillVariableCombo(cmbCrossTab, scopeWord);
            cmbCrossTab.SelectedIndex = -1;
            FillVariableCombo(cmbStratifyBy, scopeWord);
            cmbStratifyBy.SelectedIndex = -1;
            FillVariableCombo(cmbWeight, scopeWord,DataType.Boolean | DataType.YesNo | DataType.Number );
            cmbWeight.SelectedIndex = -1;

            CheckForInputSufficiency();
        }








        private void lbxStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbxStratifyBy.SelectedIndex >= 0)   
            {
                string s = this.lbxStratifyBy.SelectedItem.ToString();
                lbxStratifyBy.Items.Remove(s);

                char[] cTrimParens = { '[', ']' };
                s = s.Trim(cTrimParens);
                cmbMeansOf.Items.Add(s);
                cmbStratifyBy.Items.Add(s);
                cmbCrossTab.Items.Add(s);
                cmbWeight.Items.Add(s);
            }
        }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-means.html");
        }

        //

        //Protected Methods



        protected override void GenerateCommand()
        {
            string s;
            StringBuilder sb = new StringBuilder();
            sb.Append(CommandNames.MEANS);
            sb.Append(StringLiterals.SPACE);
            s = FieldNameNeedsBrackets(cmbMeansOf.Text) ? Util.InsertInSquareBrackets(cmbMeansOf.Text) : cmbMeansOf.Text;
            sb.Append((s==string.Empty)? "*" : s);
            sb.Append(StringLiterals.SPACE);
            if (!string.IsNullOrEmpty(cmbCrossTab.Text))
            {
                sb.Append(FieldNameNeedsBrackets(cmbCrossTab.Text) ? Util.InsertInSquareBrackets(cmbCrossTab.Text) : cmbCrossTab.Text);
                sb.Append(StringLiterals.SPACE);
            }

            if (lbxStratifyBy.Items.Count > 0)
            {
                sb.Append(CommandNames.STRATAVAR);
                sb.Append(StringLiterals.EQUAL);
                foreach (string item in lbxStratifyBy.Items)
                {
                    sb.Append(item);
                    sb.Append(StringLiterals.SPACE);
                }
            }
            if (!string.IsNullOrEmpty(cmbWeight.Text))
            {
                sb.Append( CommandNames.WEIGHTVAR );
                sb.Append( StringLiterals.EQUAL );
                sb.Append(FieldNameNeedsBrackets(cmbWeight.Text) ? Util.InsertInSquareBrackets(cmbWeight.Text) : cmbWeight.Text);
                sb.Append(StringLiterals.SPACE);
            }

            if (!string.IsNullOrEmpty(txtOutput.Text))
            {
                sb.Append(CommandNames.OUTTABLE);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(txtOutput.Text);
                sb.Append(StringLiterals.SPACE);
            }

            /*
            if (!string.IsNullOrEmpty(this.SetClauses))
            {
                sb.Append(this.SetClauses);
            }*/

            CommandText = sb.ToString();
        }





        protected override bool ValidateInput()
        {
            base.ValidateInput();
            if (cmbMeansOf.SelectedIndex == -1)
            {
                ErrorMessages.Add(SharedStrings.MUST_SELECT_TERMS);
            }

            return (ErrorMessages.Count == 0);
        }


        //

        private void btnSettings_Click(object sender, EventArgs e)
        {
            SetDialog SD = new SetDialog((Epi.Windows.Analysis.Forms.AnalysisMainForm)mainForm);
            SD.isDialogMode = true;
            SD.ShowDialog();
            SetClauses = SD.CommandText;
            SD.Close();
        }

        private void cmbWeight_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = strWeight;
            string strNew = cmbWeight.Text;


            if ((strOld.Length != 0) && strOld != strNew)
            {

                cmbMeansOf.Items.Add(strOld);
                cmbCrossTab.Items.Add(strOld);
                cmbStratifyBy.Items.Add(strOld);

            }


            strWeight = strNew;
            cmbMeansOf.Items.Remove(strNew);
            cmbCrossTab.Items.Remove(strNew);
            cmbStratifyBy.Items.Remove(strNew);


        }

        private void cmbCrossTab_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbCrossTab.SelectedIndex >= 0)   
            {

                string strOld = strCrossTab;
                string strNew = cmbCrossTab.Text;


                if (strOld != strNew)
                {

                    cmbMeansOf.Items.Add(strOld);

                    cmbStratifyBy.Items.Add(strOld);
                    cmbWeight.Items.Add(strOld);
                }


                strCrossTab = strNew;
                cmbMeansOf.Items.Remove(strNew);

                cmbStratifyBy.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
            }
        }

        private void cmbCrossTab_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                string s = cmbCrossTab.Text.ToString();

                cmbCrossTab.Text = "";
                cmbCrossTab.SelectedIndex = -1;
            }

        }

        private void cmbWeight_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {
                string s = cmbWeight.Text.ToString();

                cmbWeight.Text = "";
                cmbWeight.SelectedIndex = -1;
            }
        }
    }
}

 