using System;
using System.Data;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Text;
using Epi.Analysis;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class ComplexSampleMeansDialog : CommandDesignDialog
 {
        private string SetClauses = null;

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public ComplexSampleMeansDialog()
        {
            InitializeComponent();
            Construct();
        }





        public ComplexSampleMeansDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
        {
            InitializeComponent();
            Construct();
        }

        private void Construct()
        {
            if (!this.DesignMode)           
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
















        }
        //Constructors

        //Private Properties

        private string txtMeansOf = string.Empty;
        private string txtCrossTab = string.Empty;
        private string txtWeight = string.Empty;
        private string txtPSU = string.Empty;
        private string txtStratifyBy = string.Empty;

        //Private Properties

        //Private methods

        //

        //Public Methods



        public override void CheckForInputSufficiency()
        {
            bool inputValid = ValidateInput();
            btnOK.Enabled = inputValid;
            btnSaveOnly.Enabled = inputValid;
        }
        //Public Methods

        //Event Handlers





        private void btnClear_Click(object sender, System.EventArgs e)
        {
            cmbMeansOf.Items.Clear();
            cmbMeansOf.Text = string.Empty;
            cmbStratifyBy.Items.Clear();
            cmbCrossTab.Items.Clear();
            cmbCrossTab.Text = string.Empty;
            cmbWeight.Items.Clear();
            cmbWeight.Text = string.Empty;
            cmbPSU.Text = string.Empty;
            txtOutput.Text = string.Empty;

            ComplexSampleMeansDialog_Load(this, null);
        }






        private void cmbStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbStratifyBy.Text != StringLiterals.SPACE)
            {

                string strOld = txtStratifyBy;
                string strNew = cmbStratifyBy.Text;

                if ((strOld.Length > 0) && (strOld != strNew))
                {
                    cmbMeansOf.Items.Add(strOld);
                    cmbCrossTab.Items.Add(strOld);

                    cmbWeight.Items.Add(strOld);
                    cmbPSU.Items.Add(strOld);
                }
                if (cmbStratifyBy.SelectedIndex >= 0)

                cmbMeansOf.Items.Remove(strNew);
                cmbCrossTab.Items.Remove(strNew);

                cmbWeight.Items.Remove(strNew);
                cmbPSU.Items.Remove(strNew);
                this.txtStratifyBy = strNew;
            }
        }






        private void ComplexSampleMeansDialog_Load(object sender, EventArgs e)
        {
            VariableType scopeWord = VariableType.DataSource | VariableType.DataSourceRedefined |
                                                    VariableType.Standard;
            FillVariableCombo(cmbMeansOf, scopeWord);
            cmbMeansOf.SelectedIndex = -1;
            FillVariableCombo(cmbCrossTab, scopeWord);
            cmbCrossTab.SelectedIndex = -1;
            FillVariableCombo(cmbStratifyBy, scopeWord);
            cmbStratifyBy.SelectedIndex = -1;
            FillVariableCombo(cmbWeight, scopeWord,DataType.Boolean | DataType.YesNo | DataType.Number );
            cmbWeight.SelectedIndex = -1;
            FillVariableCombo(cmbPSU, scopeWord);
            cmbStratifyBy.SelectedIndex = -1;
        }








        private void lbxStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbxStratifyBy.SelectedIndex >= 0)   
            {
                string s = this.lbxStratifyBy.SelectedItem.ToString();
                cmbMeansOf.Items.Add(s);
                cmbCrossTab.Items.Add(s);
                cmbStratifyBy.Items.Add(s);
                cmbWeight.Items.Add(s);
                cmbPSU.Items.Add(s);
                lbxStratifyBy.Items.Remove(s);
            }
        }







        private void cmbWeight_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {

                cmbWeight.Text = "";
                cmbWeight.SelectedIndex = -1;
            }
        }









        private void btnSettings_Click(object sender, EventArgs e)
        {
            SetDialog SD = new SetDialog((Epi.Windows.Analysis.Forms.AnalysisMainForm)mainForm);
            SD.isDialogMode = true;
            SD.ShowDialog();
            SetClauses = SD.CommandText;
            SD.Close();
        }






        private void cmbMeansOf_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbMeansOf.SelectedIndex >= 0)
            {
                string s = txtMeansOf;
                if ((s.Length > 0) && (s != cmbMeansOf.Text))
                {

                    cmbCrossTab.Items.Add(s);
                    cmbStratifyBy.Items.Add(s);
                    cmbWeight.Items.Add(s);
                    cmbPSU.Items.Add(s);
                }
                s = this.cmbMeansOf.SelectedItem.ToString();

                cmbCrossTab.Items.Remove(s);
                cmbStratifyBy.Items.Remove(s);
                cmbWeight.Items.Remove(s);
                cmbPSU.Items.Remove(s);
                this.txtMeansOf = s;
            }
            CheckForInputSufficiency();
        }







        private void cmbMeansOf_Click(object sender, EventArgs e)
        {
            txtMeansOf = (cmbMeansOf.SelectedIndex >= 0) ? cmbMeansOf.Text : String.Empty;
        }






        private void cmbCrossTab_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtCrossTab;
            string strNew = cmbCrossTab.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                    cmbMeansOf.Items.Add(strOld);

                    cmbStratifyBy.Items.Add(strOld);
                    cmbWeight.Items.Add(strOld);
                    cmbPSU.Items.Add(strOld);
            }

            if (cmbCrossTab.SelectedIndex>=0)
            {
                cmbMeansOf.Items.Remove(strNew);

                cmbStratifyBy.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
                cmbPSU.Items.Remove(strNew);
                this.txtCrossTab = strNew;
            }
        }







        private void cmbCrossTab_Click(object sender, EventArgs e)
        {
            txtCrossTab = (cmbCrossTab.SelectedIndex >= 0) ? cmbCrossTab.Text : String.Empty;
        }








        private void cmbCrossTab_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {

                cmbCrossTab.Text = "";
                cmbCrossTab.SelectedIndex = -1;
            }
        }







        private void cmbWeight_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtWeight;
            string strNew = cmbWeight.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                cmbMeansOf.Items.Add(strOld);
                cmbCrossTab.Items.Add(strOld);
                cmbStratifyBy.Items.Add(strOld);

                cmbPSU.Items.Add(strOld);
            }

            if (cmbWeight.SelectedIndex >= 0)
            {
                cmbMeansOf.Items.Remove(strNew);
                cmbCrossTab.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);

                cmbPSU.Items.Remove(strNew);
                this.txtWeight = strNew;
            }
        }








        private void cmbWeight_Click(object sender, EventArgs e)
        {
            txtWeight = (cmbWeight.SelectedIndex >= 0) ? cmbWeight.Text : String.Empty;
        }






        private void cmbPSU_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbPSU.SelectedIndex >= 0)
            {
                string s = txtPSU;
                if ((s.Length > 0) && (s != cmbPSU.Text))
                {
                    cmbMeansOf.Items.Add(s);
                    cmbCrossTab.Items.Add(s);
                    cmbStratifyBy.Items.Add(s);
                    cmbWeight.Items.Add(s);

                }
                s = this.cmbPSU.SelectedItem.ToString();
                cmbMeansOf.Items.Remove(s);
                cmbCrossTab.Items.Remove(s);
                cmbStratifyBy.Items.Remove(s);
                cmbWeight.Items.Remove(s);

                this.txtPSU = s;
            }
            CheckForInputSufficiency();
        }







        private void cmbPSU_Click(object sender, EventArgs e)
        {
            txtPSU = (cmbPSU.SelectedIndex >= 0) ? cmbPSU.Text : String.Empty;
        }







        private void txtNumCol_KeyPress(object sender, KeyPressEventArgs e)
        {
            string keyInput = e.KeyChar.ToString();
            if (e.KeyChar.ToString().Equals("\b"))
            {

            }
            else if (e.KeyChar.Equals(Keys.Delete))
            {

            }
            else if (e.KeyChar.ToString().Equals("0"))
            {
                if (txtNumCol.TextLength == 0) e.Handled = true;
            }
            else if ((txtNumCol.TextLength <= 1) && (Char.IsDigit(e.KeyChar)))
            {

            }
            else
            {
                e.Handled = true;
            }
        }







        private void txtNumCol_Leave(object sender, EventArgs e)
        {
            if (txtNumCol.Text.Equals("0")) txtNumCol.Text = "";
        }







        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-means.html");
        }

        //

        //Protected Methods



        protected override void GenerateCommand()
        {
            StringBuilder command = new StringBuilder ();
            command.Append(CommandNames.MEANS);
            command.Append(StringLiterals.SPACE);
            command.Append(cmbMeansOf.Text);
            if (cmbCrossTab.SelectedIndex >= 0)
            {
                command.Append(StringLiterals.SPACE);
                command.Append(cmbCrossTab.Text);
            }


            if (cmbStratifyBy.SelectedIndex >= 0)
            {
                command.Append(StringLiterals.SPACE);
                command.Append(CommandNames.STRATAVAR);
                command.Append(StringLiterals.EQUAL);
                command.Append(cmbStratifyBy.Text);
                /*
                foreach (string item in lbxStratifyBy.Items)
                {
                    command.Append(item);
                    command.Append(StringLiterals.SPACE);
                }
                */
            }

            if (cmbWeight.SelectedIndex >= 0)
            {
                command.Append(StringLiterals.SPACE);
                command.Append(CommandNames.WEIGHTVAR);
                command.Append( StringLiterals.EQUAL );
                command.Append( cmbWeight.Text );
            }

            if (!string.IsNullOrEmpty(txtOutput.Text))
            {
                command.Append(StringLiterals.SPACE);
                command.Append(CommandNames.OUTTABLE);
                command.Append(StringLiterals.EQUAL);
                command.Append(txtOutput.Text);
            }

            if (!string.IsNullOrEmpty(this.SetClauses))
            {
                command.Append(StringLiterals.SPACE);
                command.Append(this.SetClauses);
            }

            command.Append(StringLiterals.SPACE);
            command.Append(CommandNames.PSUVAR);
            command.Append(StringLiterals.EQUAL);
            command.Append(cmbPSU.Text);

            if (txtNumCol.TextLength > 0)
            {
                command.Append(StringLiterals.SPACE);
                command.Append(CommandNames.COLUMNSIZE);
                command.Append(StringLiterals.EQUAL);
                command.Append(txtNumCol.Text);
            }
            if (cbxNoLineWrap.Checked)
            {
                command.Append(StringLiterals.SPACE);
                command.Append(CommandNames.NOWRAP);
            }

            CommandText = command.ToString();
        }





        protected override bool ValidateInput()
        {
            base.ValidateInput();

            if (this.cmbMeansOf.SelectedIndex == -1 )
            {
                ErrorMessages.Add(SharedStrings.SELECT_VARIABLE);
            }
            if (this.cmbPSU.SelectedIndex == -1)
            {
                ErrorMessages.Add(SharedStrings.MUST_SELECT_PSU);
            }






            return (ErrorMessages.Count == 0);
        }

        //
    }
}

 