using System;
using System.Data;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using Epi;
using Epi.Analysis;
using Epi.Windows;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class SortDialog : CommandDesignDialog
 {
  //Private Class Members

  //

  //Constructor




        [Obsolete("Use of default constructor not allowed", true)]
  public SortDialog()
  {
   InitializeComponent();
  }





        public SortDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
  {
            InitializeComponent();
            Construct();
        }
  //Constructors

        //Public Methods



        public override void CheckForInputSufficiency()
        {
            bool inputValid = ValidateInput();
            btnOK.Enabled = inputValid;
            btnSaveOnly.Enabled = inputValid;
        }

        //

        //Protected Methods




  protected override bool ValidateInput()
  {
   base.ValidateInput ();
   if (lbxSortVar.Items.Count == 0 )
   {
    ErrorMessages.Add(SharedStrings.NO_SORT_VARIABLES_SELECTED);
   }
   return (ErrorMessages.Count == 0);
  }



  protected override void GenerateCommand()
  {
   WordBuilder command = new WordBuilder();

   command.Append(CommandNames.SORT);
   foreach (string item in lbxSortVar.Items)
   {
    command.Append(item.Substring(0,item.Length - 4));;

    if (item.EndsWith(StringLiterals.HYPHEN + StringLiterals.PARANTHESES_CLOSE))
    {
     command.Append(CommandNames.DESCENDING);
    }
   }
   CommandText = command.ToString();
  }

  //

  //Event Handlers





  private void btnClear_Click(object sender, System.EventArgs e)
  {
            VariableType scopeWord = VariableType.DataSource | VariableType.Standard |
                          VariableType.Global;  
            FillVariableListBox(lbxAvailableVar, scopeWord);  


            lbxSortVar.Items.Clear();
   CheckForInputSufficiency();

  }





  private void lbxAvailableVar_DoubleClick(object sender, System.EventArgs e)
  {

            if (lbxAvailableVar.Items.Count > 0)
   {
                string strSortDirection = String.Empty;
                if (rdbAscending.Checked)
                {
                    strSortDirection = StringLiterals.ASCENDING;
                }
                else if (rdbDescending.Checked)
                {
                    strSortDirection = StringLiterals.DESCENDING;
                }

                if (lbxAvailableVar.SelectedItem != null)
                {
                    string strAvailableVar = FieldNameNeedsBrackets(lbxAvailableVar.SelectedItem.ToString()) ? Util.InsertInSquareBrackets(lbxAvailableVar.SelectedItem.ToString()) : lbxAvailableVar.SelectedItem.ToString();
           lbxSortVar.Items.Add(strAvailableVar + strSortDirection);
                    lbxAvailableVar.Items.RemoveAt(lbxAvailableVar.SelectedIndex);
    }
    if (lbxSortVar.Items.Count > 0)
    {
     lbxSortVar.SetSelected(lbxSortVar.Items.Count - 1,true);
    }
   }
   CheckForInputSufficiency();
  }






        private void lbxSortVar_DoubleClick(object sender, System.EventArgs e)
        {
            if (lbxSortVar.Items.Count > 0)
            {
                int selectedIndex = lbxSortVar.SelectedIndex;
                string selectedText = lbxSortVar.SelectedItem.ToString();
                selectedText = selectedText.Substring(0, selectedText.IndexOf("("));

                char[] cTrimParens = { '[', ']' };
                selectedText = selectedText.Trim(cTrimParens);
                lbxSortVar.Items.RemoveAt(selectedIndex);
                lbxAvailableVar.Items.Add(selectedText);
                rdbAscending.Checked = true;
                if (lbxSortVar.Items.Count == 0)
                {
                    CheckForInputSufficiency();
                    return;
                }
                else
                {
                    SelectListBoxItem(lbxSortVar.Items.Count - 1);
                }
            }
            CheckForInputSufficiency();
        }






  private void RadioButtonClick(object sender, System.EventArgs e)
  {
   if (lbxSortVar.Items.Count > 0 )
   {
    int selectedIndex = lbxSortVar.SelectedIndex;
    string selectedText = lbxSortVar.SelectedItem.ToString();
    if (rdbAscending.Checked)
    {
     lbxSortVar.Items.RemoveAt(selectedIndex);
     lbxSortVar.Items.Insert(selectedIndex, selectedText.Replace(StringLiterals.HYPHEN + StringLiterals.HYPHEN,StringLiterals.PLUS + StringLiterals.PLUS));
     SelectListBoxItem(selectedIndex);
    }
    else if (rdbDescending.Checked)
    {
     lbxSortVar.Items.RemoveAt(selectedIndex);
     lbxSortVar.Items.Insert(selectedIndex, selectedText.Replace(StringLiterals.PLUS + StringLiterals.PLUS,StringLiterals.HYPHEN + StringLiterals.HYPHEN));
     SelectListBoxItem(selectedIndex);
    }
    else if (rdbRemoveSort.Checked)
    {
                    string removeText = lbxSortVar.SelectedItem.ToString();
                    removeText = removeText.Substring(0, removeText.IndexOf("("));

                    char[] cTrimParens = { '[', ']' };
                    removeText = removeText.Trim(cTrimParens);
                    lbxSortVar.Items.RemoveAt(selectedIndex);
                    lbxAvailableVar.Items.Add(removeText);
     rdbAscending.Checked = true;
     if (lbxSortVar.Items.Count == 0)
     {
      CheckForInputSufficiency();
      return;
     }
     else
     {
      SelectListBoxItem(lbxSortVar.Items.Count - 1);
     }

    }
   }
   CheckForInputSufficiency();
  }
  private void SortDialog_Load(object sender, System.EventArgs e)
  {
            VariableType scopeWord = VariableType.DataSource | VariableType.Standard |
                          VariableType.Global | VariableType.Permanent;


            FillVariableListBox(lbxAvailableVar, scopeWord);
  }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-sort.html");
        }

  //Event Handlers

  //Private Methods


        private void Construct()
        {
            if (!this.DesignMode)
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
        }





  private void SelectListBoxItem(int selectIndex)
  {
   //Input Validation
   if ((selectIndex > lbxSortVar.Items.Count) || (selectIndex < 0))
   {
    throw new ArgumentOutOfRangeException("selectIndex");
   }
   //Input Validation
   lbxSortVar.SetSelected(selectIndex,true);

  }

        /*
        private void LoadSortVariables()
        {
            AnalysisWindowsModule module = this.Module as AnalysisWindowsModule;
            SortCriteria sortCriteria = module.Processor.Session.DataSourceInfo.SortCriteria;
            foreach (IVariable var in sortCriteria)
            {

                string varDisplayName = var.Name;
                SortOrder sortOrder = sortCriteria.GetSortOrderForVariable(var);
                varDisplayName += (sortOrder == SortOrder.Descending) ? "(--)" : "(++)";
                lbxSortVar.Items.Add(varDisplayName);
            }
        }*/
  //Private Methods


 }
}


 