//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Data;
using System.Windows.Forms;
using Epi;
using Epi.Data.Services;
using Epi.Windows.Controls;

// 

namespace Epi.Windows.Analysis.Dialogs
{



    public         class DefineVariableDialog : CommandDesignDialog
 {
  //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
  public DefineVariableDialog()
  {
   InitializeComponent();





  }




        public DefineVariableDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
  {
   InitializeComponent();
            Construct();
  }






        public DefineVariableDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm, bool showSave)
            : base(frm)
        {
            InitializeComponent();
            if (showSave)
            {
                showSaveOnly = true;
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
            Construct();
        }
  //Constructors

        //Private Attributes
        private bool showSaveOnly = false;
        //Private Attributes

        //Public Methods
        //Public Methods

        //Private Methods
        private void Construct()
        {
            if (!this.DesignMode)
            {
                LoadVarTypes();
                this.btnOK.Click += new System.EventHandler( this.btnOK_Click );
            }
        }




        private void RepositionButtons()
        {
            if (btnSaveOnly.Visible)
            {
                int x = btnClear.Left;
                int y = btnClear.Top;
                btnClear.Location = new Point(btnCancel.Left, y);
                btnCancel.Location = new Point(btnOK.Left, y);
                btnOK.Location = new Point(btnSaveOnly.Left, y);
                btnSaveOnly.Location = new Point(x, y);
            }
        }




        private void LoadVarTypes()
        {
            LocalizedComboBox cmb = cmbVarType;
            if (cmb.DataSource == null)
            {
                cmb.Items.Clear();
                cmb.DataSource = AppData.Instance.DataTypesDataTable.DefaultView;
                cmb.DisplayMember = ColumnNames.NAME;
                cmb.ValueMember = ColumnNames.DATATYPEID;
                cmb.SkipTranslation = false;
                cmb.SelectedIndex = -1;
            }


        }

        // 

        //Event Handlers





  private void btnClear_Click(object sender, System.EventArgs e)
  {
   txtVarName.Text = string.Empty;
            cmbVarType.SelectedIndex = -1;
            cmbVarType.SelectedIndex = -1;
            txtDLLObjectDef.Text = string.Empty;
            rdbStandard.Checked = true;
            this.cmbVarType.SelectedItem = null;
  }






  private void txtVarName_Leave(object sender, System.EventArgs e)
  {
            CheckForInputSufficiency();
        }






        private void DefineVariableDialog_Load(object sender, EventArgs e)
        {
            btnSaveOnly.Visible = showSaveOnly;
            if (showSaveOnly)
            {
                RepositionButtons();
            }
        }






        private void txtVarName_TextChanged(object sender, EventArgs e)
        {
            CheckForInputSufficiency();
        }

        private void cmbVarType_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbVarType.Text.Equals("Object"))
            {
                lblDLLObjectDef.Enabled = true;
                txtDLLObjectDef.Enabled = true;
            }
            else
            {
                txtDLLObjectDef.Text = string.Empty;
                lblDLLObjectDef.Enabled = false;
                txtDLLObjectDef.Enabled = false;
            }
            CheckForInputSufficiency();
        }

        private void txtDLLObjectDef_TextChanged(object sender, EventArgs e)
        {
            CheckForInputSufficiency();
        }







        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-define.html");
        }

        //Event Handlers

  //Protected Methods




  protected override bool ValidateInput()
  {
   base.ValidateInput();
            lblVarNameErr.Text = string.Empty;
            lblVarNameErr.Visible = false;
            if (string.IsNullOrEmpty(txtVarName.Text.Trim()))
   {
    ErrorMessages.Add(SharedStrings.EMPTY_VARNAME);
   }
            else
            {
                string strTestForSymbols = txtVarName.Text;
                Regex regex = new Regex("[\\w\\d]", RegexOptions.IgnoreCase);
                string strResultOfSymbolTest = regex.Replace(strTestForSymbols, string.Empty);
                string strMessage = string.Empty;
                if (strResultOfSymbolTest.Length > 0)
                {
                    strMessage = string.Format(SharedStrings.INVALID_CHARS_IN_VAR_NAME, strResultOfSymbolTest);
                    ErrorMessages.Add(strMessage);
                    lblVarNameErr.Text = strMessage;
                    lblVarNameErr.Visible = true;
                }
                if (AppData.Instance.IsReservedWord(txtVarName.Text.Trim()))
                {
                    strMessage = SharedStrings.VAR_NAME_IS_RESERVED;
                    ErrorMessages.Add(strMessage);
                    lblVarNameErr.Text = strMessage;
                    lblVarNameErr.Visible = true;
                }




                if (string.IsNullOrEmpty(txtDLLObjectDef.Text.Trim()) && cmbVarType.Text.Equals("Object"))
                {
                    ErrorMessages.Add(SharedStrings.EMPTY_DLL_DEF);
                }

            }
            return (ErrorMessages.Count == 0);
  }



  protected override void GenerateCommand()
  {
   StringBuilder sb = new StringBuilder();
   string variableName = txtVarName.Text.Trim() ;
            string variableScope = (string)WinUtil.GetSelectedRadioButton(gbxScope).Tag;

    if (string.Compare(variableScope, Epi.Defaults.VariableScope.ToString(), true) == 0)
    {
     variableScope = string.Empty;
    }
             sb.Append(CommandNames.DEFINE).Append(StringLiterals.SPACE);
            sb.Append(variableName).Append(StringLiterals.SPACE);
            if (!string.IsNullOrEmpty(variableScope))
            {
                sb.Append(variableScope).Append(StringLiterals.SPACE);
            }
            if (!string.IsNullOrEmpty(cmbVarType.Text))
            {
                DataRow row = ((DataRowView)cmbVarType.SelectedItem).Row;
                string expression = row[ColumnNames.EXPRESSION].ToString();
                if (!string.IsNullOrEmpty(expression))
                {
                    sb.Append(expression).Append(StringLiterals.SPACE);
                }

            }
            if (!string.IsNullOrEmpty(txtDLLObjectDef.Text.Trim()))
            {
                sb.Append(StringLiterals.DOUBLEQUOTES).Append(txtDLLObjectDef.Text.Trim()).Append(StringLiterals.DOUBLEQUOTES);
            }
   CommandText = sb.ToString();
  }




        public override void CheckForInputSufficiency()
  {
   bool inputValid = ValidateInput();
   btnOK.Enabled = inputValid;
   btnSaveOnly.Enabled = inputValid;
  }
  //Protected Methods

        private void txtVarName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Space)
            {
                e.SuppressKeyPress = true;
            }
        }
    }
}
 