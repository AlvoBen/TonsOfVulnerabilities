using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using Epi;
using Epi.Windows;
using Epi.Windows.Controls;
using System.Data;
using Epi.Analysis;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;
using Epi.Data.Services;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class SummarizeDialog : CommandDesignDialog
 {
  //Private Class Members
  //Private Class Members

  //Constructor




        [Obsolete("Use of default constructor not allowed", true)]
  public SummarizeDialog()
  {
   InitializeComponent();
  }





        public SummarizeDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
  {
   InitializeComponent();
            Construct();
  }
  //Constructors

  //Event Handlers





  private void btnClear_Click(object sender, System.EventArgs e)
  {
   cmbAggregate.Text = string.Empty;
   cmbVar.Text = string.Empty;
   txtIntoVar.Text = string.Empty;
   lbxVar.Items.Clear();
   cmbGroupBy.Text = string.Empty;
   lbxGroupBy.Text = string.Empty;
   cmbWeight.Text = string.Empty;
   txtOutput.Text = string.Empty;
   lbxGroupBy.Items.Clear();
   cmbWeight.SelectedIndex = -1;
   cmbAggregate.Focus();
  }





  private void SummarizeDialog_Load(object sender, System.EventArgs e)
  {
   LoadAggregates();

   LoadVariables();
  }





  private void btnApply_Click(object sender, System.EventArgs e)
  {

   System.Text.StringBuilder sb = new System.Text.StringBuilder();
   sb.Append(txtIntoVar.Text).Append(StringLiterals.SPACE);
   sb.Append(StringLiterals.COLON);
   sb.Append(StringLiterals.COLON);
   sb.Append(StringLiterals.SPACE);
   string aggregate = ((SupportedAggregate)(System.Convert.ToInt32(cmbAggregate.SelectedValue))).ToString();
   sb.Append(aggregate);
   sb.Append(Util.InsertInParantheses(cmbVar.Text));
   lbxVar.Items.Add(sb.ToString());

   cmbAggregate.Text = string.Empty ;
   cmbVar.Text = string.Empty;
   txtIntoVar.Text = string.Empty;
   btnApply.Enabled = false;
   txtOutput_TextChanged(txtOutput,e);
  }





  private void txtOutput_TextChanged(object sender, System.EventArgs e)
  {
   CheckForInputSufficiency();
  }





  private void SetEnabledApply(object sender, System.EventArgs e)
  {
   if ((!string.IsNullOrEmpty(cmbAggregate.Text)) && (!string.IsNullOrEmpty(cmbVar.Text)) && (!string.IsNullOrEmpty(txtIntoVar.Text.Trim())))
   {
    btnApply.Enabled = true;
   }
   else
   {
    btnApply.Enabled = false;
   }
  }





  private void cmbGroupBy_SelectedIndexChanged(object sender, System.EventArgs e)
  {
   lbxGroupBy.Items.Add(cmbGroupBy.SelectedItem.ToString());

  }





  private void lbxGroupBy_DoubleClick(object sender, System.EventArgs e)
  {
   if (lbxGroupBy.Items.Count > 0)
   {
    lbxGroupBy.Items.RemoveAt(lbxGroupBy.SelectedIndex);
   }
  }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-summarize.html");
        }

  //

  //Protected Methods




  protected override bool ValidateInput()
  {
   base.ValidateInput ();
   if (lbxVar.Items.Count == 0)
   {
    ErrorMessages.Add(SharedStrings.NO_AGGREGATE_SPECIFIED);
   }
   if (string.IsNullOrEmpty(txtOutput.Text.Trim()))
   {
    ErrorMessages.Add(SharedStrings.OUTPUT_TABLE_NOT_SPECIFIED);
   }
   return (ErrorMessages.Count == 0);
  }



  protected override void GenerateCommand()
  {
   WordBuilder command = new WordBuilder();
   command.Append(CommandNames.SUMMARIZE);

   foreach (string item in lbxVar.Items)
   {
    command.Append(item);
   }

   command.Append(CommandNames.TO);
   command.Append(txtOutput.Text.Trim());


   if (lbxGroupBy.Items.Count > 0)
   {
    command.Append(CommandNames.STRATAVAR);
    command.Append(StringLiterals.EQUAL);
    foreach (string item in lbxGroupBy.Items)
    {
     command.Append(item);
    }
   }

   if (cmbWeight.SelectedItem != null && !string.IsNullOrEmpty(cmbWeight.SelectedItem.ToString()))
   {
    command.Append(CommandNames.WEIGHTVAR);
    command.Append(StringLiterals.EQUAL);
    command.Append(cmbWeight.SelectedItem.ToString());

   }
   CommandText = command.ToString();
  }



        public override void CheckForInputSufficiency()
  {
   bool inputValid = ValidateInput();
   btnOK.Enabled = inputValid;
   btnSaveOnly.Enabled = inputValid;
  }
  //

  //Private Methods

        private void Construct()
        {
            if (!this.DesignMode)
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
        }



  private void LoadAggregates()
  {
   LocalizedComboBox cbx = cmbAggregate;
   DataView dv = AppData.Instance.SupportedAggregatesDataTable.DefaultView;

   cbx.DataSource = dv;
   cbx.DisplayMember = ColumnNames.NAME;
   cbx.ValueMember = ColumnNames.ID;
   cbx.SelectedIndex = -1;
   cbx.SkipTranslation = false;

  }
  private void LoadVariables()
  {












            VariableType scopeWord = VariableType.DataSource | VariableType.Standard;
            FillVariableCombo(cmbVar, scopeWord);
            cmbVar.SelectedIndex = -1;

            FillVariableCombo(cmbGroupBy, scopeWord);
            cmbGroupBy.SelectedIndex = -1;

            FillVariableCombo(cmbWeight, scopeWord);
            cmbWeight.SelectedIndex = -1;
  }
  //
 }
}


 