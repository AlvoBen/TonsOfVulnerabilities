using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Text;
using Epi.Analysis;
using Epi.Windows.Dialogs;
using Epi.Windows.Analysis;

namespace Epi.Windows.Analysis.Dialogs
{



    public         class ComplexSampleTablesDialog : CommandDesignDialog
 {
  //Constructor




        [Obsolete("Use of default constructor not allowed", true)]
  public ComplexSampleTablesDialog()
  {
   InitializeComponent();
            Construct();
  }





        public ComplexSampleTablesDialog(Epi.Windows.Analysis.Forms.AnalysisMainForm frm)
            : base(frm)
  {
   InitializeComponent();
            Construct();
  }
  //Constructors

        //Private Properties

        string txtExposure = String.Empty;
        string txtWeight = String.Empty;
        string txtStratifyBy = String.Empty;
        string txtPSU = String.Empty;
        string txtOutcome = String.Empty;

        //Private Properties

        //Private Methods

        protected void Construct()
        {
            if (!this.DesignMode)
            {
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
        }




        private void TablesDialog_Load(object sender, EventArgs e)
        {
            VariableType scopeWord = VariableType.DataSource | VariableType.DataSourceRedefined |
                                        VariableType.Standard;
            FillVariableCombo( cmbExposure, scopeWord );
            cmbExposure.Items.Insert( 0, "*" );
            cmbExposure.SelectedIndex = -1;
            FillVariableCombo( cmbOutcome, scopeWord );
            FillVariableCombo( cmbStratifyBy, scopeWord );
            cmbStratifyBy.SelectedIndex = -1;
            FillVariableCombo(cmbWeight, scopeWord);
            FillVariableCombo(cmbPSU, scopeWord);
            cmbWeight.SelectedIndex = -1;
            cmbPSU.SelectedIndex = -1;
        }


        //Private Methods

        //Public Methods



        public override void CheckForInputSufficiency()
        {
            bool inputValid = ValidateInput();
            btnOK.Enabled = inputValid;
            btnSaveOnly.Enabled = inputValid;
        }
        //Public Methods

        //Protected Methods



        protected override void GenerateCommand()
        {
            StringBuilder sb = new StringBuilder();
            if (cbxMatch.Checked)
            {
                sb.Append(CommandNames.MATCH);
            }
            else
            {
                sb.Append(CommandNames.TABLES);
            }

            sb.Append(StringLiterals.SPACE);
            sb.Append(cmbExposure.Text);
            sb.Append(StringLiterals.SPACE);
            sb.Append(cmbOutcome.Text );
            sb.Append(StringLiterals.SPACE);
            if (cbxMatch.Checked)
            {
                sb.Append(CommandNames.MATCHVAR);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(cmbStratifyBy.Text);






            }

            else if (cmbStratifyBy.SelectedIndex >= 0 )
            {
                sb.Append(CommandNames.STRATAVAR);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(cmbStratifyBy.Text);





            }
            if (cmbWeight.SelectedIndex >= 0)
            {
                sb.Append(StringLiterals.SPACE);
                sb.Append(CommandNames.WEIGHTVAR);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(cmbWeight.Text);
            }
            sb.Append(StringLiterals.SPACE);
            sb.Append(CommandNames.PSUVAR);
            sb.Append(StringLiterals.EQUAL);
            sb.Append(cmbPSU.Text);
            if (txtOutput.TextLength > 0)
            {
                sb.Append(StringLiterals.SPACE);
                sb.Append(CommandNames.OUTTABLE);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(txtOutput.Text);
            }
            if (txtNumCol.TextLength > 0)
            {
                sb.Append(StringLiterals.SPACE);
                sb.Append(CommandNames.COLUMNSIZE);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(txtNumCol.Text);
            }
            if (cbxNoLineWrap.Checked)
            {
                sb.Append(StringLiterals.SPACE);
                sb.Append(CommandNames.NOWRAP);
            }
            CommandText = sb.ToString();
        }





        protected override bool ValidateInput()
        {
            base.ValidateInput();
            if (cmbExposure.SelectedIndex == -1)
            {
                ErrorMessages.Add( SharedStrings.MUST_SELECT_EXPOSURE );
            }
            if (cmbOutcome.SelectedIndex == -1)
            {
                ErrorMessages.Add( SharedStrings.MUST_SELECT_OUTCOME );
            }
            if (cmbPSU.SelectedIndex == -1)
            {
                ErrorMessages.Add(SharedStrings.MUST_SELECT_PSU);
            }


            if (cbxMatch.Checked && (cmbStratifyBy.SelectedIndex < 0))
            {
                ErrorMessages.Add( SharedStrings.NO_MATCHVAR);
            }

            return (ErrorMessages.Count == 0);
        }

        //Protected Methods

        //Event Handlers





        private void btnClear_Click(object sender, System.EventArgs e)
        {
            cmbOutcome.Items.Clear();
            cmbStratifyBy.Items.Clear();
            cmbWeight.Items.Clear();
            cmbPSU.Text = string.Empty;
            txtOutput.Text = string.Empty;

            TablesDialog_Load(this, null);
        }







        private void lbxStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (lbxStratifyBy.SelectedIndex >= 0)   
            {
                string s = this.lbxStratifyBy.SelectedItem.ToString();
                cmbExposure.Items.Add(s);
                cmbWeight.Items.Add(s);
                cmbPSU.Items.Add(s);
                cmbOutcome.Items.Add(s);
                cmbStratifyBy.Items.Add(s);
                lbxStratifyBy.Items.Remove(s);
            }
            CheckForInputSufficiency();
        }







        private void cmbStratifyBy_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtStratifyBy;
            string strNew = cmbStratifyBy.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                cmbExposure.Items.Add(strOld);
                cmbWeight.Items.Add(strOld);
                cmbPSU.Items.Add(strOld);
                cmbOutcome.Items.Add(strOld);

            }
            if (cmbStratifyBy.SelectedIndex >= 0)
            {
                cmbExposure.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
                cmbPSU.Items.Remove(strNew);
                cmbOutcome.Items.Remove(strNew);

                this.txtStratifyBy = strNew;
            }
            CheckForInputSufficiency();
        }







        private void cmbOutcome_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtOutcome;
            string strNew = cmbOutcome.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                cmbExposure.Items.Add(strOld);
                cmbWeight.Items.Add(strOld);
                cmbPSU.Items.Add(strOld);

                cmbStratifyBy.Items.Add(strOld);
            }
            if (cmbOutcome.SelectedIndex >= 0)
            {
                cmbExposure.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);
                cmbPSU.Items.Remove(strNew);

                cmbStratifyBy.Items.Remove(strNew);
                this.txtExposure = strNew;
            }
            CheckForInputSufficiency();
        }







        private void cmbExposure_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtExposure;
            string strNew = cmbExposure.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {

                cmbWeight.Items.Add(strOld);
                cmbPSU.Items.Add(strOld);
                cmbOutcome.Items.Add(strOld);
                cmbStratifyBy.Items.Add(strOld);
            }
            if (cmbExposure.SelectedIndex >= 0)
            {

                cmbWeight.Items.Remove(strNew);
                cmbPSU.Items.Remove(strNew);
                cmbOutcome.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);
                this.txtExposure = strNew;
            }
            CheckForInputSufficiency();
        }







        private void cmbWeight_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Delete)
            {

                cmbWeight.Text = "";
                cmbWeight.SelectedIndex = -1;
            }
        }







        private void cmbExposure_Click(object sender, EventArgs e)
        {
            txtExposure = (cmbExposure.SelectedIndex >= 0) ? cmbExposure.Text : "";
        }







        private void cmbOutcome_Click(object sender, EventArgs e)
        {
            txtOutcome = (cmbOutcome.SelectedIndex >= 0) ? cmbOutcome.Text : "";
        }







        private void cmbPSU_Click(object sender, EventArgs e)
        {
            txtPSU = (cmbPSU.SelectedIndex >= 0) ? cmbPSU.Text : "";
        }







        private void cmbWeight_Click(object sender, EventArgs e)
        {
            txtWeight = (cmbWeight.SelectedIndex >= 0) ? cmbWeight.Text : "";
        }








        private void cmbWeight_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtWeight;
            string strNew = cmbWeight.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                cmbExposure.Items.Add(strOld);

                cmbPSU.Items.Add(strOld);
                cmbOutcome.Items.Add(strOld);
                cmbStratifyBy.Items.Add(strOld);
                }
            if (cmbWeight.SelectedIndex >= 0)
            {
                cmbExposure.Items.Remove(strNew);

                cmbPSU.Items.Remove(strNew);
                cmbOutcome.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);
                this.txtWeight = strNew;
            }
        }







        private void cmbPSU_SelectedIndexChanged(object sender, EventArgs e)
        {

            string strOld = txtPSU;
            string strNew = cmbPSU.Text;

            if ((strOld.Length > 0) && (strOld != strNew))
            {
                    cmbExposure.Items.Add(strOld);
                    cmbWeight.Items.Add(strOld);

                    cmbOutcome.Items.Add(strOld);
                    cmbStratifyBy.Items.Add(strOld);
            }
            if (cmbPSU.SelectedIndex >= 0)
            {
                cmbExposure.Items.Remove(strNew);
                cmbWeight.Items.Remove(strNew);

                cmbOutcome.Items.Remove(strNew);
                cmbStratifyBy.Items.Remove(strNew);
                this.txtExposure = strNew;
            }
            CheckForInputSufficiency();
        }







        private void txtNumCol_KeyPress(object sender, KeyPressEventArgs e)
        {
            string keyInput = e.KeyChar.ToString();
            if (e.KeyChar.ToString().Equals("\b"))
            {

            }
            else if (e.KeyChar.Equals(Keys.Delete))
            {

            }
            else if (e.KeyChar.ToString().Equals("0"))
            {
                if (txtNumCol.TextLength == 0) e.Handled = true;
            }
            else if ((txtNumCol.TextLength <= 1) && (Char.IsDigit(e.KeyChar)))
            {

            }
            else
            {
                e.Handled = true;
            }
        }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-tables.html");
        }

        //Event Handlers







        private void cbxMatch_Click(object sender, EventArgs e)
        {
            if (cbxMatch.Checked)
            {
                lblStratifyBy.Text = "Match Variables";
                lblStratifyBy.Font = new Font(lblStratifyBy.Font, FontStyle.Bold);
            }
            else
            {
                lblStratifyBy.Text = "Stratify By";
                lblStratifyBy.Font = new Font(lblStratifyBy.Font, FontStyle.Regular);
            }
            CheckForInputSufficiency();
        }







        private void txtNumCol_Leave(object sender, EventArgs e)
        {
            if (txtNumCol.Text.Equals("0")) txtNumCol.Text = "";
        }
    }
}
 