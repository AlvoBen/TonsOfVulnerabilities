using System;
using System.Data;
using System.Collections;


namespace Epi.Analysis
{




 public class ProjectBasedPgm : Pgm
    {
        //Private Attributes
        private Project _project;
        private string _name;
        //Private Attributes

        //Private Methods
        //Private Methods

        //Constructor






        public ProjectBasedPgm(Project proj, string name) : base(proj)
        {
   _project = proj;
            _name = name;
        }
        //

        //Public Methods






        public override DataRow PgmLoad( string name )
        {
            pgmRow = FindPgmByName(_project, _name);
            return pgmRow;
        }






        public override bool PgmSave(DataRow pgmRow)
        {
            if (FindPgmByName(_project, pgmRow[ColumnNames.PGM_NAME].ToString())== null)
            {
                _project.InsertPgm(pgmRow[ColumnNames.PGM_NAME].ToString(),
                                   pgmRow[ColumnNames.PGM_CONTENT].ToString(),
                                   pgmRow[ColumnNames.PGM_COMMENT].ToString(),
                                   pgmRow[ColumnNames.PGM_AUTHOR].ToString());
            }
            else
            {
                _project.UpdatePgm( (int)pgmRow[ColumnNames.PROGRAM_ID],
                                        pgmRow[ColumnNames.PGM_NAME].ToString(),
                                        pgmRow[ColumnNames.PGM_CONTENT].ToString(),
                                        pgmRow[ColumnNames.PGM_COMMENT].ToString(),
                                        pgmRow[ColumnNames.PGM_AUTHOR].ToString());
            }
            return true;
        }






        public override bool PgmDelete( string name )
        {
            pgmRow = FindPgmByName(_project, name);
            if (pgmRow != null)
            {

                _project.DeletePgm(name, (int)pgmRow[ColumnNames.PROGRAM_ID]);
            }
            return true;
        }
        //Public Methods

    }
}

 