using System;
using System.IO;
using System.Data;


namespace Epi.Analysis
{




 public class FileBasedPgm : Pgm
 {
  //Private Class Members
  private string filePath = string.Empty;
        private Project _project;
  //Private Class Members

  //Constructor





        public FileBasedPgm(Project proj, string filepath) : base(proj)
  {
   //Input Validation
   if (string.IsNullOrEmpty(filepath))
   {
    throw new ArgumentNullException("filepath");
   }
   //Input Validation
            this._project = proj;
   this.filePath = filepath;
  }
  //Constructors

        //Public Properties



  public string FilePath
  {
   get
   {
    return (filePath);
   }
            set
            {
                filePath = value;
            }
  }


  //Public Properties

        //Public Methods






        public override DataRow PgmLoad(String filepath)
        {
            string text;
            try
            {
                using (StreamReader sr = File.OpenText(filepath))
                {

                    sr.BaseStream.Seek(0, SeekOrigin.Begin);
                    text = sr.ReadToEnd();
                }
                pgmRow[ColumnNames.PGM_CREATE_DATE] = File.GetCreationTime(filePath);
                pgmRow[ColumnNames.PGM_MODIFY_DATE] = File.GetLastWriteTime(filePath);
                pgmRow[ColumnNames.PGM_CONTENT] = text;
                pgmRow[ColumnNames.PGM_COMMENT] = text;
                pgmRow[ColumnNames.PGM_NAME] = Path.GetFileNameWithoutExtension(filePath);
                this.filePath = filepath;
                return pgmRow;
            }
            catch (Exception ex)
            {
                throw new GeneralException(SharedStrings.UNABLE_READ_PGM, ex);
            }
        }







        public override bool PgmSave(DataRow row)
        {
            //Preconditions
            if ((row == null) || (row[ColumnNames.PGM_CONTENT].ToString() == string.Empty))
            {
                throw new GeneralException("Save called with no File Path");
            }
            //Preconditions
            try
            {
                using (StreamWriter sw = new StreamWriter(filePath))
                {

                    sw.BaseStream.Seek(0, SeekOrigin.Begin);
                    string[] program = row[ColumnNames.PGM_CONTENT].ToString().Split('\n');
                    foreach (string line in program)
                    {
                        sw.WriteLine(line);
                    }
                    sw.Close();
                    sw.Dispose();
                    return true;
                }
            }
            catch (Exception ex)
            {
                throw new ApplicationException(SharedStrings.UNABLE_WRITE_PGM, ex);
            }
        }









        public  static bool PgmSave(string filePath, string PGMContent)
        {

            try
            {
                using (StreamWriter sw = new StreamWriter(filePath))
                {

                    sw.BaseStream.Seek(0, SeekOrigin.Begin);
                    sw.WriteLine(PGMContent);

                    sw.Close();
                    sw.Dispose();
                    return true;
                }
            }
            catch (Exception ex)
            {
                throw new ApplicationException(SharedStrings.UNABLE_WRITE_PGM, ex);
            }


        }





        public override bool PgmDelete( string filepath )
        {
            File.Delete(filepath);
            this.filePath = string.Empty;
            return true;
        }
        //Public Methods
 }
}

 