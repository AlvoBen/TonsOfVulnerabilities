using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Text;
using System.Xml;

namespace Epi.WPF.Dashboard.Rules
{
    public enum FormatTypes
    {
        EpiWeek = 0,
        RegularDate = 1,
        Hours = 2,
        HoursMinutes = 3,
        HoursMinutesSeconds = 4,
        SortableDateTime = 5,
        MonthYear = 6,
        DayMonth = 7,
        RFC1123 = 8,
        Day = 9,
        ShortDayName = 10,
        FullDayName = 11,
        Month = 12,
        ShortMonthName = 13,
        FullMonthName = 14,
        TwoDigitYear = 15,
        FourDigitYear = 16,
        NumericInteger = 17,
        NumericDecimal1 = 18,
        NumericDecimal2 = 19,
        NumericDecimal3 = 20,
        NumericDecimal4 = 21,
        NumericDecimal5 = 22,
        MonthAndFourDigitYear = 23,
        LongDate = 24
    }

    public enum RuleExecutionLocation
    {



        ExecuteBefore,




        ExecuteAfter
    }




    public class Rule_Format : DataAssignmentRule
    {
        //Private Members
        private string sourceColumnName;
        private string suffix;
        private string formatString;

        private FormatTypes formatType;
        //

        //Constructors



        public Rule_Format(DashboardHelper dashboardHelper)
        {
            this.dashboardHelper = dashboardHelper;
            Construct();
        }







        public Rule_Format(DashboardHelper dashboardHelper, string friendlyRule, string sourceColumnName, string destinationColumnName, string formatString, FormatTypes formatType)
        {
            this.friendlyRule = friendlyRule;
            this.formatString = formatString;
            this.sourceColumnName = sourceColumnName;
            this.destinationColumnName = destinationColumnName;
            this.formatType = formatType;
            this.suffix = string.Empty;
            this.dashboardHelper = dashboardHelper;
            this.destinationColumnType = "System.String";
            Construct();
        }








        public Rule_Format(DashboardHelper dashboardHelper, string friendlyRule, string sourceColumnName, string destinationColumnName, string formatString, FormatTypes formatType, string customSuffix)
        {
            this.friendlyRule = friendlyRule;
            this.formatString = formatString;
            this.sourceColumnName = sourceColumnName;
            this.destinationColumnName = destinationColumnName;
            this.formatType = formatType;
            this.suffix = customSuffix;
            this.dashboardHelper = dashboardHelper;
            this.destinationColumnType = "System.String";
            Construct();
        }
        //

        //Public Properties



        public string SourceColumnName
        {
            get
            {
                return sourceColumnName;
            }
        }




        public string FormatString
        {
            get
            {
                return formatString;
            }
        }




        public FormatTypes FormatType
        {
            get
            {
                return this.formatType;
            }
        }




        public string Suffix
        {
            get
            {
                return this.suffix;
            }
        }




        public RuleExecutionLocation ExecutionLocation
        {
            get
            {
                return this.GetRuleExecutionLocation();
            }
        }
        //

        //Public Methods




        public override string ToString()
        {
            return this.FriendlyRule;
        }





        public override List GetDependencies()
        {
            List dependencies = new List();

            dependencies.Add(DestinationColumnName);
            if (!dependencies.Contains(SourceColumnName))
            {
                dependencies.Add(SourceColumnName);
            }

            return dependencies;
        }




        public string GetFormatString()
        {
            string formatString = string.Empty;
            switch (FormatType)
            {
                case FormatTypes.EpiWeek:
                    formatString = "epiweek"; // note: Special case scenario
                    break;
                case FormatTypes.Day:
                    formatString = "{0:dd}";
                    break;
                case FormatTypes.ShortDayName:
                    formatString = "{0:ddd}";
                    break;
                case FormatTypes.FullDayName:
                    formatString = "{0:dddd}";
                    break;
                case FormatTypes.FourDigitYear:
                    formatString = "{0:yyyy}";
                    break;
                case FormatTypes.TwoDigitYear:
                    formatString = "{0:yy}";
                    break;
                case FormatTypes.DayMonth:
                    formatString = "{0:M}";
                    break;
                case FormatTypes.Month:
                    formatString = "{0:MM}";
                    break;
                case FormatTypes.ShortMonthName:
                    formatString = "{0:MMM}";
                    break;
                case FormatTypes.FullMonthName:
                    formatString = "{0:MMMM}";
                    break;
                case FormatTypes.RFC1123:
                    formatString = "{0:r}";
                    break;
                case FormatTypes.RegularDate:
                    formatString = "{0:d}";
                    break;
                case FormatTypes.LongDate:
                    formatString = "{0:D}";
                    break;
                case FormatTypes.SortableDateTime:
                    formatString = "{0:s}";
                    break;
                case FormatTypes.MonthYear:
                    formatString = "{0:y}";
                    break;
                case FormatTypes.Hours:
                    formatString = "{0:HH}";
                    break;
                case FormatTypes.HoursMinutes:
                    formatString = "{0:t}";
                    break;
                case FormatTypes.HoursMinutesSeconds:
                    formatString = "{0:T}";
                    break;
                case FormatTypes.NumericInteger:
                    formatString = "{0:0}";
                    break;
                case FormatTypes.NumericDecimal1:
                    formatString = "{0:0.0}";
                    break;
                case FormatTypes.NumericDecimal2:
                    formatString = "{0:0.00}";
                    break;
                case FormatTypes.NumericDecimal3:
                    formatString = "{0:0.000}";
                    break;
                case FormatTypes.NumericDecimal4:
                    formatString = "{0:0.0000}";
                    break;
                case FormatTypes.NumericDecimal5:
                    formatString = "{0:0.00000}";
                    break;
                case FormatTypes.MonthAndFourDigitYear:
                    formatString = "{0:y}";
                    break;
            }

            return formatString;
        }
        //

        //Private Methods



        private void Construct()
        {
            if (this.FormatType.Equals(FormatTypes.Hours))
            {
                this.destinationColumnType = "System.Decimal";
                this.variableType = DashboardVariableType.Numeric;
            }
            else if (this.FormatType.Equals(FormatTypes.EpiWeek))
            {
                this.destinationColumnType = "System.Decimal";
                this.variableType = DashboardVariableType.Numeric;
            }
        }





        private RuleExecutionLocation GetRuleExecutionLocation()
        {
            RuleExecutionLocation location = RuleExecutionLocation.ExecuteBefore;
            switch (FormatType)
            {
                case FormatTypes.EpiWeek:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.Day:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.ShortDayName:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.FullDayName:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.FourDigitYear:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.TwoDigitYear:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.DayMonth:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.Month:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.ShortMonthName:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.FullMonthName:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.RFC1123:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.RegularDate:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.SortableDateTime:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.MonthYear:
                    location = RuleExecutionLocation.ExecuteBefore;
                    break;
                case FormatTypes.HoursMinutes:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.HoursMinutesSeconds:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericInteger:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericDecimal1:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericDecimal2:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericDecimal3:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericDecimal4:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
                case FormatTypes.NumericDecimal5:
                    location = RuleExecutionLocation.ExecuteAfter;
                    break;
            }

            return location;
        }
        //

        //IDashboardRule Members





        public override System.Xml.XmlNode Serialize(System.Xml.XmlDocument doc)
        {
            string xmlString =
            "" + friendlyRule + "</friendlyRule>" +
            "" + sourceColumnName + "</sourceColumnName>" +
            "" + destinationColumnName + "</destinationColumnName>" +
            "" + destinationColumnType + "</destinationColumnType>" +
            "" + formatString + "</formatString>" +
            "" + ((int)formatType).ToString() + "</formatType>";

            System.Xml.XmlElement element = doc.CreateElement("rule");
            element.InnerXml = xmlString;

            System.Xml.XmlAttribute order = doc.CreateAttribute("order");
            System.Xml.XmlAttribute type = doc.CreateAttribute("ruleType");

            type.Value = "Epi.WPF.Dashboard.Rules.Rule_Format";

            element.Attributes.Append(type);

            return element;
        }





        public override void CreateFromXml(System.Xml.XmlElement element)
        {
            foreach (XmlElement child in element.ChildNodes)
            {
                if (child.Name.Equals("friendlyRule"))
                {
                    this.friendlyRule = child.InnerText;
                }
                else if (child.Name.Equals("sourceColumnName"))
                {
                    this.sourceColumnName = child.InnerText;
                }
                else if (child.Name.Equals("destinationColumnName"))
                {
                    this.destinationColumnName = child.InnerText;
                }
                else if (child.Name.Equals("destinationColumnType"))
                {
                    this.destinationColumnType = child.InnerText;
                }
                else if (child.Name.Equals("formatString"))
                {
                    this.formatString = child.InnerText;
                }
                else if (child.Name.Equals("formatType"))
                {
                    this.formatType = ((FormatTypes)Int32.Parse(child.InnerText));
                }
            }

            if (this.FormatType.Equals(FormatTypes.Hours))
            {
                this.destinationColumnType = "System.Decimal";
                this.variableType = DashboardVariableType.Numeric;
            }
            else if (this.FormatType.Equals(FormatTypes.EpiWeek))
            {
                this.destinationColumnType = "System.Decimal";
                this.variableType = DashboardVariableType.Numeric;
            }
            else if (destinationColumnType.Equals("System.String"))
            {
                this.variableType = DashboardVariableType.Text;
            }
            else if (destinationColumnType.Equals("System.Single") || destinationColumnType.Equals("System.Double") || destinationColumnType.Equals("System.Decimal") || destinationColumnType.Equals("System.Int16") || destinationColumnType.Equals("System.Int32"))
            {
                this.variableType = DashboardVariableType.Numeric;
            }
        }




        public override void SetupRule(DataTable table)
        {
            string destinationColumnType = this.DestinationColumnType;
            string sourceColumnType = DashboardHelper.GetColumnType(this.SourceColumnName);

            DataColumn dc;

            switch (destinationColumnType)
            {
                case "System.Byte":
                    dc = new DataColumn(this.DestinationColumnName, typeof(byte));
                    break;
                case "System.Single":
                case "System.Double":
                    dc = new DataColumn(this.DestinationColumnName, typeof(double));
                    break;
                case "System.Decimal":
                    dc = new DataColumn(this.DestinationColumnName, typeof(decimal));
                    break;
                case "System.String":
                default:
                    dc = new DataColumn(this.DestinationColumnName, typeof(string));
                    break;
            }

            if (!table.Columns.Contains(dc.ColumnName))
            {
                table.Columns.Add(dc);
            }
            else
            {
                foreach (DataRow row in table.Rows)
                {
                    row[dc.ColumnName] = DBNull.Value;
                }
            }
        }




        public override void ApplyRule(DataRow row)
        {
            if (!row.Table.Columns.Contains(this.DestinationColumnName) || !row.Table.Columns.Contains(this.SourceColumnName))
            {
                return;
            }

            string value = string.Empty;

            if (this.FormatType != FormatTypes.EpiWeek)
            {
                value = string.Format(System.Globalization.CultureInfo.CurrentCulture, this.GetFormatString(), row[this.SourceColumnName]) + this.Suffix;
                value = value.Trim();
            }
            else
            {
                StatisticsRepository.EpiWeek epiWeek = new StatisticsRepository.EpiWeek();
                if(row[this.SourceColumnName] != null && !string.IsNullOrEmpty(row[this.SourceColumnName].ToString()))
                {
                    string datestring = row[this.SourceColumnName].ToString();
                    DateTime  dt = Convert.ToDateTime(datestring);
                    value = epiWeek.GetEpiWeek(dt).ToString();
                    value = value.Trim();
                }

            }

            if (string.IsNullOrEmpty(value))
            {
                row[this.DestinationColumnName] = DBNull.Value;
            }
            else
            {
                row[this.DestinationColumnName] = value;
            }
        }
        //

    }
}

 