//Namespaces

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Epi.Data;

//

namespace Epi.Data.SqlServer.Forms
{



    public         class ConnectionStringDialog : DialogBase, IConnectionStringGui  
    {

        //Public Data Members






        // 

        //Constructors




        public ConnectionStringDialog()
        {
            InitializeComponent();
            this.cmbServerName.Items.Add(SharedStrings.BROWSE_FOR_MORE);
            this.cmbServerName.Items.Add("(local)");
            this.cmbServerName.Text = "";
            dbConnectionStringBuilder = new SqlConnectionStringBuilder();
        }

        //

        //IConnectionStringBuilder Members

        public bool ShouldIgnoreNonExistance
        {
            set { }
        }

        public virtual void SetDatabaseName(string databaseName)
        {
            this.cmbDatabaseName.Text = databaseName;
        }

        public virtual void SetServerName(string serverName)
        {
            this.cmbServerName.Text = serverName;
        }

        public virtual void SetUserName(string userName)
        {
            txtUserName.Text = userName;
        }

        public virtual void SetPassword(string password)
        {
            txtPassword.Text = password;
        }




        protected SqlConnectionStringBuilder dbConnectionStringBuilder;



        public DbConnectionStringBuilder DbConnectionStringBuilder
        {
            get
            {
                return dbConnectionStringBuilder;
            }




        }





        public virtual string PreferredDatabaseName
        {
            set
            {
                cmbDatabaseName.Text = value;
            }
            get
            {
                return cmbDatabaseName.Text;
            }
        }




        public virtual string ConnectionStringDescription
        {
            get
            {
                return cmbServerName.Text + "::" + cmbDatabaseName.Text;
            }
        }




        public bool UsesPassword
        {
            get
            {
                if (this.txtPassword.Text.Length > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }

        // 

        //Event Handlers






        private void btnOK_Click(object sender, EventArgs e)
        {
            OnOkClick();
        }






        private void rdbAuthentication_CheckedChanged(object sender, EventArgs e)
        {
            lblPassword.Enabled = rdbSqlAuthentication.Checked;
            lblUserName.Enabled = rdbSqlAuthentication.Checked;
            txtPassword.Enabled = rdbSqlAuthentication.Checked;
            txtUserName.Enabled = rdbSqlAuthentication.Checked;
        }






        private void btnCancel_Click(object sender, EventArgs e)
        {
            OnCancelClick();
        }






        private void cmbServerName_SelectedIndexChanged(object sender, EventArgs e)
        {

            if ((string)cmbServerName.SelectedItem == SharedStrings.BROWSE_FOR_MORE)
            {
                string serverName = BrowseForServers.BrowseNetworkServers();
                if (!string.IsNullOrEmpty(serverName))
                {
                    this.cmbServerName.Items.Insert(0, serverName);
                    this.cmbServerName.SelectedIndex = 0;
                    string database = this.cmbDatabaseName.Text;
                    Epi.Data.SqlServer.SqlDatabase db = new SqlDatabase();

                    dbConnectionStringBuilder = new System.Data.SqlClient.SqlConnectionStringBuilder();
                    dbConnectionStringBuilder.DataSource = cmbServerName.Text;
                    dbConnectionStringBuilder.UserID = txtUserName.Text;
                    if (rdbWindowsAuthentication.Checked)
                    {
                        dbConnectionStringBuilder.IntegratedSecurity = true;
                    }
                    else
                    {
                        dbConnectionStringBuilder.UserID = txtUserName.Text;
                        dbConnectionStringBuilder.Password = txtPassword.Text;
                    }

                    db.ConnectionString = this.DbConnectionStringBuilder.ToString();

                    try
                    {
                        if (db.TestConnection())
                        {
                            this.cmbDatabaseName.Text = string.Empty;
                            List databaseNamesList = db.GetDatabaseNameList();
                            cmbDatabaseName.DataSource = databaseNamesList;
                        }
                        else
                        {
                            MessageBox.Show("Connection failed."); // TODO: hard coded string.
                        }

                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Connection failed: " + ex.Message); // TODO: hard coded string
                    }

                    return;
                }

                this.cmbServerName.SelectedText = string.Empty;
            }
        }






        protected virtual void btnTest_Click(object sender, EventArgs e)
        {





























        }

        // Event Handlers

        //Private Methods
        // Private Methods

        //Protected Methods





        protected override bool ValidateInput()
        {
            base.ValidateInput();

            if (string.IsNullOrEmpty(cmbServerName.Text.Trim()))
            {
                ErrorMessages.Add("Server name is required"); // TODO: Hard coded string
            }







            if (rdbSqlAuthentication.Checked)
            {

                if (string.IsNullOrEmpty(txtUserName.Text.Trim()))
                {
                    ErrorMessages.Add("Login name is required");
                }
                if (string.IsNullOrEmpty(txtPassword.Text.Trim()))
                {
                    ErrorMessages.Add("Password is required");
                }
            }

            return (ErrorMessages.Count == 0);
        }




        protected void OnCancelClick()
        {
            this.dbConnectionStringBuilder.ConnectionString = string.Empty;
            this.PreferredDatabaseName = string.Empty;

            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }




        protected virtual void OnOkClick()
        {
            if (ValidateInput() == true)
            {

                dbConnectionStringBuilder = new SqlConnectionStringBuilder();
                dbConnectionStringBuilder.DataSource = cmbServerName.Text;
                dbConnectionStringBuilder.InitialCatalog = cmbDatabaseName.Text;
                dbConnectionStringBuilder.UserID = txtUserName.Text;
                if (rdbWindowsAuthentication.Checked)
                {
                    dbConnectionStringBuilder.IntegratedSecurity = true;
                }
                else
                {
                    dbConnectionStringBuilder.UserID = txtUserName.Text;
                    dbConnectionStringBuilder.Password = txtPassword.Text;
                }


                this.DialogResult = DialogResult.OK;
                this.Hide();
            }
            else
            {
                ShowErrorMessages();
            }

        }
        // 

    }
}
 