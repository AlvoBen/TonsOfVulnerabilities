//Namespaces

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

// 

namespace Epi.Data.SqlServer.Forms
{



    public         class NonExistingConnectionStringDialog : Epi.Data.SqlServer.Forms.ConnectionStringDialog
    {
        //Constructors




        public NonExistingConnectionStringDialog()
        {
            InitializeComponent();
        }

        // 

        //Event Handlers






        private void NonExistingConnectionStringDialog_Load(object sender, EventArgs e)
        {
            this.btnTest.Visible = true;
            this.Text = "Create a SQL Server database";
            lblInstructions.Text = "Enter information to create the SQL Server database.";

            this.cmbDatabaseName.Visible = false;
            this.txtDatabaseName.Visible = true;
        }






        protected override void btnTest_Click(object sender, EventArgs e)
        {
            string database = this.txtDatabaseName.Text;

            Epi.Data.SqlServer.SqlDatabase db = new SqlDatabase();


            dbConnectionStringBuilder = new SqlConnectionStringBuilder();
            dbConnectionStringBuilder.DataSource = cmbServerName.Text;
            dbConnectionStringBuilder.InitialCatalog = cmbDatabaseName.Text;
            dbConnectionStringBuilder.UserID = txtUserName.Text;
            if (rdbWindowsAuthentication.Checked)
            {
                dbConnectionStringBuilder.IntegratedSecurity = true;
            }
            else
            {
                dbConnectionStringBuilder.UserID = txtUserName.Text;
                dbConnectionStringBuilder.Password = txtPassword.Text;
            }

            db.ConnectionString = this.DbConnectionStringBuilder.ToString();

            try
            {
                if (db.TestConnection())
                {
                    MessageBox.Show("Connection OK!"); // TODO: hard coded string.







                }
                else
                {
                    MessageBox.Show("Connection failed."); // TODO: hard coded string.
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show("Connection failed: " + ex.Message); // TODO: hard coded string
            }
        }



        private void txtDatabaseName_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar.ToString().IndexOfAny( CxNull) >= 0)
            {
                e.KeyChar = '\0';
                e.Handled = false;
                Console.Beep();
            }
        }

        // 

        //Public Properties





        public override string PreferredDatabaseName
        {
            set
            {
                txtDatabaseName.Text = value;
            }
            get
            {
                return txtDatabaseName.Text;
            }
        }




        public override string ConnectionStringDescription
        {
            get
            {
                return cmbServerName.Text + "::" + txtDatabaseName.Text;
            }
        }

        // 

        //Protected Methods





        protected override bool ValidateInput()
        {
            base.ValidateInput();
            if (string.IsNullOrEmpty(txtDatabaseName.Text.Trim()))
            {
                ErrorMessages.Add("Database name is required"); // TODO: Hard coded string
            }
            return (ErrorMessages.Count == 0);
        }




        protected override void OnOkClick()
        {
            if (ValidateInput() == true)
            {

                dbConnectionStringBuilder = new SqlConnectionStringBuilder();
                dbConnectionStringBuilder.DataSource = cmbServerName.Text;
                dbConnectionStringBuilder.InitialCatalog = txtDatabaseName.Text;
                dbConnectionStringBuilder.UserID = txtUserName.Text;
                if (rdbWindowsAuthentication.Checked)
                {
                    dbConnectionStringBuilder.IntegratedSecurity = true;
                }
                else
                {
                    dbConnectionStringBuilder.UserID = txtUserName.Text;
                    dbConnectionStringBuilder.Password = txtPassword.Text;
                }


                this.DialogResult = DialogResult.OK;
                this.Hide();
            }
            else
            {
                ShowErrorMessages();
            }
        }

        //Protected Methods

        //Private Methods

        private bool ValidDatabaseName(string name)
        {
            if (string.IsNullOrEmpty(name) || name.Length > 30)
            {
                return false;
            }
            else if (name.IndexOfAny( CxNull) >= 0)
            {
                return false;
            }
            else
            {
                char firstChar = name.ToCharArray()[0];
                return (Char.IsLetter(firstChar) || ((firstChar == '_') && name.Length > 1));
            }
        }

        // 

        //Public Methods
        public override void SetDatabaseName(string databaseName)
        {
            this.txtDatabaseName.Text = databaseName;
        }
        //
    }
}


 