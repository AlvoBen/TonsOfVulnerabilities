
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Runtime;
using System.Diagnostics;


namespace Epi.Data.SqlServer.Forms
{
    public         class BrowseForServers : Form
    {



        public BrowseForServers()
        {
            InitializeComponent();
        }

        private void BrowseForServers_Load(object sender, EventArgs e)
        {
            Application.UseWaitCursor = true;
            Application.DoEvents();


            System.Data.Sql.SqlDataSourceEnumerator servers = System.Data.Sql.SqlDataSourceEnumerator.Instance;
            DataTable serversTable = servers.GetDataSources();

            foreach(DataRow row in serversTable.Rows)
            {
                if (row[1].Equals(DBNull.Value))
                {
                    string serverName = string.Format("{0}", row[0]);
                    listBox.Items.Add(serverName);
                }
                else
                {
                    string serverName = string.Format("{0}\\{1}", row[0], row[1]);
                }
            }




            Application.UseWaitCursor = false;
        }

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wp, IntPtr lp);




        public void GetNetworkServerInstances()
        {
            DataTable dataSources = System.Data.Sql.SqlDataSourceEnumerator.Instance.GetDataSources();
            foreach (DataRow dataSource in dataSources.Rows)
            {
                string dataSourceName = dataSource["ServerName"].ToString();
                if (!string.IsNullOrEmpty(dataSource["InstanceName"].ToString()))
                {
                    dataSourceName += Path.DirectorySeparatorChar + dataSource["InstanceName"].ToString();
                }
                listBox.Items.Add(dataSourceName);
            }











































        }

        private static void DirSearch(string sDir, ref List found)
        {
            foreach (string d in Directory.GetDirectories(sDir))
            {
                foreach (string f in Directory.GetFiles(d, "osql.exe"))
                {
                    found.Add(f);
                }
                DirSearch(d, ref found);
            }
        }

        private void listBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.btnOK.Enabled = true;
        }




        public static string BrowseNetworkServers()
        {
            BrowseForServers dialog = new BrowseForServers();
            if (DialogResult.OK == dialog.ShowDialog())
            {
                return dialog.listBox.Text;
            }

            return null;
        }

        private void listBox_DoubleClick(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(listBox.SelectedItem as string))
            {
                DialogResult = DialogResult.OK;
                this.Close();
            }
        }
    }

}
 