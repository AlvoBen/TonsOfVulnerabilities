using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using com.calitha.goldparser;

namespace Epi.Core.AnalysisInterpreter.Rules
{



    public         class Rule_EPIWEEK : AnalysisRule
    {
        private List ParameterList = new List();
        private DateTime _dateTimeGiven;
        private int _firstDayOfWeek = 0;

        public Rule_EPIWEEK(Rule_Context pContext, NonterminalToken pToken)
            : base(pContext)
        {
            this.ParameterList = AnalysisRule.GetFunctionParameters(pContext, pToken);
        }





        public override object Execute()
        {




            object result = null;

            if (this.ParameterList.Count >= 1)
            {
                if (this.ParameterList[0] != null && this.ParameterList[0].Execute() != null)
                {
                    if (DateTime.TryParse(this.ParameterList[0].Execute().ToString(), out _dateTimeGiven) == false)
                    {
                        return null;
                    }
                }
            }

            if (this.ParameterList.Count >= 2)
            {
                if (this.ParameterList[1].Execute().ToString() != null)
                {
                    string firstDayString = this.ParameterList[1].Execute().ToString();
                    int parsedInt = 0;
                    if (int.TryParse(firstDayString, out parsedInt))
                    {
                        _firstDayOfWeek = parsedInt - 1;
                    }
                }
            }

            if (_dateTimeGiven != null)
            {
                DateTime MMWR__Start;
                MMWR__Start = GetMMWRStart(_dateTimeGiven, _firstDayOfWeek);

                TimeSpan MMWR__DayCount = _dateTimeGiven.Subtract(MMWR__Start);
                int MMWR__Week = ((int)(MMWR__DayCount.Days / 7)) + 1;

                return MMWR__Week;
            }
            else
            {
                return result;
            }
        }

























        private DateTime GetMMWRStart(int gregorianYear, int firstDayOfWeek = 0)
        {
            DateTime dateResult;
            DateTime dateYearBegin = new DateTime(gregorianYear, 1, 1);
            DayOfWeek firstDayOfYear = (DayOfWeek)dateYearBegin.DayOfWeek;

            if (firstDayOfYear <= (DayOfWeek)firstDayOfWeek + 3)
            {
                dateResult = dateYearBegin.AddDays(firstDayOfWeek - (int)firstDayOfYear);
            }
            else
            {
                dateResult = dateYearBegin.AddDays(7 - firstDayOfWeek - (int)firstDayOfYear);
            }

            return dateResult;
        }

        private DateTime GetMMWRStart(DateTime dateTime, int firstDayOfWeek = 0)
        {
            DateTime MMWRStart_YearMinusOne = GetMMWRStart(dateTime.Year - 1, firstDayOfWeek);
            DateTime MMWRStart = GetMMWRStart(dateTime.Year, firstDayOfWeek);
            DateTime MMWRStart_YearPlusOne = GetMMWRStart(dateTime.Year + 1, firstDayOfWeek);

            int delta = MMWRStart.Subtract(dateTime).Days;
            int delta_PlusOne = MMWRStart_YearPlusOne.Subtract(dateTime).Days;

            if (delta > 0)
            {
                return MMWRStart_YearMinusOne;
            }
            else if (delta_PlusOne > 0)
            {
                return MMWRStart;
            }
            else
            {
                return MMWRStart_YearPlusOne;
            }
        }
    }
}

 