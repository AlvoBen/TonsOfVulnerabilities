using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Text;
using Epi;
using Epi.Data;
using VariableCollection = Epi.Collections.NamedObjectCollection;

namespace Epi.Core.AnalysisInterpreter
{



    public class DataSourceInfo : IDisposable
    {
        //Private Attributes
        private DataTable primaryTable = null;
        private ArrayList joinTableList = null;
        private VariableCollection standardVariables = null;

        private string selectCriteria = String.Empty;
        private SortCriteria sortCriteria = null;
        //Private Attributes


        //Public Interface

        //Constructors



        public DataSourceInfo()
        {
            sortCriteria = new SortCriteria();
        }
        //Constructors

        //Public Properties




        public string SelectCriteria
        {
            get
            {
                return selectCriteria;
            }
        }



        public DataTable PrimaryTable
        {
            get
            {
                return primaryTable;
            }
            set
            {
                primaryTable = value;
            }
        }




        public ArrayList JoinTableList
        {
            get
            {
                if (this.joinTableList == null)
                {
                    joinTableList = new ArrayList();
                }
                return joinTableList;
            }
        }




        public IDbDriver Db
        {
            get
            {
                return ((ITable)PrimaryTable).Database;
            }
        }




        public SortCriteria SortCriteria
        {
            get
            {
                return this.sortCriteria;
            }
        }
























        public string SqlStatementPartWhere
        {
            get
            {
                return this.selectCriteria;
            }
            set
            {
                this.selectCriteria = value;
            }
        }





        public string GetSqlStatementPartSortBy()
        {
            string sortClause = sortCriteria.ToString();
            if (!string.IsNullOrEmpty(sortClause))
            {
                return (" order by " + sortClause);
            }
            else
            {
                return string.Empty;
            }
        }

        //Public Properties

        //Public Methods




        public void Dispose() 
        {
            if (joinTableList != null)
            {
                joinTableList.Clear();
                joinTableList = null;
            }
            if (standardVariables != null)
            {
                standardVariables.Clear();
                standardVariables = null;
            }
        }













        public bool ValidWhereClause(Rule_Context pContext, string expression)
        {
            try
            {
                string testExpression = expression;

                testExpression = testExpression.Replace(StringLiterals.EPI_REPRESENTATION_OF_TRUE, "1");
                testExpression = testExpression.Replace(StringLiterals.EPI_REPRESENTATION_OF_FALSE, "0");

                return true;
            }
            catch (Exception)
            {
                throw new GeneralException(string.Format(SharedStrings.INVALID_EXPRESSION, "\"" + expression.Trim() + "\""));
            }
        }





        public int GetRecordCount(Rule_Context pContext, string columnName)
        {
            //Input Validation
            if (string.IsNullOrEmpty(columnName))
            {
                throw new ArgumentNullException("columnName");
            }
            //Input Validation
            WordBuilder queryBuilder = new WordBuilder();
            queryBuilder.Append("select count" + Util.InsertInParantheses(columnName));
            queryBuilder.Append(GetSqlStatementPartFrom(pContext));
            if (Db.ColumnExists(PrimaryTable.TableName, ColumnNames.REC_STATUS))
            {
                string whereStatement = GetSqlStatementPartWhere();
                queryBuilder.Append(whereStatement);
            }
            else if (!string.IsNullOrEmpty(selectCriteria))
            {
                string whereClause = " where " + this.selectCriteria;
                queryBuilder.Append(whereClause);
            }
            Query query = Db.CreateQuery(queryBuilder.ToString());

            int result = Int32.Parse((Db.ExecuteScalar(query)).ToString());
            return result;
        }











        public int LogicallyDeleteRecords(string criteria, bool delete)
        {
            string tableName = PrimaryTable.TableName;
            string where = GetSqlStatementPartWhere();
            if (!string.IsNullOrEmpty(criteria))
            {
                if (string.IsNullOrEmpty(where))
                {
                    where = " where ";
                }
                else if (criteria != "*")
                {
                    where += " and ";
                }
                where += criteria;
            }
            string sql = "Update " + tableName + " set recstatus = " + ((delete) ? "0" : "1") + where;
            Epi.Data.Query qry = Db.CreateQuery(sql);
            return Db.ExecuteNonQuery(qry);

        }









        public int PhysicallyDeleteRecords(string criteria)
        {
            string tableName = PrimaryTable.TableName;
            string where = GetSqlStatementPartWhere();
            if (!string.IsNullOrEmpty(criteria))
            {
                if (string.IsNullOrEmpty(where))
                {
                    where = " where ";
                }
                else if (criteria != "*")
                {
                    where += " and ";
                }
                where += criteria;
            }

            string sql = "Delete from " + tableName + where;
            Epi.Data.Query qry = Db.CreateQuery(sql);
            return Db.ExecuteNonQuery(qry);

        }





        public int GetRecordCount(Rule_Context pContext)
        {
            return GetRecordCount(pContext, StringLiterals.STAR);
        }










        public DataTable GetData(Rule_Context pContext, IVariable var, string[] strata)
        {
            //Preconditions
            if (strata == null)
            {
                return GetData(pContext, var);
            }
            //

            StringBuilder sql = new StringBuilder("select ");
            if (var.VarType == VariableType.DataSource)
            {
                sql.Append("[").Append(var.Name).Append("]");
            }
            else
            {
                sql.Append(var.Expression);
            }
            if (strata.GetLength(0) > 0)
            {
                int count = strata.GetLength(0);
                for (int i = 0; i < count; i++)
                {
                    sql.Append(", [").Append(strata[i].ToString()).Append("]");
                }
            }
            sql.Append(this.GetSqlStatementPartFrom(pContext));
            sql.Append(this.GetSqlStatementPartWhere());
            sql.Append(this.GetSqlStatementPartSortBy());
            Query query = Db.CreateQuery(sql.ToString());
            return Db.Select(query);
        }








        public DataTable GetData(Rule_Context pContext, IVariable var)
        {
            StringBuilder sql = new StringBuilder("select ");
            if (var.VarType == VariableType.DataSource)
            {
                sql.Append("[").Append(var.Name).Append("]");
            }
            else
            {
                sql.Append(var.Expression);
            }
            sql.Append(this.GetSqlStatementPartFrom(pContext));
            sql.Append(this.GetSqlStatementPartWhere());
            sql.Append(this.GetSqlStatementPartSortBy());
            Query query = Db.CreateQuery(sql.ToString());
            return Db.Select(query);
        }






        public DataTable GetData(Rule_Context pContext)
        {
            string queryString = "select * "
                                + this.GetSqlStatementPartFrom(pContext)
                                + this.GetSqlStatementPartWhere()
                                + this.GetSqlStatementPartSortBy();
            Query query = Db.CreateQuery(queryString);
            return Db.Select(query);
        }

        string ExcludeMissing(string currentWhereClause, string[] names)
        {
            StringBuilder sb = new StringBuilder(currentWhereClause);
            if (!Configuration.GetNewInstance().Settings.IncludeMissingValues)
            {
                foreach (string name in names)
                {
                    if (string.IsNullOrEmpty(sb.ToString()))
                    {
                        sb.Append(" where ");
                    }
                    else
                    {
                        sb.Append(" and [").Append(name).Append("] is not null");
                    }
                }
            }
            return sb.ToString();

        }










        public DataSet GetDataSet2x2(Rule_Context pContext, string exposure, string outcome)
        {
            DataSet ds = null;
            try
            {
                StringBuilder sb = new StringBuilder("select ");
                sb.Append(exposure).Append(" AS [").Append(ColumnNames.EXPOSURE).Append("], [");
                sb.Append(outcome).Append("] AS [").Append(ColumnNames.OUTCOME);
                sb.Append("], count([").Append(outcome).Append("]) AS [").Append(ColumnNames.COUNT);
                sb.Append("] ");
                sb.Append(GetSqlStatementPartFrom(pContext));


                if (PrimaryTable.Columns.Contains(ColumnNames.REC_STATUS))
                {
                    sb.Append(ExcludeMissing(GetSqlStatementPartWhere(),
                                      CxNull));
                }

                else if (!string.IsNullOrEmpty(selectCriteria))
                {
                    string whereClause = " where " + this.selectCriteria;
                    sb.Append(ExcludeMissing(whereClause,  CxNull));
                }
                sb.Append(" group by [").Append(exposure).Append("], [").Append(outcome);
                sb.Append("] order by [").Append(exposure);
                sb.Append("], [").Append(outcome).Append("];");

                DataTable Table2x2 = DBReadExecute.GetDataTable(pContext.CurrentRead.File, sb.ToString());



                Table2x2.TableName = "Table2x2";
                ds = new DataSet("dsTable2x2");
                ds.Tables.Add(Table2x2);



            }
            catch (Exception ex)
            {
                throw new GeneralException(SharedStrings.UNABLE_CREATE_2X2, ex);
            }
            return ds;
        }








        public DataSet GetFrequencies(Rule_Context pContext, IVariable var, string[] strata, string weightVar)
        {
            StringBuilder sb = new StringBuilder("select ");
            if (var.VarType != VariableType.DataSource)
            {
                sb.Append("(").Append(var.Expression).Append(") AS ");
            }
            sb.Append(var.Name).Append(", count(*) AS " + ColumnNames.FREQUENCY);

            if (!string.IsNullOrEmpty(weightVar))  
            {
                sb.Append(", sum(").Append(weightVar).Append(") as ").Append(ColumnNames.WEIGHT);
            }
            else
            {
                sb.Append(", 1 as ").Append(ColumnNames.WEIGHT);
            }
            if (strata != null)
            {
                foreach (string stratum in strata)
                {
                    sb.Append(", ").Append(stratum);
                }
            }
            sb.Append(GetSqlStatementPartFrom(pContext));
            string s = null;
            if (Db.ColumnExists(PrimaryTable.TableName, ColumnNames.REC_STATUS))
            {
                s = GetSqlStatementPartWhere();
            }
            else if (!string.IsNullOrEmpty(selectCriteria))
            {
                s = " where " + this.selectCriteria;
            }
            if (!string.IsNullOrEmpty(s))
            {
                sb.Append(s);
            }
            if (!Configuration.GetNewInstance().Settings.IncludeMissingValues && strata != null)
            {
                sb.Append((string.IsNullOrEmpty(s)) ? " where " : " and ");
                foreach (string stratum in strata)
                {
                    sb.Append(stratum).Append(" is not null and ");
                }
                sb.Length -= 4;
            }
            sb.Append(" group by ");
            if (var.VarType == VariableType.DataSource)
            {
                sb.Append(var.Name);
            }
            else
            {
                sb.Append(var.Expression);
            }
            if (strata != null)
            {
                foreach (string stratum in strata)
                {
                    sb.Append(", ").Append(stratum);
                }
                sb.Append(" order by ");
                foreach (string stratum in strata)
                {
                    sb.Append(stratum).Append(",");
                }
                sb.Append(var.Name).Append(" desc;");
            }
            string queryString = sb.ToString();
            if (string.IsNullOrEmpty(queryString))
            {
                return null;
            }
            else
            {
                DataSet ds = new DataSet("FreqDataSet");
                if (strata != null)
                {
                    ds.Tables.Add(DistinctStrata(pContext, strata));
                }

                DataTable freq = Db.Select(Db.CreateQuery(queryString));
                freq.TableName = "Frequencies";
                ds.Tables.Add(freq);
                return ds;
            }
        }








        public DataTable GetFrequency(Rule_Context pContext, IVariable variable)
        {
            string columnName = variable.Name;
            string s = (string.IsNullOrEmpty(this.SqlStatementPartWhere)) ? " where " : " and ";
            string queryString = "select " + columnName + ", Count(*) AS " + ColumnNames.FREQUENCY;
            queryString += " From (select ";
            if (variable.VarType != VariableType.DataSource)
            {
                queryString += variable.Expression + " as ";
            }
            queryString += columnName + this.GetSqlStatementPartFrom(pContext)
                + this.GetSqlStatementPartWhere()
                + ") as TRecode Group by " + columnName;
            if (string.IsNullOrEmpty(queryString))
            {
                return null;
            }
            else
            {
                Query query = Db.CreateQuery(queryString);
                return Db.Select(query);
            }
        }























        public string GetSqlStatementPartWhere()
        {
            string whereClause = string.Empty;
            if (!string.IsNullOrEmpty(selectCriteria))
            {
                whereClause = " where " + this.selectCriteria;
            }
            int scope = Configuration.GetNewInstance().Settings.RecordProcessingScope;
            if (scope != (int)(RecordProcessingScope.Both))
            {
                whereClause += (string.IsNullOrEmpty(whereClause)) ? " where " : " and ";
                whereClause += "[" + ColumnNames.REC_STATUS + "] = ";
                whereClause += (scope == (int)(RecordProcessingScope.Deleted)) ? "0" : "1";
            }
            return whereClause;
        }






        public DataTable DistinctColumn(Rule_Context pContext, string colName)
        {
            //Preconditions
            if (string.IsNullOrEmpty(colName))
            {
                return null;
            }
            //preconditions
            return DistinctStrata(pContext, new string[1] { colName });
        }






        public DataTable DistinctStrata(Rule_Context pContext, string[] strata)
        {
            //Preconditions
            if (strata == null)
            {
                return null;
            }
            //preconditions

            StringBuilder strataQuery = new StringBuilder("select distinct ");
            foreach (string stratum in strata)
            {
                strataQuery.Append(stratum).Append(", ");
            }
            strataQuery.Length -= 2;
            strataQuery.Append(GetSqlStatementPartFrom(pContext));


            if (PrimaryTable.Columns.Contains(ColumnNames.REC_STATUS))
            {
                strataQuery.Append(ExcludeMissing(GetSqlStatementPartWhere(), strata));
            }
            else if (!string.IsNullOrEmpty(selectCriteria))
            {
                string whereClause = " where " + this.selectCriteria;
                strataQuery.Append(ExcludeMissing(whereClause, strata));
            }

            strataQuery.Append(" order by ");
            foreach (string stratum in strata)
            {
                strataQuery.Append(stratum).Append(" desc, ");
            }
            strataQuery.Length -= 2;
            DataTable strataTable = new DataTable("Strata");
            strataTable = Db.Select(Db.CreateQuery(strataQuery.ToString()), strataTable);
            return strataTable;
        }

        //Public Methods


        //Public Interface

        //Private Methods






        private string GetSqlStatementPartFrom(Rule_Context pContext)
        {
            string fromClause = " from " + pContext.CurrentRead.Identifier;
            foreach (JoinTable joinTable in JoinTableList)
            {
                fromClause += " inner join " + joinTable.Table.TableName;
                fromClause += " on " + joinTable.Condition;
            }
            return fromClause;
        }


        //Private Methods

    }




    public class JoinTable
    {
        //Private Class Members
        private ITable table = null;
        private string condition = string.Empty;
        //Private Class Members

        //Constructors



        public JoinTable()
        {
        }






        public JoinTable(ITable table, string condition)
        {
            this.Table = table;
            this.Condition = condition;
        }
        //Constructors

        //Public Properties



        public ITable Table
        {
            get
            {
                return table;
            }
            set
            {
                table = value;
            }
        }




        public string Condition
        {
            get
            {
                return this.condition;
            }
            set
            {
                this.condition = value;
            }
        }
        //Public Properties
    }

}

 