using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Epi.Data;
using Epi.Fields;

namespace Epi.Windows.ImportExport.Dialogs
{
    public         class SelectMatchFields : Form
    {
        public List KeyFields { get {return _KeyFields; } set{ _KeyFields=value; } } List _KeyFields;
                View Form { get {return _Form; } set{ _Form=value; } } View _Form;
                Project Project { get {return _Project; } set{ _Project=value; } } Project _Project;

        public SelectMatchFields()
        {
            InitializeComponent();
        }

        public SelectMatchFields(Project sourceProject, View form, List selectedFields = null)
        {
            InitializeComponent();

            this.Project = sourceProject;
            this.Form = form;
            this.KeyFields = new List();

            foreach (Field field in Form.Fields)
            {
                if (field is RenderableField && field is IDataField)
                {
                    lbxFields.Items.Add(field.Name);
                }
            }

            if (selectedFields != null)
            {
                foreach (Field field in selectedFields)
                {
                    lbxFields.SelectedItems.Add(field.Name);
                }
            }
        }

                void btnOK_Click(object sender, EventArgs e)
        {
            KeyFields = new List();

            if (lbxFields.SelectedItems.Count == 0)
            {
                return;
            }

            try
            {
                //Check #1 - Make sure key is unique on parent form
                IDbDriver db = Project.CollectedData.GetDatabase();

                Query selectQuery = db.CreateQuery("SELECT Count(*) FROM [" + Form.TableName + "]");
                int recordCount = (int)db.ExecuteScalar(selectQuery);

                WordBuilder wb = new WordBuilder(",");

                foreach (Field field in Form.Fields)
                {
                    if (field is RenderableField && lbxFields.SelectedItems.Contains(field.Name))
                    {
                        wb.Add(field.Name);
                    }
                }

                selectQuery = db.CreateQuery("SELECT DISTINCT " + wb.ToString() + " " + Form.FromViewSQL);
                int distinctCount = db.Select(selectQuery).Rows.Count; 

                if (distinctCount == recordCount)
                {
                    foreach (Field field in Form.Fields)
                    {
                        if (field is RenderableField && lbxFields.SelectedItems.Contains(field.Name))
                        {
                            KeyFields.Add(field);
                        }
                    }
                }
                else
                {
                    if (lbxFields.SelectedItems.Count == 1)
                    {
                        Epi.Windows.MsgBox.ShowError(String.Format("The selected match key ({0}) is not unique.", lbxFields.SelectedItem.ToString()));
                    }
                    else if (lbxFields.SelectedItems.Count > 1)
                    {
                        WordBuilder keyFields = new WordBuilder(",");
                        foreach (string s in lbxFields.SelectedItems)
                        {
                            keyFields.Add(s);
                        }
                        Epi.Windows.MsgBox.ShowError(String.Format("The selected match key ({0}) is not unique.", keyFields.ToString()));
                    }

                    this.DialogResult = System.Windows.Forms.DialogResult.None;
                    return;
                }
                //


                foreach (View otherForm in Project.Views)
                {
                    if (otherForm != Form && Epi.ImportExport.ImportExportHelper.IsFormDescendant(otherForm, Form))
                    {
                        Epi.Windows.MsgBox.ShowError("Custom match keys cannot be used to package a form that contains child forms.");
                        this.DialogResult = System.Windows.Forms.DialogResult.None;
                        return;
                    }
                }

































            }
            catch (Exception ex)
            {
                Epi.Windows.MsgBox.ShowException(ex);
                this.DialogResult = System.Windows.Forms.DialogResult.None;
            }
        }

                void btnClear_Click(object sender, EventArgs e)
        {
            lbxFields.SelectedItems.Clear();
        }
    }
}

 