using System;

namespace Epi
{
    //Custom EventArgs




    public class MessageEventArgs : EventArgs
    {
        //Private Attributes
        private string message;
        private bool createLogEntry;
        //Private Attributes

        //Constructor




        public MessageEventArgs(string msg)
        {
            this.message = msg;
            createLogEntry = true;
        }






        public MessageEventArgs(string msg, bool createLogEntry)
        {
            this.message = msg;
            this.createLogEntry = createLogEntry;
        }

        //Constructor

        //Public Properties




        public string Message
        {
            get { return message; }
        }




        public bool CreateLogEntry
        {
            get { return this.createLogEntry; }
        }
        //Public Properties
    }





    public class ImportStartedEventArgs : EventArgs
    {
        //Private Members
        private int objectCount;
        //

        //Constructors





        public ImportStartedEventArgs(int count)
        {
            objectCount = count;
        }

        //Constructors

        //Public Properties



        public int ObjectCount
        {
            get
            {
                return objectCount;
            }
        }

        //Public Properties
    }








































    public class TableCopyStatusEventArgs : EventArgs
    {
        //Private Attributes

        private int recordCount = 0;
        private string tableName = string.Empty;
        private int totalRecordCount = 0;

        //Private Attributes

        //Constructors





        public TableCopyStatusEventArgs(string tableName, int recCount)
        {
            this.tableName = tableName;
            this.recordCount = recCount;
        }






        public TableCopyStatusEventArgs(string tableName, int recCount, int totalRecords)
        {
            this.tableName = tableName;
            this.recordCount = recCount;
            this.totalRecordCount = totalRecords;
        }
        //Constructors

        //Public Properties




        public int RecordCount
        {
            get { return this.recordCount; }
        }




        public string TableName
        {
            get { return this.tableName; }
        }




        public int TotalRecords
        {
            get { return this.totalRecordCount; }
        }

        //Public Properties
    }

    public class SaveRecordEventArgs : EventArgs
    {
        private View _form;
        private string _recordGuid;
        private string _fKey;

        public SaveRecordEventArgs()
        {
        }

        public SaveRecordEventArgs(View form, string recordGuid, string fKey = "")
        {
            this._form = form;
            this._recordGuid = recordGuid;
            this._fKey = fKey;
        }

        public View Form { get { return this._form; } }
        public string RecordGuid { get { return this._recordGuid; } }
        public string RecordFkey { get { return this._fKey; } }
    }

    //CustomEventArgs

    //Delegates





    public delegate void BeginBusyEventHandler(string message);




    public delegate void EndBusyEventHandler();






    public delegate void SetGadgetStatusHandler(string statusMessage, double progress = 0);






    public delegate void SetProgressAndStatusHandler(string statusMessage, double progress = 0);





    public delegate void SetProgressBarDelegate(double progress);





    public delegate void SetMaxProgressBarValueDelegate(double maxProgress);




    public delegate bool CheckForCancellationHandler();






    public delegate void MessageEventHandler(object sender, MessageEventArgs e);







    public delegate void ProgressReportBeginEventHandler(int min, int max, int step);




    public delegate void ProgressReportUpdateEventHandler();




    public delegate void SimpleEventHandler();






    public delegate void TableCopyStatusEventHandler(object sender, TableCopyStatusEventArgs e);





    public delegate void UpdateStatusEventHandler(string message);

    public delegate void SaveRecordEventHandler(object sender, SaveRecordEventArgs e);

    //Delegates
}
 