using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;

namespace Epi.Data
{



    public abstract class DbDriverBase : IDbDriver
    {
        //Public Events

        //Public Events

        //Public Properties




        public abstract string SchemaPrefix { get {return _SchemaPrefix; } set{ _SchemaPrefix=value; } } string _SchemaPrefix;







        public abstract bool IsBulkOperation { get {return _IsBulkOperation; } set{ _IsBulkOperation=value; } } bool _IsBulkOperation;








        public abstract string FullName { get {return _FullName; } set{ _FullName=value; } } string _FullName;







        public abstract string DbName { get {return _DbName; } set{ _DbName=value; } } string _DbName;








        public abstract string ConnectionString { get {return _ConnectionString; } set{ _ConnectionString=value; } } string _ConnectionString;








        public abstract int TableColumnMax { get {return _TableColumnMax; } set{ _TableColumnMax=value; } } int _TableColumnMax;










        public abstract string OleConnectionString { get {return _OleConnectionString; } set{ _OleConnectionString=value; } } string _OleConnectionString;







        public abstract string DataSource { get {return _DataSource; } set{ _DataSource=value; } } string _DataSource;







        public abstract string ConnectionDescription { get {return _ConnectionDescription; } set{ _ConnectionDescription=value; } } string _ConnectionDescription;



        //Public Properties

        //Public Methods





        public virtual bool IsDatabaseFormatValid(ref string validationMessage)
        {
            return true;
        }








        public abstract bool AlterColumnType(string tableName, string columnName, string newColumnType);







        public abstract bool AddColumn(string tableName, TableColumn column);





        public abstract bool TestConnection();






        public abstract void CreateTable(string tableName, List columns);





























        public abstract DataSets.TableSchema.TablesDataTable GetTableSchema();





        public abstract int GetTableCount();









        public abstract int GetTableColumnCount(string tableName);






        public abstract DataTable Select(Query selectQuery);







        public abstract DataTable Select(Query selectQuery, DataTable table);







        public abstract bool ColumnExists(string tableName, string columnName);





        public abstract bool CompactDatabase();





        public abstract int ExecuteNonQuery(Query nonQueryStatement);






        public abstract int ExecuteNonQuery(Query nonQueryStatement, IDbTransaction transaction);






        public abstract object ExecuteScalar(Query scalarStatement);







        public abstract object ExecuteScalar(Query scalarStatement, IDbTransaction transaction);






        public abstract bool DeleteTable(string tableName);







        public abstract bool DeleteColumn(string tableName, string columnName);






        public abstract bool TableExists(string tableName);






        public abstract DataSets.TableColumnSchema.ColumnsDataTable GetTableColumnSchema(string tableName);







        public abstract DataSets.ANSI.TableColumnSchema.ColumnsDataTable GetTableColumnSchemaANSI(string tableName);






        public abstract DataSets.TableKeysSchema.Primary_KeysDataTable GetTableKeysSchema(string tableName);






        public abstract DataTable GetTableData(string tableName);









        public abstract DataTable GetTableData(string tableName, string columnNames);










        public abstract DataTable GetTableData(string tableName, string columnNames, string sortCriteria);







        public virtual DataTable GetTableData(string tableName, List columnNames)
        {
            WordBuilder wb = new WordBuilder(",");
            foreach (string s in columnNames)
            {
                wb.Add(this.InsertInEscape(s));
            }
            return GetTableData(tableName, wb.ToString(), string.Empty);
        }






        public abstract DataTable GetTopTwoTable(string tableName);






        public abstract IDataReader GetTableDataReader(string tableName);







        public abstract IDataReader ExecuteReader(Query selectQuery, CommandBehavior commandBehavior);






        public abstract IDataReader ExecuteReader(Query selectQuery);






        public abstract List GetTableColumnNames(string tableName);

        public abstract Dictionary GetTableColumnNameTypePairs(string tableName);






        public abstract DataView GetTextColumnNames(string tableName);





        public abstract IDbTransaction OpenTransaction();






        public abstract IDbTransaction OpenTransaction(IsolationLevel isolationLevel);





        public abstract void CloseTransaction(IDbTransaction transaction);








        public abstract void Update(DataTable dataTable, string tableName, Query insertQuery, Query updateQuery);




        public abstract void UpdateGUIDs(string childTableName, string parentTableName);




        public abstract void UpdateKeys(string childTableName, string parentTableName);




        public virtual void Dispose()
        {
        }





        public abstract List GetTableNames();






        public abstract Query CreateQuery(string ansiSqlStatement);
        //Public Methods

        //IDbDriver Members




        public virtual ProjectPermissions GetPermissions()
        {
            return new ProjectPermissions();
        }






        public abstract DataTable GetCodeTableNamesForProject(Project project);






        public abstract Epi.DataSets.TableSchema.TablesDataTable GetCodeTableList(IDbDriver db);






        public abstract string IdentifyDatabase();






        public abstract string InsertInEscape(string str);






        public List InsertInEscape(List strings)
        {
            List newList = new List();
            foreach (string str in strings)
            {
                newList.Add(InsertInEscape(str));
            }
            return newList;
        }






        public virtual string FormatDate(DateTime dt)
        {
            return Util.InsertInSingleQuotes(dt.ToShortDateString());
        }






        public virtual string FormatDateTime(DateTime dt)
        {
            return Util.InsertInSingleQuotes(dt.ToString());
        }






        public virtual string FormatTime(DateTime dt)
        {
            return Util.InsertInSingleQuotes(dt.ToString());
        }






        public abstract string GetDbSpecificColumnType(GenericDbColumnType dataType);

        public abstract string SyntaxTrue { get {return _SyntaxTrue; } set{ _SyntaxTrue=value; } } string _SyntaxTrue;




        public abstract string SyntaxFalse { get {return _SyntaxFalse; } set{ _SyntaxFalse=value; } } string _SyntaxFalse;




        public abstract System.Data.Common.DbDataAdapter GetDbAdapter(string p);

        public abstract System.Data.IDbConnection GetConnection();

        public abstract System.Data.Common.DbCommand GetCommand(string pKeyString, DataTable pDataTable);

        public abstract System.Data.Common.DbCommandBuilder GetDbCommandBuilder(System.Data.Common.DbDataAdapter Adapter);

        public abstract bool InsertBulkRows(string pSelectSQL, System.Data.Common.DbDataReader pDataReader, SetGadgetStatusHandler pStatusDelegate = null, CheckForCancellationHandler pCancellationDelegate = null);
        public abstract bool Insert_1_Row(string pSelectSQL, System.Data.Common.DbDataReader pDataReader);

        public abstract bool Update_1_Row(string pSelectSQL, string pKeyString, System.Data.Common.DbDataReader pDataReader);

        public abstract bool CheckDatabaseTableExistance(string pFileString, string pTableName, bool pIsConnectionString = false);
        public abstract bool CreateDataBase(string pFileString);
        public abstract bool CheckDatabaseExistance(string pFileString, string pTableName, bool pIsConnectionString = false);

        //
    }
}

 