using System;
using System.Data;
using System.Data.Common;
using Epi.Data;

namespace Epi.Data.Services
{



 public class PHINVSProvider
    {
        //Fields
        private IDbDriver db;
        private static PHINVSProvider instance;
        private static Object classLock = typeof(PHINVSProvider);
        //Fields

        //Constructors










        private PHINVSProvider()
        {
            IDbDriverFactory dbFactory = DbDriverFactoryCreator.GetDbDriverFactory(Configuration.AccessDriver);

            this.db = dbFactory.CreateDatabaseObjectByConfiguredName(DbDriverFactoryCreator.KnownDatabaseNames.Phin);
        }
        //Constructors

        //Public Properties



        public static PHINVSProvider Instance
        {
            get
            {
                lock (classLock)
                {
                    if (instance == null)
                    {
                        instance = new PHINVSProvider();
                    }
                    return instance;
                }
            }
        }
        //Public Properties

        //Protected Properties



        protected virtual IDbDriver Db
        {
            get
            {
                return db;
            }
            set
            {
                db = value;
            }
        }
        //Protected Properties

        //Public Methods





  public DataTable GetDomains()
  {
   string queryString = " select [Code], [Name] from DOMAINS order by [Name]";
   Query query = Db.CreateQuery(queryString);
   return Db.Select(query);
  }







  public DataTable GetValueSets(string domainCode)
  {
   string queryString = " select [Code], [Name] from ValueSets V inner join ValueSets_Domains VD on V.Code = VD.ValueSetCode where [VD.DomainCode] = @DomainCode order by [Name]";
   Query query = Db.CreateQuery(queryString);
   query.Parameters.Add(new QueryParameter("@DomainCode", DbType.String, domainCode));
   return Db.Select(query);
  }







  public DataTable GetConcepts(string valueSetCode, string fieldName)
  {
            try
            {
                string queryString = " select [Code], [Name] from [" + valueSetCode + "] order by [Name] ";
                Query query = Db.CreateQuery(queryString);
                DataTable table = Db.Select(query);
                table.Columns[0].ColumnName = fieldName;
                return table;
            }
   finally
   {
   }
  }
  //Public Methods
 }
}
 