using System;
using System.Data;
using System.Xml;
using System.Collections;
using System.Collections.Generic;

namespace Epi.Data
{



    public interface IDbDriver
    {
        //Properties




        string SchemaPrefix
        {
            get;
        }




        bool IsBulkOperation
        {
            get;
            set;
        }




        string FullName
        {
            get;
        }




        string DbName
        {
            get;
            set;
        }




        string ConnectionString
        {
            get;
            set;
        }







        string OleConnectionString
        {
            get;
        }




        string DataSource
        {
            get;
        }




        string ConnectionDescription
        {
            get;
        }




        int TableColumnMax
        {
            get;
        }

        string SyntaxTrue
        {
            get;
        }

        string SyntaxFalse
        {
            get;
        }

        //Properties

        //Methods





        bool IsDatabaseFormatValid(ref string validationMessage);





        ProjectPermissions GetPermissions();





        bool TestConnection();






        void CreateTable(string tableName, List columns);





        List GetTableNames();





        DataSets.TableSchema.TablesDataTable GetTableSchema();





        int GetTableCount();









        int GetTableColumnCount(string tableName);








        bool AlterColumnType(string tableName, string columnName, string columnType);







        bool AddColumn(string tableName, TableColumn column);






        DataTable Select(Query selectQuery);







        DataTable Select(Query selectQuery, DataTable table);







        bool ColumnExists(string tableName, string columnName);






        bool CompactDatabase();






        int ExecuteNonQuery(Query nonQueryStatement);






        int ExecuteNonQuery(Query nonQueryStatement, IDbTransaction transaction);






        object ExecuteScalar(Query scalarStatement);







        object ExecuteScalar(Query scalarStatement, IDbTransaction transaction);






        bool DeleteTable(string tableName);







        bool DeleteColumn(string tableName, string columnName);






        bool TableExists(string tableName);






        DataSets.TableColumnSchema.ColumnsDataTable GetTableColumnSchema(string tableName);






        DataSets.ANSI.TableColumnSchema.ColumnsDataTable GetTableColumnSchemaANSI(string tableName);






        DataSets.TableKeysSchema.Primary_KeysDataTable GetTableKeysSchema(string tableName);






        DataTable GetTableData(string tableName);







        DataTable GetTableData(string tableName, string columnNames);








        DataTable GetTableData(string tableName, string columnNames, string sortCriteria);







        DataTable GetTableData(string tableName, List columnNames);






        DataTable GetTopTwoTable(string tableName);






        IDataReader GetTableDataReader(string tableName);






        IDataReader ExecuteReader(Query selectQuery, CommandBehavior commandBehavior);






        IDataReader ExecuteReader(Query selectQuery);






        List GetTableColumnNames(string tableName);






        Dictionary GetTableColumnNameTypePairs(string tableName);






        DataView GetTextColumnNames(string tableName);





        IDbTransaction OpenTransaction();






        IDbTransaction OpenTransaction(IsolationLevel isolationLevel);





        void CloseTransaction(IDbTransaction transaction);








        void Update(DataTable dataTable, string tableName, Query insertQuery, Query updateQuery);




        void UpdateGUIDs(string childTableName, string parentTableName);




        void UpdateKeys(string childTableName, string parentTableName);




        void Dispose();






        Query CreateQuery(string ansiSqlStatement);






        DataTable GetCodeTableNamesForProject(Project project);






        DataSets.TableSchema.TablesDataTable GetCodeTableList(IDbDriver db);





        string IdentifyDatabase();






        string GetDbSpecificColumnType(GenericDbColumnType dataType);






        string InsertInEscape(string str);






        List InsertInEscape(List strings);






        string FormatDate(DateTime dt);






        string FormatDateTime(DateTime dt);






        string FormatTime(DateTime time);

        System.Data.Common.DbDataAdapter GetDbAdapter(string p);
        System.Data.IDbConnection GetConnection();
        System.Data.Common.DbCommand GetCommand(string pKeyString, DataTable pDataTable);
        System.Data.Common.DbCommandBuilder GetDbCommandBuilder(System.Data.Common.DbDataAdapter Adapter);
        bool InsertBulkRows(string pSelectSQL, System.Data.Common.DbDataReader pDataReader, SetGadgetStatusHandler pStatusDelegate = null, CheckForCancellationHandler pCancellationDelegate = null);
        bool Insert_1_Row(string pSelectSQL, System.Data.Common.DbDataReader pDataReader);
        bool Update_1_Row(string pSelectSQL, string pKeyString, System.Data.Common.DbDataReader pDataReader);
        bool CheckDatabaseTableExistance(string pFileString, string pTableName, bool pIsConnectionString = false);
        bool CreateDataBase(string pFileString);
        bool CheckDatabaseExistance(string pFileString, string pTableName, bool pIsConnectionString = false);
        //Methods


    }
}
 