namespace Epi.DataSets
{



            class AppDataSet
    {
                class DataPatternsDataTable
        {
            //Public Methods






            public string GetMaskByPattern(string pattern)
            {
                foreach (DataPatternsRow row in this.Rows)
                {
                    if (row.Expression.Equals(pattern))
                    {
                        return row["Mask"].ToString();
                    }
                }
                return pattern;
            }

            public string GetFormat(string pattern)
            {
                foreach (DataPatternsRow row in this.Rows)
                {
                    if (row.Expression.Equals(pattern))
                    {
                        return row["FormattedExpression"].ToString();
                    }
                }
                return pattern;
            }







            public string GetExpressionByMask(string mask, string pattern)
            {
                foreach (DataPatternsRow row in this.Rows)
                {
                    if (row.Mask.Equals(mask) && row.Expression.Equals(pattern))
                    {
                        return row["FormattedExpression"].ToString();
                    }
                }
                return pattern;
            }






            public string GetDefaultPattern(int patternId)
            {
                //Input Validation
                if (patternId < 1)
                {
                    throw new GeneralException("Invalid Pattern Id");
                }
                // 

                foreach (DataPatternsRow row in this.Rows)
                {
                    if (row.PatternId == patternId)
                    {
                        return row["Expression"].ToString();
                    }
                }
                throw new GeneralException("Invalid Pattern Id");
            }

            // 
        }




                class ReservedWordsDataTable
        {
            //Public Methods






            public bool IsReservedWord(string name)
            {
                ReservedWordsRow row = (ReservedWordsRow) this.Rows.Find( CxNull);
                return (row != null);
            }
            //Public Methods
        }




        public         class CommandsDataTable
        {
        }




        public         class VariableScopesDataTable :         System.Data.TypedTableBase
        {

            //public methods







            public string GetVariableScopeNameById(int scopeId)
            {
                VariableScopesRow row = this.FindById((short)scopeId);
                return (row == null) ? string.Empty : row.Name;
            }
            //

            //IEnumerable Members

            public System.Collections.IEnumerator GetEnumerator()
            {
                throw new System.NotImplementedException();
            }

            //
        }




        public         class DataTypesDataTable :         System.Data.TypedTableBase
        {
            //public methods






            public string GetDataTypeNameById(int id)
            {
                return this.FindByDataTypeId(id).Name;
            }
            //

            //IEnumerable Members

            public System.Collections.IEnumerator GetEnumerator()
            {
                throw new System.NotImplementedException();
            }

            //
        }




        public         class FieldTypesDataTable :         System.Data.TypedTableBase
        {

            //public methods






            public string GetFieldTypeNameById(int id)
            {
                return this.FindByFieldTypeId(id).Name.ToString();
            }






            public int GetDataTypeByFieldTypeId(int id)
            {
                return this.FindByFieldTypeId(id).DataTypeId;
            }






            public int GetFieldTypeByDataTypeId(int id)
            {
                int fieldType = 99;
                foreach (FieldTypesRow row in this.Rows)
                {
                    fieldType = (int) row[ColumnNames.DATA_TYPE];
                    if (fieldType == id)
                    {
                        return fieldType;
                    }
                }
                return fieldType;
            }






            public int GetPatternIdByFieldId(int id)
            {
                //Input Validation
                if (id < 1)
                {
                    throw new GeneralException("Invalid Id");
                }
                // 


                foreach (FieldTypesRow row in this.Rows)
                {
                    if (row.FieldTypeId == id)
                    {
                        return Int32.Parse(row["DefaultPatternId"].ToString());
                    }
                }
                throw new GeneralException("Invalid Field Id");

            }

            // 

            //IEnumerable Members

            public System.Collections.IEnumerator GetEnumerator()
            {
                throw new System.NotImplementedException();
            }

            //
        }


    }
}

 