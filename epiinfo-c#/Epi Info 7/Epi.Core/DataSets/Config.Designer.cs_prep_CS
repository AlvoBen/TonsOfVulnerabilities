









#pragma warning disable 1591

namespace Epi.DataSets {





    [        System.Serializable()]
    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [        System.Xml.Serialization.XmlRootAttribute("Config")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public         class Config :         System.Data.DataSet {

        private VersionDataTable tableVersion;

        private ViewsDataTable tableViews;

        private RecentViewDataTable tableRecentView;

        private ProjectsDataTable tableProjects;

        private RecentProjectDataTable tableRecentProject;

        private DataSourcesDataTable tableDataSources;

        private RecentDataSourceDataTable tableRecentDataSource;

        private ModulesDataTable tableModules;

        private ModuleDataTable tableModule;

        private VariablesDataTable tableVariables;

        private PermanentVariableDataTable tablePermanentVariable;

        private DirectoriesDataTable tableDirectories;

        private DataDriversDataTable tableDataDrivers;

        private DataDriverDataTable tableDataDriver;

        private GadgetsDataTable tableGadgets;

        private GadgetDataTable tableGadget;

        private TextEncryptionModuleDataTable tableTextEncryptionModule;

        private FileEncryptionModuleDataTable tableFileEncryptionModule;

        private ConnectionsDataTable tableConnections;

        private DatabaseDataTable tableDatabase;

        private FileDataTable tableFile;

        private SettingsDataTable tableSettings;

        private         System.Data.DataRelation relationViews_RecentView;

        private         System.Data.DataRelation relationProjects_RecentProject;

        private         System.Data.DataRelation relationDataSources_RecentDataSource;

        private         System.Data.DataRelation relationModules_Module;

        private         System.Data.DataRelation relationVariables_PermanentVariable;

        private         System.Data.DataRelation relationDataDrivers_DataDriver;

        private         System.Data.DataRelation relationGadgets_Gadget;

        private         System.Data.DataRelation relationConnections_Database;

        private         System.Data.DataRelation relationConnections_File;

        private         System.Data.SchemaSerializationMode _schemaSerializationMode =         System.Data.SchemaSerializationMode.IncludeSchema;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public Config() {
            this.BeginInit();
            this.InitClass();
                    System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected Config(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) ==         System.Data.SchemaSerializationMode.IncludeSchema)) {
                        System.Data.DataSet ds = new         System.Data.DataSet();
                ds.ReadXmlSchema(new         System.Xml.XmlTextReader(new         System.IO.StringReader(strSchema)));
                if ((ds.Tables["Version"] != null)) {
                    base.Tables.Add(new VersionDataTable(ds.Tables["Version"]));
                }
                if ((ds.Tables["Views"] != null)) {
                    base.Tables.Add(new ViewsDataTable(ds.Tables["Views"]));
                }
                if ((ds.Tables["RecentView"] != null)) {
                    base.Tables.Add(new RecentViewDataTable(ds.Tables["RecentView"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    base.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                if ((ds.Tables["RecentProject"] != null)) {
                    base.Tables.Add(new RecentProjectDataTable(ds.Tables["RecentProject"]));
                }
                if ((ds.Tables["DataSources"] != null)) {
                    base.Tables.Add(new DataSourcesDataTable(ds.Tables["DataSources"]));
                }
                if ((ds.Tables["RecentDataSource"] != null)) {
                    base.Tables.Add(new RecentDataSourceDataTable(ds.Tables["RecentDataSource"]));
                }
                if ((ds.Tables["Modules"] != null)) {
                    base.Tables.Add(new ModulesDataTable(ds.Tables["Modules"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Variables"] != null)) {
                    base.Tables.Add(new VariablesDataTable(ds.Tables["Variables"]));
                }
                if ((ds.Tables["PermanentVariable"] != null)) {
                    base.Tables.Add(new PermanentVariableDataTable(ds.Tables["PermanentVariable"]));
                }
                if ((ds.Tables["Directories"] != null)) {
                    base.Tables.Add(new DirectoriesDataTable(ds.Tables["Directories"]));
                }
                if ((ds.Tables["DataDrivers"] != null)) {
                    base.Tables.Add(new DataDriversDataTable(ds.Tables["DataDrivers"]));
                }
                if ((ds.Tables["DataDriver"] != null)) {
                    base.Tables.Add(new DataDriverDataTable(ds.Tables["DataDriver"]));
                }
                if ((ds.Tables["Gadgets"] != null)) {
                    base.Tables.Add(new GadgetsDataTable(ds.Tables["Gadgets"]));
                }
                if ((ds.Tables["Gadget"] != null)) {
                    base.Tables.Add(new GadgetDataTable(ds.Tables["Gadget"]));
                }
                if ((ds.Tables["TextEncryptionModule"] != null)) {
                    base.Tables.Add(new TextEncryptionModuleDataTable(ds.Tables["TextEncryptionModule"]));
                }
                if ((ds.Tables["FileEncryptionModule"] != null)) {
                    base.Tables.Add(new FileEncryptionModuleDataTable(ds.Tables["FileEncryptionModule"]));
                }
                if ((ds.Tables["Connections"] != null)) {
                    base.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
                }
                if ((ds.Tables["Database"] != null)) {
                    base.Tables.Add(new DatabaseDataTable(ds.Tables["Database"]));
                }
                if ((ds.Tables["File"] != null)) {
                    base.Tables.Add(new FileDataTable(ds.Tables["File"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false,         System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new         System.Xml.XmlTextReader(new         System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
                    System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VersionDataTable Version {
            get {
                return this.tableVersion;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewsDataTable Views {
            get {
                return this.tableViews;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecentViewDataTable RecentView {
            get {
                return this.tableRecentView;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectsDataTable Projects {
            get {
                return this.tableProjects;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecentProjectDataTable RecentProject {
            get {
                return this.tableRecentProject;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataSourcesDataTable DataSources {
            get {
                return this.tableDataSources;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RecentDataSourceDataTable RecentDataSource {
            get {
                return this.tableRecentDataSource;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModulesDataTable Modules {
            get {
                return this.tableModules;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModuleDataTable Module {
            get {
                return this.tableModule;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VariablesDataTable Variables {
            get {
                return this.tableVariables;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PermanentVariableDataTable PermanentVariable {
            get {
                return this.tablePermanentVariable;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DirectoriesDataTable Directories {
            get {
                return this.tableDirectories;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataDriversDataTable DataDrivers {
            get {
                return this.tableDataDrivers;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataDriverDataTable DataDriver {
            get {
                return this.tableDataDriver;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GadgetsDataTable Gadgets {
            get {
                return this.tableGadgets;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GadgetDataTable Gadget {
            get {
                return this.tableGadget;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TextEncryptionModuleDataTable TextEncryptionModule {
            get {
                return this.tableTextEncryptionModule;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FileEncryptionModuleDataTable FileEncryptionModule {
            get {
                return this.tableFileEncryptionModule;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConnectionsDataTable Connections {
            get {
                return this.tableConnections;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DatabaseDataTable Database {
            get {
                return this.tableDatabase;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FileDataTable File {
            get {
                return this.tableFile;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SettingsDataTable Settings {
            get {
                return this.tableSettings;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.BrowsableAttribute(true)]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override         System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new         System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new         System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override         System.Data.DataSet Clone() {
            Config cln = ((Config)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(        System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) ==         System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                        System.Data.DataSet ds = new         System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Version"] != null)) {
                    base.Tables.Add(new VersionDataTable(ds.Tables["Version"]));
                }
                if ((ds.Tables["Views"] != null)) {
                    base.Tables.Add(new ViewsDataTable(ds.Tables["Views"]));
                }
                if ((ds.Tables["RecentView"] != null)) {
                    base.Tables.Add(new RecentViewDataTable(ds.Tables["RecentView"]));
                }
                if ((ds.Tables["Projects"] != null)) {
                    base.Tables.Add(new ProjectsDataTable(ds.Tables["Projects"]));
                }
                if ((ds.Tables["RecentProject"] != null)) {
                    base.Tables.Add(new RecentProjectDataTable(ds.Tables["RecentProject"]));
                }
                if ((ds.Tables["DataSources"] != null)) {
                    base.Tables.Add(new DataSourcesDataTable(ds.Tables["DataSources"]));
                }
                if ((ds.Tables["RecentDataSource"] != null)) {
                    base.Tables.Add(new RecentDataSourceDataTable(ds.Tables["RecentDataSource"]));
                }
                if ((ds.Tables["Modules"] != null)) {
                    base.Tables.Add(new ModulesDataTable(ds.Tables["Modules"]));
                }
                if ((ds.Tables["Module"] != null)) {
                    base.Tables.Add(new ModuleDataTable(ds.Tables["Module"]));
                }
                if ((ds.Tables["Variables"] != null)) {
                    base.Tables.Add(new VariablesDataTable(ds.Tables["Variables"]));
                }
                if ((ds.Tables["PermanentVariable"] != null)) {
                    base.Tables.Add(new PermanentVariableDataTable(ds.Tables["PermanentVariable"]));
                }
                if ((ds.Tables["Directories"] != null)) {
                    base.Tables.Add(new DirectoriesDataTable(ds.Tables["Directories"]));
                }
                if ((ds.Tables["DataDrivers"] != null)) {
                    base.Tables.Add(new DataDriversDataTable(ds.Tables["DataDrivers"]));
                }
                if ((ds.Tables["DataDriver"] != null)) {
                    base.Tables.Add(new DataDriverDataTable(ds.Tables["DataDriver"]));
                }
                if ((ds.Tables["Gadgets"] != null)) {
                    base.Tables.Add(new GadgetsDataTable(ds.Tables["Gadgets"]));
                }
                if ((ds.Tables["Gadget"] != null)) {
                    base.Tables.Add(new GadgetDataTable(ds.Tables["Gadget"]));
                }
                if ((ds.Tables["TextEncryptionModule"] != null)) {
                    base.Tables.Add(new TextEncryptionModuleDataTable(ds.Tables["TextEncryptionModule"]));
                }
                if ((ds.Tables["FileEncryptionModule"] != null)) {
                    base.Tables.Add(new FileEncryptionModuleDataTable(ds.Tables["FileEncryptionModule"]));
                }
                if ((ds.Tables["Connections"] != null)) {
                    base.Tables.Add(new ConnectionsDataTable(ds.Tables["Connections"]));
                }
                if ((ds.Tables["Database"] != null)) {
                    base.Tables.Add(new DatabaseDataTable(ds.Tables["Database"]));
                }
                if ((ds.Tables["File"] != null)) {
                    base.Tables.Add(new FileDataTable(ds.Tables["File"]));
                }
                if ((ds.Tables["Settings"] != null)) {
                    base.Tables.Add(new SettingsDataTable(ds.Tables["Settings"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false,         System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override         System.Xml.Schema.XmlSchema GetSchemaSerializable() {
                    System.IO.MemoryStream stream = new         System.IO.MemoryStream();
            this.WriteXmlSchema(new         System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return         System.Xml.Schema.XmlSchema.Read(new         System.Xml.XmlTextReader(stream), null);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableVersion = ((VersionDataTable)(base.Tables["Version"]));
            if ((initTable == true)) {
                if ((this.tableVersion != null)) {
                    this.tableVersion.InitVars();
                }
            }
            this.tableViews = ((ViewsDataTable)(base.Tables["Views"]));
            if ((initTable == true)) {
                if ((this.tableViews != null)) {
                    this.tableViews.InitVars();
                }
            }
            this.tableRecentView = ((RecentViewDataTable)(base.Tables["RecentView"]));
            if ((initTable == true)) {
                if ((this.tableRecentView != null)) {
                    this.tableRecentView.InitVars();
                }
            }
            this.tableProjects = ((ProjectsDataTable)(base.Tables["Projects"]));
            if ((initTable == true)) {
                if ((this.tableProjects != null)) {
                    this.tableProjects.InitVars();
                }
            }
            this.tableRecentProject = ((RecentProjectDataTable)(base.Tables["RecentProject"]));
            if ((initTable == true)) {
                if ((this.tableRecentProject != null)) {
                    this.tableRecentProject.InitVars();
                }
            }
            this.tableDataSources = ((DataSourcesDataTable)(base.Tables["DataSources"]));
            if ((initTable == true)) {
                if ((this.tableDataSources != null)) {
                    this.tableDataSources.InitVars();
                }
            }
            this.tableRecentDataSource = ((RecentDataSourceDataTable)(base.Tables["RecentDataSource"]));
            if ((initTable == true)) {
                if ((this.tableRecentDataSource != null)) {
                    this.tableRecentDataSource.InitVars();
                }
            }
            this.tableModules = ((ModulesDataTable)(base.Tables["Modules"]));
            if ((initTable == true)) {
                if ((this.tableModules != null)) {
                    this.tableModules.InitVars();
                }
            }
            this.tableModule = ((ModuleDataTable)(base.Tables["Module"]));
            if ((initTable == true)) {
                if ((this.tableModule != null)) {
                    this.tableModule.InitVars();
                }
            }
            this.tableVariables = ((VariablesDataTable)(base.Tables["Variables"]));
            if ((initTable == true)) {
                if ((this.tableVariables != null)) {
                    this.tableVariables.InitVars();
                }
            }
            this.tablePermanentVariable = ((PermanentVariableDataTable)(base.Tables["PermanentVariable"]));
            if ((initTable == true)) {
                if ((this.tablePermanentVariable != null)) {
                    this.tablePermanentVariable.InitVars();
                }
            }
            this.tableDirectories = ((DirectoriesDataTable)(base.Tables["Directories"]));
            if ((initTable == true)) {
                if ((this.tableDirectories != null)) {
                    this.tableDirectories.InitVars();
                }
            }
            this.tableDataDrivers = ((DataDriversDataTable)(base.Tables["DataDrivers"]));
            if ((initTable == true)) {
                if ((this.tableDataDrivers != null)) {
                    this.tableDataDrivers.InitVars();
                }
            }
            this.tableDataDriver = ((DataDriverDataTable)(base.Tables["DataDriver"]));
            if ((initTable == true)) {
                if ((this.tableDataDriver != null)) {
                    this.tableDataDriver.InitVars();
                }
            }
            this.tableGadgets = ((GadgetsDataTable)(base.Tables["Gadgets"]));
            if ((initTable == true)) {
                if ((this.tableGadgets != null)) {
                    this.tableGadgets.InitVars();
                }
            }
            this.tableGadget = ((GadgetDataTable)(base.Tables["Gadget"]));
            if ((initTable == true)) {
                if ((this.tableGadget != null)) {
                    this.tableGadget.InitVars();
                }
            }
            this.tableTextEncryptionModule = ((TextEncryptionModuleDataTable)(base.Tables["TextEncryptionModule"]));
            if ((initTable == true)) {
                if ((this.tableTextEncryptionModule != null)) {
                    this.tableTextEncryptionModule.InitVars();
                }
            }
            this.tableFileEncryptionModule = ((FileEncryptionModuleDataTable)(base.Tables["FileEncryptionModule"]));
            if ((initTable == true)) {
                if ((this.tableFileEncryptionModule != null)) {
                    this.tableFileEncryptionModule.InitVars();
                }
            }
            this.tableConnections = ((ConnectionsDataTable)(base.Tables["Connections"]));
            if ((initTable == true)) {
                if ((this.tableConnections != null)) {
                    this.tableConnections.InitVars();
                }
            }
            this.tableDatabase = ((DatabaseDataTable)(base.Tables["Database"]));
            if ((initTable == true)) {
                if ((this.tableDatabase != null)) {
                    this.tableDatabase.InitVars();
                }
            }
            this.tableFile = ((FileDataTable)(base.Tables["File"]));
            if ((initTable == true)) {
                if ((this.tableFile != null)) {
                    this.tableFile.InitVars();
                }
            }
            this.tableSettings = ((SettingsDataTable)(base.Tables["Settings"]));
            if ((initTable == true)) {
                if ((this.tableSettings != null)) {
                    this.tableSettings.InitVars();
                }
            }
            this.relationViews_RecentView = this.Relations["Views_RecentView"];
            this.relationProjects_RecentProject = this.Relations["Projects_RecentProject"];
            this.relationDataSources_RecentDataSource = this.Relations["DataSources_RecentDataSource"];
            this.relationModules_Module = this.Relations["Modules_Module"];
            this.relationVariables_PermanentVariable = this.Relations["Variables_PermanentVariable"];
            this.relationDataDrivers_DataDriver = this.Relations["DataDrivers_DataDriver"];
            this.relationGadgets_Gadget = this.Relations["Gadgets_Gadget"];
            this.relationConnections_Database = this.Relations["Connections_Database"];
            this.relationConnections_File = this.Relations["Connections_File"];
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "Config";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode =         System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVersion = new VersionDataTable();
            base.Tables.Add(this.tableVersion);
            this.tableViews = new ViewsDataTable();
            base.Tables.Add(this.tableViews);
            this.tableRecentView = new RecentViewDataTable();
            base.Tables.Add(this.tableRecentView);
            this.tableProjects = new ProjectsDataTable();
            base.Tables.Add(this.tableProjects);
            this.tableRecentProject = new RecentProjectDataTable();
            base.Tables.Add(this.tableRecentProject);
            this.tableDataSources = new DataSourcesDataTable();
            base.Tables.Add(this.tableDataSources);
            this.tableRecentDataSource = new RecentDataSourceDataTable();
            base.Tables.Add(this.tableRecentDataSource);
            this.tableModules = new ModulesDataTable();
            base.Tables.Add(this.tableModules);
            this.tableModule = new ModuleDataTable();
            base.Tables.Add(this.tableModule);
            this.tableVariables = new VariablesDataTable();
            base.Tables.Add(this.tableVariables);
            this.tablePermanentVariable = new PermanentVariableDataTable();
            base.Tables.Add(this.tablePermanentVariable);
            this.tableDirectories = new DirectoriesDataTable();
            base.Tables.Add(this.tableDirectories);
            this.tableDataDrivers = new DataDriversDataTable();
            base.Tables.Add(this.tableDataDrivers);
            this.tableDataDriver = new DataDriverDataTable();
            base.Tables.Add(this.tableDataDriver);
            this.tableGadgets = new GadgetsDataTable();
            base.Tables.Add(this.tableGadgets);
            this.tableGadget = new GadgetDataTable();
            base.Tables.Add(this.tableGadget);
            this.tableTextEncryptionModule = new TextEncryptionModuleDataTable();
            base.Tables.Add(this.tableTextEncryptionModule);
            this.tableFileEncryptionModule = new FileEncryptionModuleDataTable();
            base.Tables.Add(this.tableFileEncryptionModule);
            this.tableConnections = new ConnectionsDataTable();
            base.Tables.Add(this.tableConnections);
            this.tableDatabase = new DatabaseDataTable();
            base.Tables.Add(this.tableDatabase);
            this.tableFile = new FileDataTable();
            base.Tables.Add(this.tableFile);
            this.tableSettings = new SettingsDataTable();
            base.Tables.Add(this.tableSettings);
                    System.Data.ForeignKeyConstraint fkc;
            fkc = new         System.Data.ForeignKeyConstraint("Views_RecentView", new         System.Data.DataColumn[] {
                        this.tableViews.Views_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableRecentView.Views_IdColumn});
            this.tableRecentView.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Projects_RecentProject", new         System.Data.DataColumn[] {
                        this.tableProjects.Projects_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableRecentProject.Projects_IdColumn});
            this.tableRecentProject.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("DataSources_RecentDataSource", new         System.Data.DataColumn[] {
                        this.tableDataSources.DataSources_Id_0Column}, new         System.Data.DataColumn[] {
                        this.tableRecentDataSource.DataSources_Id_0Column});
            this.tableRecentDataSource.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Modules_Module", new         System.Data.DataColumn[] {
                        this.tableModules.Modules_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableModule.Modules_IdColumn});
            this.tableModule.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Variables_PermanentVariable", new         System.Data.DataColumn[] {
                        this.tableVariables.Variables_IdColumn}, new         System.Data.DataColumn[] {
                        this.tablePermanentVariable.Variables_IdColumn});
            this.tablePermanentVariable.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("DataDrivers_DataDriver", new         System.Data.DataColumn[] {
                        this.tableDataDrivers.DataDrivers_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableDataDriver.DataDrivers_IdColumn});
            this.tableDataDriver.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Gadgets_Gadget", new         System.Data.DataColumn[] {
                        this.tableGadgets.Gadgets_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableGadget.Gadgets_IdColumn});
            this.tableGadget.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Connections_Database", new         System.Data.DataColumn[] {
                        this.tableConnections.Connections_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableDatabase.Connections_IdColumn});
            this.tableDatabase.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            fkc = new         System.Data.ForeignKeyConstraint("Connections_File", new         System.Data.DataColumn[] {
                        this.tableConnections.Connections_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableFile.Connections_IdColumn});
            this.tableFile.Constraints.Add(fkc);
            fkc.AcceptRejectRule =         System.Data.AcceptRejectRule.None;
            fkc.DeleteRule =         System.Data.Rule.Cascade;
            fkc.UpdateRule =         System.Data.Rule.Cascade;
            this.relationViews_RecentView = new         System.Data.DataRelation("Views_RecentView", new         System.Data.DataColumn[] {
                        this.tableViews.Views_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableRecentView.Views_IdColumn}, false);
            this.relationViews_RecentView.Nested = true;
            this.Relations.Add(this.relationViews_RecentView);
            this.relationProjects_RecentProject = new         System.Data.DataRelation("Projects_RecentProject", new         System.Data.DataColumn[] {
                        this.tableProjects.Projects_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableRecentProject.Projects_IdColumn}, false);
            this.relationProjects_RecentProject.Nested = true;
            this.Relations.Add(this.relationProjects_RecentProject);
            this.relationDataSources_RecentDataSource = new         System.Data.DataRelation("DataSources_RecentDataSource", new         System.Data.DataColumn[] {
                        this.tableDataSources.DataSources_Id_0Column}, new         System.Data.DataColumn[] {
                        this.tableRecentDataSource.DataSources_Id_0Column}, false);
            this.relationDataSources_RecentDataSource.Nested = true;
            this.Relations.Add(this.relationDataSources_RecentDataSource);
            this.relationModules_Module = new         System.Data.DataRelation("Modules_Module", new         System.Data.DataColumn[] {
                        this.tableModules.Modules_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableModule.Modules_IdColumn}, false);
            this.relationModules_Module.Nested = true;
            this.Relations.Add(this.relationModules_Module);
            this.relationVariables_PermanentVariable = new         System.Data.DataRelation("Variables_PermanentVariable", new         System.Data.DataColumn[] {
                        this.tableVariables.Variables_IdColumn}, new         System.Data.DataColumn[] {
                        this.tablePermanentVariable.Variables_IdColumn}, false);
            this.relationVariables_PermanentVariable.Nested = true;
            this.Relations.Add(this.relationVariables_PermanentVariable);
            this.relationDataDrivers_DataDriver = new         System.Data.DataRelation("DataDrivers_DataDriver", new         System.Data.DataColumn[] {
                        this.tableDataDrivers.DataDrivers_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableDataDriver.DataDrivers_IdColumn}, false);
            this.relationDataDrivers_DataDriver.Nested = true;
            this.Relations.Add(this.relationDataDrivers_DataDriver);
            this.relationGadgets_Gadget = new         System.Data.DataRelation("Gadgets_Gadget", new         System.Data.DataColumn[] {
                        this.tableGadgets.Gadgets_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableGadget.Gadgets_IdColumn}, false);
            this.relationGadgets_Gadget.Nested = true;
            this.Relations.Add(this.relationGadgets_Gadget);
            this.relationConnections_Database = new         System.Data.DataRelation("Connections_Database", new         System.Data.DataColumn[] {
                        this.tableConnections.Connections_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableDatabase.Connections_IdColumn}, false);
            this.relationConnections_Database.Nested = true;
            this.Relations.Add(this.relationConnections_Database);
            this.relationConnections_File = new         System.Data.DataRelation("Connections_File", new         System.Data.DataColumn[] {
                        this.tableConnections.Connections_IdColumn}, new         System.Data.DataColumn[] {
                        this.tableFile.Connections_IdColumn}, false);
            this.relationConnections_File.Nested = true;
            this.Relations.Add(this.relationConnections_File);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeVersion() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeViews() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRecentView() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProjects() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRecentProject() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDataSources() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRecentDataSource() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeModules() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeModule() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeVariables() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePermanentVariable() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDirectories() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDataDrivers() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDataDriver() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGadgets() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeGadget() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTextEncryptionModule() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFileEncryptionModule() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeConnections() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDatabase() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeFile() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSettings() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender,         System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action ==         System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static         System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(        System.Xml.Schema.XmlSchemaSet xs) {
            Config ds = new Config();
                    System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                    System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                    System.Xml.Schema.XmlSchemaAny any = new         System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
                    System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                        System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                        System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                try {
                            System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void VersionRowChangeEventHandler(object sender, VersionRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ViewsRowChangeEventHandler(object sender, ViewsRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecentViewRowChangeEventHandler(object sender, RecentViewRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProjectsRowChangeEventHandler(object sender, ProjectsRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecentProjectRowChangeEventHandler(object sender, RecentProjectRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DataSourcesRowChangeEventHandler(object sender, DataSourcesRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void RecentDataSourceRowChangeEventHandler(object sender, RecentDataSourceRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ModulesRowChangeEventHandler(object sender, ModulesRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ModuleRowChangeEventHandler(object sender, ModuleRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void VariablesRowChangeEventHandler(object sender, VariablesRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PermanentVariableRowChangeEventHandler(object sender, PermanentVariableRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DirectoriesRowChangeEventHandler(object sender, DirectoriesRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DataDriversRowChangeEventHandler(object sender, DataDriversRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DataDriverRowChangeEventHandler(object sender, DataDriverRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GadgetsRowChangeEventHandler(object sender, GadgetsRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void GadgetRowChangeEventHandler(object sender, GadgetRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TextEncryptionModuleRowChangeEventHandler(object sender, TextEncryptionModuleRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FileEncryptionModuleRowChangeEventHandler(object sender, FileEncryptionModuleRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ConnectionsRowChangeEventHandler(object sender, ConnectionsRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DatabaseRowChangeEventHandler(object sender, DatabaseRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void FileRowChangeEventHandler(object sender, FileRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SettingsRowChangeEventHandler(object sender, SettingsRowChangeEvent e);




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class VersionDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnEpiInfoVersion;

            private         System.Data.DataColumn columnConfigVersion;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionDataTable() {
                this.TableName = "Version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal VersionDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected VersionDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn EpiInfoVersionColumn {
                get {
                    return this.columnEpiInfoVersion;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ConfigVersionColumn {
                get {
                    return this.columnConfigVersion;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionRow this[int index] {
                get {
                    return ((VersionRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VersionRowChangeEventHandler VersionRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VersionRowChangeEventHandler VersionRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VersionRowChangeEventHandler VersionRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VersionRowChangeEventHandler VersionRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddVersionRow(VersionRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionRow AddVersionRow(int EpiInfoVersion, int ConfigVersion) {
                VersionRow rowVersionRow = ((VersionRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull

;
                rowVersionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVersionRow);
                return rowVersionRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                VersionDataTable cln = ((VersionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new VersionDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnEpiInfoVersion = base.Columns["EpiInfoVersion"];
                this.columnConfigVersion = base.Columns["ConfigVersion"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnEpiInfoVersion = new         System.Data.DataColumn("EpiInfoVersion", typeof(int), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnEpiInfoVersion);
                this.columnConfigVersion = new         System.Data.DataColumn("ConfigVersion", typeof(int), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnConfigVersion);
                this.columnEpiInfoVersion.AllowDBNull = false;
                this.columnEpiInfoVersion.Namespace = "";
                this.columnConfigVersion.AllowDBNull = false;
                this.columnConfigVersion.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionRow NewVersionRow() {
                return ((VersionRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new VersionRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(VersionRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VersionRowChanged != null)) {
                    this.VersionRowChanged(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VersionRowChanging != null)) {
                    this.VersionRowChanging(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VersionRowDeleted != null)) {
                    this.VersionRowDeleted(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VersionRowDeleting != null)) {
                    this.VersionRowDeleting(this, new VersionRowChangeEvent(((VersionRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveVersionRow(VersionRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VersionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class ViewsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnViews_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsDataTable() {
                this.TableName = "Views";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ViewsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ViewsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Views_IdColumn {
                get {
                    return this.columnViews_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRow this[int index] {
                get {
                    return ((ViewsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ViewsRowChangeEventHandler ViewsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ViewsRowChangeEventHandler ViewsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ViewsRowChangeEventHandler ViewsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ViewsRowChangeEventHandler ViewsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddViewsRow(ViewsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRow AddViewsRow() {
                ViewsRow rowViewsRow = ((ViewsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowViewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowViewsRow);
                return rowViewsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                ViewsDataTable cln = ((ViewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new ViewsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnViews_Id = base.Columns["Views_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnViews_Id = new         System.Data.DataColumn("Views_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnViews_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnViews_Id}, true));
                this.columnViews_Id.AutoIncrement = true;
                this.columnViews_Id.AllowDBNull = false;
                this.columnViews_Id.Unique = true;
                this.columnViews_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRow NewViewsRow() {
                return ((ViewsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new ViewsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(ViewsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewsRowChanged != null)) {
                    this.ViewsRowChanged(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewsRowChanging != null)) {
                    this.ViewsRowChanging(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewsRowDeleted != null)) {
                    this.ViewsRowDeleted(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewsRowDeleting != null)) {
                    this.ViewsRowDeleting(this, new ViewsRowChangeEvent(((ViewsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveViewsRow(ViewsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class RecentViewDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnLocation;

            private         System.Data.DataColumn columnLastAccessed;

            private         System.Data.DataColumn columnViews_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewDataTable() {
                this.TableName = "RecentView";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentViewDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RecentViewDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LastAccessedColumn {
                get {
                    return this.columnLastAccessed;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Views_IdColumn {
                get {
                    return this.columnViews_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRow this[int index] {
                get {
                    return ((RecentViewRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentViewRowChangeEventHandler RecentViewRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentViewRowChangeEventHandler RecentViewRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentViewRowChangeEventHandler RecentViewRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentViewRowChangeEventHandler RecentViewRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRecentViewRow(RecentViewRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRow AddRecentViewRow(string Name, string Location, System.DateTime LastAccessed, ViewsRow parentViewsRowByViews_RecentView) {
                RecentViewRow rowRecentViewRow = ((RecentViewRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull



;
                if ((parentViewsRowByViews_RecentView != null)) {
                    columnValuesArray[3] = parentViewsRowByViews_RecentView[0];
                }
                rowRecentViewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecentViewRow);
                return rowRecentViewRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                RecentViewDataTable cln = ((RecentViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new RecentViewDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnLocation = base.Columns["Location"];
                this.columnLastAccessed = base.Columns["LastAccessed"];
                this.columnViews_Id = base.Columns["Views_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnLocation = new         System.Data.DataColumn("Location", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLocation);
                this.columnLastAccessed = new         System.Data.DataColumn("LastAccessed", typeof(        System.DateTime), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLastAccessed);
                this.columnViews_Id = new         System.Data.DataColumn("Views_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnViews_Id);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnLocation.AllowDBNull = false;
                this.columnLocation.Namespace = "";
                this.columnLastAccessed.AllowDBNull = false;
                this.columnLastAccessed.Namespace = "";
                this.columnViews_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRow NewRecentViewRow() {
                return ((RecentViewRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new RecentViewRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(RecentViewRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecentViewRowChanged != null)) {
                    this.RecentViewRowChanged(this, new RecentViewRowChangeEvent(((RecentViewRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecentViewRowChanging != null)) {
                    this.RecentViewRowChanging(this, new RecentViewRowChangeEvent(((RecentViewRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecentViewRowDeleted != null)) {
                    this.RecentViewRowDeleted(this, new RecentViewRowChangeEvent(((RecentViewRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecentViewRowDeleting != null)) {
                    this.RecentViewRowDeleting(this, new RecentViewRowChangeEvent(((RecentViewRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRecentViewRow(RecentViewRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecentViewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class ProjectsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnCurrentProjectLocation;

            private         System.Data.DataColumn columnProjects_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsDataTable() {
                this.TableName = "Projects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProjectsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProjectsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CurrentProjectLocationColumn {
                get {
                    return this.columnCurrentProjectLocation;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Projects_IdColumn {
                get {
                    return this.columnProjects_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRow this[int index] {
                get {
                    return ((ProjectsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProjectsRowChangeEventHandler ProjectsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProjectsRowChangeEventHandler ProjectsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProjectsRowChangeEventHandler ProjectsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProjectsRowChangeEventHandler ProjectsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProjectsRow(ProjectsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRow AddProjectsRow(string CurrentProjectLocation) {
                ProjectsRow rowProjectsRow = ((ProjectsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull

;
                rowProjectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectsRow);
                return rowProjectsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                ProjectsDataTable cln = ((ProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new ProjectsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnCurrentProjectLocation = base.Columns["CurrentProjectLocation"];
                this.columnProjects_Id = base.Columns["Projects_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnCurrentProjectLocation = new         System.Data.DataColumn("CurrentProjectLocation", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnCurrentProjectLocation);
                this.columnProjects_Id = new         System.Data.DataColumn("Projects_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProjects_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnProjects_Id}, true));
                this.columnCurrentProjectLocation.AllowDBNull = false;
                this.columnCurrentProjectLocation.Namespace = "";
                this.columnProjects_Id.AutoIncrement = true;
                this.columnProjects_Id.AllowDBNull = false;
                this.columnProjects_Id.Unique = true;
                this.columnProjects_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRow NewProjectsRow() {
                return ((ProjectsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new ProjectsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(ProjectsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectsRowChanged != null)) {
                    this.ProjectsRowChanged(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectsRowChanging != null)) {
                    this.ProjectsRowChanging(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectsRowDeleted != null)) {
                    this.ProjectsRowDeleted(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectsRowDeleting != null)) {
                    this.ProjectsRowDeleting(this, new ProjectsRowChangeEvent(((ProjectsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProjectsRow(ProjectsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class RecentProjectDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnLocation;

            private         System.Data.DataColumn columnLastAccessed;

            private         System.Data.DataColumn columnProjects_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectDataTable() {
                this.TableName = "RecentProject";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentProjectDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RecentProjectDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LastAccessedColumn {
                get {
                    return this.columnLastAccessed;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Projects_IdColumn {
                get {
                    return this.columnProjects_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRow this[int index] {
                get {
                    return ((RecentProjectRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentProjectRowChangeEventHandler RecentProjectRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentProjectRowChangeEventHandler RecentProjectRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentProjectRowChangeEventHandler RecentProjectRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentProjectRowChangeEventHandler RecentProjectRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRecentProjectRow(RecentProjectRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRow AddRecentProjectRow(string Name, string Location, System.DateTime LastAccessed, ProjectsRow parentProjectsRowByProjects_RecentProject) {
                RecentProjectRow rowRecentProjectRow = ((RecentProjectRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull



;
                if ((parentProjectsRowByProjects_RecentProject != null)) {
                    columnValuesArray[3] = parentProjectsRowByProjects_RecentProject[1];
                }
                rowRecentProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecentProjectRow);
                return rowRecentProjectRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                RecentProjectDataTable cln = ((RecentProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new RecentProjectDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnLocation = base.Columns["Location"];
                this.columnLastAccessed = base.Columns["LastAccessed"];
                this.columnProjects_Id = base.Columns["Projects_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnLocation = new         System.Data.DataColumn("Location", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLocation);
                this.columnLastAccessed = new         System.Data.DataColumn("LastAccessed", typeof(        System.DateTime), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLastAccessed);
                this.columnProjects_Id = new         System.Data.DataColumn("Projects_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnProjects_Id);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnLocation.AllowDBNull = false;
                this.columnLocation.Namespace = "";
                this.columnLastAccessed.AllowDBNull = false;
                this.columnLastAccessed.Namespace = "";
                this.columnProjects_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRow NewRecentProjectRow() {
                return ((RecentProjectRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new RecentProjectRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(RecentProjectRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecentProjectRowChanged != null)) {
                    this.RecentProjectRowChanged(this, new RecentProjectRowChangeEvent(((RecentProjectRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecentProjectRowChanging != null)) {
                    this.RecentProjectRowChanging(this, new RecentProjectRowChangeEvent(((RecentProjectRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecentProjectRowDeleted != null)) {
                    this.RecentProjectRowDeleted(this, new RecentProjectRowChangeEvent(((RecentProjectRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecentProjectRowDeleting != null)) {
                    this.RecentProjectRowDeleting(this, new RecentProjectRowChangeEvent(((RecentProjectRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRecentProjectRow(RecentProjectRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecentProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class DataSourcesDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDataSources_Id_0;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesDataTable() {
                this.TableName = "DataSources";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataSourcesDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DataSourcesDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSources_Id_0Column {
                get {
                    return this.columnDataSources_Id_0;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRow this[int index] {
                get {
                    return ((DataSourcesRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSourcesRowChangeEventHandler DataSourcesRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSourcesRowChangeEventHandler DataSourcesRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSourcesRowChangeEventHandler DataSourcesRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataSourcesRowChangeEventHandler DataSourcesRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDataSourcesRow(DataSourcesRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRow AddDataSourcesRow() {
                DataSourcesRow rowDataSourcesRow = ((DataSourcesRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowDataSourcesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataSourcesRow);
                return rowDataSourcesRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                DataSourcesDataTable cln = ((DataSourcesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new DataSourcesDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDataSources_Id_0 = base.Columns["DataSources_Id_0"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDataSources_Id_0 = new         System.Data.DataColumn("DataSources_Id_0", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataSources_Id_0);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnDataSources_Id_0}, true));
                this.columnDataSources_Id_0.AutoIncrement = true;
                this.columnDataSources_Id_0.AllowDBNull = false;
                this.columnDataSources_Id_0.Unique = true;
                this.columnDataSources_Id_0.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRow NewDataSourcesRow() {
                return ((DataSourcesRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new DataSourcesRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(DataSourcesRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataSourcesRowChanged != null)) {
                    this.DataSourcesRowChanged(this, new DataSourcesRowChangeEvent(((DataSourcesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataSourcesRowChanging != null)) {
                    this.DataSourcesRowChanging(this, new DataSourcesRowChangeEvent(((DataSourcesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataSourcesRowDeleted != null)) {
                    this.DataSourcesRowDeleted(this, new DataSourcesRowChangeEvent(((DataSourcesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataSourcesRowDeleting != null)) {
                    this.DataSourcesRowDeleting(this, new DataSourcesRowChangeEvent(((DataSourcesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDataSourcesRow(DataSourcesRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataSourcesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class RecentDataSourceDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnConnectionString;

            private         System.Data.DataColumn columnLastAccessed;

            private         System.Data.DataColumn columnDataSource_Id;

            private         System.Data.DataColumn columnDataProvider;

            private         System.Data.DataColumn columnDataSources_Id_0;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceDataTable() {
                this.TableName = "RecentDataSource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentDataSourceDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected RecentDataSourceDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ConnectionStringColumn {
                get {
                    return this.columnConnectionString;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LastAccessedColumn {
                get {
                    return this.columnLastAccessed;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSource_IdColumn {
                get {
                    return this.columnDataSource_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataProviderColumn {
                get {
                    return this.columnDataProvider;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSources_Id_0Column {
                get {
                    return this.columnDataSources_Id_0;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRow this[int index] {
                get {
                    return ((RecentDataSourceRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentDataSourceRowChangeEventHandler RecentDataSourceRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentDataSourceRowChangeEventHandler RecentDataSourceRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentDataSourceRowChangeEventHandler RecentDataSourceRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event RecentDataSourceRowChangeEventHandler RecentDataSourceRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRecentDataSourceRow(RecentDataSourceRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRow AddRecentDataSourceRow(string Name, string ConnectionString, System.DateTime LastAccessed, int DataSource_Id, string DataProvider, DataSourcesRow parentDataSourcesRowByDataSources_RecentDataSource) {
                RecentDataSourceRow rowRecentDataSourceRow = ((RecentDataSourceRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull





;
                if ((parentDataSourcesRowByDataSources_RecentDataSource != null)) {
                    columnValuesArray[5] = parentDataSourcesRowByDataSources_RecentDataSource[0];
                }
                rowRecentDataSourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRecentDataSourceRow);
                return rowRecentDataSourceRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                RecentDataSourceDataTable cln = ((RecentDataSourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new RecentDataSourceDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnConnectionString = base.Columns["ConnectionString"];
                this.columnLastAccessed = base.Columns["LastAccessed"];
                this.columnDataSource_Id = base.Columns["DataSource_Id"];
                this.columnDataProvider = base.Columns["DataProvider"];
                this.columnDataSources_Id_0 = base.Columns["DataSources_Id_0"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnConnectionString = new         System.Data.DataColumn("ConnectionString", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnConnectionString);
                this.columnLastAccessed = new         System.Data.DataColumn("LastAccessed", typeof(        System.DateTime), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnLastAccessed);
                this.columnDataSource_Id = new         System.Data.DataColumn("DataSource_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataSource_Id);
                this.columnDataProvider = new         System.Data.DataColumn("DataProvider", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataProvider);
                this.columnDataSources_Id_0 = new         System.Data.DataColumn("DataSources_Id_0", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataSources_Id_0);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnConnectionString.AllowDBNull = false;
                this.columnConnectionString.Namespace = "";
                this.columnLastAccessed.AllowDBNull = false;
                this.columnLastAccessed.Namespace = "";
                this.columnDataSource_Id.Namespace = "";
                this.columnDataProvider.AllowDBNull = false;
                this.columnDataProvider.Namespace = "";
                this.columnDataSources_Id_0.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRow NewRecentDataSourceRow() {
                return ((RecentDataSourceRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new RecentDataSourceRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(RecentDataSourceRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RecentDataSourceRowChanged != null)) {
                    this.RecentDataSourceRowChanged(this, new RecentDataSourceRowChangeEvent(((RecentDataSourceRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RecentDataSourceRowChanging != null)) {
                    this.RecentDataSourceRowChanging(this, new RecentDataSourceRowChangeEvent(((RecentDataSourceRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RecentDataSourceRowDeleted != null)) {
                    this.RecentDataSourceRowDeleted(this, new RecentDataSourceRowChangeEvent(((RecentDataSourceRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RecentDataSourceRowDeleting != null)) {
                    this.RecentDataSourceRowDeleting(this, new RecentDataSourceRowChangeEvent(((RecentDataSourceRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRecentDataSourceRow(RecentDataSourceRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RecentDataSourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class ModulesDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnModules_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesDataTable() {
                this.TableName = "Modules";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModulesDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ModulesDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Modules_IdColumn {
                get {
                    return this.columnModules_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRow this[int index] {
                get {
                    return ((ModulesRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModulesRowChangeEventHandler ModulesRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModulesRowChangeEventHandler ModulesRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModulesRowChangeEventHandler ModulesRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModulesRowChangeEventHandler ModulesRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddModulesRow(ModulesRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRow AddModulesRow() {
                ModulesRow rowModulesRow = ((ModulesRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowModulesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModulesRow);
                return rowModulesRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                ModulesDataTable cln = ((ModulesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new ModulesDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnModules_Id = base.Columns["Modules_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnModules_Id = new         System.Data.DataColumn("Modules_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModules_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnModules_Id}, true));
                this.columnModules_Id.AutoIncrement = true;
                this.columnModules_Id.AllowDBNull = false;
                this.columnModules_Id.Unique = true;
                this.columnModules_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRow NewModulesRow() {
                return ((ModulesRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new ModulesRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(ModulesRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModulesRowChanged != null)) {
                    this.ModulesRowChanged(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModulesRowChanging != null)) {
                    this.ModulesRowChanging(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModulesRowDeleted != null)) {
                    this.ModulesRowDeleted(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModulesRowDeleting != null)) {
                    this.ModulesRowDeleting(this, new ModulesRowChangeEvent(((ModulesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveModulesRow(ModulesRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModulesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class ModuleDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnType;

            private         System.Data.DataColumn columnModules_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleDataTable() {
                this.TableName = "Module";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModuleDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ModuleDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Modules_IdColumn {
                get {
                    return this.columnModules_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRow this[int index] {
                get {
                    return ((ModuleRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModuleRowChangeEventHandler ModuleRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModuleRowChangeEventHandler ModuleRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModuleRowChangeEventHandler ModuleRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ModuleRowChangeEventHandler ModuleRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddModuleRow(ModuleRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRow AddModuleRow(string Name, string Type, ModulesRow parentModulesRowByModules_Module) {
                ModuleRow rowModuleRow = ((ModuleRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull


;
                if ((parentModulesRowByModules_Module != null)) {
                    columnValuesArray[2] = parentModulesRowByModules_Module[0];
                }
                rowModuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModuleRow);
                return rowModuleRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                ModuleDataTable cln = ((ModuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new ModuleDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnType = base.Columns["Type"];
                this.columnModules_Id = base.Columns["Modules_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnType = new         System.Data.DataColumn("Type", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnModules_Id = new         System.Data.DataColumn("Modules_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnModules_Id);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnModules_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRow NewModuleRow() {
                return ((ModuleRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new ModuleRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(ModuleRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModuleRowChanged != null)) {
                    this.ModuleRowChanged(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModuleRowChanging != null)) {
                    this.ModuleRowChanging(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModuleRowDeleted != null)) {
                    this.ModuleRowDeleted(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModuleRowDeleting != null)) {
                    this.ModuleRowDeleting(this, new ModuleRowChangeEvent(((ModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveModuleRow(ModuleRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class VariablesDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnVariables_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesDataTable() {
                this.TableName = "Variables";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal VariablesDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected VariablesDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Variables_IdColumn {
                get {
                    return this.columnVariables_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRow this[int index] {
                get {
                    return ((VariablesRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VariablesRowChangeEventHandler VariablesRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VariablesRowChangeEventHandler VariablesRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VariablesRowChangeEventHandler VariablesRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event VariablesRowChangeEventHandler VariablesRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddVariablesRow(VariablesRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRow AddVariablesRow() {
                VariablesRow rowVariablesRow = ((VariablesRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowVariablesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVariablesRow);
                return rowVariablesRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                VariablesDataTable cln = ((VariablesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new VariablesDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnVariables_Id = base.Columns["Variables_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnVariables_Id = new         System.Data.DataColumn("Variables_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVariables_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnVariables_Id}, true));
                this.columnVariables_Id.AutoIncrement = true;
                this.columnVariables_Id.AllowDBNull = false;
                this.columnVariables_Id.Unique = true;
                this.columnVariables_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRow NewVariablesRow() {
                return ((VariablesRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new VariablesRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(VariablesRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VariablesRowChanged != null)) {
                    this.VariablesRowChanged(this, new VariablesRowChangeEvent(((VariablesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VariablesRowChanging != null)) {
                    this.VariablesRowChanging(this, new VariablesRowChangeEvent(((VariablesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VariablesRowDeleted != null)) {
                    this.VariablesRowDeleted(this, new VariablesRowChangeEvent(((VariablesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VariablesRowDeleting != null)) {
                    this.VariablesRowDeleting(this, new VariablesRowChangeEvent(((VariablesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveVariablesRow(VariablesRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VariablesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class PermanentVariableDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnDataValue;

            private         System.Data.DataColumn columnDataType;

            private         System.Data.DataColumn columnVariables_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableDataTable() {
                this.TableName = "PermanentVariable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PermanentVariableDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PermanentVariableDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataValueColumn {
                get {
                    return this.columnDataValue;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Variables_IdColumn {
                get {
                    return this.columnVariables_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRow this[int index] {
                get {
                    return ((PermanentVariableRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PermanentVariableRowChangeEventHandler PermanentVariableRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PermanentVariableRowChangeEventHandler PermanentVariableRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PermanentVariableRowChangeEventHandler PermanentVariableRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PermanentVariableRowChangeEventHandler PermanentVariableRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPermanentVariableRow(PermanentVariableRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRow AddPermanentVariableRow(string Name, string DataValue, int DataType, VariablesRow parentVariablesRowByVariables_PermanentVariable) {
                PermanentVariableRow rowPermanentVariableRow = ((PermanentVariableRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull



;
                if ((parentVariablesRowByVariables_PermanentVariable != null)) {
                    columnValuesArray[3] = parentVariablesRowByVariables_PermanentVariable[0];
                }
                rowPermanentVariableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPermanentVariableRow);
                return rowPermanentVariableRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                PermanentVariableDataTable cln = ((PermanentVariableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new PermanentVariableDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnDataValue = base.Columns["DataValue"];
                this.columnDataType = base.Columns["DataType"];
                this.columnVariables_Id = base.Columns["Variables_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnDataValue = new         System.Data.DataColumn("DataValue", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataValue);
                this.columnDataType = new         System.Data.DataColumn("DataType", typeof(int), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataType);
                this.columnVariables_Id = new         System.Data.DataColumn("Variables_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnVariables_Id);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnDataValue.AllowDBNull = false;
                this.columnDataValue.Namespace = "";
                this.columnDataType.AllowDBNull = false;
                this.columnDataType.Namespace = "";
                this.columnVariables_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRow NewPermanentVariableRow() {
                return ((PermanentVariableRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new PermanentVariableRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(PermanentVariableRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PermanentVariableRowChanged != null)) {
                    this.PermanentVariableRowChanged(this, new PermanentVariableRowChangeEvent(((PermanentVariableRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PermanentVariableRowChanging != null)) {
                    this.PermanentVariableRowChanging(this, new PermanentVariableRowChangeEvent(((PermanentVariableRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PermanentVariableRowDeleted != null)) {
                    this.PermanentVariableRowDeleted(this, new PermanentVariableRowChangeEvent(((PermanentVariableRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PermanentVariableRowDeleting != null)) {
                    this.PermanentVariableRowDeleting(this, new PermanentVariableRowChangeEvent(((PermanentVariableRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePermanentVariableRow(PermanentVariableRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PermanentVariableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class DirectoriesDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnConfiguration;

            private         System.Data.DataColumn columnOutput;

            private         System.Data.DataColumn columnProject;

            private         System.Data.DataColumn columnTemplates;

            private         System.Data.DataColumn columnWorking;

            private         System.Data.DataColumn columnSamples;

            private         System.Data.DataColumn columnLogDir;

            private         System.Data.DataColumn columnArchive;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesDataTable() {
                this.TableName = "Directories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DirectoriesDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DirectoriesDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ConfigurationColumn {
                get {
                    return this.columnConfiguration;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputColumn {
                get {
                    return this.columnOutput;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ProjectColumn {
                get {
                    return this.columnProject;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TemplatesColumn {
                get {
                    return this.columnTemplates;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WorkingColumn {
                get {
                    return this.columnWorking;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn SamplesColumn {
                get {
                    return this.columnSamples;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LogDirColumn {
                get {
                    return this.columnLogDir;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ArchiveColumn {
                get {
                    return this.columnArchive;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesRow this[int index] {
                get {
                    return ((DirectoriesRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DirectoriesRowChangeEventHandler DirectoriesRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DirectoriesRowChangeEventHandler DirectoriesRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DirectoriesRowChangeEventHandler DirectoriesRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DirectoriesRowChangeEventHandler DirectoriesRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDirectoriesRow(DirectoriesRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesRow AddDirectoriesRow(string Configuration, string Output, string Project, string Templates, string Working, string Samples, string LogDir, string Archive) {
                DirectoriesRow rowDirectoriesRow = ((DirectoriesRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull







;
                rowDirectoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDirectoriesRow);
                return rowDirectoriesRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                DirectoriesDataTable cln = ((DirectoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new DirectoriesDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnConfiguration = base.Columns["Configuration"];
                this.columnOutput = base.Columns["Output"];
                this.columnProject = base.Columns["Project"];
                this.columnTemplates = base.Columns["Templates"];
                this.columnWorking = base.Columns["Working"];
                this.columnSamples = base.Columns["Samples"];
                this.columnLogDir = base.Columns["LogDir"];
                this.columnArchive = base.Columns["Archive"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnConfiguration = new         System.Data.DataColumn("Configuration", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfiguration);
                this.columnOutput = new         System.Data.DataColumn("Output", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutput);
                this.columnProject = new         System.Data.DataColumn("Project", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnProject);
                this.columnTemplates = new         System.Data.DataColumn("Templates", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplates);
                this.columnWorking = new         System.Data.DataColumn("Working", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWorking);
                this.columnSamples = new         System.Data.DataColumn("Samples", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnSamples);
                this.columnLogDir = new         System.Data.DataColumn("LogDir", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDir);
                this.columnArchive = new         System.Data.DataColumn("Archive", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchive);
                this.columnConfiguration.AllowDBNull = false;
                this.columnOutput.AllowDBNull = false;
                this.columnProject.AllowDBNull = false;
                this.columnTemplates.AllowDBNull = false;
                this.columnWorking.AllowDBNull = false;
                this.columnSamples.AllowDBNull = false;
                this.columnLogDir.AllowDBNull = false;
                this.columnArchive.AllowDBNull = false;
                this.columnArchive.DefaultValue = ((string)(""));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesRow NewDirectoriesRow() {
                return ((DirectoriesRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new DirectoriesRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(DirectoriesRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DirectoriesRowChanged != null)) {
                    this.DirectoriesRowChanged(this, new DirectoriesRowChangeEvent(((DirectoriesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DirectoriesRowChanging != null)) {
                    this.DirectoriesRowChanging(this, new DirectoriesRowChangeEvent(((DirectoriesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DirectoriesRowDeleted != null)) {
                    this.DirectoriesRowDeleted(this, new DirectoriesRowChangeEvent(((DirectoriesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DirectoriesRowDeleting != null)) {
                    this.DirectoriesRowDeleting(this, new DirectoriesRowChangeEvent(((DirectoriesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDirectoriesRow(DirectoriesRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DirectoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class DataDriversDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDataDrivers_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversDataTable() {
                this.TableName = "DataDrivers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataDriversDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DataDriversDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDrivers_IdColumn {
                get {
                    return this.columnDataDrivers_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRow this[int index] {
                get {
                    return ((DataDriversRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriversRowChangeEventHandler DataDriversRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriversRowChangeEventHandler DataDriversRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriversRowChangeEventHandler DataDriversRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriversRowChangeEventHandler DataDriversRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDataDriversRow(DataDriversRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRow AddDataDriversRow() {
                DataDriversRow rowDataDriversRow = ((DataDriversRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowDataDriversRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataDriversRow);
                return rowDataDriversRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                DataDriversDataTable cln = ((DataDriversDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new DataDriversDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDataDrivers_Id = base.Columns["DataDrivers_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDataDrivers_Id = new         System.Data.DataColumn("DataDrivers_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataDrivers_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnDataDrivers_Id}, true));
                this.columnDataDrivers_Id.AutoIncrement = true;
                this.columnDataDrivers_Id.AllowDBNull = false;
                this.columnDataDrivers_Id.Unique = true;
                this.columnDataDrivers_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRow NewDataDriversRow() {
                return ((DataDriversRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new DataDriversRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(DataDriversRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataDriversRowChanged != null)) {
                    this.DataDriversRowChanged(this, new DataDriversRowChangeEvent(((DataDriversRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataDriversRowChanging != null)) {
                    this.DataDriversRowChanging(this, new DataDriversRowChangeEvent(((DataDriversRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataDriversRowDeleted != null)) {
                    this.DataDriversRowDeleted(this, new DataDriversRowChangeEvent(((DataDriversRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataDriversRowDeleting != null)) {
                    this.DataDriversRowDeleting(this, new DataDriversRowChangeEvent(((DataDriversRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDataDriversRow(DataDriversRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataDriversDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class DataDriverDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDisplayName;

            private         System.Data.DataColumn columnType;

            private         System.Data.DataColumn columnFileName;

            private         System.Data.DataColumn columnMetadataProvider;

            private         System.Data.DataColumn columnDataProvider;

            private         System.Data.DataColumn columnDataDrivers_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverDataTable() {
                this.TableName = "DataDriver";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataDriverDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DataDriverDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MetadataProviderColumn {
                get {
                    return this.columnMetadataProvider;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataProviderColumn {
                get {
                    return this.columnDataProvider;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDrivers_IdColumn {
                get {
                    return this.columnDataDrivers_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRow this[int index] {
                get {
                    return ((DataDriverRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriverRowChangeEventHandler DataDriverRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriverRowChangeEventHandler DataDriverRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriverRowChangeEventHandler DataDriverRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataDriverRowChangeEventHandler DataDriverRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDataDriverRow(DataDriverRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRow AddDataDriverRow(string DisplayName, string Type, string FileName, bool MetadataProvider, bool DataProvider, DataDriversRow parentDataDriversRowByDataDrivers_DataDriver) {
                DataDriverRow rowDataDriverRow = ((DataDriverRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull





;
                if ((parentDataDriversRowByDataDrivers_DataDriver != null)) {
                    columnValuesArray[5] = parentDataDriversRowByDataDrivers_DataDriver[0];
                }
                rowDataDriverRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataDriverRow);
                return rowDataDriverRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                DataDriverDataTable cln = ((DataDriverDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new DataDriverDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnType = base.Columns["Type"];
                this.columnFileName = base.Columns["FileName"];
                this.columnMetadataProvider = base.Columns["MetadataProvider"];
                this.columnDataProvider = base.Columns["DataProvider"];
                this.columnDataDrivers_Id = base.Columns["DataDrivers_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDisplayName = new         System.Data.DataColumn("DisplayName", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisplayName);
                this.columnType = new         System.Data.DataColumn("Type", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnFileName = new         System.Data.DataColumn("FileName", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFileName);
                this.columnMetadataProvider = new         System.Data.DataColumn("MetadataProvider", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMetadataProvider);
                this.columnDataProvider = new         System.Data.DataColumn("DataProvider", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataProvider);
                this.columnDataDrivers_Id = new         System.Data.DataColumn("DataDrivers_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataDrivers_Id);
                this.columnDisplayName.AllowDBNull = false;
                this.columnDisplayName.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFileName.Namespace = "";
                this.columnMetadataProvider.DefaultValue = ((bool)(true));
                this.columnDataProvider.DefaultValue = ((bool)(true));
                this.columnDataDrivers_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRow NewDataDriverRow() {
                return ((DataDriverRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new DataDriverRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(DataDriverRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataDriverRowChanged != null)) {
                    this.DataDriverRowChanged(this, new DataDriverRowChangeEvent(((DataDriverRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataDriverRowChanging != null)) {
                    this.DataDriverRowChanging(this, new DataDriverRowChangeEvent(((DataDriverRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataDriverRowDeleted != null)) {
                    this.DataDriverRowDeleted(this, new DataDriverRowChangeEvent(((DataDriverRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataDriverRowDeleting != null)) {
                    this.DataDriverRowDeleting(this, new DataDriverRowChangeEvent(((DataDriverRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDataDriverRow(DataDriverRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataDriverDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class GadgetsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDataDrivers_Id;

            private         System.Data.DataColumn columnGadgets_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsDataTable() {
                this.TableName = "Gadgets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GadgetsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GadgetsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDrivers_IdColumn {
                get {
                    return this.columnDataDrivers_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Gadgets_IdColumn {
                get {
                    return this.columnGadgets_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRow this[int index] {
                get {
                    return ((GadgetsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetsRowChangeEventHandler GadgetsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetsRowChangeEventHandler GadgetsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetsRowChangeEventHandler GadgetsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetsRowChangeEventHandler GadgetsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGadgetsRow(GadgetsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRow AddGadgetsRow() {
                GadgetsRow rowGadgetsRow = ((GadgetsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull

;
                rowGadgetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGadgetsRow);
                return rowGadgetsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                GadgetsDataTable cln = ((GadgetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new GadgetsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDataDrivers_Id = base.Columns["DataDrivers_Id"];
                this.columnGadgets_Id = base.Columns["Gadgets_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDataDrivers_Id = new         System.Data.DataColumn("DataDrivers_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataDrivers_Id);
                this.columnGadgets_Id = new         System.Data.DataColumn("Gadgets_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnGadgets_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnGadgets_Id}, true));
                this.columnDataDrivers_Id.AutoIncrement = true;
                this.columnDataDrivers_Id.AllowDBNull = false;
                this.columnDataDrivers_Id.Namespace = "";
                this.columnGadgets_Id.AutoIncrement = true;
                this.columnGadgets_Id.AllowDBNull = false;
                this.columnGadgets_Id.Unique = true;
                this.columnGadgets_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRow NewGadgetsRow() {
                return ((GadgetsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new GadgetsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(GadgetsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GadgetsRowChanged != null)) {
                    this.GadgetsRowChanged(this, new GadgetsRowChangeEvent(((GadgetsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GadgetsRowChanging != null)) {
                    this.GadgetsRowChanging(this, new GadgetsRowChangeEvent(((GadgetsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GadgetsRowDeleted != null)) {
                    this.GadgetsRowDeleted(this, new GadgetsRowChangeEvent(((GadgetsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GadgetsRowDeleting != null)) {
                    this.GadgetsRowDeleting(this, new GadgetsRowChangeEvent(((GadgetsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGadgetsRow(GadgetsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GadgetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class GadgetDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDisplayName;

            private         System.Data.DataColumn columnType;

            private         System.Data.DataColumn columnFileName;

            private         System.Data.DataColumn columnMenuSection;

            private         System.Data.DataColumn columnDataDrivers_Id;

            private         System.Data.DataColumn columnGadgets_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetDataTable() {
                this.TableName = "Gadget";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GadgetDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected GadgetDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MenuSectionColumn {
                get {
                    return this.columnMenuSection;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDrivers_IdColumn {
                get {
                    return this.columnDataDrivers_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Gadgets_IdColumn {
                get {
                    return this.columnGadgets_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRow this[int index] {
                get {
                    return ((GadgetRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetRowChangeEventHandler GadgetRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetRowChangeEventHandler GadgetRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetRowChangeEventHandler GadgetRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event GadgetRowChangeEventHandler GadgetRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddGadgetRow(GadgetRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRow AddGadgetRow(string DisplayName, string Type, string FileName, int MenuSection, int DataDrivers_Id, GadgetsRow parentGadgetsRowByGadgets_Gadget) {
                GadgetRow rowGadgetRow = ((GadgetRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull





;
                if ((parentGadgetsRowByGadgets_Gadget != null)) {
                    columnValuesArray[5] = parentGadgetsRowByGadgets_Gadget[1];
                }
                rowGadgetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGadgetRow);
                return rowGadgetRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                GadgetDataTable cln = ((GadgetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new GadgetDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnType = base.Columns["Type"];
                this.columnFileName = base.Columns["FileName"];
                this.columnMenuSection = base.Columns["MenuSection"];
                this.columnDataDrivers_Id = base.Columns["DataDrivers_Id"];
                this.columnGadgets_Id = base.Columns["Gadgets_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDisplayName = new         System.Data.DataColumn("DisplayName", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDisplayName);
                this.columnType = new         System.Data.DataColumn("Type", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnType);
                this.columnFileName = new         System.Data.DataColumn("FileName", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnFileName);
                this.columnMenuSection = new         System.Data.DataColumn("MenuSection", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuSection);
                this.columnDataDrivers_Id = new         System.Data.DataColumn("DataDrivers_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDataDrivers_Id);
                this.columnGadgets_Id = new         System.Data.DataColumn("Gadgets_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnGadgets_Id);
                this.columnDisplayName.AllowDBNull = false;
                this.columnDisplayName.Namespace = "";
                this.columnType.AllowDBNull = false;
                this.columnType.Namespace = "";
                this.columnFileName.Namespace = "";
                this.columnMenuSection.DefaultValue = ((int)(0));
                this.columnDataDrivers_Id.Namespace = "";
                this.columnGadgets_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRow NewGadgetRow() {
                return ((GadgetRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new GadgetRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(GadgetRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GadgetRowChanged != null)) {
                    this.GadgetRowChanged(this, new GadgetRowChangeEvent(((GadgetRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GadgetRowChanging != null)) {
                    this.GadgetRowChanging(this, new GadgetRowChangeEvent(((GadgetRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GadgetRowDeleted != null)) {
                    this.GadgetRowDeleted(this, new GadgetRowChangeEvent(((GadgetRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GadgetRowDeleting != null)) {
                    this.GadgetRowDeleting(this, new GadgetRowChangeEvent(((GadgetRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveGadgetRow(GadgetRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GadgetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class TextEncryptionModuleDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDisplayName;

            private         System.Data.DataColumn columnType;

            private         System.Data.DataColumn columnFileName;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleDataTable() {
                this.TableName = "TextEncryptionModule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TextEncryptionModuleDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TextEncryptionModuleDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleRow this[int index] {
                get {
                    return ((TextEncryptionModuleRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TextEncryptionModuleRowChangeEventHandler TextEncryptionModuleRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TextEncryptionModuleRowChangeEventHandler TextEncryptionModuleRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TextEncryptionModuleRowChangeEventHandler TextEncryptionModuleRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TextEncryptionModuleRowChangeEventHandler TextEncryptionModuleRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTextEncryptionModuleRow(TextEncryptionModuleRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleRow AddTextEncryptionModuleRow(string DisplayName, string Type, string FileName) {
                TextEncryptionModuleRow rowTextEncryptionModuleRow = ((TextEncryptionModuleRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull


;
                rowTextEncryptionModuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTextEncryptionModuleRow);
                return rowTextEncryptionModuleRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                TextEncryptionModuleDataTable cln = ((TextEncryptionModuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new TextEncryptionModuleDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnType = base.Columns["Type"];
                this.columnFileName = base.Columns["FileName"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDisplayName = new         System.Data.DataColumn("DisplayName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnType = new         System.Data.DataColumn("Type", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnFileName = new         System.Data.DataColumn("FileName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnDisplayName.DefaultValue = ((string)(""));
                this.columnType.DefaultValue = ((string)(""));
                this.columnFileName.DefaultValue = ((string)(""));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleRow NewTextEncryptionModuleRow() {
                return ((TextEncryptionModuleRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new TextEncryptionModuleRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(TextEncryptionModuleRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TextEncryptionModuleRowChanged != null)) {
                    this.TextEncryptionModuleRowChanged(this, new TextEncryptionModuleRowChangeEvent(((TextEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TextEncryptionModuleRowChanging != null)) {
                    this.TextEncryptionModuleRowChanging(this, new TextEncryptionModuleRowChangeEvent(((TextEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TextEncryptionModuleRowDeleted != null)) {
                    this.TextEncryptionModuleRowDeleted(this, new TextEncryptionModuleRowChangeEvent(((TextEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TextEncryptionModuleRowDeleting != null)) {
                    this.TextEncryptionModuleRowDeleting(this, new TextEncryptionModuleRowChangeEvent(((TextEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTextEncryptionModuleRow(TextEncryptionModuleRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TextEncryptionModuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class FileEncryptionModuleDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnDisplayName;

            private         System.Data.DataColumn columnType;

            private         System.Data.DataColumn columnFileName;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleDataTable() {
                this.TableName = "FileEncryptionModule";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FileEncryptionModuleDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FileEncryptionModuleDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleRow this[int index] {
                get {
                    return ((FileEncryptionModuleRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileEncryptionModuleRowChangeEventHandler FileEncryptionModuleRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileEncryptionModuleRowChangeEventHandler FileEncryptionModuleRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileEncryptionModuleRowChangeEventHandler FileEncryptionModuleRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileEncryptionModuleRowChangeEventHandler FileEncryptionModuleRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFileEncryptionModuleRow(FileEncryptionModuleRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleRow AddFileEncryptionModuleRow(string DisplayName, string Type, string FileName) {
                FileEncryptionModuleRow rowFileEncryptionModuleRow = ((FileEncryptionModuleRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull


;
                rowFileEncryptionModuleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFileEncryptionModuleRow);
                return rowFileEncryptionModuleRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                FileEncryptionModuleDataTable cln = ((FileEncryptionModuleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new FileEncryptionModuleDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnType = base.Columns["Type"];
                this.columnFileName = base.Columns["FileName"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnDisplayName = new         System.Data.DataColumn("DisplayName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnType = new         System.Data.DataColumn("Type", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnFileName = new         System.Data.DataColumn("FileName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnDisplayName.DefaultValue = ((string)(""));
                this.columnType.DefaultValue = ((string)(""));
                this.columnFileName.DefaultValue = ((string)(""));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleRow NewFileEncryptionModuleRow() {
                return ((FileEncryptionModuleRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new FileEncryptionModuleRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(FileEncryptionModuleRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FileEncryptionModuleRowChanged != null)) {
                    this.FileEncryptionModuleRowChanged(this, new FileEncryptionModuleRowChangeEvent(((FileEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FileEncryptionModuleRowChanging != null)) {
                    this.FileEncryptionModuleRowChanging(this, new FileEncryptionModuleRowChangeEvent(((FileEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FileEncryptionModuleRowDeleted != null)) {
                    this.FileEncryptionModuleRowDeleted(this, new FileEncryptionModuleRowChangeEvent(((FileEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FileEncryptionModuleRowDeleting != null)) {
                    this.FileEncryptionModuleRowDeleting(this, new FileEncryptionModuleRowChangeEvent(((FileEncryptionModuleRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFileEncryptionModuleRow(FileEncryptionModuleRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FileEncryptionModuleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class ConnectionsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnConnections_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsDataTable() {
                this.TableName = "Connections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ConnectionsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ConnectionsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Connections_IdColumn {
                get {
                    return this.columnConnections_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow this[int index] {
                get {
                    return ((ConnectionsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ConnectionsRowChangeEventHandler ConnectionsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ConnectionsRowChangeEventHandler ConnectionsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddConnectionsRow(ConnectionsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow AddConnectionsRow() {
                ConnectionsRow rowConnectionsRow = ((ConnectionsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull
;
                rowConnectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConnectionsRow);
                return rowConnectionsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                ConnectionsDataTable cln = ((ConnectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new ConnectionsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnConnections_Id = base.Columns["Connections_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnConnections_Id = new         System.Data.DataColumn("Connections_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConnections_Id);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnConnections_Id}, true));
                this.columnConnections_Id.AutoIncrement = true;
                this.columnConnections_Id.AllowDBNull = false;
                this.columnConnections_Id.Unique = true;
                this.columnConnections_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow NewConnectionsRow() {
                return ((ConnectionsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new ConnectionsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(ConnectionsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConnectionsRowChanged != null)) {
                    this.ConnectionsRowChanged(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConnectionsRowChanging != null)) {
                    this.ConnectionsRowChanging(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConnectionsRowDeleted != null)) {
                    this.ConnectionsRowDeleted(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConnectionsRowDeleting != null)) {
                    this.ConnectionsRowDeleting(this, new ConnectionsRowChangeEvent(((ConnectionsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveConnectionsRow(ConnectionsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConnectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class DatabaseDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnDataDriver;

            private         System.Data.DataColumn columnConnectionString;

            private         System.Data.DataColumn columnConnections_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseDataTable() {
                this.TableName = "Database";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DatabaseDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DatabaseDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDriverColumn {
                get {
                    return this.columnDataDriver;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ConnectionStringColumn {
                get {
                    return this.columnConnectionString;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Connections_IdColumn {
                get {
                    return this.columnConnections_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRow this[int index] {
                get {
                    return ((DatabaseRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DatabaseRowChangeEventHandler DatabaseRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DatabaseRowChangeEventHandler DatabaseRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DatabaseRowChangeEventHandler DatabaseRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DatabaseRowChangeEventHandler DatabaseRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDatabaseRow(DatabaseRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRow AddDatabaseRow(string Name, string DataDriver, string ConnectionString, ConnectionsRow parentConnectionsRowByConnections_Database) {
                DatabaseRow rowDatabaseRow = ((DatabaseRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull



;
                if ((parentConnectionsRowByConnections_Database != null)) {
                    columnValuesArray[3] = parentConnectionsRowByConnections_Database[0];
                }
                rowDatabaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDatabaseRow);
                return rowDatabaseRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                DatabaseDataTable cln = ((DatabaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new DatabaseDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnDataDriver = base.Columns["DataDriver"];
                this.columnConnectionString = base.Columns["ConnectionString"];
                this.columnConnections_Id = base.Columns["Connections_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnName);
                this.columnDataDriver = new         System.Data.DataColumn("DataDriver", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataDriver);
                this.columnConnectionString = new         System.Data.DataColumn("ConnectionString", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnConnectionString);
                this.columnConnections_Id = new         System.Data.DataColumn("Connections_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConnections_Id);
                this.columnName.AllowDBNull = false;
                this.columnName.Namespace = "";
                this.columnDataDriver.AllowDBNull = false;
                this.columnDataDriver.Namespace = "";
                this.columnConnectionString.AllowDBNull = false;
                this.columnConnectionString.Namespace = "";
                this.columnConnections_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRow NewDatabaseRow() {
                return ((DatabaseRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new DatabaseRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(DatabaseRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DatabaseRowChanged != null)) {
                    this.DatabaseRowChanged(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DatabaseRowChanging != null)) {
                    this.DatabaseRowChanging(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DatabaseRowDeleted != null)) {
                    this.DatabaseRowDeleted(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DatabaseRowDeleting != null)) {
                    this.DatabaseRowDeleting(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDatabaseRow(DatabaseRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DatabaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class FileDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnExtension;

            private         System.Data.DataColumn columnDataDriver;

            private         System.Data.DataColumn columnConnections_Id;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileDataTable() {
                this.TableName = "File";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FileDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected FileDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataDriverColumn {
                get {
                    return this.columnDataDriver;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Connections_IdColumn {
                get {
                    return this.columnConnections_Id;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRow this[int index] {
                get {
                    return ((FileRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileRowChangeEventHandler FileRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileRowChangeEventHandler FileRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileRowChangeEventHandler FileRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event FileRowChangeEventHandler FileRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddFileRow(FileRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRow AddFileRow(string Extension, string DataDriver, ConnectionsRow parentConnectionsRowByConnections_File) {
                FileRow rowFileRow = ((FileRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull


;
                if ((parentConnectionsRowByConnections_File != null)) {
                    columnValuesArray[2] = parentConnectionsRowByConnections_File[0];
                }
                rowFileRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFileRow);
                return rowFileRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                FileDataTable cln = ((FileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new FileDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnExtension = base.Columns["Extension"];
                this.columnDataDriver = base.Columns["DataDriver"];
                this.columnConnections_Id = base.Columns["Connections_Id"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnExtension = new         System.Data.DataColumn("Extension", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnExtension);
                this.columnDataDriver = new         System.Data.DataColumn("DataDriver", typeof(string), null,         System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnDataDriver);
                this.columnConnections_Id = new         System.Data.DataColumn("Connections_Id", typeof(int), null,         System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnConnections_Id);
                this.columnExtension.AllowDBNull = false;
                this.columnExtension.Namespace = "";
                this.columnDataDriver.AllowDBNull = false;
                this.columnDataDriver.Namespace = "";
                this.columnConnections_Id.Namespace = "";
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRow NewFileRow() {
                return ((FileRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new FileRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(FileRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FileRowChanged != null)) {
                    this.FileRowChanged(this, new FileRowChangeEvent(((FileRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FileRowChanging != null)) {
                    this.FileRowChanging(this, new FileRowChangeEvent(((FileRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FileRowDeleted != null)) {
                    this.FileRowDeleted(this, new FileRowChangeEvent(((FileRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FileRowDeleting != null)) {
                    this.FileRowDeleting(this, new FileRowChangeEvent(((FileRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveFileRow(FileRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class SettingsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnBackgroundImage;

            private         System.Data.DataColumn columnDefaultDataDriver;

            private         System.Data.DataColumn columnDefaultDataFormatForRead;

            private         System.Data.DataColumn columnEditorFontName;

            private         System.Data.DataColumn columnEditorFontSize;

            private         System.Data.DataColumn columnControlFontName;

            private         System.Data.DataColumn columnControlFontSize;

            private         System.Data.DataColumn columnFrameworkTcpPort;

            private         System.Data.DataColumn columnIncludeMissingValues;

            private         System.Data.DataColumn columnLanguage;

            private         System.Data.DataColumn columnMRUProjectsCount;

            private         System.Data.DataColumn columnMRUViewsCount;

            private         System.Data.DataColumn columnMRUDataSourcesCount;

            private         System.Data.DataColumn columnRecordProcessingScope;

            private         System.Data.DataColumn columnRepresentationOfMissing;

            private         System.Data.DataColumn columnRepresentationOfNo;

            private         System.Data.DataColumn columnRepresentationOfYes;

            private         System.Data.DataColumn columnShowCompletePrompt;

            private         System.Data.DataColumn columnShowGraphics;

            private         System.Data.DataColumn columnShowHyperlinks;

            private         System.Data.DataColumn columnShowPercents;

            private         System.Data.DataColumn columnShowSelection;

            private         System.Data.DataColumn columnShowTables;

            private         System.Data.DataColumn columnSnapToGrid;

            private         System.Data.DataColumn columnStatisticsLevel;

            private         System.Data.DataColumn columnShowStatusBar;

            private         System.Data.DataColumn columnPrecisionForStatistics;

            private         System.Data.DataColumn columnOutputFilePrefix;

            private         System.Data.DataColumn columnOutputFileSequence;

            private         System.Data.DataColumn columnOutputFileFlagAge;

            private         System.Data.DataColumn columnOutputFileFlagNumber;

            private         System.Data.DataColumn columnOutputFileFlagSize;

            private         System.Data.DataColumn columnShowGrid;

            private         System.Data.DataColumn columnSnapPromptToGrid;

            private         System.Data.DataColumn columnSnapInputControlToGrid;

            private         System.Data.DataColumn columnGridSize;

            private         System.Data.DataColumn columnGridBackgroundImage;

            private         System.Data.DataColumn columnGridBackgroundColor;

            private         System.Data.DataColumn columnGridBackgroundImageLayout;

            private         System.Data.DataColumn columnEditorFontBold;

            private         System.Data.DataColumn columnEditorFontItalics;

            private         System.Data.DataColumn columnControlFontBold;

            private         System.Data.DataColumn columnControlFontItalics;

            private         System.Data.DataColumn columnDefaultPageWidth;

            private         System.Data.DataColumn columnDefaultPageHeight;

            private         System.Data.DataColumn columnDefaultPageOrientation;

            private         System.Data.DataColumn columnDefaultLabelAlign;

            private         System.Data.DataColumn columnDefaultTargetMedium;

            private         System.Data.DataColumn columnMapServiceKey;

            private         System.Data.DataColumn columnLastAlertDate;

            private         System.Data.DataColumn columnCheckForUpdates;

            private         System.Data.DataColumn columnDateFormat;

            private         System.Data.DataColumn columnTimeFormat;

            private         System.Data.DataColumn columnDateTimeFormat;

            private         System.Data.DataColumn columnWebServiceEndpointAddress;

            private         System.Data.DataColumn columnWebServiceAuthMode;

            private         System.Data.DataColumn columnWebServiceMaxBufferPoolSize;

            private         System.Data.DataColumn columnWebServiceMaxReceivedMessageSize;

            private         System.Data.DataColumn columnWebServiceReaderMaxDepth;

            private         System.Data.DataColumn columnWebServiceReaderMaxStringContentLength;

            private         System.Data.DataColumn columnWebServiceReaderMaxArrayLength;

            private         System.Data.DataColumn columnWebServiceReaderMaxBytesPerRead;

            private         System.Data.DataColumn columnWebServiceReaderMaxNameTableCharCount;

            private         System.Data.DataColumn columnWebServiceBindingMode;

            private         System.Data.DataColumn columnDashboardFrequencyRowLimit;

            private         System.Data.DataColumn columnDashboardFrequencyStrataLimit;

            private         System.Data.DataColumn columnDashboardFrequencyCrosstabLimit;

            private         System.Data.DataColumn columnDashboardCombinedFrequencyRowLimit;

            private         System.Data.DataColumn columnDashboardAberrationRowLimit;

            private         System.Data.DataColumn columnDashboardLineListRowLimit;

            private         System.Data.DataColumn columnRepublish_IsRepbulishable;

            private         System.Data.DataColumn columnRepublish_RequireSecurityKey;

            private         System.Data.DataColumn columnCodeEditorFontBold;

            private         System.Data.DataColumn columnCodeEditorFontItalics;

            private         System.Data.DataColumn columnCodeEditorFontName;

            private         System.Data.DataColumn columnCodeEditorFontSize;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsDataTable() {
                this.TableName = "Settings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SettingsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SettingsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn BackgroundImageColumn {
                get {
                    return this.columnBackgroundImage;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultDataDriverColumn {
                get {
                    return this.columnDefaultDataDriver;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultDataFormatForReadColumn {
                get {
                    return this.columnDefaultDataFormatForRead;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn EditorFontNameColumn {
                get {
                    return this.columnEditorFontName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn EditorFontSizeColumn {
                get {
                    return this.columnEditorFontSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ControlFontNameColumn {
                get {
                    return this.columnControlFontName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ControlFontSizeColumn {
                get {
                    return this.columnControlFontSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FrameworkTcpPortColumn {
                get {
                    return this.columnFrameworkTcpPort;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn IncludeMissingValuesColumn {
                get {
                    return this.columnIncludeMissingValues;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LanguageColumn {
                get {
                    return this.columnLanguage;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MRUProjectsCountColumn {
                get {
                    return this.columnMRUProjectsCount;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MRUViewsCountColumn {
                get {
                    return this.columnMRUViewsCount;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MRUDataSourcesCountColumn {
                get {
                    return this.columnMRUDataSourcesCount;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RecordProcessingScopeColumn {
                get {
                    return this.columnRecordProcessingScope;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RepresentationOfMissingColumn {
                get {
                    return this.columnRepresentationOfMissing;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RepresentationOfNoColumn {
                get {
                    return this.columnRepresentationOfNo;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RepresentationOfYesColumn {
                get {
                    return this.columnRepresentationOfYes;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowCompletePromptColumn {
                get {
                    return this.columnShowCompletePrompt;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowGraphicsColumn {
                get {
                    return this.columnShowGraphics;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowHyperlinksColumn {
                get {
                    return this.columnShowHyperlinks;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowPercentsColumn {
                get {
                    return this.columnShowPercents;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowSelectionColumn {
                get {
                    return this.columnShowSelection;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowTablesColumn {
                get {
                    return this.columnShowTables;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn SnapToGridColumn {
                get {
                    return this.columnSnapToGrid;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn StatisticsLevelColumn {
                get {
                    return this.columnStatisticsLevel;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowStatusBarColumn {
                get {
                    return this.columnShowStatusBar;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn PrecisionForStatisticsColumn {
                get {
                    return this.columnPrecisionForStatistics;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputFilePrefixColumn {
                get {
                    return this.columnOutputFilePrefix;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputFileSequenceColumn {
                get {
                    return this.columnOutputFileSequence;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputFileFlagAgeColumn {
                get {
                    return this.columnOutputFileFlagAge;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputFileFlagNumberColumn {
                get {
                    return this.columnOutputFileFlagNumber;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn OutputFileFlagSizeColumn {
                get {
                    return this.columnOutputFileFlagSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ShowGridColumn {
                get {
                    return this.columnShowGrid;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn SnapPromptToGridColumn {
                get {
                    return this.columnSnapPromptToGrid;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn SnapInputControlToGridColumn {
                get {
                    return this.columnSnapInputControlToGrid;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GridSizeColumn {
                get {
                    return this.columnGridSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GridBackgroundImageColumn {
                get {
                    return this.columnGridBackgroundImage;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GridBackgroundColorColumn {
                get {
                    return this.columnGridBackgroundColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GridBackgroundImageLayoutColumn {
                get {
                    return this.columnGridBackgroundImageLayout;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn EditorFontBoldColumn {
                get {
                    return this.columnEditorFontBold;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn EditorFontItalicsColumn {
                get {
                    return this.columnEditorFontItalics;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ControlFontBoldColumn {
                get {
                    return this.columnControlFontBold;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ControlFontItalicsColumn {
                get {
                    return this.columnControlFontItalics;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultPageWidthColumn {
                get {
                    return this.columnDefaultPageWidth;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultPageHeightColumn {
                get {
                    return this.columnDefaultPageHeight;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultPageOrientationColumn {
                get {
                    return this.columnDefaultPageOrientation;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultLabelAlignColumn {
                get {
                    return this.columnDefaultLabelAlign;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DefaultTargetMediumColumn {
                get {
                    return this.columnDefaultTargetMedium;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapServiceKeyColumn {
                get {
                    return this.columnMapServiceKey;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LastAlertDateColumn {
                get {
                    return this.columnLastAlertDate;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CheckForUpdatesColumn {
                get {
                    return this.columnCheckForUpdates;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DateFormatColumn {
                get {
                    return this.columnDateFormat;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TimeFormatColumn {
                get {
                    return this.columnTimeFormat;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DateTimeFormatColumn {
                get {
                    return this.columnDateTimeFormat;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceEndpointAddressColumn {
                get {
                    return this.columnWebServiceEndpointAddress;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceAuthModeColumn {
                get {
                    return this.columnWebServiceAuthMode;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceMaxBufferPoolSizeColumn {
                get {
                    return this.columnWebServiceMaxBufferPoolSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceMaxReceivedMessageSizeColumn {
                get {
                    return this.columnWebServiceMaxReceivedMessageSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceReaderMaxDepthColumn {
                get {
                    return this.columnWebServiceReaderMaxDepth;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceReaderMaxStringContentLengthColumn {
                get {
                    return this.columnWebServiceReaderMaxStringContentLength;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceReaderMaxArrayLengthColumn {
                get {
                    return this.columnWebServiceReaderMaxArrayLength;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceReaderMaxBytesPerReadColumn {
                get {
                    return this.columnWebServiceReaderMaxBytesPerRead;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceReaderMaxNameTableCharCountColumn {
                get {
                    return this.columnWebServiceReaderMaxNameTableCharCount;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn WebServiceBindingModeColumn {
                get {
                    return this.columnWebServiceBindingMode;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardFrequencyRowLimitColumn {
                get {
                    return this.columnDashboardFrequencyRowLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardFrequencyStrataLimitColumn {
                get {
                    return this.columnDashboardFrequencyStrataLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardFrequencyCrosstabLimitColumn {
                get {
                    return this.columnDashboardFrequencyCrosstabLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardCombinedFrequencyRowLimitColumn {
                get {
                    return this.columnDashboardCombinedFrequencyRowLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardAberrationRowLimitColumn {
                get {
                    return this.columnDashboardAberrationRowLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DashboardLineListRowLimitColumn {
                get {
                    return this.columnDashboardLineListRowLimit;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Republish_IsRepbulishableColumn {
                get {
                    return this.columnRepublish_IsRepbulishable;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn Republish_RequireSecurityKeyColumn {
                get {
                    return this.columnRepublish_RequireSecurityKey;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CodeEditorFontBoldColumn {
                get {
                    return this.columnCodeEditorFontBold;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CodeEditorFontItalicsColumn {
                get {
                    return this.columnCodeEditorFontItalics;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CodeEditorFontNameColumn {
                get {
                    return this.columnCodeEditorFontName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn CodeEditorFontSizeColumn {
                get {
                    return this.columnCodeEditorFontSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsRow this[int index] {
                get {
                    return ((SettingsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SettingsRowChangeEventHandler SettingsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SettingsRowChangeEventHandler SettingsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SettingsRowChangeEventHandler SettingsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SettingsRowChangeEventHandler SettingsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSettingsRow(SettingsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsRow AddSettingsRow(
                        string BackgroundImage,
                        string DefaultDataDriver,
                        int DefaultDataFormatForRead,
                        string EditorFontName,
                        decimal EditorFontSize,
                        string ControlFontName,
                        decimal ControlFontSize,
                        int FrameworkTcpPort,
                        bool IncludeMissingValues,
                        string Language,
                        int MRUProjectsCount,
                        int MRUViewsCount,
                        int MRUDataSourcesCount,
                        int RecordProcessingScope,
                        string RepresentationOfMissing,
                        string RepresentationOfNo,
                        string RepresentationOfYes,
                        bool ShowCompletePrompt,
                        bool ShowGraphics,
                        bool ShowHyperlinks,
                        bool ShowPercents,
                        bool ShowSelection,
                        bool ShowTables,
                        bool SnapToGrid,
                        int StatisticsLevel,
                        bool ShowStatusBar,
                        decimal PrecisionForStatistics,
                        string OutputFilePrefix,
                        int OutputFileSequence,
                        int OutputFileFlagAge,
                        int OutputFileFlagNumber,
                        int OutputFileFlagSize,
                        bool ShowGrid,
                        bool SnapPromptToGrid,
                        bool SnapInputControlToGrid,
                        int GridSize,
                        string GridBackgroundImage,
                        int GridBackgroundColor,
                        string GridBackgroundImageLayout,
                        bool EditorFontBold,
                        bool EditorFontItalics,
                        bool ControlFontBold,
                        bool ControlFontItalics,
                        int DefaultPageWidth,
                        int DefaultPageHeight,
                        string DefaultPageOrientation,
                        string DefaultLabelAlign,
                        string DefaultTargetMedium,
                        string MapServiceKey,
                        System.DateTime LastAlertDate,
                        bool CheckForUpdates,
                        string DateFormat,
                        string TimeFormat,
                        string DateTimeFormat,
                        string WebServiceEndpointAddress,
                        int WebServiceAuthMode,
                        int WebServiceMaxBufferPoolSize,
                        int WebServiceMaxReceivedMessageSize,
                        int WebServiceReaderMaxDepth,
                        int WebServiceReaderMaxStringContentLength,
                        int WebServiceReaderMaxArrayLength,
                        int WebServiceReaderMaxBytesPerRead,
                        int WebServiceReaderMaxNameTableCharCount,
                        string WebServiceBindingMode,
                        int DashboardFrequencyRowLimit,
                        int DashboardFrequencyStrataLimit,
                        int DashboardFrequencyCrosstabLimit,
                        int DashboardCombinedFrequencyRowLimit,
                        int DashboardAberrationRowLimit,
                        int DashboardLineListRowLimit,
                        bool Republish_IsRepbulishable,
                        bool Republish_RequireSecurityKey,
                        bool CodeEditorFontBold,
                        bool CodeEditorFontItalics,
                        string CodeEditorFontName,
                        decimal CodeEditorFontSize) {
                SettingsRow rowSettingsRow = ((SettingsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull











































































;
                rowSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSettingsRow);
                return rowSettingsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                SettingsDataTable cln = ((SettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new SettingsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnBackgroundImage = base.Columns["BackgroundImage"];
                this.columnDefaultDataDriver = base.Columns["DefaultDataDriver"];
                this.columnDefaultDataFormatForRead = base.Columns["DefaultDataFormatForRead"];
                this.columnEditorFontName = base.Columns["EditorFontName"];
                this.columnEditorFontSize = base.Columns["EditorFontSize"];
                this.columnControlFontName = base.Columns["ControlFontName"];
                this.columnControlFontSize = base.Columns["ControlFontSize"];
                this.columnFrameworkTcpPort = base.Columns["FrameworkTcpPort"];
                this.columnIncludeMissingValues = base.Columns["IncludeMissingValues"];
                this.columnLanguage = base.Columns["Language"];
                this.columnMRUProjectsCount = base.Columns["MRUProjectsCount"];
                this.columnMRUViewsCount = base.Columns["MRUViewsCount"];
                this.columnMRUDataSourcesCount = base.Columns["MRUDataSourcesCount"];
                this.columnRecordProcessingScope = base.Columns["RecordProcessingScope"];
                this.columnRepresentationOfMissing = base.Columns["RepresentationOfMissing"];
                this.columnRepresentationOfNo = base.Columns["RepresentationOfNo"];
                this.columnRepresentationOfYes = base.Columns["RepresentationOfYes"];
                this.columnShowCompletePrompt = base.Columns["ShowCompletePrompt"];
                this.columnShowGraphics = base.Columns["ShowGraphics"];
                this.columnShowHyperlinks = base.Columns["ShowHyperlinks"];
                this.columnShowPercents = base.Columns["ShowPercents"];
                this.columnShowSelection = base.Columns["ShowSelection"];
                this.columnShowTables = base.Columns["ShowTables"];
                this.columnSnapToGrid = base.Columns["SnapToGrid"];
                this.columnStatisticsLevel = base.Columns["StatisticsLevel"];
                this.columnShowStatusBar = base.Columns["ShowStatusBar"];
                this.columnPrecisionForStatistics = base.Columns["PrecisionForStatistics"];
                this.columnOutputFilePrefix = base.Columns["OutputFilePrefix"];
                this.columnOutputFileSequence = base.Columns["OutputFileSequence"];
                this.columnOutputFileFlagAge = base.Columns["OutputFileFlagAge"];
                this.columnOutputFileFlagNumber = base.Columns["OutputFileFlagNumber"];
                this.columnOutputFileFlagSize = base.Columns["OutputFileFlagSize"];
                this.columnShowGrid = base.Columns["ShowGrid"];
                this.columnSnapPromptToGrid = base.Columns["SnapPromptToGrid"];
                this.columnSnapInputControlToGrid = base.Columns["SnapInputControlToGrid"];
                this.columnGridSize = base.Columns["GridSize"];
                this.columnGridBackgroundImage = base.Columns["GridBackgroundImage"];
                this.columnGridBackgroundColor = base.Columns["GridBackgroundColor"];
                this.columnGridBackgroundImageLayout = base.Columns["GridBackgroundImageLayout"];
                this.columnEditorFontBold = base.Columns["EditorFontBold"];
                this.columnEditorFontItalics = base.Columns["EditorFontItalics"];
                this.columnControlFontBold = base.Columns["ControlFontBold"];
                this.columnControlFontItalics = base.Columns["ControlFontItalics"];
                this.columnDefaultPageWidth = base.Columns["DefaultPageWidth"];
                this.columnDefaultPageHeight = base.Columns["DefaultPageHeight"];
                this.columnDefaultPageOrientation = base.Columns["DefaultPageOrientation"];
                this.columnDefaultLabelAlign = base.Columns["DefaultLabelAlign"];
                this.columnDefaultTargetMedium = base.Columns["DefaultTargetMedium"];
                this.columnMapServiceKey = base.Columns["MapServiceKey"];
                this.columnLastAlertDate = base.Columns["LastAlertDate"];
                this.columnCheckForUpdates = base.Columns["CheckForUpdates"];
                this.columnDateFormat = base.Columns["DateFormat"];
                this.columnTimeFormat = base.Columns["TimeFormat"];
                this.columnDateTimeFormat = base.Columns["DateTimeFormat"];
                this.columnWebServiceEndpointAddress = base.Columns["WebServiceEndpointAddress"];
                this.columnWebServiceAuthMode = base.Columns["WebServiceAuthMode"];
                this.columnWebServiceMaxBufferPoolSize = base.Columns["WebServiceMaxBufferPoolSize"];
                this.columnWebServiceMaxReceivedMessageSize = base.Columns["WebServiceMaxReceivedMessageSize"];
                this.columnWebServiceReaderMaxDepth = base.Columns["WebServiceReaderMaxDepth"];
                this.columnWebServiceReaderMaxStringContentLength = base.Columns["WebServiceReaderMaxStringContentLength"];
                this.columnWebServiceReaderMaxArrayLength = base.Columns["WebServiceReaderMaxArrayLength"];
                this.columnWebServiceReaderMaxBytesPerRead = base.Columns["WebServiceReaderMaxBytesPerRead"];
                this.columnWebServiceReaderMaxNameTableCharCount = base.Columns["WebServiceReaderMaxNameTableCharCount"];
                this.columnWebServiceBindingMode = base.Columns["WebServiceBindingMode"];
                this.columnDashboardFrequencyRowLimit = base.Columns["DashboardFrequencyRowLimit"];
                this.columnDashboardFrequencyStrataLimit = base.Columns["DashboardFrequencyStrataLimit"];
                this.columnDashboardFrequencyCrosstabLimit = base.Columns["DashboardFrequencyCrosstabLimit"];
                this.columnDashboardCombinedFrequencyRowLimit = base.Columns["DashboardCombinedFrequencyRowLimit"];
                this.columnDashboardAberrationRowLimit = base.Columns["DashboardAberrationRowLimit"];
                this.columnDashboardLineListRowLimit = base.Columns["DashboardLineListRowLimit"];
                this.columnRepublish_IsRepbulishable = base.Columns["Republish_IsRepbulishable"];
                this.columnRepublish_RequireSecurityKey = base.Columns["Republish_RequireSecurityKey"];
                this.columnCodeEditorFontBold = base.Columns["CodeEditorFontBold"];
                this.columnCodeEditorFontItalics = base.Columns["CodeEditorFontItalics"];
                this.columnCodeEditorFontName = base.Columns["CodeEditorFontName"];
                this.columnCodeEditorFontSize = base.Columns["CodeEditorFontSize"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnBackgroundImage = new         System.Data.DataColumn("BackgroundImage", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackgroundImage);
                this.columnDefaultDataDriver = new         System.Data.DataColumn("DefaultDataDriver", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultDataDriver);
                this.columnDefaultDataFormatForRead = new         System.Data.DataColumn("DefaultDataFormatForRead", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultDataFormatForRead);
                this.columnEditorFontName = new         System.Data.DataColumn("EditorFontName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditorFontName);
                this.columnEditorFontSize = new         System.Data.DataColumn("EditorFontSize", typeof(decimal), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditorFontSize);
                this.columnControlFontName = new         System.Data.DataColumn("ControlFontName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlFontName);
                this.columnControlFontSize = new         System.Data.DataColumn("ControlFontSize", typeof(decimal), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlFontSize);
                this.columnFrameworkTcpPort = new         System.Data.DataColumn("FrameworkTcpPort", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrameworkTcpPort);
                this.columnIncludeMissingValues = new         System.Data.DataColumn("IncludeMissingValues", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncludeMissingValues);
                this.columnLanguage = new         System.Data.DataColumn("Language", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLanguage);
                this.columnMRUProjectsCount = new         System.Data.DataColumn("MRUProjectsCount", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRUProjectsCount);
                this.columnMRUViewsCount = new         System.Data.DataColumn("MRUViewsCount", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRUViewsCount);
                this.columnMRUDataSourcesCount = new         System.Data.DataColumn("MRUDataSourcesCount", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRUDataSourcesCount);
                this.columnRecordProcessingScope = new         System.Data.DataColumn("RecordProcessingScope", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecordProcessingScope);
                this.columnRepresentationOfMissing = new         System.Data.DataColumn("RepresentationOfMissing", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentationOfMissing);
                this.columnRepresentationOfNo = new         System.Data.DataColumn("RepresentationOfNo", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentationOfNo);
                this.columnRepresentationOfYes = new         System.Data.DataColumn("RepresentationOfYes", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepresentationOfYes);
                this.columnShowCompletePrompt = new         System.Data.DataColumn("ShowCompletePrompt", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowCompletePrompt);
                this.columnShowGraphics = new         System.Data.DataColumn("ShowGraphics", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowGraphics);
                this.columnShowHyperlinks = new         System.Data.DataColumn("ShowHyperlinks", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowHyperlinks);
                this.columnShowPercents = new         System.Data.DataColumn("ShowPercents", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowPercents);
                this.columnShowSelection = new         System.Data.DataColumn("ShowSelection", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowSelection);
                this.columnShowTables = new         System.Data.DataColumn("ShowTables", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowTables);
                this.columnSnapToGrid = new         System.Data.DataColumn("SnapToGrid", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapToGrid);
                this.columnStatisticsLevel = new         System.Data.DataColumn("StatisticsLevel", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatisticsLevel);
                this.columnShowStatusBar = new         System.Data.DataColumn("ShowStatusBar", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowStatusBar);
                this.columnPrecisionForStatistics = new         System.Data.DataColumn("PrecisionForStatistics", typeof(decimal), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrecisionForStatistics);
                this.columnOutputFilePrefix = new         System.Data.DataColumn("OutputFilePrefix", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputFilePrefix);
                this.columnOutputFileSequence = new         System.Data.DataColumn("OutputFileSequence", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputFileSequence);
                this.columnOutputFileFlagAge = new         System.Data.DataColumn("OutputFileFlagAge", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputFileFlagAge);
                this.columnOutputFileFlagNumber = new         System.Data.DataColumn("OutputFileFlagNumber", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputFileFlagNumber);
                this.columnOutputFileFlagSize = new         System.Data.DataColumn("OutputFileFlagSize", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutputFileFlagSize);
                this.columnShowGrid = new         System.Data.DataColumn("ShowGrid", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowGrid);
                this.columnSnapPromptToGrid = new         System.Data.DataColumn("SnapPromptToGrid", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapPromptToGrid);
                this.columnSnapInputControlToGrid = new         System.Data.DataColumn("SnapInputControlToGrid", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnSnapInputControlToGrid);
                this.columnGridSize = new         System.Data.DataColumn("GridSize", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridSize);
                this.columnGridBackgroundImage = new         System.Data.DataColumn("GridBackgroundImage", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridBackgroundImage);
                this.columnGridBackgroundColor = new         System.Data.DataColumn("GridBackgroundColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridBackgroundColor);
                this.columnGridBackgroundImageLayout = new         System.Data.DataColumn("GridBackgroundImageLayout", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGridBackgroundImageLayout);
                this.columnEditorFontBold = new         System.Data.DataColumn("EditorFontBold", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditorFontBold);
                this.columnEditorFontItalics = new         System.Data.DataColumn("EditorFontItalics", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditorFontItalics);
                this.columnControlFontBold = new         System.Data.DataColumn("ControlFontBold", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlFontBold);
                this.columnControlFontItalics = new         System.Data.DataColumn("ControlFontItalics", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnControlFontItalics);
                this.columnDefaultPageWidth = new         System.Data.DataColumn("DefaultPageWidth", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPageWidth);
                this.columnDefaultPageHeight = new         System.Data.DataColumn("DefaultPageHeight", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPageHeight);
                this.columnDefaultPageOrientation = new         System.Data.DataColumn("DefaultPageOrientation", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPageOrientation);
                this.columnDefaultLabelAlign = new         System.Data.DataColumn("DefaultLabelAlign", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultLabelAlign);
                this.columnDefaultTargetMedium = new         System.Data.DataColumn("DefaultTargetMedium", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultTargetMedium);
                this.columnMapServiceKey = new         System.Data.DataColumn("MapServiceKey", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapServiceKey);
                this.columnLastAlertDate = new         System.Data.DataColumn("LastAlertDate", typeof(        System.DateTime), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastAlertDate);
                this.columnCheckForUpdates = new         System.Data.DataColumn("CheckForUpdates", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckForUpdates);
                this.columnDateFormat = new         System.Data.DataColumn("DateFormat", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateFormat);
                this.columnTimeFormat = new         System.Data.DataColumn("TimeFormat", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFormat);
                this.columnDateTimeFormat = new         System.Data.DataColumn("DateTimeFormat", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeFormat);
                this.columnWebServiceEndpointAddress = new         System.Data.DataColumn("WebServiceEndpointAddress", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceEndpointAddress);
                this.columnWebServiceAuthMode = new         System.Data.DataColumn("WebServiceAuthMode", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceAuthMode);
                this.columnWebServiceMaxBufferPoolSize = new         System.Data.DataColumn("WebServiceMaxBufferPoolSize", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceMaxBufferPoolSize);
                this.columnWebServiceMaxReceivedMessageSize = new         System.Data.DataColumn("WebServiceMaxReceivedMessageSize", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceMaxReceivedMessageSize);
                this.columnWebServiceReaderMaxDepth = new         System.Data.DataColumn("WebServiceReaderMaxDepth", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceReaderMaxDepth);
                this.columnWebServiceReaderMaxStringContentLength = new         System.Data.DataColumn("WebServiceReaderMaxStringContentLength", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceReaderMaxStringContentLength);
                this.columnWebServiceReaderMaxArrayLength = new         System.Data.DataColumn("WebServiceReaderMaxArrayLength", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceReaderMaxArrayLength);
                this.columnWebServiceReaderMaxBytesPerRead = new         System.Data.DataColumn("WebServiceReaderMaxBytesPerRead", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceReaderMaxBytesPerRead);
                this.columnWebServiceReaderMaxNameTableCharCount = new         System.Data.DataColumn("WebServiceReaderMaxNameTableCharCount", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceReaderMaxNameTableCharCount);
                this.columnWebServiceBindingMode = new         System.Data.DataColumn("WebServiceBindingMode", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebServiceBindingMode);
                this.columnDashboardFrequencyRowLimit = new         System.Data.DataColumn("DashboardFrequencyRowLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardFrequencyRowLimit);
                this.columnDashboardFrequencyStrataLimit = new         System.Data.DataColumn("DashboardFrequencyStrataLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardFrequencyStrataLimit);
                this.columnDashboardFrequencyCrosstabLimit = new         System.Data.DataColumn("DashboardFrequencyCrosstabLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardFrequencyCrosstabLimit);
                this.columnDashboardCombinedFrequencyRowLimit = new         System.Data.DataColumn("DashboardCombinedFrequencyRowLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardCombinedFrequencyRowLimit);
                this.columnDashboardAberrationRowLimit = new         System.Data.DataColumn("DashboardAberrationRowLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardAberrationRowLimit);
                this.columnDashboardLineListRowLimit = new         System.Data.DataColumn("DashboardLineListRowLimit", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDashboardLineListRowLimit);
                this.columnRepublish_IsRepbulishable = new         System.Data.DataColumn("Republish_IsRepbulishable", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepublish_IsRepbulishable);
                this.columnRepublish_RequireSecurityKey = new         System.Data.DataColumn("Republish_RequireSecurityKey", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRepublish_RequireSecurityKey);
                this.columnCodeEditorFontBold = new         System.Data.DataColumn("CodeEditorFontBold", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeEditorFontBold);
                this.columnCodeEditorFontItalics = new         System.Data.DataColumn("CodeEditorFontItalics", typeof(bool), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeEditorFontItalics);
                this.columnCodeEditorFontName = new         System.Data.DataColumn("CodeEditorFontName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeEditorFontName);
                this.columnCodeEditorFontSize = new         System.Data.DataColumn("CodeEditorFontSize", typeof(decimal), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnCodeEditorFontSize);
                this.Constraints.Add(new         System.Data.UniqueConstraint("DateFormat", new         System.Data.DataColumn[] {
                                this.columnBackgroundImage}, false));
                this.columnBackgroundImage.AllowDBNull = false;
                this.columnBackgroundImage.Unique = true;
                this.columnBackgroundImage.DefaultValue = ((string)(""));
                this.columnDefaultDataDriver.AllowDBNull = false;
                this.columnDefaultDataFormatForRead.AllowDBNull = false;
                this.columnEditorFontName.AllowDBNull = false;
                this.columnEditorFontSize.AllowDBNull = false;
                this.columnControlFontName.AllowDBNull = false;
                this.columnControlFontSize.AllowDBNull = false;
                this.columnFrameworkTcpPort.AllowDBNull = false;
                this.columnIncludeMissingValues.AllowDBNull = false;
                this.columnLanguage.AllowDBNull = false;
                this.columnMRUProjectsCount.AllowDBNull = false;
                this.columnMRUViewsCount.AllowDBNull = false;
                this.columnMRUDataSourcesCount.AllowDBNull = false;
                this.columnRecordProcessingScope.AllowDBNull = false;
                this.columnRepresentationOfMissing.AllowDBNull = false;
                this.columnRepresentationOfNo.AllowDBNull = false;
                this.columnRepresentationOfYes.AllowDBNull = false;
                this.columnShowCompletePrompt.AllowDBNull = false;
                this.columnShowGraphics.AllowDBNull = false;
                this.columnShowHyperlinks.AllowDBNull = false;
                this.columnShowPercents.AllowDBNull = false;
                this.columnShowSelection.AllowDBNull = false;
                this.columnShowTables.AllowDBNull = false;
                this.columnSnapToGrid.AllowDBNull = false;
                this.columnSnapToGrid.DefaultValue = ((bool)(true));
                this.columnStatisticsLevel.AllowDBNull = false;
                this.columnShowStatusBar.AllowDBNull = false;
                this.columnPrecisionForStatistics.AllowDBNull = false;
                this.columnOutputFilePrefix.DefaultValue = ((string)("OUTPUT"));
                this.columnOutputFileSequence.AllowDBNull = false;
                this.columnOutputFileSequence.DefaultValue = ((int)(1));
                this.columnOutputFileFlagAge.AllowDBNull = false;
                this.columnOutputFileFlagAge.DefaultValue = ((int)(20));
                this.columnOutputFileFlagNumber.AllowDBNull = false;
                this.columnOutputFileFlagNumber.DefaultValue = ((int)(100));
                this.columnOutputFileFlagSize.AllowDBNull = false;
                this.columnOutputFileFlagSize.DefaultValue = ((int)(500));
                this.columnShowGrid.DefaultValue = ((bool)(true));
                this.columnSnapPromptToGrid.DefaultValue = ((bool)(true));
                this.columnSnapInputControlToGrid.DefaultValue = ((bool)(true));
                this.columnGridSize.DefaultValue = ((int)(2));
                this.columnGridBackgroundColor.DefaultValue = ((int)(0));
                this.columnGridBackgroundImageLayout.DefaultValue = ((string)("None"));
                this.columnEditorFontBold.DefaultValue = ((bool)(false));
                this.columnEditorFontItalics.DefaultValue = ((bool)(false));
                this.columnControlFontBold.DefaultValue = ((bool)(false));
                this.columnControlFontItalics.DefaultValue = ((bool)(false));
                this.columnDefaultPageWidth.AllowDBNull = false;
                this.columnDefaultPageWidth.DefaultValue = ((int)(780));
                this.columnDefaultPageHeight.AllowDBNull = false;
                this.columnDefaultPageHeight.DefaultValue = ((int)(1016));
                this.columnDefaultPageOrientation.AllowDBNull = false;
                this.columnDefaultPageOrientation.DefaultValue = ((string)("Portrait"));
                this.columnDefaultLabelAlign.AllowDBNull = false;
                this.columnDefaultLabelAlign.DefaultValue = ((string)("Vertical"));
                this.columnDefaultTargetMedium.AllowDBNull = false;
                this.columnDefaultTargetMedium.DefaultValue = ((string)("Paper"));
                this.columnLastAlertDate.DateTimeMode =         System.Data.DataSetDateTime.Utc;
                this.columnCheckForUpdates.AllowDBNull = false;
                this.columnCheckForUpdates.DefaultValue = ((bool)(true));
                this.columnDateFormat.DefaultValue = ((string)("MM-DD-YYYY"));
                this.columnTimeFormat.DefaultValue = ((string)("HH:MM:SS AMPM"));
                this.columnDateTimeFormat.DefaultValue = ((string)("MM-DD-YYYY HH:MM:SS AMPM"));
                this.columnWebServiceAuthMode.AllowDBNull = false;
                this.columnWebServiceMaxBufferPoolSize.AllowDBNull = false;
                this.columnWebServiceMaxReceivedMessageSize.AllowDBNull = false;
                this.columnWebServiceReaderMaxDepth.AllowDBNull = false;
                this.columnWebServiceReaderMaxStringContentLength.AllowDBNull = false;
                this.columnWebServiceReaderMaxArrayLength.AllowDBNull = false;
                this.columnWebServiceReaderMaxBytesPerRead.AllowDBNull = false;
                this.columnWebServiceReaderMaxNameTableCharCount.AllowDBNull = false;
                this.columnDashboardFrequencyRowLimit.AllowDBNull = false;
                this.columnDashboardFrequencyStrataLimit.AllowDBNull = false;
                this.columnDashboardFrequencyCrosstabLimit.AllowDBNull = false;
                this.columnDashboardCombinedFrequencyRowLimit.AllowDBNull = false;
                this.columnDashboardAberrationRowLimit.AllowDBNull = false;
                this.columnDashboardLineListRowLimit.AllowDBNull = false;
                this.columnRepublish_IsRepbulishable.DefaultValue = ((bool)(false));
                this.columnRepublish_RequireSecurityKey.DefaultValue = ((bool)(false));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsRow NewSettingsRow() {
                return ((SettingsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new SettingsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(SettingsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SettingsRowChanged != null)) {
                    this.SettingsRowChanged(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SettingsRowChanging != null)) {
                    this.SettingsRowChanging(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SettingsRowDeleted != null)) {
                    this.SettingsRowDeleted(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SettingsRowDeleting != null)) {
                    this.SettingsRowDeleting(this, new SettingsRowChangeEvent(((SettingsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSettingsRow(SettingsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                Config ds = new Config();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        public         class VersionRow :         System.Data.DataRow {

            private VersionDataTable tableVersion;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal VersionRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableVersion = ((VersionDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int EpiInfoVersion {
                get {
                    return ((int)(this[this.tableVersion.EpiInfoVersionColumn]));
                }
                set {
                    this[this.tableVersion.EpiInfoVersionColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ConfigVersion {
                get {
                    return ((int)(this[this.tableVersion.ConfigVersionColumn]));
                }
                set {
                    this[this.tableVersion.ConfigVersionColumn] = value;
                }
            }
        }




        public         class ViewsRow :         System.Data.DataRow {

            private ViewsDataTable tableViews;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ViewsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableViews = ((ViewsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Views_Id {
                get {
                    return ((int)(this[this.tableViews.Views_IdColumn]));
                }
                set {
                    this[this.tableViews.Views_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRow[] GetRecentViewRows() {
                if ((this.Table.ChildRelations["Views_RecentView"] == null)) {
                    return new RecentViewRow[0];
                }
                else {
                    return ((RecentViewRow[])(base.GetChildRows(this.Table.ChildRelations["Views_RecentView"])));
                }
            }
        }




        public         class RecentViewRow :         System.Data.DataRow {

            private RecentViewDataTable tableRecentView;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentViewRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableRecentView = ((RecentViewDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableRecentView.NameColumn]));
                }
                set {
                    this[this.tableRecentView.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    return ((string)(this[this.tableRecentView.LocationColumn]));
                }
                set {
                    this[this.tableRecentView.LocationColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastAccessed {
                get {
                    return ((        System.DateTime)(this[this.tableRecentView.LastAccessedColumn]));
                }
                set {
                    this[this.tableRecentView.LastAccessedColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Views_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecentView.Views_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Views_Id\' in table \'RecentView\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecentView.Views_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRow ViewsRow {
                get {
                    return ((ViewsRow)(this.GetParentRow(this.Table.ParentRelations["Views_RecentView"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Views_RecentView"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsViews_IdNull() {
                return this.IsNull(this.tableRecentView.Views_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetViews_IdNull() {
                this[this.tableRecentView.Views_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class ProjectsRow :         System.Data.DataRow {

            private ProjectsDataTable tableProjects;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProjectsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableProjects = ((ProjectsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CurrentProjectLocation {
                get {
                    return ((string)(this[this.tableProjects.CurrentProjectLocationColumn]));
                }
                set {
                    this[this.tableProjects.CurrentProjectLocationColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Projects_Id {
                get {
                    return ((int)(this[this.tableProjects.Projects_IdColumn]));
                }
                set {
                    this[this.tableProjects.Projects_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRow[] GetRecentProjectRows() {
                if ((this.Table.ChildRelations["Projects_RecentProject"] == null)) {
                    return new RecentProjectRow[0];
                }
                else {
                    return ((RecentProjectRow[])(base.GetChildRows(this.Table.ChildRelations["Projects_RecentProject"])));
                }
            }
        }




        public         class RecentProjectRow :         System.Data.DataRow {

            private RecentProjectDataTable tableRecentProject;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentProjectRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableRecentProject = ((RecentProjectDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableRecentProject.NameColumn]));
                }
                set {
                    this[this.tableRecentProject.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    return ((string)(this[this.tableRecentProject.LocationColumn]));
                }
                set {
                    this[this.tableRecentProject.LocationColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastAccessed {
                get {
                    return ((        System.DateTime)(this[this.tableRecentProject.LastAccessedColumn]));
                }
                set {
                    this[this.tableRecentProject.LastAccessedColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Projects_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecentProject.Projects_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Projects_Id\' in table \'RecentProject\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecentProject.Projects_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRow ProjectsRow {
                get {
                    return ((ProjectsRow)(this.GetParentRow(this.Table.ParentRelations["Projects_RecentProject"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Projects_RecentProject"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsProjects_IdNull() {
                return this.IsNull(this.tableRecentProject.Projects_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetProjects_IdNull() {
                this[this.tableRecentProject.Projects_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class DataSourcesRow :         System.Data.DataRow {

            private DataSourcesDataTable tableDataSources;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataSourcesRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableDataSources = ((DataSourcesDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataSources_Id_0 {
                get {
                    return ((int)(this[this.tableDataSources.DataSources_Id_0Column]));
                }
                set {
                    this[this.tableDataSources.DataSources_Id_0Column] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRow[] GetRecentDataSourceRows() {
                if ((this.Table.ChildRelations["DataSources_RecentDataSource"] == null)) {
                    return new RecentDataSourceRow[0];
                }
                else {
                    return ((RecentDataSourceRow[])(base.GetChildRows(this.Table.ChildRelations["DataSources_RecentDataSource"])));
                }
            }
        }




        public         class RecentDataSourceRow :         System.Data.DataRow {

            private RecentDataSourceDataTable tableRecentDataSource;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal RecentDataSourceRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableRecentDataSource = ((RecentDataSourceDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableRecentDataSource.NameColumn]));
                }
                set {
                    this[this.tableRecentDataSource.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ConnectionString {
                get {
                    return ((string)(this[this.tableRecentDataSource.ConnectionStringColumn]));
                }
                set {
                    this[this.tableRecentDataSource.ConnectionStringColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastAccessed {
                get {
                    return ((        System.DateTime)(this[this.tableRecentDataSource.LastAccessedColumn]));
                }
                set {
                    this[this.tableRecentDataSource.LastAccessedColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataSource_Id {
                get {
                    try {
                        return ((int)(this[this.tableRecentDataSource.DataSource_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataSource_Id\' in table \'RecentDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecentDataSource.DataSource_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataProvider {
                get {
                    return ((string)(this[this.tableRecentDataSource.DataProviderColumn]));
                }
                set {
                    this[this.tableRecentDataSource.DataProviderColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataSources_Id_0 {
                get {
                    try {
                        return ((int)(this[this.tableRecentDataSource.DataSources_Id_0Column]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataSources_Id_0\' in table \'RecentDataSource\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRecentDataSource.DataSources_Id_0Column] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRow DataSourcesRow {
                get {
                    return ((DataSourcesRow)(this.GetParentRow(this.Table.ParentRelations["DataSources_RecentDataSource"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataSources_RecentDataSource"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataSource_IdNull() {
                return this.IsNull(this.tableRecentDataSource.DataSource_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataSource_IdNull() {
                this[this.tableRecentDataSource.DataSource_IdColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataSources_Id_0Null() {
                return this.IsNull(this.tableRecentDataSource.DataSources_Id_0Column);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataSources_Id_0Null() {
                this[this.tableRecentDataSource.DataSources_Id_0Column] =         System.Convert.DBNull;
            }
        }




        public         class ModulesRow :         System.Data.DataRow {

            private ModulesDataTable tableModules;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModulesRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableModules = ((ModulesDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Modules_Id {
                get {
                    return ((int)(this[this.tableModules.Modules_IdColumn]));
                }
                set {
                    this[this.tableModules.Modules_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRow[] GetModuleRows() {
                if ((this.Table.ChildRelations["Modules_Module"] == null)) {
                    return new ModuleRow[0];
                }
                else {
                    return ((ModuleRow[])(base.GetChildRows(this.Table.ChildRelations["Modules_Module"])));
                }
            }
        }




        public         class ModuleRow :         System.Data.DataRow {

            private ModuleDataTable tableModule;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ModuleRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableModule = ((ModuleDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableModule.NameColumn]));
                }
                set {
                    this[this.tableModule.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Type {
                get {
                    return ((string)(this[this.tableModule.TypeColumn]));
                }
                set {
                    this[this.tableModule.TypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Modules_Id {
                get {
                    try {
                        return ((int)(this[this.tableModule.Modules_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Modules_Id\' in table \'Module\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModule.Modules_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRow ModulesRow {
                get {
                    return ((ModulesRow)(this.GetParentRow(this.Table.ParentRelations["Modules_Module"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Modules_Module"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsModules_IdNull() {
                return this.IsNull(this.tableModule.Modules_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetModules_IdNull() {
                this[this.tableModule.Modules_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class VariablesRow :         System.Data.DataRow {

            private VariablesDataTable tableVariables;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal VariablesRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableVariables = ((VariablesDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Variables_Id {
                get {
                    return ((int)(this[this.tableVariables.Variables_IdColumn]));
                }
                set {
                    this[this.tableVariables.Variables_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRow[] GetPermanentVariableRows() {
                if ((this.Table.ChildRelations["Variables_PermanentVariable"] == null)) {
                    return new PermanentVariableRow[0];
                }
                else {
                    return ((PermanentVariableRow[])(base.GetChildRows(this.Table.ChildRelations["Variables_PermanentVariable"])));
                }
            }
        }




        public         class PermanentVariableRow :         System.Data.DataRow {

            private PermanentVariableDataTable tablePermanentVariable;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PermanentVariableRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablePermanentVariable = ((PermanentVariableDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tablePermanentVariable.NameColumn]));
                }
                set {
                    this[this.tablePermanentVariable.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataValue {
                get {
                    return ((string)(this[this.tablePermanentVariable.DataValueColumn]));
                }
                set {
                    this[this.tablePermanentVariable.DataValueColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataType {
                get {
                    return ((int)(this[this.tablePermanentVariable.DataTypeColumn]));
                }
                set {
                    this[this.tablePermanentVariable.DataTypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Variables_Id {
                get {
                    try {
                        return ((int)(this[this.tablePermanentVariable.Variables_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Variables_Id\' in table \'PermanentVariable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePermanentVariable.Variables_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRow VariablesRow {
                get {
                    return ((VariablesRow)(this.GetParentRow(this.Table.ParentRelations["Variables_PermanentVariable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Variables_PermanentVariable"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVariables_IdNull() {
                return this.IsNull(this.tablePermanentVariable.Variables_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVariables_IdNull() {
                this[this.tablePermanentVariable.Variables_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class DirectoriesRow :         System.Data.DataRow {

            private DirectoriesDataTable tableDirectories;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DirectoriesRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableDirectories = ((DirectoriesDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Configuration {
                get {
                    return ((string)(this[this.tableDirectories.ConfigurationColumn]));
                }
                set {
                    this[this.tableDirectories.ConfigurationColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Output {
                get {
                    return ((string)(this[this.tableDirectories.OutputColumn]));
                }
                set {
                    this[this.tableDirectories.OutputColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Project {
                get {
                    return ((string)(this[this.tableDirectories.ProjectColumn]));
                }
                set {
                    this[this.tableDirectories.ProjectColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Templates {
                get {
                    return ((string)(this[this.tableDirectories.TemplatesColumn]));
                }
                set {
                    this[this.tableDirectories.TemplatesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Working {
                get {
                    return ((string)(this[this.tableDirectories.WorkingColumn]));
                }
                set {
                    this[this.tableDirectories.WorkingColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Samples {
                get {
                    return ((string)(this[this.tableDirectories.SamplesColumn]));
                }
                set {
                    this[this.tableDirectories.SamplesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LogDir {
                get {
                    return ((string)(this[this.tableDirectories.LogDirColumn]));
                }
                set {
                    this[this.tableDirectories.LogDirColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Archive {
                get {
                    return ((string)(this[this.tableDirectories.ArchiveColumn]));
                }
                set {
                    this[this.tableDirectories.ArchiveColumn] = value;
                }
            }
        }




        public         class DataDriversRow :         System.Data.DataRow {

            private DataDriversDataTable tableDataDrivers;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataDriversRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableDataDrivers = ((DataDriversDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataDrivers_Id {
                get {
                    return ((int)(this[this.tableDataDrivers.DataDrivers_IdColumn]));
                }
                set {
                    this[this.tableDataDrivers.DataDrivers_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRow[] GetDataDriverRows() {
                if ((this.Table.ChildRelations["DataDrivers_DataDriver"] == null)) {
                    return new DataDriverRow[0];
                }
                else {
                    return ((DataDriverRow[])(base.GetChildRows(this.Table.ChildRelations["DataDrivers_DataDriver"])));
                }
            }
        }




        public         class DataDriverRow :         System.Data.DataRow {

            private DataDriverDataTable tableDataDriver;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataDriverRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableDataDriver = ((DataDriverDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayName {
                get {
                    return ((string)(this[this.tableDataDriver.DisplayNameColumn]));
                }
                set {
                    this[this.tableDataDriver.DisplayNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Type {
                get {
                    return ((string)(this[this.tableDataDriver.TypeColumn]));
                }
                set {
                    this[this.tableDataDriver.TypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableDataDriver.FileNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FileName\' in table \'DataDriver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataDriver.FileNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool MetadataProvider {
                get {
                    try {
                        return ((bool)(this[this.tableDataDriver.MetadataProviderColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'MetadataProvider\' in table \'DataDriver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataDriver.MetadataProviderColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool DataProvider {
                get {
                    try {
                        return ((bool)(this[this.tableDataDriver.DataProviderColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataProvider\' in table \'DataDriver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataDriver.DataProviderColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataDrivers_Id {
                get {
                    try {
                        return ((int)(this[this.tableDataDriver.DataDrivers_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataDrivers_Id\' in table \'DataDriver\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataDriver.DataDrivers_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRow DataDriversRow {
                get {
                    return ((DataDriversRow)(this.GetParentRow(this.Table.ParentRelations["DataDrivers_DataDriver"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DataDrivers_DataDriver"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableDataDriver.FileNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableDataDriver.FileNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMetadataProviderNull() {
                return this.IsNull(this.tableDataDriver.MetadataProviderColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMetadataProviderNull() {
                this[this.tableDataDriver.MetadataProviderColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataProviderNull() {
                return this.IsNull(this.tableDataDriver.DataProviderColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataProviderNull() {
                this[this.tableDataDriver.DataProviderColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataDrivers_IdNull() {
                return this.IsNull(this.tableDataDriver.DataDrivers_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataDrivers_IdNull() {
                this[this.tableDataDriver.DataDrivers_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class GadgetsRow :         System.Data.DataRow {

            private GadgetsDataTable tableGadgets;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GadgetsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableGadgets = ((GadgetsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataDrivers_Id {
                get {
                    return ((int)(this[this.tableGadgets.DataDrivers_IdColumn]));
                }
                set {
                    this[this.tableGadgets.DataDrivers_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gadgets_Id {
                get {
                    return ((int)(this[this.tableGadgets.Gadgets_IdColumn]));
                }
                set {
                    this[this.tableGadgets.Gadgets_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRow[] GetGadgetRows() {
                if ((this.Table.ChildRelations["Gadgets_Gadget"] == null)) {
                    return new GadgetRow[0];
                }
                else {
                    return ((GadgetRow[])(base.GetChildRows(this.Table.ChildRelations["Gadgets_Gadget"])));
                }
            }
        }




        public         class GadgetRow :         System.Data.DataRow {

            private GadgetDataTable tableGadget;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal GadgetRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableGadget = ((GadgetDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayName {
                get {
                    return ((string)(this[this.tableGadget.DisplayNameColumn]));
                }
                set {
                    this[this.tableGadget.DisplayNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Type {
                get {
                    return ((string)(this[this.tableGadget.TypeColumn]));
                }
                set {
                    this[this.tableGadget.TypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableGadget.FileNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FileName\' in table \'Gadget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGadget.FileNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MenuSection {
                get {
                    try {
                        return ((int)(this[this.tableGadget.MenuSectionColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'MenuSection\' in table \'Gadget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGadget.MenuSectionColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DataDrivers_Id {
                get {
                    try {
                        return ((int)(this[this.tableGadget.DataDrivers_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataDrivers_Id\' in table \'Gadget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGadget.DataDrivers_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gadgets_Id {
                get {
                    try {
                        return ((int)(this[this.tableGadget.Gadgets_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Gadgets_Id\' in table \'Gadget\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGadget.Gadgets_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRow GadgetsRow {
                get {
                    return ((GadgetsRow)(this.GetParentRow(this.Table.ParentRelations["Gadgets_Gadget"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Gadgets_Gadget"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableGadget.FileNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableGadget.FileNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMenuSectionNull() {
                return this.IsNull(this.tableGadget.MenuSectionColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMenuSectionNull() {
                this[this.tableGadget.MenuSectionColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataDrivers_IdNull() {
                return this.IsNull(this.tableGadget.DataDrivers_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataDrivers_IdNull() {
                this[this.tableGadget.DataDrivers_IdColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGadgets_IdNull() {
                return this.IsNull(this.tableGadget.Gadgets_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGadgets_IdNull() {
                this[this.tableGadget.Gadgets_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class TextEncryptionModuleRow :         System.Data.DataRow {

            private TextEncryptionModuleDataTable tableTextEncryptionModule;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TextEncryptionModuleRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableTextEncryptionModule = ((TextEncryptionModuleDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tableTextEncryptionModule.DisplayNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DisplayName\' in table \'TextEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTextEncryptionModule.DisplayNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableTextEncryptionModule.TypeColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Type\' in table \'TextEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTextEncryptionModule.TypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableTextEncryptionModule.FileNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FileName\' in table \'TextEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTextEncryptionModule.FileNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableTextEncryptionModule.DisplayNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDisplayNameNull() {
                this[this.tableTextEncryptionModule.DisplayNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTypeNull() {
                return this.IsNull(this.tableTextEncryptionModule.TypeColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTypeNull() {
                this[this.tableTextEncryptionModule.TypeColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableTextEncryptionModule.FileNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableTextEncryptionModule.FileNameColumn] =         System.Convert.DBNull;
            }
        }




        public         class FileEncryptionModuleRow :         System.Data.DataRow {

            private FileEncryptionModuleDataTable tableFileEncryptionModule;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FileEncryptionModuleRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableFileEncryptionModule = ((FileEncryptionModuleDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tableFileEncryptionModule.DisplayNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DisplayName\' in table \'FileEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileEncryptionModule.DisplayNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tableFileEncryptionModule.TypeColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Type\' in table \'FileEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileEncryptionModule.TypeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableFileEncryptionModule.FileNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FileName\' in table \'FileEncryptionModule\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileEncryptionModule.FileNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableFileEncryptionModule.DisplayNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDisplayNameNull() {
                this[this.tableFileEncryptionModule.DisplayNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTypeNull() {
                return this.IsNull(this.tableFileEncryptionModule.TypeColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTypeNull() {
                this[this.tableFileEncryptionModule.TypeColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tableFileEncryptionModule.FileNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFileNameNull() {
                this[this.tableFileEncryptionModule.FileNameColumn] =         System.Convert.DBNull;
            }
        }




        public         class ConnectionsRow :         System.Data.DataRow {

            private ConnectionsDataTable tableConnections;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ConnectionsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableConnections = ((ConnectionsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Connections_Id {
                get {
                    return ((int)(this[this.tableConnections.Connections_IdColumn]));
                }
                set {
                    this[this.tableConnections.Connections_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRow[] GetDatabaseRows() {
                if ((this.Table.ChildRelations["Connections_Database"] == null)) {
                    return new DatabaseRow[0];
                }
                else {
                    return ((DatabaseRow[])(base.GetChildRows(this.Table.ChildRelations["Connections_Database"])));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRow[] GetFileRows() {
                if ((this.Table.ChildRelations["Connections_File"] == null)) {
                    return new FileRow[0];
                }
                else {
                    return ((FileRow[])(base.GetChildRows(this.Table.ChildRelations["Connections_File"])));
                }
            }
        }




        public         class DatabaseRow :         System.Data.DataRow {

            private DatabaseDataTable tableDatabase;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DatabaseRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableDatabase = ((DatabaseDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableDatabase.NameColumn]));
                }
                set {
                    this[this.tableDatabase.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataDriver {
                get {
                    return ((string)(this[this.tableDatabase.DataDriverColumn]));
                }
                set {
                    this[this.tableDatabase.DataDriverColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ConnectionString {
                get {
                    return ((string)(this[this.tableDatabase.ConnectionStringColumn]));
                }
                set {
                    this[this.tableDatabase.ConnectionStringColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Connections_Id {
                get {
                    try {
                        return ((int)(this[this.tableDatabase.Connections_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Connections_Id\' in table \'Database\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatabase.Connections_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow ConnectionsRow {
                get {
                    return ((ConnectionsRow)(this.GetParentRow(this.Table.ParentRelations["Connections_Database"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Connections_Database"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConnections_IdNull() {
                return this.IsNull(this.tableDatabase.Connections_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConnections_IdNull() {
                this[this.tableDatabase.Connections_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class FileRow :         System.Data.DataRow {

            private FileDataTable tableFile;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal FileRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableFile = ((FileDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Extension {
                get {
                    return ((string)(this[this.tableFile.ExtensionColumn]));
                }
                set {
                    this[this.tableFile.ExtensionColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataDriver {
                get {
                    return ((string)(this[this.tableFile.DataDriverColumn]));
                }
                set {
                    this[this.tableFile.DataDriverColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Connections_Id {
                get {
                    try {
                        return ((int)(this[this.tableFile.Connections_IdColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Connections_Id\' in table \'File\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFile.Connections_IdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow ConnectionsRow {
                get {
                    return ((ConnectionsRow)(this.GetParentRow(this.Table.ParentRelations["Connections_File"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Connections_File"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConnections_IdNull() {
                return this.IsNull(this.tableFile.Connections_IdColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConnections_IdNull() {
                this[this.tableFile.Connections_IdColumn] =         System.Convert.DBNull;
            }
        }




        public         class SettingsRow :         System.Data.DataRow {

            private SettingsDataTable tableSettings;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SettingsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tableSettings = ((SettingsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BackgroundImage {
                get {
                    return ((string)(this[this.tableSettings.BackgroundImageColumn]));
                }
                set {
                    this[this.tableSettings.BackgroundImageColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultDataDriver {
                get {
                    return ((string)(this[this.tableSettings.DefaultDataDriverColumn]));
                }
                set {
                    this[this.tableSettings.DefaultDataDriverColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DefaultDataFormatForRead {
                get {
                    return ((int)(this[this.tableSettings.DefaultDataFormatForReadColumn]));
                }
                set {
                    this[this.tableSettings.DefaultDataFormatForReadColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EditorFontName {
                get {
                    return ((string)(this[this.tableSettings.EditorFontNameColumn]));
                }
                set {
                    this[this.tableSettings.EditorFontNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EditorFontSize {
                get {
                    return ((decimal)(this[this.tableSettings.EditorFontSizeColumn]));
                }
                set {
                    this[this.tableSettings.EditorFontSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ControlFontName {
                get {
                    return ((string)(this[this.tableSettings.ControlFontNameColumn]));
                }
                set {
                    this[this.tableSettings.ControlFontNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ControlFontSize {
                get {
                    return ((decimal)(this[this.tableSettings.ControlFontSizeColumn]));
                }
                set {
                    this[this.tableSettings.ControlFontSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FrameworkTcpPort {
                get {
                    return ((int)(this[this.tableSettings.FrameworkTcpPortColumn]));
                }
                set {
                    this[this.tableSettings.FrameworkTcpPortColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IncludeMissingValues {
                get {
                    return ((bool)(this[this.tableSettings.IncludeMissingValuesColumn]));
                }
                set {
                    this[this.tableSettings.IncludeMissingValuesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Language {
                get {
                    return ((string)(this[this.tableSettings.LanguageColumn]));
                }
                set {
                    this[this.tableSettings.LanguageColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MRUProjectsCount {
                get {
                    return ((int)(this[this.tableSettings.MRUProjectsCountColumn]));
                }
                set {
                    this[this.tableSettings.MRUProjectsCountColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MRUViewsCount {
                get {
                    return ((int)(this[this.tableSettings.MRUViewsCountColumn]));
                }
                set {
                    this[this.tableSettings.MRUViewsCountColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MRUDataSourcesCount {
                get {
                    return ((int)(this[this.tableSettings.MRUDataSourcesCountColumn]));
                }
                set {
                    this[this.tableSettings.MRUDataSourcesCountColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecordProcessingScope {
                get {
                    return ((int)(this[this.tableSettings.RecordProcessingScopeColumn]));
                }
                set {
                    this[this.tableSettings.RecordProcessingScopeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RepresentationOfMissing {
                get {
                    return ((string)(this[this.tableSettings.RepresentationOfMissingColumn]));
                }
                set {
                    this[this.tableSettings.RepresentationOfMissingColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RepresentationOfNo {
                get {
                    return ((string)(this[this.tableSettings.RepresentationOfNoColumn]));
                }
                set {
                    this[this.tableSettings.RepresentationOfNoColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RepresentationOfYes {
                get {
                    return ((string)(this[this.tableSettings.RepresentationOfYesColumn]));
                }
                set {
                    this[this.tableSettings.RepresentationOfYesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowCompletePrompt {
                get {
                    return ((bool)(this[this.tableSettings.ShowCompletePromptColumn]));
                }
                set {
                    this[this.tableSettings.ShowCompletePromptColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowGraphics {
                get {
                    return ((bool)(this[this.tableSettings.ShowGraphicsColumn]));
                }
                set {
                    this[this.tableSettings.ShowGraphicsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowHyperlinks {
                get {
                    return ((bool)(this[this.tableSettings.ShowHyperlinksColumn]));
                }
                set {
                    this[this.tableSettings.ShowHyperlinksColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowPercents {
                get {
                    return ((bool)(this[this.tableSettings.ShowPercentsColumn]));
                }
                set {
                    this[this.tableSettings.ShowPercentsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowSelection {
                get {
                    return ((bool)(this[this.tableSettings.ShowSelectionColumn]));
                }
                set {
                    this[this.tableSettings.ShowSelectionColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowTables {
                get {
                    return ((bool)(this[this.tableSettings.ShowTablesColumn]));
                }
                set {
                    this[this.tableSettings.ShowTablesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SnapToGrid {
                get {
                    return ((bool)(this[this.tableSettings.SnapToGridColumn]));
                }
                set {
                    this[this.tableSettings.SnapToGridColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int StatisticsLevel {
                get {
                    return ((int)(this[this.tableSettings.StatisticsLevelColumn]));
                }
                set {
                    this[this.tableSettings.StatisticsLevelColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowStatusBar {
                get {
                    return ((bool)(this[this.tableSettings.ShowStatusBarColumn]));
                }
                set {
                    this[this.tableSettings.ShowStatusBarColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PrecisionForStatistics {
                get {
                    return ((decimal)(this[this.tableSettings.PrecisionForStatisticsColumn]));
                }
                set {
                    this[this.tableSettings.PrecisionForStatisticsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OutputFilePrefix {
                get {
                    if (this.IsOutputFilePrefixNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableSettings.OutputFilePrefixColumn]));
                    }
                }
                set {
                    this[this.tableSettings.OutputFilePrefixColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OutputFileSequence {
                get {
                    return ((int)(this[this.tableSettings.OutputFileSequenceColumn]));
                }
                set {
                    this[this.tableSettings.OutputFileSequenceColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OutputFileFlagAge {
                get {
                    return ((int)(this[this.tableSettings.OutputFileFlagAgeColumn]));
                }
                set {
                    this[this.tableSettings.OutputFileFlagAgeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OutputFileFlagNumber {
                get {
                    return ((int)(this[this.tableSettings.OutputFileFlagNumberColumn]));
                }
                set {
                    this[this.tableSettings.OutputFileFlagNumberColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int OutputFileFlagSize {
                get {
                    return ((int)(this[this.tableSettings.OutputFileFlagSizeColumn]));
                }
                set {
                    this[this.tableSettings.OutputFileFlagSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ShowGrid {
                get {
                    if (this.IsShowGridNull()) {
                        return true;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.ShowGridColumn]));
                    }
                }
                set {
                    this[this.tableSettings.ShowGridColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SnapPromptToGrid {
                get {
                    if (this.IsSnapPromptToGridNull()) {
                        return true;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.SnapPromptToGridColumn]));
                    }
                }
                set {
                    this[this.tableSettings.SnapPromptToGridColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool SnapInputControlToGrid {
                get {
                    if (this.IsSnapInputControlToGridNull()) {
                        return true;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.SnapInputControlToGridColumn]));
                    }
                }
                set {
                    this[this.tableSettings.SnapInputControlToGridColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int GridSize {
                get {
                    if (this.IsGridSizeNull()) {
                        return 2;
                    }
                    else {
                        return ((int)(this[this.tableSettings.GridSizeColumn]));
                    }
                }
                set {
                    this[this.tableSettings.GridSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GridBackgroundImage {
                get {
                    if (this.IsGridBackgroundImageNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableSettings.GridBackgroundImageColumn]));
                    }
                }
                set {
                    this[this.tableSettings.GridBackgroundImageColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int GridBackgroundColor {
                get {
                    if (this.IsGridBackgroundColorNull()) {
                        return 0;
                    }
                    else {
                        return ((int)(this[this.tableSettings.GridBackgroundColorColumn]));
                    }
                }
                set {
                    this[this.tableSettings.GridBackgroundColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GridBackgroundImageLayout {
                get {
                    if (this.IsGridBackgroundImageLayoutNull()) {
                        return "None";
                    }
                    else {
                        return ((string)(this[this.tableSettings.GridBackgroundImageLayoutColumn]));
                    }
                }
                set {
                    this[this.tableSettings.GridBackgroundImageLayoutColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EditorFontBold {
                get {
                    if (this.IsEditorFontBoldNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.EditorFontBoldColumn]));
                    }
                }
                set {
                    this[this.tableSettings.EditorFontBoldColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool EditorFontItalics {
                get {
                    if (this.IsEditorFontItalicsNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.EditorFontItalicsColumn]));
                    }
                }
                set {
                    this[this.tableSettings.EditorFontItalicsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ControlFontBold {
                get {
                    if (this.IsControlFontBoldNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.ControlFontBoldColumn]));
                    }
                }
                set {
                    this[this.tableSettings.ControlFontBoldColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ControlFontItalics {
                get {
                    if (this.IsControlFontItalicsNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableSettings.ControlFontItalicsColumn]));
                    }
                }
                set {
                    this[this.tableSettings.ControlFontItalicsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DefaultPageWidth {
                get {
                    return ((int)(this[this.tableSettings.DefaultPageWidthColumn]));
                }
                set {
                    this[this.tableSettings.DefaultPageWidthColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DefaultPageHeight {
                get {
                    return ((int)(this[this.tableSettings.DefaultPageHeightColumn]));
                }
                set {
                    this[this.tableSettings.DefaultPageHeightColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultPageOrientation {
                get {
                    return ((string)(this[this.tableSettings.DefaultPageOrientationColumn]));
                }
                set {
                    this[this.tableSettings.DefaultPageOrientationColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultLabelAlign {
                get {
                    return ((string)(this[this.tableSettings.DefaultLabelAlignColumn]));
                }
                set {
                    this[this.tableSettings.DefaultLabelAlignColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DefaultTargetMedium {
                get {
                    return ((string)(this[this.tableSettings.DefaultTargetMediumColumn]));
                }
                set {
                    this[this.tableSettings.DefaultTargetMediumColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MapServiceKey {
                get {
                    try {
                        return ((string)(this[this.tableSettings.MapServiceKeyColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'MapServiceKey\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.MapServiceKeyColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastAlertDate {
                get {
                    try {
                        return ((        System.DateTime)(this[this.tableSettings.LastAlertDateColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'LastAlertDate\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.LastAlertDateColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CheckForUpdates {
                get {
                    return ((bool)(this[this.tableSettings.CheckForUpdatesColumn]));
                }
                set {
                    this[this.tableSettings.CheckForUpdatesColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DateFormat {
                get {
                    try {
                        return ((string)(this[this.tableSettings.DateFormatColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DateFormat\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.DateFormatColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TimeFormat {
                get {
                    try {
                        return ((string)(this[this.tableSettings.TimeFormatColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'TimeFormat\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.TimeFormatColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DateTimeFormat {
                get {
                    try {
                        return ((string)(this[this.tableSettings.DateTimeFormatColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DateTimeFormat\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.DateTimeFormatColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WebServiceEndpointAddress {
                get {
                    try {
                        return ((string)(this[this.tableSettings.WebServiceEndpointAddressColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'WebServiceEndpointAddress\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.WebServiceEndpointAddressColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceAuthMode {
                get {
                    return ((int)(this[this.tableSettings.WebServiceAuthModeColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceAuthModeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceMaxBufferPoolSize {
                get {
                    return ((int)(this[this.tableSettings.WebServiceMaxBufferPoolSizeColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceMaxBufferPoolSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceMaxReceivedMessageSize {
                get {
                    return ((int)(this[this.tableSettings.WebServiceMaxReceivedMessageSizeColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceMaxReceivedMessageSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceReaderMaxDepth {
                get {
                    return ((int)(this[this.tableSettings.WebServiceReaderMaxDepthColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceReaderMaxDepthColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceReaderMaxStringContentLength {
                get {
                    return ((int)(this[this.tableSettings.WebServiceReaderMaxStringContentLengthColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceReaderMaxStringContentLengthColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceReaderMaxArrayLength {
                get {
                    return ((int)(this[this.tableSettings.WebServiceReaderMaxArrayLengthColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceReaderMaxArrayLengthColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceReaderMaxBytesPerRead {
                get {
                    return ((int)(this[this.tableSettings.WebServiceReaderMaxBytesPerReadColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceReaderMaxBytesPerReadColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int WebServiceReaderMaxNameTableCharCount {
                get {
                    return ((int)(this[this.tableSettings.WebServiceReaderMaxNameTableCharCountColumn]));
                }
                set {
                    this[this.tableSettings.WebServiceReaderMaxNameTableCharCountColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WebServiceBindingMode {
                get {
                    try {
                        return ((string)(this[this.tableSettings.WebServiceBindingModeColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'WebServiceBindingMode\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.WebServiceBindingModeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardFrequencyRowLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardFrequencyRowLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardFrequencyRowLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardFrequencyStrataLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardFrequencyStrataLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardFrequencyStrataLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardFrequencyCrosstabLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardFrequencyCrosstabLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardFrequencyCrosstabLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardCombinedFrequencyRowLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardCombinedFrequencyRowLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardCombinedFrequencyRowLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardAberrationRowLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardAberrationRowLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardAberrationRowLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DashboardLineListRowLimit {
                get {
                    return ((int)(this[this.tableSettings.DashboardLineListRowLimitColumn]));
                }
                set {
                    this[this.tableSettings.DashboardLineListRowLimitColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Republish_IsRepbulishable {
                get {
                    try {
                        return ((bool)(this[this.tableSettings.Republish_IsRepbulishableColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Republish_IsRepbulishable\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.Republish_IsRepbulishableColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Republish_RequireSecurityKey {
                get {
                    try {
                        return ((bool)(this[this.tableSettings.Republish_RequireSecurityKeyColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Republish_RequireSecurityKey\' in table \'Settings\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSettings.Republish_RequireSecurityKeyColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CodeEditorFontBold {
                get {
                    try {
                        return ((bool)(this[this.tableSettings.CodeEditorFontBoldColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'CodeEditorFontBold\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.CodeEditorFontBoldColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CodeEditorFontItalics {
                get {
                    try {
                        return ((bool)(this[this.tableSettings.CodeEditorFontItalicsColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'CodeEditorFontItalics\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.CodeEditorFontItalicsColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CodeEditorFontName {
                get {
                    try {
                        return ((string)(this[this.tableSettings.CodeEditorFontNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'CodeEditorFontName\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.CodeEditorFontNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal CodeEditorFontSize {
                get {
                    try {
                        return ((decimal)(this[this.tableSettings.CodeEditorFontSizeColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'CodeEditorFontSize\' in table \'Settings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSettings.CodeEditorFontSizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsOutputFilePrefixNull() {
                return this.IsNull(this.tableSettings.OutputFilePrefixColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetOutputFilePrefixNull() {
                this[this.tableSettings.OutputFilePrefixColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShowGridNull() {
                return this.IsNull(this.tableSettings.ShowGridColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShowGridNull() {
                this[this.tableSettings.ShowGridColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSnapPromptToGridNull() {
                return this.IsNull(this.tableSettings.SnapPromptToGridColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSnapPromptToGridNull() {
                this[this.tableSettings.SnapPromptToGridColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSnapInputControlToGridNull() {
                return this.IsNull(this.tableSettings.SnapInputControlToGridColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSnapInputControlToGridNull() {
                this[this.tableSettings.SnapInputControlToGridColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGridSizeNull() {
                return this.IsNull(this.tableSettings.GridSizeColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGridSizeNull() {
                this[this.tableSettings.GridSizeColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGridBackgroundImageNull() {
                return this.IsNull(this.tableSettings.GridBackgroundImageColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGridBackgroundImageNull() {
                this[this.tableSettings.GridBackgroundImageColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGridBackgroundColorNull() {
                return this.IsNull(this.tableSettings.GridBackgroundColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGridBackgroundColorNull() {
                this[this.tableSettings.GridBackgroundColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGridBackgroundImageLayoutNull() {
                return this.IsNull(this.tableSettings.GridBackgroundImageLayoutColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGridBackgroundImageLayoutNull() {
                this[this.tableSettings.GridBackgroundImageLayoutColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditorFontBoldNull() {
                return this.IsNull(this.tableSettings.EditorFontBoldColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditorFontBoldNull() {
                this[this.tableSettings.EditorFontBoldColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditorFontItalicsNull() {
                return this.IsNull(this.tableSettings.EditorFontItalicsColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditorFontItalicsNull() {
                this[this.tableSettings.EditorFontItalicsColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsControlFontBoldNull() {
                return this.IsNull(this.tableSettings.ControlFontBoldColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetControlFontBoldNull() {
                this[this.tableSettings.ControlFontBoldColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsControlFontItalicsNull() {
                return this.IsNull(this.tableSettings.ControlFontItalicsColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetControlFontItalicsNull() {
                this[this.tableSettings.ControlFontItalicsColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMapServiceKeyNull() {
                return this.IsNull(this.tableSettings.MapServiceKeyColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMapServiceKeyNull() {
                this[this.tableSettings.MapServiceKeyColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastAlertDateNull() {
                return this.IsNull(this.tableSettings.LastAlertDateColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastAlertDateNull() {
                this[this.tableSettings.LastAlertDateColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateFormatNull() {
                return this.IsNull(this.tableSettings.DateFormatColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateFormatNull() {
                this[this.tableSettings.DateFormatColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTimeFormatNull() {
                return this.IsNull(this.tableSettings.TimeFormatColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTimeFormatNull() {
                this[this.tableSettings.TimeFormatColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateTimeFormatNull() {
                return this.IsNull(this.tableSettings.DateTimeFormatColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateTimeFormatNull() {
                this[this.tableSettings.DateTimeFormatColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWebServiceEndpointAddressNull() {
                return this.IsNull(this.tableSettings.WebServiceEndpointAddressColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWebServiceEndpointAddressNull() {
                this[this.tableSettings.WebServiceEndpointAddressColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWebServiceBindingModeNull() {
                return this.IsNull(this.tableSettings.WebServiceBindingModeColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWebServiceBindingModeNull() {
                this[this.tableSettings.WebServiceBindingModeColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRepublish_IsRepbulishableNull() {
                return this.IsNull(this.tableSettings.Republish_IsRepbulishableColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRepublish_IsRepbulishableNull() {
                this[this.tableSettings.Republish_IsRepbulishableColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRepublish_RequireSecurityKeyNull() {
                return this.IsNull(this.tableSettings.Republish_RequireSecurityKeyColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRepublish_RequireSecurityKeyNull() {
                this[this.tableSettings.Republish_RequireSecurityKeyColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodeEditorFontBoldNull() {
                return this.IsNull(this.tableSettings.CodeEditorFontBoldColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodeEditorFontBoldNull() {
                this[this.tableSettings.CodeEditorFontBoldColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodeEditorFontItalicsNull() {
                return this.IsNull(this.tableSettings.CodeEditorFontItalicsColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodeEditorFontItalicsNull() {
                this[this.tableSettings.CodeEditorFontItalicsColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodeEditorFontNameNull() {
                return this.IsNull(this.tableSettings.CodeEditorFontNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodeEditorFontNameNull() {
                this[this.tableSettings.CodeEditorFontNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodeEditorFontSizeNull() {
                return this.IsNull(this.tableSettings.CodeEditorFontSizeColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodeEditorFontSizeNull() {
                this[this.tableSettings.CodeEditorFontSizeColumn] =         System.Convert.DBNull;
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class VersionRowChangeEvent :         System.EventArgs {

            private VersionRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionRowChangeEvent(VersionRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VersionRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ViewsRowChangeEvent :         System.EventArgs {

            private ViewsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRowChangeEvent(ViewsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ViewsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecentViewRowChangeEvent :         System.EventArgs {

            private RecentViewRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRowChangeEvent(RecentViewRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentViewRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProjectsRowChangeEvent :         System.EventArgs {

            private ProjectsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRowChangeEvent(ProjectsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecentProjectRowChangeEvent :         System.EventArgs {

            private RecentProjectRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRowChangeEvent(RecentProjectRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentProjectRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DataSourcesRowChangeEvent :         System.EventArgs {

            private DataSourcesRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRowChangeEvent(DataSourcesRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataSourcesRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class RecentDataSourceRowChangeEvent :         System.EventArgs {

            private RecentDataSourceRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRowChangeEvent(RecentDataSourceRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public RecentDataSourceRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ModulesRowChangeEvent :         System.EventArgs {

            private ModulesRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRowChangeEvent(ModulesRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModulesRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ModuleRowChangeEvent :         System.EventArgs {

            private ModuleRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRowChangeEvent(ModuleRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ModuleRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class VariablesRowChangeEvent :         System.EventArgs {

            private VariablesRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRowChangeEvent(VariablesRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public VariablesRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PermanentVariableRowChangeEvent :         System.EventArgs {

            private PermanentVariableRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRowChangeEvent(PermanentVariableRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PermanentVariableRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DirectoriesRowChangeEvent :         System.EventArgs {

            private DirectoriesRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesRowChangeEvent(DirectoriesRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DirectoriesRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DataDriversRowChangeEvent :         System.EventArgs {

            private DataDriversRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRowChangeEvent(DataDriversRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriversRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DataDriverRowChangeEvent :         System.EventArgs {

            private DataDriverRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRowChangeEvent(DataDriverRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataDriverRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GadgetsRowChangeEvent :         System.EventArgs {

            private GadgetsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRowChangeEvent(GadgetsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class GadgetRowChangeEvent :         System.EventArgs {

            private GadgetRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRowChangeEvent(GadgetRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public GadgetRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TextEncryptionModuleRowChangeEvent :         System.EventArgs {

            private TextEncryptionModuleRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleRowChangeEvent(TextEncryptionModuleRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TextEncryptionModuleRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FileEncryptionModuleRowChangeEvent :         System.EventArgs {

            private FileEncryptionModuleRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleRowChangeEvent(FileEncryptionModuleRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileEncryptionModuleRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ConnectionsRowChangeEvent :         System.EventArgs {

            private ConnectionsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRowChangeEvent(ConnectionsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ConnectionsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DatabaseRowChangeEvent :         System.EventArgs {

            private DatabaseRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRowChangeEvent(DatabaseRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DatabaseRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class FileRowChangeEvent :         System.EventArgs {

            private FileRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRowChangeEvent(FileRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public FileRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SettingsRowChangeEvent :         System.EventArgs {

            private SettingsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsRowChangeEvent(SettingsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SettingsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
 