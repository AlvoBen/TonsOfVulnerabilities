









#pragma warning disable 1591

namespace Epi.DataSets {





    [        System.Serializable()]
    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [        System.Xml.Serialization.XmlRootAttribute("MapMetadata")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public         class MapMetadata :         System.Data.DataSet {

        private metaLayerRenderTypesDataTable tablemetaLayerRenderTypes;

        private metaLayersDataTable tablemetaLayers;

        private metaMapLayersDataTable tablemetaMapLayers;

        private metaMapPointsDataTable tablemetaMapPoints;

        private metaMapsDataTable tablemetaMaps;

        private         System.Data.DataRelation relationFK__metaMapLa__Layer__267ABA7A;

        private         System.Data.DataRelation relationFK__metaMapLa__Layer__276EDEB3;

        private         System.Data.DataRelation relationFK__metaMapLa__MapId__25869641;

        private         System.Data.DataRelation relationFK__metaMapPo__MapId__2A4B4B5E;

        private         System.Data.SchemaSerializationMode _schemaSerializationMode =         System.Data.SchemaSerializationMode.IncludeSchema;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MapMetadata() {
            this.BeginInit();
            this.InitClass();
                    System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected MapMetadata(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) ==         System.Data.SchemaSerializationMode.IncludeSchema)) {
                        System.Data.DataSet ds = new         System.Data.DataSet();
                ds.ReadXmlSchema(new         System.Xml.XmlTextReader(new         System.IO.StringReader(strSchema)));
                if ((ds.Tables["metaLayerRenderTypes"] != null)) {
                    base.Tables.Add(new metaLayerRenderTypesDataTable(ds.Tables["metaLayerRenderTypes"]));
                }
                if ((ds.Tables["metaLayers"] != null)) {
                    base.Tables.Add(new metaLayersDataTable(ds.Tables["metaLayers"]));
                }
                if ((ds.Tables["metaMapLayers"] != null)) {
                    base.Tables.Add(new metaMapLayersDataTable(ds.Tables["metaMapLayers"]));
                }
                if ((ds.Tables["metaMapPoints"] != null)) {
                    base.Tables.Add(new metaMapPointsDataTable(ds.Tables["metaMapPoints"]));
                }
                if ((ds.Tables["metaMaps"] != null)) {
                    base.Tables.Add(new metaMapsDataTable(ds.Tables["metaMaps"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false,         System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new         System.Xml.XmlTextReader(new         System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
                    System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new         System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaLayerRenderTypesDataTable metaLayerRenderTypes {
            get {
                return this.tablemetaLayerRenderTypes;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaLayersDataTable metaLayers {
            get {
                return this.tablemetaLayers;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaMapLayersDataTable metaMapLayers {
            get {
                return this.tablemetaMapLayers;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaMapPointsDataTable metaMapPoints {
            get {
                return this.tablemetaMapPoints;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Browsable(false)]
        [        System.ComponentModel.DesignerSerializationVisibility(        System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaMapsDataTable metaMaps {
            get {
                return this.tablemetaMaps;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.BrowsableAttribute(true)]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override         System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new         System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.DesignerSerializationVisibilityAttribute(        System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new         System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override         System.Data.DataSet Clone() {
            MapMetadata cln = ((MapMetadata)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(        System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) ==         System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                        System.Data.DataSet ds = new         System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["metaLayerRenderTypes"] != null)) {
                    base.Tables.Add(new metaLayerRenderTypesDataTable(ds.Tables["metaLayerRenderTypes"]));
                }
                if ((ds.Tables["metaLayers"] != null)) {
                    base.Tables.Add(new metaLayersDataTable(ds.Tables["metaLayers"]));
                }
                if ((ds.Tables["metaMapLayers"] != null)) {
                    base.Tables.Add(new metaMapLayersDataTable(ds.Tables["metaMapLayers"]));
                }
                if ((ds.Tables["metaMapPoints"] != null)) {
                    base.Tables.Add(new metaMapPointsDataTable(ds.Tables["metaMapPoints"]));
                }
                if ((ds.Tables["metaMaps"] != null)) {
                    base.Tables.Add(new metaMapsDataTable(ds.Tables["metaMaps"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false,         System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override         System.Xml.Schema.XmlSchema GetSchemaSerializable() {
                    System.IO.MemoryStream stream = new         System.IO.MemoryStream();
            this.WriteXmlSchema(new         System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return         System.Xml.Schema.XmlSchema.Read(new         System.Xml.XmlTextReader(stream), null);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablemetaLayerRenderTypes = ((metaLayerRenderTypesDataTable)(base.Tables["metaLayerRenderTypes"]));
            if ((initTable == true)) {
                if ((this.tablemetaLayerRenderTypes != null)) {
                    this.tablemetaLayerRenderTypes.InitVars();
                }
            }
            this.tablemetaLayers = ((metaLayersDataTable)(base.Tables["metaLayers"]));
            if ((initTable == true)) {
                if ((this.tablemetaLayers != null)) {
                    this.tablemetaLayers.InitVars();
                }
            }
            this.tablemetaMapLayers = ((metaMapLayersDataTable)(base.Tables["metaMapLayers"]));
            if ((initTable == true)) {
                if ((this.tablemetaMapLayers != null)) {
                    this.tablemetaMapLayers.InitVars();
                }
            }
            this.tablemetaMapPoints = ((metaMapPointsDataTable)(base.Tables["metaMapPoints"]));
            if ((initTable == true)) {
                if ((this.tablemetaMapPoints != null)) {
                    this.tablemetaMapPoints.InitVars();
                }
            }
            this.tablemetaMaps = ((metaMapsDataTable)(base.Tables["metaMaps"]));
            if ((initTable == true)) {
                if ((this.tablemetaMaps != null)) {
                    this.tablemetaMaps.InitVars();
                }
            }
            this.relationFK__metaMapLa__Layer__267ABA7A = this.Relations["FK__metaMapLa__Layer__267ABA7A"];
            this.relationFK__metaMapLa__Layer__276EDEB3 = this.Relations["FK__metaMapLa__Layer__276EDEB3"];
            this.relationFK__metaMapLa__MapId__25869641 = this.Relations["FK__metaMapLa__MapId__25869641"];
            this.relationFK__metaMapPo__MapId__2A4B4B5E = this.Relations["FK__metaMapPo__MapId__2A4B4B5E"];
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "MapMetadata";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MapMetadata.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode =         System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablemetaLayerRenderTypes = new metaLayerRenderTypesDataTable();
            base.Tables.Add(this.tablemetaLayerRenderTypes);
            this.tablemetaLayers = new metaLayersDataTable();
            base.Tables.Add(this.tablemetaLayers);
            this.tablemetaMapLayers = new metaMapLayersDataTable();
            base.Tables.Add(this.tablemetaMapLayers);
            this.tablemetaMapPoints = new metaMapPointsDataTable();
            base.Tables.Add(this.tablemetaMapPoints);
            this.tablemetaMaps = new metaMapsDataTable();
            base.Tables.Add(this.tablemetaMaps);
            this.relationFK__metaMapLa__Layer__267ABA7A = new         System.Data.DataRelation("FK__metaMapLa__Layer__267ABA7A", new         System.Data.DataColumn[] {
                        this.tablemetaLayers.LayerIdColumn}, new         System.Data.DataColumn[] {
                        this.tablemetaMapLayers.LayerIdColumn}, false);
            this.Relations.Add(this.relationFK__metaMapLa__Layer__267ABA7A);
            this.relationFK__metaMapLa__Layer__276EDEB3 = new         System.Data.DataRelation("FK__metaMapLa__Layer__276EDEB3", new         System.Data.DataColumn[] {
                        this.tablemetaLayerRenderTypes.LayerRenderTypeIdColumn}, new         System.Data.DataColumn[] {
                        this.tablemetaMapLayers.LayerRenderTypeIdColumn}, false);
            this.Relations.Add(this.relationFK__metaMapLa__Layer__276EDEB3);
            this.relationFK__metaMapLa__MapId__25869641 = new         System.Data.DataRelation("FK__metaMapLa__MapId__25869641", new         System.Data.DataColumn[] {
                        this.tablemetaMaps.MapIdColumn}, new         System.Data.DataColumn[] {
                        this.tablemetaMapLayers.MapIdColumn}, false);
            this.Relations.Add(this.relationFK__metaMapLa__MapId__25869641);
            this.relationFK__metaMapPo__MapId__2A4B4B5E = new         System.Data.DataRelation("FK__metaMapPo__MapId__2A4B4B5E", new         System.Data.DataColumn[] {
                        this.tablemetaMaps.MapIdColumn}, new         System.Data.DataColumn[] {
                        this.tablemetaMapPoints.MapIdColumn}, false);
            this.Relations.Add(this.relationFK__metaMapPo__MapId__2A4B4B5E);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializemetaLayerRenderTypes() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializemetaLayers() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializemetaMapLayers() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializemetaMapPoints() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializemetaMaps() {
            return false;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender,         System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action ==         System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static         System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(        System.Xml.Schema.XmlSchemaSet xs) {
            MapMetadata ds = new MapMetadata();
                    System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                    System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                    System.Xml.Schema.XmlSchemaAny any = new         System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
                    System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                        System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                        System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                try {
                            System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length)
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void metaLayerRenderTypesRowChangeEventHandler(object sender, metaLayerRenderTypesRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void metaLayersRowChangeEventHandler(object sender, metaLayersRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void metaMapLayersRowChangeEventHandler(object sender, metaMapLayersRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void metaMapPointsRowChangeEventHandler(object sender, metaMapPointsRowChangeEvent e);

        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void metaMapsRowChangeEventHandler(object sender, metaMapsRowChangeEvent e);




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class metaLayerRenderTypesDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnLayerRenderTypeId;

            private         System.Data.DataColumn columnName;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesDataTable() {
                this.TableName = "metaLayerRenderTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaLayerRenderTypesDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected metaLayerRenderTypesDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LayerRenderTypeIdColumn {
                get {
                    return this.columnLayerRenderTypeId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow this[int index] {
                get {
                    return ((metaLayerRenderTypesRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayerRenderTypesRowChangeEventHandler metaLayerRenderTypesRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayerRenderTypesRowChangeEventHandler metaLayerRenderTypesRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayerRenderTypesRowChangeEventHandler metaLayerRenderTypesRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayerRenderTypesRowChangeEventHandler metaLayerRenderTypesRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddmetaLayerRenderTypesRow(metaLayerRenderTypesRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow AddmetaLayerRenderTypesRow(int LayerRenderTypeId, string Name) {
                metaLayerRenderTypesRow rowmetaLayerRenderTypesRow = ((metaLayerRenderTypesRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull

;
                rowmetaLayerRenderTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmetaLayerRenderTypesRow);
                return rowmetaLayerRenderTypesRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow FindByLayerRenderTypeId(int LayerRenderTypeId) {
                return ((metaLayerRenderTypesRow)(this.Rows.Find( CxNull
)));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                metaLayerRenderTypesDataTable cln = ((metaLayerRenderTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new metaLayerRenderTypesDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnLayerRenderTypeId = base.Columns["LayerRenderTypeId"];
                this.columnName = base.Columns["Name"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnLayerRenderTypeId = new         System.Data.DataColumn("LayerRenderTypeId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerRenderTypeId);
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnLayerRenderTypeId}, true));
                this.columnLayerRenderTypeId.AllowDBNull = false;
                this.columnLayerRenderTypeId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 30;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow NewmetaLayerRenderTypesRow() {
                return ((metaLayerRenderTypesRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new metaLayerRenderTypesRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(metaLayerRenderTypesRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaLayerRenderTypesRowChanged != null)) {
                    this.metaLayerRenderTypesRowChanged(this, new metaLayerRenderTypesRowChangeEvent(((metaLayerRenderTypesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaLayerRenderTypesRowChanging != null)) {
                    this.metaLayerRenderTypesRowChanging(this, new metaLayerRenderTypesRowChangeEvent(((metaLayerRenderTypesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaLayerRenderTypesRowDeleted != null)) {
                    this.metaLayerRenderTypesRowDeleted(this, new metaLayerRenderTypesRowChangeEvent(((metaLayerRenderTypesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaLayerRenderTypesRowDeleting != null)) {
                    this.metaLayerRenderTypesRowDeleting(this, new metaLayerRenderTypesRowChangeEvent(((metaLayerRenderTypesRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovemetaLayerRenderTypesRow(metaLayerRenderTypesRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                MapMetadata ds = new MapMetadata();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaLayerRenderTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class metaLayersDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnLayerId;

            private         System.Data.DataColumn columnGml;

            private         System.Data.DataColumn columnGmlSchema;

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnDescription;

            private         System.Data.DataColumn columnFileName;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersDataTable() {
                this.TableName = "metaLayers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaLayersDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected metaLayersDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GmlColumn {
                get {
                    return this.columnGml;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn GmlSchemaColumn {
                get {
                    return this.columnGmlSchema;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow this[int index] {
                get {
                    return ((metaLayersRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayersRowChangeEventHandler metaLayersRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayersRowChangeEventHandler metaLayersRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayersRowChangeEventHandler metaLayersRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaLayersRowChangeEventHandler metaLayersRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddmetaLayersRow(metaLayersRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow AddmetaLayersRow(string Gml, string GmlSchema, string Name, string Description, string FileName) {
                metaLayersRow rowmetaLayersRow = ((metaLayersRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull





;
                rowmetaLayersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmetaLayersRow);
                return rowmetaLayersRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow FindByLayerId(int LayerId) {
                return ((metaLayersRow)(this.Rows.Find( CxNull
)));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                metaLayersDataTable cln = ((metaLayersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new metaLayersDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnLayerId = base.Columns["LayerId"];
                this.columnGml = base.Columns["Gml"];
                this.columnGmlSchema = base.Columns["GmlSchema"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnFileName = base.Columns["FileName"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnLayerId = new         System.Data.DataColumn("LayerId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnGml = new         System.Data.DataColumn("Gml", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGml);
                this.columnGmlSchema = new         System.Data.DataColumn("GmlSchema", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnGmlSchema);
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new         System.Data.DataColumn("Description", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnFileName = new         System.Data.DataColumn("FileName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnLayerId}, true));
                this.columnLayerId.AutoIncrement = true;
                this.columnLayerId.AllowDBNull = false;
                this.columnLayerId.ReadOnly = true;
                this.columnLayerId.Unique = true;
                this.columnGml.MaxLength = 1073741823;
                this.columnGmlSchema.MaxLength = 1073741823;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 64;
                this.columnDescription.MaxLength = 255;
                this.columnFileName.MaxLength = 255;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow NewmetaLayersRow() {
                return ((metaLayersRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new metaLayersRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(metaLayersRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaLayersRowChanged != null)) {
                    this.metaLayersRowChanged(this, new metaLayersRowChangeEvent(((metaLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaLayersRowChanging != null)) {
                    this.metaLayersRowChanging(this, new metaLayersRowChangeEvent(((metaLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaLayersRowDeleted != null)) {
                    this.metaLayersRowDeleted(this, new metaLayersRowChangeEvent(((metaLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaLayersRowDeleting != null)) {
                    this.metaLayersRowDeleting(this, new metaLayersRowChangeEvent(((metaLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovemetaLayersRow(metaLayersRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                MapMetadata ds = new MapMetadata();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaLayersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class metaMapLayersDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnMapLayerId;

            private         System.Data.DataColumn columnRenderField;

            private         System.Data.DataColumn columnMarkerColor;

            private         System.Data.DataColumn columnRampBeginColor;

            private         System.Data.DataColumn columnRampEndColor;

            private         System.Data.DataColumn columnClassBreaks;

            private         System.Data.DataColumn columnDataTableName;

            private         System.Data.DataColumn columnDataTableKey;

            private         System.Data.DataColumn columnFeatureKey;

            private         System.Data.DataColumn columnLineColor;

            private         System.Data.DataColumn columnFillColor;

            private         System.Data.DataColumn columnPolygonOutlineColor;

            private         System.Data.DataColumn columnMapId;

            private         System.Data.DataColumn columnLayerId;

            private         System.Data.DataColumn columnLayerRenderTypeId;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersDataTable() {
                this.TableName = "metaMapLayers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapLayersDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected metaMapLayersDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapLayerIdColumn {
                get {
                    return this.columnMapLayerId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RenderFieldColumn {
                get {
                    return this.columnRenderField;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MarkerColorColumn {
                get {
                    return this.columnMarkerColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RampBeginColorColumn {
                get {
                    return this.columnRampBeginColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn RampEndColorColumn {
                get {
                    return this.columnRampEndColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ClassBreaksColumn {
                get {
                    return this.columnClassBreaks;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataTableNameColumn {
                get {
                    return this.columnDataTableName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataTableKeyColumn {
                get {
                    return this.columnDataTableKey;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FeatureKeyColumn {
                get {
                    return this.columnFeatureKey;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LineColorColumn {
                get {
                    return this.columnLineColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn FillColorColumn {
                get {
                    return this.columnFillColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn PolygonOutlineColorColumn {
                get {
                    return this.columnPolygonOutlineColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn LayerRenderTypeIdColumn {
                get {
                    return this.columnLayerRenderTypeId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow this[int index] {
                get {
                    return ((metaMapLayersRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapLayersRowChangeEventHandler metaMapLayersRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapLayersRowChangeEventHandler metaMapLayersRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapLayersRowChangeEventHandler metaMapLayersRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapLayersRowChangeEventHandler metaMapLayersRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddmetaMapLayersRow(metaMapLayersRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow AddmetaMapLayersRow(string RenderField, int MarkerColor, int RampBeginColor, int RampEndColor, int ClassBreaks, string DataTableName, string DataTableKey, string FeatureKey, int LineColor, int FillColor, int PolygonOutlineColor, metaMapsRow parentmetaMapsRowByFK__metaMapLa__MapId__25869641, metaLayersRow parentmetaLayersRowByFK__metaMapLa__Layer__267ABA7A, metaLayerRenderTypesRow parentmetaLayerRenderTypesRowByFK__metaMapLa__Layer__276EDEB3) {
                metaMapLayersRow rowmetaMapLayersRow = ((metaMapLayersRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull














;
                if ((parentmetaMapsRowByFK__metaMapLa__MapId__25869641 != null)) {
                    columnValuesArray[12] = parentmetaMapsRowByFK__metaMapLa__MapId__25869641[0];
                }
                if ((parentmetaLayersRowByFK__metaMapLa__Layer__267ABA7A != null)) {
                    columnValuesArray[13] = parentmetaLayersRowByFK__metaMapLa__Layer__267ABA7A[0];
                }
                if ((parentmetaLayerRenderTypesRowByFK__metaMapLa__Layer__276EDEB3 != null)) {
                    columnValuesArray[14] = parentmetaLayerRenderTypesRowByFK__metaMapLa__Layer__276EDEB3[0];
                }
                rowmetaMapLayersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmetaMapLayersRow);
                return rowmetaMapLayersRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow FindByMapLayerId(int MapLayerId) {
                return ((metaMapLayersRow)(this.Rows.Find( CxNull
)));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                metaMapLayersDataTable cln = ((metaMapLayersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new metaMapLayersDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMapLayerId = base.Columns["MapLayerId"];
                this.columnRenderField = base.Columns["RenderField"];
                this.columnMarkerColor = base.Columns["MarkerColor"];
                this.columnRampBeginColor = base.Columns["RampBeginColor"];
                this.columnRampEndColor = base.Columns["RampEndColor"];
                this.columnClassBreaks = base.Columns["ClassBreaks"];
                this.columnDataTableName = base.Columns["DataTableName"];
                this.columnDataTableKey = base.Columns["DataTableKey"];
                this.columnFeatureKey = base.Columns["FeatureKey"];
                this.columnLineColor = base.Columns["LineColor"];
                this.columnFillColor = base.Columns["FillColor"];
                this.columnPolygonOutlineColor = base.Columns["PolygonOutlineColor"];
                this.columnMapId = base.Columns["MapId"];
                this.columnLayerId = base.Columns["LayerId"];
                this.columnLayerRenderTypeId = base.Columns["LayerRenderTypeId"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMapLayerId = new         System.Data.DataColumn("MapLayerId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapLayerId);
                this.columnRenderField = new         System.Data.DataColumn("RenderField", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRenderField);
                this.columnMarkerColor = new         System.Data.DataColumn("MarkerColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMarkerColor);
                this.columnRampBeginColor = new         System.Data.DataColumn("RampBeginColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampBeginColor);
                this.columnRampEndColor = new         System.Data.DataColumn("RampEndColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnRampEndColor);
                this.columnClassBreaks = new         System.Data.DataColumn("ClassBreaks", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassBreaks);
                this.columnDataTableName = new         System.Data.DataColumn("DataTableName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataTableName);
                this.columnDataTableKey = new         System.Data.DataColumn("DataTableKey", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataTableKey);
                this.columnFeatureKey = new         System.Data.DataColumn("FeatureKey", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureKey);
                this.columnLineColor = new         System.Data.DataColumn("LineColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLineColor);
                this.columnFillColor = new         System.Data.DataColumn("FillColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnFillColor);
                this.columnPolygonOutlineColor = new         System.Data.DataColumn("PolygonOutlineColor", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnPolygonOutlineColor);
                this.columnMapId = new         System.Data.DataColumn("MapId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.columnLayerId = new         System.Data.DataColumn("LayerId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnLayerRenderTypeId = new         System.Data.DataColumn("LayerRenderTypeId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerRenderTypeId);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnMapLayerId}, true));
                this.columnMapLayerId.AutoIncrement = true;
                this.columnMapLayerId.AllowDBNull = false;
                this.columnMapLayerId.ReadOnly = true;
                this.columnMapLayerId.Unique = true;
                this.columnRenderField.MaxLength = 64;
                this.columnDataTableName.MaxLength = 64;
                this.columnDataTableKey.MaxLength = 64;
                this.columnFeatureKey.MaxLength = 64;
                this.columnMapId.AllowDBNull = false;
                this.columnLayerId.AllowDBNull = false;
                this.columnLayerRenderTypeId.AllowDBNull = false;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow NewmetaMapLayersRow() {
                return ((metaMapLayersRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new metaMapLayersRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(metaMapLayersRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaMapLayersRowChanged != null)) {
                    this.metaMapLayersRowChanged(this, new metaMapLayersRowChangeEvent(((metaMapLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaMapLayersRowChanging != null)) {
                    this.metaMapLayersRowChanging(this, new metaMapLayersRowChangeEvent(((metaMapLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaMapLayersRowDeleted != null)) {
                    this.metaMapLayersRowDeleted(this, new metaMapLayersRowChangeEvent(((metaMapLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaMapLayersRowDeleting != null)) {
                    this.metaMapLayersRowDeleting(this, new metaMapLayersRowChangeEvent(((metaMapLayersRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovemetaMapLayersRow(metaMapLayersRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                MapMetadata ds = new MapMetadata();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaMapLayersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class metaMapPointsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnMapPointId;

            private         System.Data.DataColumn columnDataSourceTableName;

            private         System.Data.DataColumn columnDataSourceXCoordinateColumnName;

            private         System.Data.DataColumn columnDataSourceYCoordinateColumnName;

            private         System.Data.DataColumn columnDataSourceLabelColumnName;

            private         System.Data.DataColumn columnSize;

            private         System.Data.DataColumn columnColor;

            private         System.Data.DataColumn columnMapId;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsDataTable() {
                this.TableName = "metaMapPoints";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapPointsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected metaMapPointsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapPointIdColumn {
                get {
                    return this.columnMapPointId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSourceTableNameColumn {
                get {
                    return this.columnDataSourceTableName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSourceXCoordinateColumnNameColumn {
                get {
                    return this.columnDataSourceXCoordinateColumnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSourceYCoordinateColumnNameColumn {
                get {
                    return this.columnDataSourceYCoordinateColumnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn DataSourceLabelColumnNameColumn {
                get {
                    return this.columnDataSourceLabelColumnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn SizeColumn {
                get {
                    return this.columnSize;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn ColorColumn {
                get {
                    return this.columnColor;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow this[int index] {
                get {
                    return ((metaMapPointsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapPointsRowChangeEventHandler metaMapPointsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapPointsRowChangeEventHandler metaMapPointsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapPointsRowChangeEventHandler metaMapPointsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapPointsRowChangeEventHandler metaMapPointsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddmetaMapPointsRow(metaMapPointsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow AddmetaMapPointsRow(string DataSourceTableName, string DataSourceXCoordinateColumnName, string DataSourceYCoordinateColumnName, string DataSourceLabelColumnName, int Size, int Color, metaMapsRow parentmetaMapsRowByFK__metaMapPo__MapId__2A4B4B5E) {
                metaMapPointsRow rowmetaMapPointsRow = ((metaMapPointsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull







;
                if ((parentmetaMapsRowByFK__metaMapPo__MapId__2A4B4B5E != null)) {
                    columnValuesArray[7] = parentmetaMapsRowByFK__metaMapPo__MapId__2A4B4B5E[0];
                }
                rowmetaMapPointsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmetaMapPointsRow);
                return rowmetaMapPointsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow FindByMapPointId(int MapPointId) {
                return ((metaMapPointsRow)(this.Rows.Find( CxNull
)));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                metaMapPointsDataTable cln = ((metaMapPointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new metaMapPointsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMapPointId = base.Columns["MapPointId"];
                this.columnDataSourceTableName = base.Columns["DataSourceTableName"];
                this.columnDataSourceXCoordinateColumnName = base.Columns["DataSourceXCoordinateColumnName"];
                this.columnDataSourceYCoordinateColumnName = base.Columns["DataSourceYCoordinateColumnName"];
                this.columnDataSourceLabelColumnName = base.Columns["DataSourceLabelColumnName"];
                this.columnSize = base.Columns["Size"];
                this.columnColor = base.Columns["Color"];
                this.columnMapId = base.Columns["MapId"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMapPointId = new         System.Data.DataColumn("MapPointId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapPointId);
                this.columnDataSourceTableName = new         System.Data.DataColumn("DataSourceTableName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceTableName);
                this.columnDataSourceXCoordinateColumnName = new         System.Data.DataColumn("DataSourceXCoordinateColumnName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceXCoordinateColumnName);
                this.columnDataSourceYCoordinateColumnName = new         System.Data.DataColumn("DataSourceYCoordinateColumnName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceYCoordinateColumnName);
                this.columnDataSourceLabelColumnName = new         System.Data.DataColumn("DataSourceLabelColumnName", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataSourceLabelColumnName);
                this.columnSize = new         System.Data.DataColumn("Size", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnSize);
                this.columnColor = new         System.Data.DataColumn("Color", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnColor);
                this.columnMapId = new         System.Data.DataColumn("MapId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnMapPointId}, true));
                this.columnMapPointId.AutoIncrement = true;
                this.columnMapPointId.AllowDBNull = false;
                this.columnMapPointId.ReadOnly = true;
                this.columnMapPointId.Unique = true;
                this.columnDataSourceTableName.AllowDBNull = false;
                this.columnDataSourceTableName.MaxLength = 64;
                this.columnDataSourceXCoordinateColumnName.AllowDBNull = false;
                this.columnDataSourceXCoordinateColumnName.MaxLength = 64;
                this.columnDataSourceYCoordinateColumnName.AllowDBNull = false;
                this.columnDataSourceYCoordinateColumnName.MaxLength = 64;
                this.columnDataSourceLabelColumnName.MaxLength = 64;
                this.columnSize.AllowDBNull = false;
                this.columnColor.AllowDBNull = false;
                this.columnMapId.AllowDBNull = false;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow NewmetaMapPointsRow() {
                return ((metaMapPointsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new metaMapPointsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(metaMapPointsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaMapPointsRowChanged != null)) {
                    this.metaMapPointsRowChanged(this, new metaMapPointsRowChangeEvent(((metaMapPointsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaMapPointsRowChanging != null)) {
                    this.metaMapPointsRowChanging(this, new metaMapPointsRowChangeEvent(((metaMapPointsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaMapPointsRowDeleted != null)) {
                    this.metaMapPointsRowDeleted(this, new metaMapPointsRowChangeEvent(((metaMapPointsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaMapPointsRowDeleting != null)) {
                    this.metaMapPointsRowDeleting(this, new metaMapPointsRowChangeEvent(((metaMapPointsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovemetaMapPointsRow(metaMapPointsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                MapMetadata ds = new MapMetadata();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaMapPointsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        [        System.Serializable()]
        [        System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public         class metaMapsDataTable :         System.Data.TypedTableBase {

            private         System.Data.DataColumn columnMapId;

            private         System.Data.DataColumn columnName;

            private         System.Data.DataColumn columnTitle;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsDataTable() {
                this.TableName = "metaMaps";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapsDataTable(        System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected metaMapsDataTable(        System.Runtime.Serialization.SerializationInfo info,         System.Runtime.Serialization.StreamingContext context) :
                    base(info, context) {
                this.InitVars();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [        System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow this[int index] {
                get {
                    return ((metaMapsRow)(this.Rows[index]));
                }
            }

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapsRowChangeEventHandler metaMapsRowChanging;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapsRowChangeEventHandler metaMapsRowChanged;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapsRowChangeEventHandler metaMapsRowDeleting;

            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event metaMapsRowChangeEventHandler metaMapsRowDeleted;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddmetaMapsRow(metaMapsRow row) {
                this.Rows.Add(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow AddmetaMapsRow(string Name, string Title) {
                metaMapsRow rowmetaMapsRow = ((metaMapsRow)(this.NewRow()));
                object[] columnValuesArray =  CxNull


;
                rowmetaMapsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowmetaMapsRow);
                return rowmetaMapsRow;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow FindByMapId(int MapId) {
                return ((metaMapsRow)(this.Rows.Find( CxNull
)));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override         System.Data.DataTable Clone() {
                metaMapsDataTable cln = ((metaMapsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataTable CreateInstance() {
                return new metaMapsDataTable();
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMapId = base.Columns["MapId"];
                this.columnName = base.Columns["Name"];
                this.columnTitle = base.Columns["Title"];
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMapId = new         System.Data.DataColumn("MapId", typeof(int), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.columnName = new         System.Data.DataColumn("Name", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTitle = new         System.Data.DataColumn("Title", typeof(string), null,         System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.Constraints.Add(new         System.Data.UniqueConstraint("Constraint1", new         System.Data.DataColumn[] {
                                this.columnMapId}, true));
                this.columnMapId.AutoIncrement = true;
                this.columnMapId.AllowDBNull = false;
                this.columnMapId.ReadOnly = true;
                this.columnMapId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 64;
                this.columnTitle.MaxLength = 255;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow NewmetaMapsRow() {
                return ((metaMapsRow)(this.NewRow()));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Data.DataRow NewRowFromBuilder(        System.Data.DataRowBuilder builder) {
                return new metaMapsRow(builder);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override         System.Type GetRowType() {
                return typeof(metaMapsRow);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaMapsRowChanged != null)) {
                    this.metaMapsRowChanged(this, new metaMapsRowChangeEvent(((metaMapsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaMapsRowChanging != null)) {
                    this.metaMapsRowChanging(this, new metaMapsRowChangeEvent(((metaMapsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaMapsRowDeleted != null)) {
                    this.metaMapsRowDeleted(this, new metaMapsRowChangeEvent(((metaMapsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(        System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaMapsRowDeleting != null)) {
                    this.metaMapsRowDeleting(this, new metaMapsRowChangeEvent(((metaMapsRow)(e.Row)), e.Action));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovemetaMapsRow(metaMapsRow row) {
                this.Rows.Remove(row);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static         System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(        System.Xml.Schema.XmlSchemaSet xs) {
                        System.Xml.Schema.XmlSchemaComplexType type = new         System.Xml.Schema.XmlSchemaComplexType();
                        System.Xml.Schema.XmlSchemaSequence sequence = new         System.Xml.Schema.XmlSchemaSequence();
                MapMetadata ds = new MapMetadata();
                        System.Xml.Schema.XmlSchemaAny any1 = new         System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                        System.Xml.Schema.XmlSchemaAny any2 = new         System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents =         System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                        System.Xml.Schema.XmlSchemaAttribute attribute1 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                        System.Xml.Schema.XmlSchemaAttribute attribute2 = new         System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaMapsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                        System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                            System.IO.MemoryStream s1 = new         System.IO.MemoryStream();
                            System.IO.MemoryStream s2 = new         System.IO.MemoryStream();
                    try {
                                System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (        System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((        System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length)
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }




        public         class metaLayerRenderTypesRow :         System.Data.DataRow {

            private metaLayerRenderTypesDataTable tablemetaLayerRenderTypes;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaLayerRenderTypesRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablemetaLayerRenderTypes = ((metaLayerRenderTypesDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LayerRenderTypeId {
                get {
                    return ((int)(this[this.tablemetaLayerRenderTypes.LayerRenderTypeIdColumn]));
                }
                set {
                    this[this.tablemetaLayerRenderTypes.LayerRenderTypeIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tablemetaLayerRenderTypes.NameColumn]));
                }
                set {
                    this[this.tablemetaLayerRenderTypes.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow[] GetmetaMapLayersRows() {
                if ((this.Table.ChildRelations["FK__metaMapLa__Layer__276EDEB3"] == null)) {
                    return new metaMapLayersRow[0];
                }
                else {
                    return ((metaMapLayersRow[])(base.GetChildRows(this.Table.ChildRelations["FK__metaMapLa__Layer__276EDEB3"])));
                }
            }
        }




        public         class metaLayersRow :         System.Data.DataRow {

            private metaLayersDataTable tablemetaLayers;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaLayersRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablemetaLayers = ((metaLayersDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LayerId {
                get {
                    return ((int)(this[this.tablemetaLayers.LayerIdColumn]));
                }
                set {
                    this[this.tablemetaLayers.LayerIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Gml {
                get {
                    try {
                        return ((string)(this[this.tablemetaLayers.GmlColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Gml\' in table \'metaLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaLayers.GmlColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GmlSchema {
                get {
                    try {
                        return ((string)(this[this.tablemetaLayers.GmlSchemaColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'GmlSchema\' in table \'metaLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaLayers.GmlSchemaColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tablemetaLayers.NameColumn]));
                }
                set {
                    this[this.tablemetaLayers.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tablemetaLayers.DescriptionColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Description\' in table \'metaLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaLayers.DescriptionColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tablemetaLayers.FileNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FileName\' in table \'metaLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaLayers.FileNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGmlNull() {
                return this.IsNull(this.tablemetaLayers.GmlColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGmlNull() {
                this[this.tablemetaLayers.GmlColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGmlSchemaNull() {
                return this.IsNull(this.tablemetaLayers.GmlSchemaColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGmlSchemaNull() {
                this[this.tablemetaLayers.GmlSchemaColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tablemetaLayers.DescriptionColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tablemetaLayers.DescriptionColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFileNameNull() {
                return this.IsNull(this.tablemetaLayers.FileNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFileNameNull() {
                this[this.tablemetaLayers.FileNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow[] GetmetaMapLayersRows() {
                if ((this.Table.ChildRelations["FK__metaMapLa__Layer__267ABA7A"] == null)) {
                    return new metaMapLayersRow[0];
                }
                else {
                    return ((metaMapLayersRow[])(base.GetChildRows(this.Table.ChildRelations["FK__metaMapLa__Layer__267ABA7A"])));
                }
            }
        }




        public         class metaMapLayersRow :         System.Data.DataRow {

            private metaMapLayersDataTable tablemetaMapLayers;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapLayersRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablemetaMapLayers = ((metaMapLayersDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MapLayerId {
                get {
                    return ((int)(this[this.tablemetaMapLayers.MapLayerIdColumn]));
                }
                set {
                    this[this.tablemetaMapLayers.MapLayerIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RenderField {
                get {
                    try {
                        return ((string)(this[this.tablemetaMapLayers.RenderFieldColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'RenderField\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.RenderFieldColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MarkerColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.MarkerColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'MarkerColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.MarkerColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RampBeginColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.RampBeginColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'RampBeginColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.RampBeginColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RampEndColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.RampEndColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'RampEndColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.RampEndColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClassBreaks {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.ClassBreaksColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'ClassBreaks\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.ClassBreaksColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataTableName {
                get {
                    try {
                        return ((string)(this[this.tablemetaMapLayers.DataTableNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataTableName\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.DataTableNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataTableKey {
                get {
                    try {
                        return ((string)(this[this.tablemetaMapLayers.DataTableKeyColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataTableKey\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.DataTableKeyColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FeatureKey {
                get {
                    try {
                        return ((string)(this[this.tablemetaMapLayers.FeatureKeyColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FeatureKey\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.FeatureKeyColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LineColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.LineColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'LineColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.LineColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FillColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.FillColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'FillColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.FillColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PolygonOutlineColor {
                get {
                    try {
                        return ((int)(this[this.tablemetaMapLayers.PolygonOutlineColorColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'PolygonOutlineColor\' in table \'metaMapLayers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMapLayers.PolygonOutlineColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MapId {
                get {
                    return ((int)(this[this.tablemetaMapLayers.MapIdColumn]));
                }
                set {
                    this[this.tablemetaMapLayers.MapIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LayerId {
                get {
                    return ((int)(this[this.tablemetaMapLayers.LayerIdColumn]));
                }
                set {
                    this[this.tablemetaMapLayers.LayerIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int LayerRenderTypeId {
                get {
                    return ((int)(this[this.tablemetaMapLayers.LayerRenderTypeIdColumn]));
                }
                set {
                    this[this.tablemetaMapLayers.LayerRenderTypeIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow metaLayersRow {
                get {
                    return ((metaLayersRow)(this.GetParentRow(this.Table.ParentRelations["FK__metaMapLa__Layer__267ABA7A"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__metaMapLa__Layer__267ABA7A"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow metaLayerRenderTypesRow {
                get {
                    return ((metaLayerRenderTypesRow)(this.GetParentRow(this.Table.ParentRelations["FK__metaMapLa__Layer__276EDEB3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__metaMapLa__Layer__276EDEB3"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow metaMapsRow {
                get {
                    return ((metaMapsRow)(this.GetParentRow(this.Table.ParentRelations["FK__metaMapLa__MapId__25869641"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__metaMapLa__MapId__25869641"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRenderFieldNull() {
                return this.IsNull(this.tablemetaMapLayers.RenderFieldColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRenderFieldNull() {
                this[this.tablemetaMapLayers.RenderFieldColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMarkerColorNull() {
                return this.IsNull(this.tablemetaMapLayers.MarkerColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMarkerColorNull() {
                this[this.tablemetaMapLayers.MarkerColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRampBeginColorNull() {
                return this.IsNull(this.tablemetaMapLayers.RampBeginColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRampBeginColorNull() {
                this[this.tablemetaMapLayers.RampBeginColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRampEndColorNull() {
                return this.IsNull(this.tablemetaMapLayers.RampEndColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRampEndColorNull() {
                this[this.tablemetaMapLayers.RampEndColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsClassBreaksNull() {
                return this.IsNull(this.tablemetaMapLayers.ClassBreaksColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetClassBreaksNull() {
                this[this.tablemetaMapLayers.ClassBreaksColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataTableNameNull() {
                return this.IsNull(this.tablemetaMapLayers.DataTableNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataTableNameNull() {
                this[this.tablemetaMapLayers.DataTableNameColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataTableKeyNull() {
                return this.IsNull(this.tablemetaMapLayers.DataTableKeyColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataTableKeyNull() {
                this[this.tablemetaMapLayers.DataTableKeyColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFeatureKeyNull() {
                return this.IsNull(this.tablemetaMapLayers.FeatureKeyColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFeatureKeyNull() {
                this[this.tablemetaMapLayers.FeatureKeyColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLineColorNull() {
                return this.IsNull(this.tablemetaMapLayers.LineColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLineColorNull() {
                this[this.tablemetaMapLayers.LineColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFillColorNull() {
                return this.IsNull(this.tablemetaMapLayers.FillColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFillColorNull() {
                this[this.tablemetaMapLayers.FillColorColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPolygonOutlineColorNull() {
                return this.IsNull(this.tablemetaMapLayers.PolygonOutlineColorColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPolygonOutlineColorNull() {
                this[this.tablemetaMapLayers.PolygonOutlineColorColumn] =         System.Convert.DBNull;
            }
        }




        public         class metaMapPointsRow :         System.Data.DataRow {

            private metaMapPointsDataTable tablemetaMapPoints;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapPointsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablemetaMapPoints = ((metaMapPointsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MapPointId {
                get {
                    return ((int)(this[this.tablemetaMapPoints.MapPointIdColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.MapPointIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataSourceTableName {
                get {
                    return ((string)(this[this.tablemetaMapPoints.DataSourceTableNameColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.DataSourceTableNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataSourceXCoordinateColumnName {
                get {
                    return ((string)(this[this.tablemetaMapPoints.DataSourceXCoordinateColumnNameColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.DataSourceXCoordinateColumnNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataSourceYCoordinateColumnName {
                get {
                    return ((string)(this[this.tablemetaMapPoints.DataSourceYCoordinateColumnNameColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.DataSourceYCoordinateColumnNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DataSourceLabelColumnName {
                get {
                    try {
                        return ((string)(this[this.tablemetaMapPoints.DataSourceLabelColumnNameColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'DataSourceLabelColumnName\' in table \'metaMapPoints\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tablemetaMapPoints.DataSourceLabelColumnNameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Size {
                get {
                    return ((int)(this[this.tablemetaMapPoints.SizeColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.SizeColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Color {
                get {
                    return ((int)(this[this.tablemetaMapPoints.ColorColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.ColorColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MapId {
                get {
                    return ((int)(this[this.tablemetaMapPoints.MapIdColumn]));
                }
                set {
                    this[this.tablemetaMapPoints.MapIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow metaMapsRow {
                get {
                    return ((metaMapsRow)(this.GetParentRow(this.Table.ParentRelations["FK__metaMapPo__MapId__2A4B4B5E"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK__metaMapPo__MapId__2A4B4B5E"]);
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDataSourceLabelColumnNameNull() {
                return this.IsNull(this.tablemetaMapPoints.DataSourceLabelColumnNameColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDataSourceLabelColumnNameNull() {
                this[this.tablemetaMapPoints.DataSourceLabelColumnNameColumn] =         System.Convert.DBNull;
            }
        }




        public         class metaMapsRow :         System.Data.DataRow {

            private metaMapsDataTable tablemetaMaps;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal metaMapsRow(        System.Data.DataRowBuilder rb) :
                    base(rb) {
                this.tablemetaMaps = ((metaMapsDataTable)(this.Table));
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MapId {
                get {
                    return ((int)(this[this.tablemetaMaps.MapIdColumn]));
                }
                set {
                    this[this.tablemetaMaps.MapIdColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tablemetaMaps.NameColumn]));
                }
                set {
                    this[this.tablemetaMaps.NameColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tablemetaMaps.TitleColumn]));
                    }
                    catch (        System.InvalidCastException e) {
                        throw new         System.Data.StrongTypingException("The value for column \'Title\' in table \'metaMaps\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemetaMaps.TitleColumn] = value;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTitleNull() {
                return this.IsNull(this.tablemetaMaps.TitleColumn);
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTitleNull() {
                this[this.tablemetaMaps.TitleColumn] =         System.Convert.DBNull;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow[] GetmetaMapLayersRows() {
                if ((this.Table.ChildRelations["FK__metaMapLa__MapId__25869641"] == null)) {
                    return new metaMapLayersRow[0];
                }
                else {
                    return ((metaMapLayersRow[])(base.GetChildRows(this.Table.ChildRelations["FK__metaMapLa__MapId__25869641"])));
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow[] GetmetaMapPointsRows() {
                if ((this.Table.ChildRelations["FK__metaMapPo__MapId__2A4B4B5E"] == null)) {
                    return new metaMapPointsRow[0];
                }
                else {
                    return ((metaMapPointsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__metaMapPo__MapId__2A4B4B5E"])));
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class metaLayerRenderTypesRowChangeEvent :         System.EventArgs {

            private metaLayerRenderTypesRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRowChangeEvent(metaLayerRenderTypesRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayerRenderTypesRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class metaLayersRowChangeEvent :         System.EventArgs {

            private metaLayersRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRowChangeEvent(metaLayersRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaLayersRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class metaMapLayersRowChangeEvent :         System.EventArgs {

            private metaMapLayersRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRowChangeEvent(metaMapLayersRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapLayersRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class metaMapPointsRowChangeEvent :         System.EventArgs {

            private metaMapPointsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRowChangeEvent(metaMapPointsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapPointsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }




        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class metaMapsRowChangeEvent :         System.EventArgs {

            private metaMapsRow eventRow;

            private         System.Data.DataRowAction eventAction;

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRowChangeEvent(metaMapsRow row,         System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public metaMapsRow Row {
                get {
                    return this.eventRow;
                }
            }

            [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public         System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Epi.DataSets.MapMetadataTableAdapters {





    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.ComponentModel.DataObjectAttribute(true)]
    [        System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public         class metaLayerRenderTypesTableAdapter :         System.ComponentModel.Component {

        private         System.Data.SqlClient.SqlDataAdapter _adapter;

        private         System.Data.SqlClient.SqlConnection _connection;

        private         System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public metaLayerRenderTypesTableAdapter() {
            this.ClearBeforeFill = true;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private         System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal         System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((        System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected         System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new         System.Data.SqlClient.SqlDataAdapter();
                    System.Data.Common.DataTableMapping tableMapping = new         System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "metaLayerRenderTypes";
            tableMapping.ColumnMappings.Add("LayerRenderTypeId", "LayerRenderTypeId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[metaLayerRenderTypes] WHERE (([LayerRenderTypeId] = @Original_" +
                "LayerRenderTypeId) AND ([Name] = @Original_Name))";
            this._adapter.DeleteCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[metaLayerRenderTypes] ([LayerRenderTypeId], [Name]) VALUES (@L" +
                "ayerRenderTypeId, @Name);\r\nSELECT LayerRenderTypeId, Name FROM metaLayerRenderTy" +
                "pes WHERE (LayerRenderTypeId = @LayerRenderTypeId)";
            this._adapter.InsertCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[metaLayerRenderTypes] SET [LayerRenderTypeId] = @LayerRenderTypeId, [Name] = @Name WHERE (([LayerRenderTypeId] = @Original_LayerRenderTypeId) AND ([Name] = @Original_Name));
SELECT LayerRenderTypeId, Name FROM metaLayerRenderTypes WHERE (LayerRenderTypeId = @LayerRenderTypeId)";
            this._adapter.UpdateCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new         System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString =         Epi.Properties.Settings.Default.test00ConnectionString;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new         System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new         System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LayerRenderTypeId, Name FROM dbo.metaLayerRenderTypes";
            this._commandCollection[0].CommandType =         System.Data.CommandType.Text;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MapMetadata.metaLayerRenderTypesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MapMetadata.metaLayerRenderTypesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MapMetadata.metaLayerRenderTypesDataTable dataTable = new MapMetadata.metaLayerRenderTypesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata.metaLayerRenderTypesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata dataSet) {
            return this.Adapter.Update(dataSet, "metaLayerRenderTypes");
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow dataRow) {
            return this.Adapter.Update(new         System.Data.DataRow[] {
                        dataRow});
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LayerRenderTypeId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LayerRenderTypeId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LayerRenderTypeId, string Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LayerRenderTypeId));
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LayerRenderTypeId, string Name, int Original_LayerRenderTypeId, string Original_Name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LayerRenderTypeId));
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_LayerRenderTypeId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, int Original_LayerRenderTypeId, string Original_Name) {
            return this.Update(Original_LayerRenderTypeId, Name, Original_LayerRenderTypeId, Original_Name);
        }
    }




    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.ComponentModel.DataObjectAttribute(true)]
    [        System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public         class metaLayersTableAdapter :         System.ComponentModel.Component {

        private         System.Data.SqlClient.SqlDataAdapter _adapter;

        private         System.Data.SqlClient.SqlConnection _connection;

        private         System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public metaLayersTableAdapter() {
            this.ClearBeforeFill = true;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private         System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal         System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((        System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected         System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new         System.Data.SqlClient.SqlDataAdapter();
                    System.Data.Common.DataTableMapping tableMapping = new         System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "metaLayers";
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("Gml", "Gml");
            tableMapping.ColumnMappings.Add("GmlSchema", "GmlSchema");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[metaLayers] WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ((@IsNull_FileName = 1 AND [FileName] IS NULL) OR ([FileName] = @Original_FileName)))";
            this._adapter.DeleteCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_Description",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Description",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FileName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FileName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[metaLayers] ([Gml], [GmlSchema], [Name], [Description], [FileName]) VALUES (@Gml, @GmlSchema, @Name, @Description, @FileName);
SELECT LayerId, Gml, GmlSchema, Name, Description, FileName FROM metaLayers WHERE (LayerId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Gml",         System.Data.SqlDbType.NText, 0,         System.Data.ParameterDirection.Input, 0, 0, "Gml",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@GmlSchema",         System.Data.SqlDbType.NText, 0,         System.Data.ParameterDirection.Input, 0, 0, "GmlSchema",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Description",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FileName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[metaLayers] SET [Gml] = @Gml, [GmlSchema] = @GmlSchema, [Name] = @Name, [Description] = @Description, [FileName] = @FileName WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)) AND ((@IsNull_FileName = 1 AND [FileName] IS NULL) OR ([FileName] = @Original_FileName)));
SELECT LayerId, Gml, GmlSchema, Name, Description, FileName FROM metaLayers WHERE (LayerId = @LayerId)";
            this._adapter.UpdateCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Gml",         System.Data.SqlDbType.NText, 0,         System.Data.ParameterDirection.Input, 0, 0, "Gml",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@GmlSchema",         System.Data.SqlDbType.NText, 0,         System.Data.ParameterDirection.Input, 0, 0, "GmlSchema",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Description",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FileName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_Description",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Description",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Description",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FileName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FileName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FileName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerId",         System.Data.SqlDbType.Int, 4,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new         System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString =         Epi.Properties.Settings.Default.test00ConnectionString;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new         System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new         System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LayerId, Gml, GmlSchema, Name, Description, FileName FROM dbo.metaLayers";
            this._commandCollection[0].CommandType =         System.Data.CommandType.Text;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MapMetadata.metaLayersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MapMetadata.metaLayersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MapMetadata.metaLayersDataTable dataTable = new MapMetadata.metaLayersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata.metaLayersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata dataSet) {
            return this.Adapter.Update(dataSet, "metaLayers");
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow dataRow) {
            return this.Adapter.Update(new         System.Data.DataRow[] {
                        dataRow});
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LayerId, string Original_Name, string Original_Description, string Original_FileName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_Description == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Description));
            }
            if ((Original_FileName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_FileName));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Gml, string GmlSchema, string Name, string Description, string FileName) {
            if ((Gml == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Gml));
            }
            if ((GmlSchema == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(GmlSchema));
            }
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Name));
            }
            if ((Description == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Description));
            }
            if ((FileName == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FileName));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Gml, string GmlSchema, string Name, string Description, string FileName, int Original_LayerId, string Original_Name, string Original_Description, string Original_FileName, int LayerId) {
            if ((Gml == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Gml));
            }
            if ((GmlSchema == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(GmlSchema));
            }
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Name));
            }
            if ((Description == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Description));
            }
            if ((FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FileName));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Name));
            }
            if ((Original_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Description));
            }
            if ((Original_FileName == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_FileName));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(LayerId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Gml, string GmlSchema, string Name, string Description, string FileName, int Original_LayerId, string Original_Name, string Original_Description, string Original_FileName) {
            return this.Update(Gml, GmlSchema, Name, Description, FileName, Original_LayerId, Original_Name, Original_Description, Original_FileName, Original_LayerId);
        }
    }




    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.ComponentModel.DataObjectAttribute(true)]
    [        System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public         class metaMapLayersTableAdapter :         System.ComponentModel.Component {

        private         System.Data.SqlClient.SqlDataAdapter _adapter;

        private         System.Data.SqlClient.SqlConnection _connection;

        private         System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public metaMapLayersTableAdapter() {
            this.ClearBeforeFill = true;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private         System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal         System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((        System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected         System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new         System.Data.SqlClient.SqlDataAdapter();
                    System.Data.Common.DataTableMapping tableMapping = new         System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "metaMapLayers";
            tableMapping.ColumnMappings.Add("MapLayerId", "MapLayerId");
            tableMapping.ColumnMappings.Add("RenderField", "RenderField");
            tableMapping.ColumnMappings.Add("MarkerColor", "MarkerColor");
            tableMapping.ColumnMappings.Add("RampBeginColor", "RampBeginColor");
            tableMapping.ColumnMappings.Add("RampEndColor", "RampEndColor");
            tableMapping.ColumnMappings.Add("ClassBreaks", "ClassBreaks");
            tableMapping.ColumnMappings.Add("DataTableName", "DataTableName");
            tableMapping.ColumnMappings.Add("DataTableKey", "DataTableKey");
            tableMapping.ColumnMappings.Add("FeatureKey", "FeatureKey");
            tableMapping.ColumnMappings.Add("LineColor", "LineColor");
            tableMapping.ColumnMappings.Add("FillColor", "FillColor");
            tableMapping.ColumnMappings.Add("PolygonOutlineColor", "PolygonOutlineColor");
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("LayerRenderTypeId", "LayerRenderTypeId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[metaMapLayers] WHERE (([MapLayerId] = @Original_MapLayerId) AND ((@IsNull_RenderField = 1 AND [RenderField] IS NULL) OR ([RenderField] = @Original_RenderField)) AND ((@IsNull_MarkerColor = 1 AND [MarkerColor] IS NULL) OR ([MarkerColor] = @Original_MarkerColor)) AND ((@IsNull_RampBeginColor = 1 AND [RampBeginColor] IS NULL) OR ([RampBeginColor] = @Original_RampBeginColor)) AND ((@IsNull_RampEndColor = 1 AND [RampEndColor] IS NULL) OR ([RampEndColor] = @Original_RampEndColor)) AND ((@IsNull_ClassBreaks = 1 AND [ClassBreaks] IS NULL) OR ([ClassBreaks] = @Original_ClassBreaks)) AND ((@IsNull_DataTableName = 1 AND [DataTableName] IS NULL) OR ([DataTableName] = @Original_DataTableName)) AND ((@IsNull_DataTableKey = 1 AND [DataTableKey] IS NULL) OR ([DataTableKey] = @Original_DataTableKey)) AND ((@IsNull_FeatureKey = 1 AND [FeatureKey] IS NULL) OR ([FeatureKey] = @Original_FeatureKey)) AND ((@IsNull_LineColor = 1 AND [LineColor] IS NULL) OR ([LineColor] = @Original_LineColor)) AND ((@IsNull_FillColor = 1 AND [FillColor] IS NULL) OR ([FillColor] = @Original_FillColor)) AND ((@IsNull_PolygonOutlineColor = 1 AND [PolygonOutlineColor] IS NULL) OR ([PolygonOutlineColor] = @Original_PolygonOutlineColor)) AND ([MapId] = @Original_MapId) AND ([LayerId] = @Original_LayerId) AND ([LayerRenderTypeId] = @Original_LayerRenderTypeId))";
            this._adapter.DeleteCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapLayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapLayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RenderField",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RenderField",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataTableName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataTableKey",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataTableKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FeatureKey",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FeatureKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[metaMapLayers] ([RenderField], [MarkerColor], [RampBeginColor], [RampEndColor], [ClassBreaks], [DataTableName], [DataTableKey], [FeatureKey], [LineColor], [FillColor], [PolygonOutlineColor], [MapId], [LayerId], [LayerRenderTypeId]) VALUES (@RenderField, @MarkerColor, @RampBeginColor, @RampEndColor, @ClassBreaks, @DataTableName, @DataTableKey, @FeatureKey, @LineColor, @FillColor, @PolygonOutlineColor, @MapId, @LayerId, @LayerRenderTypeId);
SELECT MapLayerId, RenderField, MarkerColor, RampBeginColor, RampEndColor, ClassBreaks, DataTableName, DataTableKey, FeatureKey, LineColor, FillColor, PolygonOutlineColor, MapId, LayerId, LayerRenderTypeId FROM metaMapLayers WHERE (MapLayerId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RenderField",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataTableKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FeatureKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[metaMapLayers] SET [RenderField] = @RenderField, [MarkerColor] = @M" +
                "arkerColor, [RampBeginColor] = @RampBeginColor, [RampEndColor] = @RampEndColor, " +
                "[ClassBreaks] = @ClassBreaks, [DataTableName] = @DataTableName, [DataTableKey] =" +
                " @DataTableKey, [FeatureKey] = @FeatureKey, [LineColor] = @LineColor, [FillColor" +
                "] = @FillColor, [PolygonOutlineColor] = @PolygonOutlineColor, [MapId] = @MapId, " +
                "[LayerId] = @LayerId, [LayerRenderTypeId] = @LayerRenderTypeId WHERE (([MapLayer" +
                "Id] = @Original_MapLayerId) AND ((@IsNull_RenderField = 1 AND [RenderField] IS N" +
                "ULL) OR ([RenderField] = @Original_RenderField)) AND ((@IsNull_MarkerColor = 1 A" +
                "ND [MarkerColor] IS NULL) OR ([MarkerColor] = @Original_MarkerColor)) AND ((@IsN" +
                "ull_RampBeginColor = 1 AND [RampBeginColor] IS NULL) OR ([RampBeginColor] = @Ori" +
                "ginal_RampBeginColor)) AND ((@IsNull_RampEndColor = 1 AND [RampEndColor] IS NULL" +
                ") OR ([RampEndColor] = @Original_RampEndColor)) AND ((@IsNull_ClassBreaks = 1 AN" +
                "D [ClassBreaks] IS NULL) OR ([ClassBreaks] = @Original_ClassBreaks)) AND ((@IsNu" +
                "ll_DataTableName = 1 AND [DataTableName] IS NULL) OR ([DataTableName] = @Origina" +
                "l_DataTableName)) AND ((@IsNull_DataTableKey = 1 AND [DataTableKey] IS NULL) OR " +
                "([DataTableKey] = @Original_DataTableKey)) AND ((@IsNull_FeatureKey = 1 AND [Fea" +
                "tureKey] IS NULL) OR ([FeatureKey] = @Original_FeatureKey)) AND ((@IsNull_LineCo" +
                "lor = 1 AND [LineColor] IS NULL) OR ([LineColor] = @Original_LineColor)) AND ((@" +
                "IsNull_FillColor = 1 AND [FillColor] IS NULL) OR ([FillColor] = @Original_FillCo" +
                "lor)) AND ((@IsNull_PolygonOutlineColor = 1 AND [PolygonOutlineColor] IS NULL) O" +
                "R ([PolygonOutlineColor] = @Original_PolygonOutlineColor)) AND ([MapId] = @Origi" +
                "nal_MapId) AND ([LayerId] = @Original_LayerId) AND ([LayerRenderTypeId] = @Origi" +
                "nal_LayerRenderTypeId));\r\nSELECT MapLayerId, RenderField, MarkerColor, RampBegin" +
                "Color, RampEndColor, ClassBreaks, DataTableName, DataTableKey, FeatureKey, LineC" +
                "olor, FillColor, PolygonOutlineColor, MapId, LayerId, LayerRenderTypeId FROM met" +
                "aMapLayers WHERE (MapLayerId = @MapLayerId)";
            this._adapter.UpdateCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RenderField",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataTableKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FeatureKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapLayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapLayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RenderField",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RenderField",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "RenderField",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MarkerColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MarkerColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RampBeginColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampBeginColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_RampEndColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "RampEndColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_ClassBreaks",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "ClassBreaks",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataTableName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataTableKey",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataTableKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataTableKey",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FeatureKey",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FeatureKey",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "FeatureKey",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LineColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_FillColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "FillColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_PolygonOutlineColor",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "PolygonOutlineColor",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_LayerRenderTypeId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "LayerRenderTypeId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapLayerId",         System.Data.SqlDbType.Int, 4,         System.Data.ParameterDirection.Input, 0, 0, "MapLayerId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new         System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString =         Epi.Properties.Settings.Default.test00ConnectionString;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new         System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new         System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MapLayerId, RenderField, MarkerColor, RampBeginColor, RampEndColor, ClassB" +
                "reaks, DataTableName, DataTableKey, FeatureKey, LineColor, FillColor, PolygonOut" +
                "lineColor, MapId, LayerId, LayerRenderTypeId FROM dbo.metaMapLayers";
            this._commandCollection[0].CommandType =         System.Data.CommandType.Text;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MapMetadata.metaMapLayersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MapMetadata.metaMapLayersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MapMetadata.metaMapLayersDataTable dataTable = new MapMetadata.metaMapLayersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata.metaMapLayersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata dataSet) {
            return this.Adapter.Update(dataSet, "metaMapLayers");
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow dataRow) {
            return this.Adapter.Update(new         System.Data.DataRow[] {
                        dataRow});
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MapLayerId, string Original_RenderField,         System.Nullable Original_MarkerColor,         System.Nullable Original_RampBeginColor,         System.Nullable Original_RampEndColor,         System.Nullable Original_ClassBreaks, string Original_DataTableName, string Original_DataTableKey, string Original_FeatureKey,         System.Nullable Original_LineColor,         System.Nullable Original_FillColor,         System.Nullable Original_PolygonOutlineColor, int Original_MapId, int Original_LayerId, int Original_LayerRenderTypeId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MapLayerId));
            if ((Original_RenderField == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RenderField));
            }
            if ((Original_MarkerColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_MarkerColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value =         System.DBNull.Value;
            }
            if ((Original_RampBeginColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_RampBeginColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value =         System.DBNull.Value;
            }
            if ((Original_RampEndColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_RampEndColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value =         System.DBNull.Value;
            }
            if ((Original_ClassBreaks.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_ClassBreaks.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value =         System.DBNull.Value;
            }
            if ((Original_DataTableName == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_DataTableName));
            }
            if ((Original_DataTableKey == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_DataTableKey));
            }
            if ((Original_FeatureKey == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_FeatureKey));
            }
            if ((Original_LineColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_LineColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value =         System.DBNull.Value;
            }
            if ((Original_FillColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_FillColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value =         System.DBNull.Value;
            }
            if ((Original_PolygonOutlineColor.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_PolygonOutlineColor.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value =         System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[23].Value = ((int)(Original_MapId));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_LayerId));
            this.Adapter.DeleteCommand.Parameters[25].Value = ((int)(Original_LayerRenderTypeId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RenderField,         System.Nullable MarkerColor,         System.Nullable RampBeginColor,         System.Nullable RampEndColor,         System.Nullable ClassBreaks, string DataTableName, string DataTableKey, string FeatureKey,         System.Nullable LineColor,         System.Nullable FillColor,         System.Nullable PolygonOutlineColor, int MapId, int LayerId, int LayerRenderTypeId) {
            if ((RenderField == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RenderField));
            }
            if ((MarkerColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(MarkerColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            if ((RampBeginColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(RampBeginColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value =         System.DBNull.Value;
            }
            if ((RampEndColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(RampEndColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            if ((ClassBreaks.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ClassBreaks.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value =         System.DBNull.Value;
            }
            if ((DataTableName == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(DataTableName));
            }
            if ((DataTableKey == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DataTableKey));
            }
            if ((FeatureKey == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(FeatureKey));
            }
            if ((LineColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(LineColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value =         System.DBNull.Value;
            }
            if ((FillColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(FillColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value =         System.DBNull.Value;
            }
            if ((PolygonOutlineColor.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(PolygonOutlineColor.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value =         System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(MapId));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(LayerId));
            this.Adapter.InsertCommand.Parameters[13].Value = ((int)(LayerRenderTypeId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RenderField,
                            System.Nullable MarkerColor,
                            System.Nullable RampBeginColor,
                            System.Nullable RampEndColor,
                            System.Nullable ClassBreaks,
                    string DataTableName,
                    string DataTableKey,
                    string FeatureKey,
                            System.Nullable LineColor,
                            System.Nullable FillColor,
                            System.Nullable PolygonOutlineColor,
                    int MapId,
                    int LayerId,
                    int LayerRenderTypeId,
                    int Original_MapLayerId,
                    string Original_RenderField,
                            System.Nullable Original_MarkerColor,
                            System.Nullable Original_RampBeginColor,
                            System.Nullable Original_RampEndColor,
                            System.Nullable Original_ClassBreaks,
                    string Original_DataTableName,
                    string Original_DataTableKey,
                    string Original_FeatureKey,
                            System.Nullable Original_LineColor,
                            System.Nullable Original_FillColor,
                            System.Nullable Original_PolygonOutlineColor,
                    int Original_MapId,
                    int Original_LayerId,
                    int Original_LayerRenderTypeId,
                    int MapLayerId) {
            if ((RenderField == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RenderField));
            }
            if ((MarkerColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(MarkerColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            if ((RampBeginColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(RampBeginColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value =         System.DBNull.Value;
            }
            if ((RampEndColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(RampEndColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            if ((ClassBreaks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ClassBreaks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value =         System.DBNull.Value;
            }
            if ((DataTableName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(DataTableName));
            }
            if ((DataTableKey == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DataTableKey));
            }
            if ((FeatureKey == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(FeatureKey));
            }
            if ((LineColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(LineColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value =         System.DBNull.Value;
            }
            if ((FillColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(FillColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value =         System.DBNull.Value;
            }
            if ((PolygonOutlineColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(PolygonOutlineColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value =         System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(MapId));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(LayerId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(LayerRenderTypeId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_MapLayerId));
            if ((Original_RenderField == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_RenderField));
            }
            if ((Original_MarkerColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_MarkerColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value =         System.DBNull.Value;
            }
            if ((Original_RampBeginColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_RampBeginColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value =         System.DBNull.Value;
            }
            if ((Original_RampEndColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_RampEndColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value =         System.DBNull.Value;
            }
            if ((Original_ClassBreaks.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_ClassBreaks.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value =         System.DBNull.Value;
            }
            if ((Original_DataTableName == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_DataTableName));
            }
            if ((Original_DataTableKey == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_DataTableKey));
            }
            if ((Original_FeatureKey == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_FeatureKey));
            }
            if ((Original_LineColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_LineColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value =         System.DBNull.Value;
            }
            if ((Original_FillColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_FillColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value =         System.DBNull.Value;
            }
            if ((Original_PolygonOutlineColor.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_PolygonOutlineColor.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value =         System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(Original_MapId));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_LayerId));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(Original_LayerRenderTypeId));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(MapLayerId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RenderField,
                            System.Nullable MarkerColor,
                            System.Nullable RampBeginColor,
                            System.Nullable RampEndColor,
                            System.Nullable ClassBreaks,
                    string DataTableName,
                    string DataTableKey,
                    string FeatureKey,
                            System.Nullable LineColor,
                            System.Nullable FillColor,
                            System.Nullable PolygonOutlineColor,
                    int MapId,
                    int LayerId,
                    int LayerRenderTypeId,
                    int Original_MapLayerId,
                    string Original_RenderField,
                            System.Nullable Original_MarkerColor,
                            System.Nullable Original_RampBeginColor,
                            System.Nullable Original_RampEndColor,
                            System.Nullable Original_ClassBreaks,
                    string Original_DataTableName,
                    string Original_DataTableKey,
                    string Original_FeatureKey,
                            System.Nullable Original_LineColor,
                            System.Nullable Original_FillColor,
                            System.Nullable Original_PolygonOutlineColor,
                    int Original_MapId,
                    int Original_LayerId,
                    int Original_LayerRenderTypeId) {
            return this.Update(RenderField, MarkerColor, RampBeginColor, RampEndColor, ClassBreaks, DataTableName, DataTableKey, FeatureKey, LineColor, FillColor, PolygonOutlineColor, MapId, LayerId, LayerRenderTypeId, Original_MapLayerId, Original_RenderField, Original_MarkerColor, Original_RampBeginColor, Original_RampEndColor, Original_ClassBreaks, Original_DataTableName, Original_DataTableKey, Original_FeatureKey, Original_LineColor, Original_FillColor, Original_PolygonOutlineColor, Original_MapId, Original_LayerId, Original_LayerRenderTypeId, Original_MapLayerId);
        }
    }




    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.ComponentModel.DataObjectAttribute(true)]
    [        System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public         class metaMapPointsTableAdapter :         System.ComponentModel.Component {

        private         System.Data.SqlClient.SqlDataAdapter _adapter;

        private         System.Data.SqlClient.SqlConnection _connection;

        private         System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public metaMapPointsTableAdapter() {
            this.ClearBeforeFill = true;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private         System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal         System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((        System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected         System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new         System.Data.SqlClient.SqlDataAdapter();
                    System.Data.Common.DataTableMapping tableMapping = new         System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "metaMapPoints";
            tableMapping.ColumnMappings.Add("MapPointId", "MapPointId");
            tableMapping.ColumnMappings.Add("DataSourceTableName", "DataSourceTableName");
            tableMapping.ColumnMappings.Add("DataSourceXCoordinateColumnName", "DataSourceXCoordinateColumnName");
            tableMapping.ColumnMappings.Add("DataSourceYCoordinateColumnName", "DataSourceYCoordinateColumnName");
            tableMapping.ColumnMappings.Add("DataSourceLabelColumnName", "DataSourceLabelColumnName");
            tableMapping.ColumnMappings.Add("Size", "Size");
            tableMapping.ColumnMappings.Add("Color", "Color");
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[metaMapPoints] WHERE (([MapPointId] = @Original_MapPointId) AND ([DataSourceTableName] = @Original_DataSourceTableName) AND ([DataSourceXCoordinateColumnName] = @Original_DataSourceXCoordinateColumnName) AND ([DataSourceYCoordinateColumnName] = @Original_DataSourceYCoordinateColumnName) AND ((@IsNull_DataSourceLabelColumnName = 1 AND [DataSourceLabelColumnName] IS NULL) OR ([DataSourceLabelColumnName] = @Original_DataSourceLabelColumnName)) AND ([Size] = @Original_Size) AND ([Color] = @Original_Color) AND ([MapId] = @Original_MapId))";
            this._adapter.DeleteCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapPointId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapPointId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceTableName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceXCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceXCoordinateColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceYCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceYCoordinateColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataSourceLabelColumnName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceLabelColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Size",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Size",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Color",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Color",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[metaMapPoints] ([DataSourceTableName], [DataSourceXCoordinateColumnName], [DataSourceYCoordinateColumnName], [DataSourceLabelColumnName], [Size], [Color], [MapId]) VALUES (@DataSourceTableName, @DataSourceXCoordinateColumnName, @DataSourceYCoordinateColumnName, @DataSourceLabelColumnName, @Size, @Color, @MapId);
SELECT MapPointId, DataSourceTableName, DataSourceXCoordinateColumnName, DataSourceYCoordinateColumnName, DataSourceLabelColumnName, Size, Color, MapId FROM metaMapPoints WHERE (MapPointId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceTableName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceXCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceXCoordinateColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceYCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceYCoordinateColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceLabelColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Size",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Size",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Color",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Color",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[metaMapPoints] SET [DataSourceTableName] = @DataSourceTableName, [DataSourceXCoordinateColumnName] = @DataSourceXCoordinateColumnName, [DataSourceYCoordinateColumnName] = @DataSourceYCoordinateColumnName, [DataSourceLabelColumnName] = @DataSourceLabelColumnName, [Size] = @Size, [Color] = @Color, [MapId] = @MapId WHERE (([MapPointId] = @Original_MapPointId) AND ([DataSourceTableName] = @Original_DataSourceTableName) AND ([DataSourceXCoordinateColumnName] = @Original_DataSourceXCoordinateColumnName) AND ([DataSourceYCoordinateColumnName] = @Original_DataSourceYCoordinateColumnName) AND ((@IsNull_DataSourceLabelColumnName = 1 AND [DataSourceLabelColumnName] IS NULL) OR ([DataSourceLabelColumnName] = @Original_DataSourceLabelColumnName)) AND ([Size] = @Original_Size) AND ([Color] = @Original_Color) AND ([MapId] = @Original_MapId));
SELECT MapPointId, DataSourceTableName, DataSourceXCoordinateColumnName, DataSourceYCoordinateColumnName, DataSourceLabelColumnName, Size, Color, MapId FROM metaMapPoints WHERE (MapPointId = @MapPointId)";
            this._adapter.UpdateCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceTableName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceXCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceXCoordinateColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceYCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceYCoordinateColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@DataSourceLabelColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Size",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Size",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Color",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Color",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapPointId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapPointId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceTableName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceTableName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceXCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceXCoordinateColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceYCoordinateColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceYCoordinateColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_DataSourceLabelColumnName",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_DataSourceLabelColumnName",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "DataSourceLabelColumnName",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Size",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Size",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Color",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Color",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapPointId",         System.Data.SqlDbType.Int, 4,         System.Data.ParameterDirection.Input, 0, 0, "MapPointId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new         System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString =         Epi.Properties.Settings.Default.test00ConnectionString;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new         System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new         System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MapPointId, DataSourceTableName, DataSourceXCoordinateColumnName, DataSour" +
                "ceYCoordinateColumnName, DataSourceLabelColumnName, Size, Color, MapId FROM dbo." +
                "metaMapPoints";
            this._commandCollection[0].CommandType =         System.Data.CommandType.Text;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MapMetadata.metaMapPointsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MapMetadata.metaMapPointsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MapMetadata.metaMapPointsDataTable dataTable = new MapMetadata.metaMapPointsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata.metaMapPointsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata dataSet) {
            return this.Adapter.Update(dataSet, "metaMapPoints");
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow dataRow) {
            return this.Adapter.Update(new         System.Data.DataRow[] {
                        dataRow});
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MapPointId, string Original_DataSourceTableName, string Original_DataSourceXCoordinateColumnName, string Original_DataSourceYCoordinateColumnName, string Original_DataSourceLabelColumnName, int Original_Size, int Original_Color, int Original_MapId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MapPointId));
            if ((Original_DataSourceTableName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceTableName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DataSourceTableName));
            }
            if ((Original_DataSourceXCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceXCoordinateColumnName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DataSourceXCoordinateColumnName));
            }
            if ((Original_DataSourceYCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceYCoordinateColumnName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DataSourceYCoordinateColumnName));
            }
            if ((Original_DataSourceLabelColumnName == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_DataSourceLabelColumnName));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_Size));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_Color));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_MapId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string DataSourceTableName, string DataSourceXCoordinateColumnName, string DataSourceYCoordinateColumnName, string DataSourceLabelColumnName, int Size, int Color, int MapId) {
            if ((DataSourceTableName == null)) {
                throw new         System.ArgumentNullException("DataSourceTableName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(DataSourceTableName));
            }
            if ((DataSourceXCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("DataSourceXCoordinateColumnName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DataSourceXCoordinateColumnName));
            }
            if ((DataSourceYCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("DataSourceYCoordinateColumnName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DataSourceYCoordinateColumnName));
            }
            if ((DataSourceLabelColumnName == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DataSourceLabelColumnName));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Size));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(Color));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(MapId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string DataSourceTableName,
                    string DataSourceXCoordinateColumnName,
                    string DataSourceYCoordinateColumnName,
                    string DataSourceLabelColumnName,
                    int Size,
                    int Color,
                    int MapId,
                    int Original_MapPointId,
                    string Original_DataSourceTableName,
                    string Original_DataSourceXCoordinateColumnName,
                    string Original_DataSourceYCoordinateColumnName,
                    string Original_DataSourceLabelColumnName,
                    int Original_Size,
                    int Original_Color,
                    int Original_MapId,
                    int MapPointId) {
            if ((DataSourceTableName == null)) {
                throw new         System.ArgumentNullException("DataSourceTableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(DataSourceTableName));
            }
            if ((DataSourceXCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("DataSourceXCoordinateColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DataSourceXCoordinateColumnName));
            }
            if ((DataSourceYCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("DataSourceYCoordinateColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DataSourceYCoordinateColumnName));
            }
            if ((DataSourceLabelColumnName == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DataSourceLabelColumnName));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Size));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Color));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(MapId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_MapPointId));
            if ((Original_DataSourceTableName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceTableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_DataSourceTableName));
            }
            if ((Original_DataSourceXCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceXCoordinateColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_DataSourceXCoordinateColumnName));
            }
            if ((Original_DataSourceYCoordinateColumnName == null)) {
                throw new         System.ArgumentNullException("Original_DataSourceYCoordinateColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_DataSourceYCoordinateColumnName));
            }
            if ((Original_DataSourceLabelColumnName == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_DataSourceLabelColumnName));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Size));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_Color));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_MapId));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(MapPointId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DataSourceTableName, string DataSourceXCoordinateColumnName, string DataSourceYCoordinateColumnName, string DataSourceLabelColumnName, int Size, int Color, int MapId, int Original_MapPointId, string Original_DataSourceTableName, string Original_DataSourceXCoordinateColumnName, string Original_DataSourceYCoordinateColumnName, string Original_DataSourceLabelColumnName, int Original_Size, int Original_Color, int Original_MapId) {
            return this.Update(DataSourceTableName, DataSourceXCoordinateColumnName, DataSourceYCoordinateColumnName, DataSourceLabelColumnName, Size, Color, MapId, Original_MapPointId, Original_DataSourceTableName, Original_DataSourceXCoordinateColumnName, Original_DataSourceYCoordinateColumnName, Original_DataSourceLabelColumnName, Original_Size, Original_Color, Original_MapId, Original_MapPointId);
        }
    }




    [        System.ComponentModel.DesignerCategoryAttribute("code")]
    [        System.ComponentModel.ToolboxItem(true)]
    [        System.ComponentModel.DataObjectAttribute(true)]
    [        System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public         class metaMapsTableAdapter :         System.ComponentModel.Component {

        private         System.Data.SqlClient.SqlDataAdapter _adapter;

        private         System.Data.SqlClient.SqlConnection _connection;

        private         System.Data.SqlClient.SqlCommand[] _commandCollection;

        private bool _clearBeforeFill;

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public metaMapsTableAdapter() {
            this.ClearBeforeFill = true;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private         System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal         System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((        System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected         System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new         System.Data.SqlClient.SqlDataAdapter();
                    System.Data.Common.DataTableMapping tableMapping = new         System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "metaMaps";
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Title", "Title");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[metaMaps] WHERE (([MapId] = @Original_MapId) AND ([Name] = @Or" +
                "iginal_Name) AND ((@IsNull_Title = 1 AND [Title] IS NULL) OR ([Title] = @Origina" +
                "l_Title)))";
            this._adapter.DeleteCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_Title",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Title",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[metaMaps] ([Name], [Title]) VALUES (@Name, @Title);\r\nSELECT Ma" +
                "pId, Name, Title FROM metaMaps WHERE (MapId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Title",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new         System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[metaMaps] SET [Name] = @Name, [Title] = @Title WHERE (([MapId] = @Original_MapId) AND ([Name] = @Original_Name) AND ((@IsNull_Title = 1 AND [Title] IS NULL) OR ([Title] = @Original_Title)));
SELECT MapId, Name, Title FROM metaMaps WHERE (MapId = @MapId)";
            this._adapter.UpdateCommand.CommandType =         System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Title",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_MapId",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Name",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Name",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@IsNull_Title",         System.Data.SqlDbType.Int, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@Original_Title",         System.Data.SqlDbType.NVarChar, 0,         System.Data.ParameterDirection.Input, 0, 0, "Title",         System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new         System.Data.SqlClient.SqlParameter("@MapId",         System.Data.SqlDbType.Int, 4,         System.Data.ParameterDirection.Input, 0, 0, "MapId",         System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new         System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString =         Epi.Properties.Settings.Default.test00ConnectionString;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new         System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new         System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MapId, Name, Title FROM dbo.metaMaps";
            this._commandCollection[0].CommandType =         System.Data.CommandType.Text;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MapMetadata.metaMapsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MapMetadata.metaMapsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MapMetadata.metaMapsDataTable dataTable = new MapMetadata.metaMapsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata.metaMapsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MapMetadata dataSet) {
            return this.Adapter.Update(dataSet, "metaMaps");
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow dataRow) {
            return this.Adapter.Update(new         System.Data.DataRow[] {
                        dataRow});
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(        System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MapId, string Original_Name, string Original_Title) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MapId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_Title == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Title));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Title) {
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Title == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Title));
            }
                    System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Title, int Original_MapId, string Original_Name, string Original_Title, int MapId) {
            if ((Name == null)) {
                throw new         System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Title == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Title));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_MapId));
            if ((Original_Name == null)) {
                throw new         System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            if ((Original_Title == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value =         System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Title));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(MapId));
                    System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State &         System.Data.ConnectionState.Open)
                        !=         System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState ==         System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }

        [        System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [        System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [        System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [        System.ComponentModel.DataObjectMethodAttribute(        System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Title, int Original_MapId, string Original_Name, string Original_Title) {
            return this.Update(Name, Title, Original_MapId, Original_Name, Original_Title, Original_MapId);
        }
    }
}

#pragma warning restore 1591
 