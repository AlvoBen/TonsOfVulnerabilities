using System;
using System.Collections;
using System.Collections.Generic;
using Epi;

namespace Epi.Collections
{




    public class NamedObjectCollection : ICollection, IDisposable
    {
        //Private Class Members
        private object syncRoot = null;
        private Dictionary master = null;
        private Dictionary tags = null;
        //Private Class Members

        //Constructors



        public NamedObjectCollection()
        {







            master = new Dictionary(StringComparer.OrdinalIgnoreCase);
            tags = new Dictionary();
            syncRoot = new object();
        }
        //Constructors

        //Public Properties




        public int Count
        {
            get
            {
                return master.Count;
            }
        }




        public object SyncRoot
        {
            get
            {
                return this.syncRoot;
            }
        }




        public bool IsSynchronized
        {
            get
            {
                return false;
            }
        }





        public Dictionary.KeyCollection Keys
        {
            get
            {
                return master.Keys;
            }
        }




        public List Names
        {
            get
            {
                List namesList = new List();
                foreach (INamedObject obj in this)
                {
                    namesList.Add(obj.Name);
                }
                return namesList;
            }
        }

        //Public Properties

        //Public Methods




        public virtual void Add(T obj)
        {
            string name = ((INamedObject)obj).Name.ToLower();
            master.Add(name, obj);
        }






        public void Add(T obj, object tag)
        {
            string name = ((INamedObject)obj).Name.ToLower();
            Add(obj);
            tags.Add(name, tag);
        }







        public virtual bool Remove(T obj)
        {
            INamedObject namedObject = obj as INamedObject;
            return master.Remove(namedObject.Name.ToLower());
        }





        public virtual void Remove(string name)
        {
            T obj = this[name.ToLower()];
            Remove(obj);
        }






        public virtual bool Contains(T obj)
        {
            INamedObject namedObject = obj as INamedObject;
            return Contains(namedObject.Name.ToLower());
        }






        public virtual bool Contains(string name)
        {
            return master.ContainsKey(name.ToLower());
        }






        public virtual void CopyTo(T[] array, int index)
        {
            master.Values.CopyTo(array, index);
        }






        void ICollection.CopyTo(Array array, int index)
        {
            CopyTo((T[])array, index);
        }





        public void Add(NamedObjectCollection collection)
        {
            foreach (T obj in collection)
            {
                Add(obj);
            }
        }






        public virtual IEnumerator GetEnumerator()
        {
            return this.master.Values.GetEnumerator();
        }






        public T this[string name]
        {
            get
            {
                return master[name];
            }
        }




        public virtual void Dispose()
        {
            if (master != null)
            {
                master.Clear();
                master = null;
            }
        }






        public bool Exists(string name)
        {
            return master.ContainsKey(name.ToLower());
        }






        public bool Exists(T obj)
        {
            return master.ContainsValue(obj);
        }




        public void Clear()
        {
            master.Clear();
        }






        public object GetTag(string name)
        {
            return tags[name];
        }

        //Public Methods
    }
}
 