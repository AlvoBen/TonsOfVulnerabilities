using System;
using System.Collections;
using System.Collections.Generic;
using Epi.Collections;
using Epi.Fields;

namespace Epi.Collections
{



    public class FieldCollectionMaster : NamedObjectCollection
    {
        //Private Class Members
        private NamedObjectCollection textFields = null;
        private NamedObjectCollection mirrorFields = null;
        private NamedObjectCollection inputFields = null;
        private NamedObjectCollection dataFields = null;
        private NamedObjectCollection tableColumnFields = null;
        private NamedObjectCollection relatedFields = null;
        private NamedObjectCollection gridFields = null;
        //Private Class Members

        //Constructors



        public FieldCollectionMaster()
        {
            textFields = new NamedObjectCollection();
            mirrorFields = new NamedObjectCollection();
            inputFields = new NamedObjectCollection();
            dataFields = new NamedObjectCollection();
            tableColumnFields = new NamedObjectCollection();
            relatedFields = new NamedObjectCollection();
            gridFields = new NamedObjectCollection();
        }

        //Constructors

        //Public Properties



        public UniqueKeyField UniqueKeyField
        {
            get
            {
                return this[ColumnNames.UNIQUE_KEY] as UniqueKeyField;
            }
        }





        public UniqueIdentifierField UniqueIdentifierField
        {
            get
            {
                return this[ColumnNames.UNIQUE_IDENTIFIER] as UniqueIdentifierField;
            }
        }



        public RecStatusField RecStatusField
        {
            get
            {
                return this[ColumnNames.REC_STATUS] as RecStatusField;
            }
        }




        public ForeignKeyField ForeignKeyField
        {
            get
            {
                return this[ColumnNames.FOREIGN_KEY] as ForeignKeyField;
            }
        }

        public bool ForeignKeyFieldExists
        {
            get
            {
                return this.Contains(ColumnNames.FOREIGN_KEY);
            }
        }




        public GlobalRecordIdField GlobalRecordIdField
        {
            get
            {
                return this[ColumnNames.GLOBAL_RECORD_ID] as GlobalRecordIdField;
            }
        }



        public NamedObjectCollection TextFields
        {
            get
            {
                return this.textFields;
            }
        }




        public NamedObjectCollection MirrorFields
        {
            get
            {
                return this.mirrorFields;
            }
        }




        public NamedObjectCollection InputFields
        {
            get
            {
                return this.inputFields;
            }
        }




        public NamedObjectCollection DataFields
        {
            get
            {
                return dataFields;
            }
        }




        public NamedObjectCollection TableColumnFields
        {
            get
            {
                return this.tableColumnFields;
            }
        }




        public NamedObjectCollection RelatedFields
        {
            get
            {
                return this.relatedFields;
            }
        }




        public NamedObjectCollection GridFields
        {
            get
            {
                return this.gridFields;
            }
        }
        //Public Properties

        //Public Methods




        public override void Add(Field field)
        {
            base.Add(field);
            if (field is TextField)
            {
                textFields.Add(field as TextField);
            }
            if (field is MirrorField)
            {
                mirrorFields.Add(field as MirrorField);
            }
            if (field is RelatedViewField)
            {
                relatedFields.Add(field as RelatedViewField);
            }
            if (field is IDataField)
            {
                dataFields.Add(field as IDataField);

                if (!(field is MirrorField))
                {
                    tableColumnFields.Add(field as IDataField);
                }
            }
            if (field is IInputField)
            {
                inputFields.Add(field as IInputField);
            }
            if (field is GridField)
            {
                gridFields.Add(field as GridField);
            }
        }






        public override bool Remove(Field field)
        {
            bool result = base.Remove(field);
            if (field is TextField)
            {
                textFields.Remove(field.Name);
            }
            if (field is MirrorField)
            {
                mirrorFields.Remove(field.Name);
            }
            if (field is RelatedViewField)
            {
                relatedFields.Add(field as RelatedViewField);
            }
            if (field is IDataField)
            {
                dataFields.Remove(field.Name);

                if (!(field is MirrorField))
                {
                    tableColumnFields.Remove(field.Name);
                }
            }
            if (field is IInputField)
            {
                inputFields.Remove(field.Name);
            }
            if (field is GridField)
            {
                gridFields.Remove(field as GridField);
            }
            return result;
        }




        public override void Dispose()
        {
            if (this.dataFields != null)
            {
                dataFields.Dispose();
                dataFields = null;
            }
            if (this.inputFields != null)
            {
                inputFields.Dispose();
                inputFields = null;
            }
            if (this.mirrorFields != null)
            {
                mirrorFields.Dispose();
                mirrorFields = null;
            }
            if (this.tableColumnFields != null)
            {
                tableColumnFields.Dispose();
                tableColumnFields = null;
            }
            if (this.textFields != null)
            {
                textFields.Dispose();
                textFields = null;
            }
            if (this.relatedFields != null)
            {
                relatedFields.Dispose();
                relatedFields = null;
            }
            if (this.gridFields != null)
            {
                gridFields.Dispose();
                gridFields = null;
            }
            base.Dispose();
        }
        //Public Methods
    }
}
 