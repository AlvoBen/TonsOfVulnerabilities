using System;
using System.Data;

using Epi.Data;
using Epi.Data.Services;
using EpiInfo.Plugin;

namespace Epi.Fields
{



 public abstract class PredefinedDataField : Field, IDataField
    {
        //Private Members
        private object currentRecordValueObject = null;
        private string tableName = string.Empty;



        protected DbType dbColumnType;
        private string _Namespace;
        //Private Members

        //Constructors




        public PredefinedDataField(View view)
            : base(view)
  {

        }





        public override void LoadFromRow(DataRow row)
        {

            base.LoadFromRow(row);
            tableName = row[ColumnNames.DATA_TABLE_NAME].ToString();
        }

        //Constructors

        //Public properties






        public DataType DataType
        {
            get
            {
                return (DataType)AppData.Instance.FieldTypesDataTable.GetDataTypeByFieldTypeId((int)FieldType);
            }
            set
            {

                return;
            }
        }




        EpiInfo.Plugin.DataType EpiInfo.Plugin.IVariable.DataType
        {
            get
            {
                return (EpiInfo.Plugin.DataType)AppData.Instance.FieldTypesDataTable.GetDataTypeByFieldTypeId((int)FieldType);
            }
            set
            {
                return;
            }
        }




        public VariableType VarType
        {
            get
            {
                return VariableType.DataSource;
            }
        }






        public VariableScope VariableScope
        {
            get
            {
                return VariableScope.DataSource;
            }
            set { return; }
        }




        public string Namespace { get { return this._Namespace; } set { this._Namespace = value; } }



        public string TableName
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
            }
        }




        public abstract string PromptText { get {return _PromptText; } set{ _PromptText=value; } } string _PromptText;
        public string Prompt { get { return this.PromptText; } set { return; } }



        public int CurrentRecordValue
        {
            get
            {
                if (currentRecordValueObject == null || string.IsNullOrEmpty(currentRecordValueObject.ToString())) return 0;
                else return Int32.Parse(currentRecordValueObject.ToString());
            }
            set
            {
                currentRecordValueObject = value;
            }
        }




        public virtual object CurrentRecordValueObject
        {
            get
            {
                return currentRecordValueObject;
            }
            set
            {
                currentRecordValueObject = value;
            }
        }




        public virtual string CurrentRecordValueString
        {
            get
            {
                if (CurrentRecordValueObject == null) return string.Empty;
                else return CurrentRecordValueObject.ToString();
            }
            set
            {
                CurrentRecordValueObject = value;
            }
        }




        public QueryParameter CurrentRecordValueAsQueryParameter
        {
            get
            {
                object paramValue = DBNull.Value;
                if (!Util.IsEmpty(CurrentRecordValueObject))
                {
                    paramValue = this.CurrentRecordValueObject;
                }
                return new QueryParameter("@" + this.Name, this.dbColumnType, paramValue);
            }
        }




        public string Expression
        {
            get
            {
                return GetProject().CollectedData.GetDatabase().InsertInEscape(tableName) + "." + this.Name;
            }
            set
            {
                throw new ApplicationException("Expression can't be set");
            }
        }

        //Public properties

        //Public Methods





        public bool IsVarType(VariableType typeCombination)
        {
            return VariableBase.IsVarType(this.VarType, typeCombination);
        }

        public void SetNewRecordValue()
        {
        }

        //Public Methods
    }
}

 