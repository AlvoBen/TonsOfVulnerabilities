using System;
using System.Data;
using Epi.Data;
using Epi.Data.Services;
using EpiInfo.Plugin;

namespace Epi.Fields
{



    public abstract class InputFieldWithoutSeparatePrompt : FieldWithoutSeparatePrompt, IMirrorable, IInputField
    {
        //Private Class Members
        private bool isReadOnly = false;
        private bool isRequired = false;
        private bool shouldRepeatLast = false;
        private string tableName = string.Empty;
        private object currentRecordValueObject = null;
        private string _Namespace;
        //Private Class Members

        //Protected class members



        protected GenericDbColumnType genericDbColumnType = GenericDbColumnType.String;



        protected DbType dbColumnType = DbType.String;
        //Protected class members

        //Constructors




        public InputFieldWithoutSeparatePrompt(Page page)
            : base(page)
        {
            Construct();
        }





        public InputFieldWithoutSeparatePrompt(View view)
            : base(view)
        {
            Construct();
        }

        private void Construct()
        {
        }






        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            isRequired = (bool)row[ColumnNames.IS_REQUIRED];
            isReadOnly = (bool)row[ColumnNames.IS_READ_ONLY];
            shouldRepeatLast = (bool)row[ColumnNames.SHOULD_REPEAT_LAST];
            tableName = row[ColumnNames.DATA_TABLE_NAME].ToString();
        }

        public override void AssignMembers(Object field)
        {
            (field as InputFieldWithoutSeparatePrompt).isRequired = this.isRequired;
            (field as InputFieldWithoutSeparatePrompt).isReadOnly = this.isReadOnly;
            (field as InputFieldWithoutSeparatePrompt).shouldRepeatLast = this.shouldRepeatLast;
            (field as InputFieldWithoutSeparatePrompt).tableName = this.tableName;
            base.AssignMembers(field);
        }

        //Constructors

        //Public Properties




        public DataType DataType
        {
            get
            {
                return (DataType)AppData.Instance.FieldTypesDataTable.GetDataTypeByFieldTypeId((int)FieldType);
            }
            set
            {

                return;
            }
        }





        EpiInfo.Plugin.DataType EpiInfo.Plugin.IVariable.DataType
        {
            get
            {
                return (EpiInfo.Plugin.DataType)AppData.Instance.FieldTypesDataTable.GetDataTypeByFieldTypeId((int)FieldType);
            }
            set
            {
                return;
            }
        }    





        public VariableType VarType
        {
            get
            {
                return VariableType.DataSource;
            }
        }





        public VariableScope VariableScope
        {
            get
            {
                return VariableScope.DataSource;
            }

            set { return; }
        }




        public string Namespace { get { return this._Namespace; } set { this._Namespace = value; } }




        public virtual string CurrentRecordValueString
        {
            get
            {
                if (CurrentRecordValueObject == null) return string.Empty;
                else return CurrentRecordValueObject.ToString();
            }
            set
            {
                CurrentRecordValueObject = value;
            }
        }




        public QueryParameter CurrentRecordValueAsQueryParameter
        {
            get
            {
                object paramValue = DBNull.Value;
                if (!Util.IsEmpty(CurrentRecordValueObject))
                {
                    paramValue = this.CurrentRecordValueObject;
                }
                return new QueryParameter("@" + this.Name, this.dbColumnType, paramValue);
            }
        }





        public string Expression
        {
            get
            {
                return GetProject().CollectedData.GetDatabase().InsertInEscape(tableName) + "." + this.Name;
            }
            set
            {
                throw new ApplicationException("Expression can't be set");
            }
        }




        public string TableName
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
            }
        }




        public bool IsReadOnly
        {
            get
            {
                return (isReadOnly);
            }
            set
            {
                isReadOnly = value;
            }
        }




        public bool IsRequired
        {
            get
            {
                return (isRequired);
            }
            set
            {
                isRequired = value;
            }
        }




        public bool ShouldRepeatLast
        {
            get
            {
                return (shouldRepeatLast);
            }
            set
            {
                shouldRepeatLast = value;
            }
        }




        public virtual object CurrentRecordValueObject
        {
            get
            {
                return currentRecordValueObject;
            }
            set
            {
                currentRecordValueObject = value;
            }
        }




        public virtual string GetDbSpecificColumnType()
        {
            if (genericDbColumnType != GenericDbColumnType.Unknown)
            {
                return GetProject().CollectedData.GetDatabase().GetDbSpecificColumnType(genericDbColumnType);
            }
            else
            {
                throw new GeneralException("genericDbColumnType is not set: " + this.FieldType.ToString());
            }
        }

        public string Prompt { get { return this.Name; } set { return; } }
        //Public Properties

        //Public Methods





        public bool IsVarType(VariableType typeCombination)
        {
            return VariableBase.IsVarType(this.VarType, typeCombination);
        }





        public virtual string GetReflectedValue()
        {
            return this.CurrentRecordValueString;
        }

        public void SetNewRecordValue()
        {
            if (shouldRepeatLast == false)
            {
                if (genericDbColumnType == GenericDbColumnType.String)
                {
                    CurrentRecordValueString = string.Empty;
                }
                else
                {
                    CurrentRecordValueObject = null;
                }
            }
        }

        //Public Methods
    }
}

 