using System;
using System.Data;
using System.Drawing;
using System.Xml;

using Epi.Data.Services;

namespace Epi.Fields
{



 public class UniqueKeyField : PredefinedDataField, IMirrorable
 {
  //Constructors





  public UniqueKeyField(View view) : base(view)
  {
   Construct();
  }






        public UniqueKeyField(View view, XmlElement viewElement)
            : base(view)
        {
            this.viewElement = viewElement;
        }






        public UniqueKeyField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, fieldNode);
        }

  private void Construct()
  {
   this.Name = ColumnNames.UNIQUE_KEY;
            this.dbColumnType = DbType.Int32;
  }

  //Constructors

        //Private Data Members
        private XmlElement viewElement;
        private XmlNode fieldNode;
        // 

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.UniqueKey;
            }
        }




        public override string PromptText
        {
            get
            {
                return SharedStrings.UNIQUE_KEY;
            }
            set
            {
                throw new GeneralException("Prompt for Unique key is pre-defined");
            }
        }
        //Public Properties

        //Public Methods




  protected override void InsertField()
  {
   if (this.Id == 0)
   {
                this.Id = GetMetadata().CreateField(this);
   }
   else
   {
    throw new System.ApplicationException("Unique key field already exists");
   }
  }




  public override void Delete()
  {
   GetMetadata().DeleteField(this);
  }





        public virtual string GetReflectedValue()
        {
            return this.CurrentRecordValueString;
        }
        //




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

 }
}
 