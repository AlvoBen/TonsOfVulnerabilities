
//Imported Namespaces

using Epi;
using Epi.Data;
using Epi.Fields;

using System;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Xml;

//

namespace Epi.Fields
{



    public class GUIDField : TextField, IMirrorable
    {
        //Private Members

        private const bool isReadOnly = true;
        private const int maxLength = 38;

        private Guid currentValue;
        private XmlNode fieldNode;
        private int sourceFieldId;
        private XmlElement viewElement;
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;

        //

        //Constructors





        public GUIDField(Page page)
            : base(page)
        {
            Construct();
        }





        public GUIDField(View view)
            : base(view)
        {
            Construct();
        }






        public GUIDField(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
            this.Page = page;
            Construct();
        }






        public GUIDField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, fieldNode);
            Construct();
        }

        //

        //Public Properties




        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.GUID;
            }
        }




        public new string CurrentRecordValue
        {
            get
            {
                string RetVal = string.Empty;

                if (base.CurrentRecordValueObject == null)
                {
                    RetVal = Guid.NewGuid().ToString().Replace(StringLiterals.CURLY_BRACE_LEFT, string.Empty).Replace(StringLiterals.CURLY_BRACE_RIGHT, string.Empty);
                }
                else
                {
                    RetVal = base.CurrentRecordValueObject.ToString().Replace(StringLiterals.CURLY_BRACE_LEFT, string.Empty).Replace(StringLiterals.CURLY_BRACE_RIGHT, string.Empty);
                }

                return RetVal;
            }
            set
            {
                base.CurrentRecordValueObject = value;
            }
        }




        public new bool IsReadOnly
        {
            get
            {
                return (isReadOnly);
            }
        }




        public new int MaxLength
        {
            get
            {
                return (maxLength);
            }
        }




        public new int SourceFieldId
        {
            get
            {
                return sourceFieldId;
            }
            set
            {
                sourceFieldId = value;
            }
        }




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

        //

        //Public Methods





        public override string GetDbSpecificColumnType()
        {
            return base.GetDbSpecificColumnType();
        }





        public Guid NewGuid()
        {
            currentValue = Guid.NewGuid();
            CurrentRecordValue = currentValue.ToString();
            return currentValue;
        }





        public string SampleGuid()
        {
            return "7cb780b9-20dc-425c-88df-d6d27e13d566";
        }

        //

        //Private Methods




        private void Construct()
        {
            genericDbColumnType = GenericDbColumnType.Guid;
            this.dbColumnType = DbType.Guid;
            this.currentValue = Guid.NewGuid();
            base.CurrentRecordValue = currentValue.ToString().Replace(StringLiterals.CURLY_BRACE_LEFT, string.Empty).Replace(StringLiterals.CURLY_BRACE_RIGHT, string.Empty);
        }




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }





        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }



























































        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            if (row["SourceFieldId"].ToString().Length > 0)
            {
                sourceFieldId = Int32.Parse(row["SourceFieldId"].ToString());
            }
        }

        public GUIDField Clone()
        {
            GUIDField clone = (GUIDField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }





















        //
    }
}

 