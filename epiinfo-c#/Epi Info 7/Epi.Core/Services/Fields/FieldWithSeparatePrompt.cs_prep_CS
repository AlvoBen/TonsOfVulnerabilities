using System;
using System.Data;
using System.Drawing;
using Epi;

namespace Epi.Fields
{




    public abstract class FieldWithSeparatePrompt : RenderableField
    {
        //Private Class Members
        private double promptLeftPositionPercentage;
        private double promptTopPositionPercentage;
        private double promptHeightPositionPercentage;
        private double promptWidthPositionPercentage;
        //Private Class Members

        //Protected Class Members
        //Protected Class Members

        //Constructors




        public FieldWithSeparatePrompt(Page page)
            : base(page)
        {
        }





        public FieldWithSeparatePrompt(View view)
            : base(view)
        {
        }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            if (row["PromptTopPositionPercentage"] is DBNull)
            {
                promptTopPositionPercentage = (double)(row["ControlTopPositionPercentage"]);
            }
            else
            {
                promptTopPositionPercentage = (double)(row["PromptTopPositionPercentage"]);
            }

            if (row["PromptLeftPositionPercentage"] is DBNull)
            {
                promptLeftPositionPercentage = (double)(row["ControlLeftPositionPercentage"]);
            }
            else
            {
                promptLeftPositionPercentage = (double)(row["PromptLeftPositionPercentage"]);
            }
        }

        public override void AssignMembers(Object field)
        {
            (field as FieldWithSeparatePrompt).promptTopPositionPercentage = this.promptTopPositionPercentage;
            (field as FieldWithSeparatePrompt).promptLeftPositionPercentage = this.promptLeftPositionPercentage;
            base.AssignMembers(field);
        }

        //Constructors

        //Public Properties



        public double PromptLeftPositionPercentage
        {
            get
            {
                return (promptLeftPositionPercentage - (int)promptLeftPositionPercentage);
            }
            set
            {
                promptLeftPositionPercentage = value - (int)value;
            }
        }




        public double PromptTopPositionPercentage
        {
            get
            {
                return (promptTopPositionPercentage - (int)promptTopPositionPercentage);
            }
            set
            {
                promptTopPositionPercentage = value - (int)value;
            }
        }




        public double PromptWidthPositionPercentage
        {
            get
            {
                return (promptWidthPositionPercentage);
            }
            set
            {
                promptWidthPositionPercentage = value;
            }
        }




        public double PromptHeightPositionPercentage
        {
            get
            {
                return (promptHeightPositionPercentage);
            }
            set
            {
                promptHeightPositionPercentage = value;
            }
        }
        //Public Properties

        //Protected Properties


        //Protected Properties

        //Public Methods



        public void UpdatePromptPosition()
        {
            GetMetadata().UpdatePromptPosition(this);
        }

        //Public Methods

        //Protected Methods


        //Protected Methods

        //Private Methods


        //Provate Methods

        //Event Handlers

        //Event Handlers
    }
}

 