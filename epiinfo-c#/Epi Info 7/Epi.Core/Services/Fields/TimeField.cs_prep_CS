using System;
using System.ComponentModel;
using System.Data;
using System.Xml;
using Epi;
using Epi.Data;
using Epi.Data.Services;

namespace Epi.Fields
{



 public class TimeField : DateTimeField
 {
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;

  //Constructors





  public TimeField(Page page)
            : base(page)
  {
            construct();
  }





  public TimeField(View view)
            : base(view)
  {
            construct();
  }






        public TimeField(Page page, XmlElement viewElement)
            : base(page, viewElement)
        {
            construct();
        }






        public TimeField(View view, XmlNode fieldNode)
            : base(view, fieldNode)
        {
            construct();
        }

        private void construct()
        {
            genericDbColumnType = GenericDbColumnType.Time;
            this.dbColumnType = DbType.Time;
        }

  //Constructors

        //Public Properties
        public override string Watermark
        {
            get
            {
                System.Globalization.DateTimeFormatInfo formatInfo = System.Globalization.DateTimeFormatInfo.CurrentInfo;
                return formatInfo.LongTimePattern.ToUpper();
            }
        }




        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.Time;
            }
        }




        public sealed override string CurrentRecordValueString
        {
            get
            {
                if (CurrentRecordValueObject == null || CurrentRecordValueObject.Equals(DBNull.Value))
                {
                    return string.Empty;
                }
                else
                {
                    return ((DateTime)CurrentRecordValueObject).ToLongTimeString();
                }
            }
        }

        //Public Properties

        //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }




        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }

  //Private Methods
 }
}
 