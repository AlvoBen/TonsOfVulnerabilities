using System;
using System.Data;

using Epi.Data.Services;

namespace Epi.Fields
{



 public abstract class PredefinedColumn : GridColumnBase
    {
        //Private Members
        private string val = string.Empty;
        private string tableName = string.Empty;
        //Private Members

        //Constructors




  public PredefinedColumn(GridField grid) : base(grid)
  {
  }





        public PredefinedColumn(DataRow gridRow, GridField grid)
            : base(gridRow, grid)
  {
        }

        //Constructors

        //Public properties



        public DataType DataType
        {
            get
            {
                return (DataType)AppData.Instance.FieldTypesDataTable.GetDataTypeByFieldTypeId((int)GridColumnType);
            }
            set
            {
                this.DataType = value;
            }
        }



        public VariableType VarType
        {
            get
            {
                return VariableType.DataSource;
            }
        }




        public string TableName
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
            }
        }




        public abstract string PromptText { get {return _PromptText; } set{ _PromptText=value; } } string _PromptText;




        public string CurrentRecordValueString
        {
            get
            {
                return val;
            }
            set
            {
                val = value;
            }
        }




        public string Expression
        {
            get
            {
                return Grid.GetProject().CollectedData.GetDatabase().InsertInEscape(tableName) + "." + Name;
            }
            set
            {
                throw new ApplicationException("Expression can't be set");
            }
        }

        //Public properties

        //Public Methods





        public bool IsVarType(VariableType typeCombination)
        {
            return VariableBase.IsVarType(this.VarType, typeCombination);
        }
        //Public Methods
    }
}
 