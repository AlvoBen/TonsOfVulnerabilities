
using System;
using System.Data;
using System.Drawing;

using Epi.Data;
using Epi.Data.Services;

namespace Epi.Fields
{



 public class RecStatusColumn : PredefinedColumn, IMirrorable
 {
  //Private Members
  private string value = string.Empty;
        private string tableName = string.Empty;
  //Private Members

  //Constructors





        public RecStatusColumn(GridField grid)
            : base(grid)
  {
            construct();
  }





        public RecStatusColumn(DataRow gridRow, GridField grid)
            : base(gridRow, grid)
        {
            construct();
        }

        private void construct()
        {
            this.Name = ColumnNames.REC_STATUS;
            this.GridColumnType = MetaFieldType.RecStatus;
            genericDbColumnType = GenericDbColumnType.SByte;
        }

  //Constructors

        //Public Properties



        public override string PromptText
        {
            get
            {
                return SharedStrings.REC_STATUS;
            }
            set
            {
                throw new GeneralException("PromptText for Rec Status is pre-defined.");
            }
        }








        //Public Properties

  //protected methods




        protected override void InsertColumn()
        {
            if (this.Id == 0)
            {
                Id = GetMetadata().CreateGridColumn(this);
                base.OnColumnInserted();
            }
            else
            {
                throw new System.ApplicationException("Rec status field already exists");
            }
        }




        protected override void DeleteColumn()
        {
            GetMetadata().DeleteGridColumn(this);
        }




        protected override void UpdateColumn()
        {
            return;
        }

  //

        //




        public virtual string GetReflectedValue()
        {
            return this.CurrentRecordValueString;
        }
        //

 }
}

 