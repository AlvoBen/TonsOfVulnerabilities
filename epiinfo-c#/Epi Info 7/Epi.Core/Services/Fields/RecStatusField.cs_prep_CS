
using System;
using System.Data;
using System.Drawing;
using System.Xml;

using Epi.Data.Services;

namespace Epi.Fields
{



 public class RecStatusField : PredefinedDataField, IMirrorable
 {
  //Private Members
  private string value = string.Empty;
        private string tableName = string.Empty;
        private XmlElement viewElement;
        private XmlNode fieldNode;
  //Private Members

  //Constructors





  public RecStatusField(View view) : base(view)
  {
   Construct();
  }
  private void Construct()
  {
   this.Name = ColumnNames.REC_STATUS;
            base.CurrentRecordValueObject = Constants.NORMAL;
            this.dbColumnType = DbType.Int32;

  }






        public RecStatusField(View view, XmlElement viewElement)
            : base(view)
        {
            this.viewElement = viewElement;
        }






        public RecStatusField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, fieldNode);
        }

  //Constructors

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.RecStatus;
            }
        }




        public override string PromptText
        {
            get
            {
                return SharedStrings.REC_STATUS;
            }
            set
            {
                throw new GeneralException("Prompt is pre-defined");
            }
        }




        public override object CurrentRecordValueObject
        {
            get
            {
                if (base.CurrentRecordValueObject == null)
                    base.CurrentRecordValueObject = Constants.NORMAL;
                return base.CurrentRecordValueObject;
            }
            set
            {
                if (value == null)
                {
                    base.CurrentRecordValueObject = Constants.NORMAL;
                }
                else
                {
                    base.CurrentRecordValueObject = value;
                }
            }
        }




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }
        //Public Properties

  //Public Methods




  protected override void InsertField()
  {
   if (this.Id == 0)
   {
                this.Id = GetMetadata().CreateField(this);
   }
   else
   {
    throw new System.ApplicationException("Rec status field already exists");
   }
  }




  public override void Delete()
  {
            GetMetadata().DeleteField(this);
  }





        public virtual string GetReflectedValue()
        {
            return this.CurrentRecordValueString;
        }

  //


 }
}

 