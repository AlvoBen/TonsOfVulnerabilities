using System;
using System.Data;

using Epi;
using Epi.Data;

namespace Epi.Fields
{



    public abstract class TableBasedDropDownField : DropDownField, IFieldWithCheckCodeAfter, IFieldWithCheckCodeBefore, IFieldWithCheckCodeClick
 {
  //Private Class Members
  private bool isExclusiveTable;
  private string sourceTableName = string.Empty;
  private bool shouldSort = false;
        private DataTable codeTable;
  //Private Class Members

        //Protected Members
        protected string checkCodeAfter = string.Empty;
        protected string checkCodeBefore = string.Empty;
        protected string checkCodeClick = string.Empty;
        protected string codeColumnName = string.Empty;
        protected string textColumnName = string.Empty;
        //

  //Constructors




  public TableBasedDropDownField(Page page) : base(page)
  {
            construct();
  }





  public TableBasedDropDownField(View view) : base(view)
  {
            construct();
        }

        private void construct()
        {
            genericDbColumnType = GenericDbColumnType.String;
            this.dbColumnType = DbType.String;
        }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            isExclusiveTable = (bool)row[ColumnNames.IS_EXCLUSIVE_TABLE];
            sourceTableName = row[ColumnNames.SOURCE_TABLE_NAME].ToString();
            textColumnName = row[ColumnNames.TEXT_COLUMN_NAME].ToString();
            if (row[ColumnNames.CODE_COLUMN_NAME] != null)
            {
                codeColumnName = row[ColumnNames.CODE_COLUMN_NAME].ToString();
            }
            shouldSort = (bool)row[ColumnNames.SORT];
        }

        public TableBasedDropDownField Clone()
        {
            TableBasedDropDownField clone = (TableBasedDropDownField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }

        public DataTable GetDisplayTable(string predicate, string expression, string displayMember)
        {
            DataTable displayTable = new DataTable();

            if (string.IsNullOrEmpty(expression))
            {
                DataView dataView = new DataView(CodeTable);

                if (dataView.Count > 0)
                {
                    displayTable = dataView.ToTable(true, this.TextColumnName);
                }
                else
                {
                    displayTable = null;
                    return displayTable;
                }
            }
            else
            {
                EnumerableRowCollection query =
                    LINQ.where( codeTable.AsEnumerable().Field(predicate) == expression
                    ).select( codeTable.AsEnumerable())
;

                DataView view = query.AsDataView();
                displayTable = view.ToTable(true, this.TextColumnName);
            }

            displayTable.Columns[0].ColumnName = "Item";

            return displayTable;
        }

  //Constructors

  //Public Properties

        public DataTable CodeTable
        {
            get
            {
                if (codeTable == null)
                {
                    codeTable = GetSourceData();
                }

                return codeTable;
            }
        }




        public string CurrentRecordValue
        {
            get
            {
                if (base.CurrentRecordValueObject == null) return string.Empty;
                else return CurrentRecordValueObject.ToString();
            }
            set
            {
                base.CurrentRecordValueObject = value;
            }
        }




  public bool IsExclusiveTable
  {
   get
   {
    return (isExclusiveTable);
   }
   set
   {
    isExclusiveTable = value;
   }
  }




  public string SourceTableName
  {
   get
   {
    return sourceTableName;
   }
   set
   {
    sourceTableName = value;
   }
  }




        public virtual string CodeColumnName
  {
   get
   {
    return codeColumnName;
   }
   set
   {
    codeColumnName = value;
   }
  }




  public virtual string TextColumnName
  {
   get
   {
    return textColumnName.Trim();
   }
   set
   {
    textColumnName = value;
   }
  }




  public bool ShouldSort
  {
   get
   {
    return (shouldSort);
   }
   set
   {
    shouldSort = value;
   }
  }





        public string CheckCodeAfter
        {
            get
            {
                return (checkCodeAfter);
            }
            set
            {
                checkCodeAfter = value;
            }
        }



        public string CheckCodeBefore
        {
            get
            {
                return (checkCodeBefore);
            }
            set
            {
                checkCodeBefore = value;
            }
        }




        public string CheckCodeClick
        {
            get
            {
                return checkCodeClick;
            }
            set
            {
                checkCodeClick = value;
            }
        }

  //Public Properties

        //Private Methods





  public DataTable GetSourceData()
  {
   if (string.IsNullOrEmpty(SourceTableName))
   {
                return null;
   }

            DataTable dataTable = new DataTable();

            View view = this.view;
            Page page = ((RenderableField)this).Page;
            Epi.Data.Services.IMetadataProvider metadata = view.GetMetadata();

            string tableName = SourceTableName;

            Project project = this.GetProject();
            string filterExpression = string.Empty;

            if (project.CollectedData.TableExists(tableName) == false)
            {
                string separator = " - ";

                if (tableName.Contains(separator))
                {
                    string[] view_page = tableName.Replace(separator, "^").Split('^');
                    string viewName = view_page[0].ToString();
                    string pageName = view_page[1].ToString();
                    View targetView = project.Metadata.GetViewByFullName(viewName);

                    if (targetView == null) return null;

                    DataTable targetPages = project.Metadata.GetPagesForView(targetView.Id);
                    DataView dataView = new DataView(targetPages);

                    filterExpression = string.Format("Name = '{0}'", pageName);

                    DataRow[] pageArray = targetPages.Select(filterExpression);

                    if (pageArray.Length > 0)
                    {
                        int pageId = (int)pageArray[0]["PageId"];
                        tableName = viewName + pageId;
                    }
                }
            }

            if (this.GetProject().CollectedData.TableExists(tableName))
            {
                dataTable = GetProject().GetTableData(tableName);
            }

            return dataTable;
  }





        public DataTable GetSourceData(string columnNames)
        {
            if (string.IsNullOrEmpty(SourceTableName))
            {
                throw new System.ApplicationException(SharedStrings.SOURCE_TABLE_NOT_SET);
            }
            return GetProject().GetTableData(SourceTableName, columnNames);
        }
        //

        //Public Methods




        public override string GetDbSpecificColumnType()
        {
            return base.GetDbSpecificColumnType() + "(255)";
        }
        //Public Methods
    }
}
 