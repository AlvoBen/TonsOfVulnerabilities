//Namespaces

using System;
using System.Data;
using System.Xml;
using Epi;
using Epi.Fields;
using System.Drawing;
using System.ComponentModel;

// 

namespace Epi.Fields
{



    public class SingleLineTextField : TextField
    {
        //Private Data Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
        private System.ComponentModel.BackgroundWorker _updater = null;
        private System.ComponentModel.BackgroundWorker _inserter = null;

        // 

        //Constructors






        public SingleLineTextField(Page page)
            : base(page)
        {
        }






        public SingleLineTextField(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
            this.Page = page;
        }





        public SingleLineTextField(View view)
            : base(view)
        {
        }






        public SingleLineTextField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, fieldNode);
        }

        //Constructors

        //Public Methods

        public SingleLineTextField Clone()
        {
            SingleLineTextField clone = (SingleLineTextField) this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }

        //

        //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }





        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }

        //

        //Event Handlers
        //

        //Public Properties




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

        // 



    }
}

 