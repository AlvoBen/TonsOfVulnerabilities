using System;
using System.Data;
using System.Drawing;
using Epi.Data;
using Epi.Data.Services;

namespace Epi.Fields
{

    public delegate void FieldSaveCompleteHandler(Field field);




 public abstract class Field : IField
 {
  //Constructors




  private Field()
  {
  }





  public Field(View view)
  {
   this.view = view;
  }

  //Constructors

        //Events

        public event FieldSaveCompleteHandler FieldInsertComplete;
        public event FieldSaveCompleteHandler FieldUpdateComplete;

        //

        //Fields
        private string name = string.Empty;
  private int id;
        private string sourceTable;
        private Guid uniqueId = Guid.NewGuid();



        protected View view;
        public static int fieldsWaitingToUpdate;

        private bool isVisible = true;
        private bool isEnabled = true;
        private bool isHighlighted = false;
        private bool isRequired = false;

  //Fields

  //Public Properties




        public abstract MetaFieldType FieldType { get {return _FieldType; } set{ _FieldType=value; } } MetaFieldType _FieldType;





        public View GetView()
        {
            return view;
        }





        public View View
        {
   get
   {
    return view;
   }
   set
   {
    view = value;
   }
        }




  public int Id
  {
   get
   {
    return id;
   }
   set
   {
    id = value;
   }
  }



  public string Name
  {
   get
   {
    return name;
   }
   set
   {
    name = value;
   }
  }




        public string SourceTable
        {
            get
            {
                return sourceTable;
            }
            set
            {
                sourceTable = value;
            }
        }




        public Guid UniqueId
        {
            get
            {
                return uniqueId;
            }
            set
            {
                uniqueId = value;
            }
        }





        public bool IsEnabled { get { return this.isEnabled; } set { this.isEnabled = value; } }



        public bool IsVisible { get { return this.isVisible; } set { this.isVisible = value; } }



        public bool IsHighlighted { get { return this.isHighlighted; } set { this.isHighlighted = value; } }




        public bool IsRequired { get { return this.isRequired; } set { this.isRequired = value; } }


  //Public Properties

  //Public Methods





        public Project GetProject()
        {
            return this.GetView().GetProject();
        }





        public IMetadataProvider GetMetadata()
        {
            return GetProject().Metadata;
        }





  public virtual void LoadFromRow(DataRow row)
        {
            this.Id = (int)row[ColumnNames.FIELD_ID];
            this.Name = row[ColumnNames.NAME].ToString();
            this.SourceTable = row[ColumnNames.SOURCE_TABLE_NAME].ToString();
            if (row["UniqueId"] is Guid)
            {
                uniqueId = (Guid)row["UniqueId"];
            }
        }

        public virtual void AssignMembers(Object field)
        {
            (field as Field).Id = this.Id;
            (field as Field).Name = this.Name;
            (field as Field).SourceTable = this.SourceTable;
            (field as Field).uniqueId = this.uniqueId;
        }



        public virtual void Dispose()
        {
        }




  public virtual void SaveToDb()
  {
   if (Id == 0)
   {
    InsertField();
   }
   else
   {
    throw new System.ApplicationException("Can't update      field");
   }
  }



  public abstract void Delete();

  //Public Methods

  //Protected Methods




  protected void OnFieldAdded()
  {
   view.MustRefreshFieldCollection = true;
  }




  protected abstract void InsertField();

        protected void OnFieldInserted(Field f)
        {
            if (FieldInsertComplete != null)
            {
                FieldInsertComplete(f);
            }
        }

        protected void OnFieldUpdated(Field f)
        {
            if (FieldUpdateComplete != null)
            {
                FieldUpdateComplete(f);
            }
        }

  //Protected Methods
 }
}

 