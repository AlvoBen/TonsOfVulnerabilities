//Namespaces

using System;
using System.ComponentModel;
using System.Data;
using System.Xml;
using Epi;

// 

namespace Epi.Fields
{



 public class MirrorField : FieldWithSeparatePrompt, IDependentField
 {
  //Private Members



        private XmlElement viewElement;



        private XmlNode fieldNode;



        private int sourceFieldId;



        private IDataField sourceField;
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;

        //Private Members

  //Constructors




  public MirrorField(Page page) : base(page)
  {
  }





  public MirrorField(View view) : base(view)
  {
  }






        public MirrorField(Page page, XmlElement viewElement) : base(page)
        {
            this.viewElement = viewElement;
            this.Page = page;
        }






        public MirrorField(View view, XmlNode fieldNode) : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, this.fieldNode);
        }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            if (!string.IsNullOrEmpty(row["SourceFieldId"].ToString()))
            {
                sourceFieldId = Int32.Parse(row["SourceFieldId"].ToString());
            }
        }

        public MirrorField Clone()
        {
            MirrorField clone = (MirrorField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }

  //Constructors

        //Public Properties




        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.Mirror;
            }
        }




  public int SourceFieldId 
  {
   get
   {
    return sourceFieldId;
   }
   set
   {
    sourceFieldId = value;
   }
  }




  public IDataField SourceField 
  {
   get
   {
                View view = Page.GetView();
    if ((sourceField == null) && (this.SourceFieldId > 0))
    {
                    Field field = view.GetFieldById(this.SourceFieldId);
                    if (field is IDataField)
                    {
                        sourceField = (IDataField)field;
                    }
               }
    return (sourceField) ;
   }
  }

  //Public Properties

  //Protected Properties
  //Protected Properties

  //Public Methods




  public override void Delete()
  {
   GetMetadata().DeleteField(this);
            view.MustRefreshFieldCollection = true;
  }

  //Public Methods

  //protected Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }





        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }























































  //protected Methods

  //Event Handlers
  //Event Handlers




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

 }
}

 