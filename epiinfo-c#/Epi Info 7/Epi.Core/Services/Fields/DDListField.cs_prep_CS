//Namespaces

using System;
using System.ComponentModel;
using System.Data;
using System.Xml;
using Epi;
using System.Collections.Generic;
using Epi.Core;
using System.Windows.Forms;
//

namespace Epi.Fields
{



    public class DDListField : TableBasedDropDownField
    {
        //Private Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
        private string associatedFieldInformation = string.Empty;
        private string sourceTableName;
        private string fieldName;
        private DataTable codeTable;

        public Dictionary pairAssociated = new Dictionary();
        private Dictionary observerControls = new Dictionary();
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;

        //Private Members

        //Constructors





        public DDListField(Page page)
            : base(page)
        {
        }





        public DDListField(View view)
            : base(view)
        {
        }






        public DDListField(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
        }






        public DDListField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, this.fieldNode);
        }

        //Constructors

        //Public Events
        //

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.List;
            }
        }




        public String FieldName
        {
            get
            {
                return fieldName;
            }
        }




        public string AssociatedFieldInformation
        {
            get
            {
                return associatedFieldInformation;
            }
            set
            {
                associatedFieldInformation = value;
            }
        }




        public IControlFactory ControlFactory { get {return _ControlFactory; } set{ _ControlFactory=value; } } IControlFactory _ControlFactory;

        //Public Properties

        //Public Methods




        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            sourceTableName = row[ColumnNames.SOURCE_TABLE_NAME].ToString();
            string st = row[ColumnNames.RELATE_CONDITION].ToString();
            fieldName = row[ColumnNames.TEXT_COLUMN_NAME].ToString().Trim();
            string[] words = st.Split(',');
            foreach (string s in words)
            {
                if (!(String.IsNullOrEmpty(s)))
                {
                    string[] pair = s.Split(':');
                    this.pairAssociated.Add(pair[0], Convert.ToInt16(pair[1]));
                }
            }
        }




        public void LoadDDLCodeObservers()
        {
            if (this.observerControls == null || this.observerControls.Count == 0)
            {
                foreach (KeyValuePair pair in pairAssociated)
                {

                    int fieldId = pair.Value;
                    List assocCtrls = new List();
                    foreach (Epi.Fields.Field f in view.Fields)
                    {
                        if (f.Id == fieldId)
                        {
                            Epi.Fields.Field field = f;
                            assocCtrls = this.ControlFactory.GetAssociatedControls(field);
                            break;
                        }
                    }
                    if (assocCtrls.Count > 1)
                    {
                        foreach (Control c in assocCtrls)
                        {
                            if (c is TextBox)
                                this.observerControls.Add(pair.Key, c);
                        }
                    }
                }
            }
            if (sourceTableName.Length != 0 && codeTable == null)
            {
                codeTable = view.GetProject().CodeData.GetCodeTableData(sourceTableName);
                DataColumn[] pk =  CxNull;
                codeTable.PrimaryKey = pk;
            }
        }





        public void PublishObservercontrols(string pID)
        {
            DataRow foundrow = codeTable.Rows.Find(pID);

            for (int i = 1; i < codeTable.Columns.Count; i++)
            {
                try
                {
                    Control c = observerControls[codeTable.Columns[i].ColumnName];
                    ((TextBox)c).Text = foundrow[codeTable.Columns[i]].ToString();
                }
                catch (Exception ex)
                {

                    Logger.Log(DateTime.Now + ":  " + ex.Message);
                }
            }
        }

        //

        //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }





        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }























































        //

        //Event Handlers
        private void Combobox_SelectedIndexChanged(object sender, EventArgs e)
        {
        }
        //Event Handlers




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

    }
}
 