//Namespaces

using System;
using System.ComponentModel;
using System.Data;
using System.Text;
using System.Xml;
using Epi;
using System.Collections.Generic;
using Epi.Core;
using System.Windows.Forms;
//

namespace Epi.Fields
{



    public class DDLFieldOfCodes : TableBasedDropDownField
    {
        //Private Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
        private string associatedFieldInformation = string.Empty;
        private string sourceTableName;
        private string fieldName;
        private DataTable codeTable;
        private Dictionary pairAssociated = new Dictionary();
        private Dictionary observerControls = new Dictionary();
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;
        private string _cascadeFilter;

        //Private Members

        //Constructors





        public DDLFieldOfCodes(Page page)
            : base(page)
        {
        }





        public DDLFieldOfCodes(View view)
            : base(view)
        {
        }






        public DDLFieldOfCodes(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
        }






        public DDLFieldOfCodes(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, this.fieldNode);
        }

        //Constructors

        //Public Events
        //

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.Codes;
            }
        }




        public String FieldName
        {
            get
            {
                return fieldName;
            }
        }

        public String CascadeFilter
        {
            get
            {
                return _cascadeFilter;
            }
            set
            {
                _cascadeFilter = value;
            }
        }





        public string AssociatedFieldInformation
        {
            get
            {
                return associatedFieldInformation;
            }
            set
            {
                associatedFieldInformation = value;
                string[] pairValueString = associatedFieldInformation.Split(',');
                pairAssociated.Clear();

                foreach (string pair in pairValueString)
                {
                    if (!(String.IsNullOrEmpty(pair)))
                    {
                        string[] name_id = pair.Split(':');

                        string name = name_id[0];
                        int fieldId = Convert.ToInt16(name_id[1]);

                        pairAssociated.Add(name, fieldId);
                    }
                }
            }
        }




        public string RelateConditionString
        {
            get
            {
                string condition = string.Empty;

                foreach(System.Collections.Generic.KeyValuePair kvp in pairAssociated)
                {
                    condition = string.Format("{0}{1}:{2},", condition, kvp.Key, kvp.Value.ToString());
                }

                return condition.TrimEnd(',');
            }
        }

        public Dictionary PairAssociated
        {
            get { return pairAssociated; }
        }




        public IControlFactory ControlFactory { get {return _ControlFactory; } set{ _ControlFactory=value; } } IControlFactory _ControlFactory;

        //Public Properties

        //Public Methods

        public DDLFieldOfCodes Clone()
        {
            DDLFieldOfCodes clone = (DDLFieldOfCodes)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            sourceTableName = row[ColumnNames.SOURCE_TABLE_NAME].ToString();
            string relateCondition = row[ColumnNames.RELATE_CONDITION].ToString();
            fieldName = row[ColumnNames.TEXT_COLUMN_NAME].ToString().Trim();
            string[] words = relateCondition.Split(',');
            foreach (string word in words)
            {
                if (!(String.IsNullOrEmpty(word)))
                {
                    string[] pair = word.Split(':');
                    this.pairAssociated.Add(pair[0], Convert.ToInt16(pair[1]));
                }
            }
        }

        //

        //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }




        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }

        //

        //Event Handlers
        private void Combobox_SelectedIndexChanged(object sender, EventArgs e)
        {
        }
        //Event Handlers




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

    }
}
 