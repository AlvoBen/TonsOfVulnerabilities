using System;
using System.ComponentModel;
using System.Data;
using System.Xml;
using Epi.Data;
using Epi;

namespace Epi.Fields
{



    public class YesNoField : DropDownField, IFieldWithCheckCodeAfter, IFieldWithCheckCodeBefore
    {
        //Private Data Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;




        protected string checkCodeAfter = string.Empty;




        protected string checkCodeBefore = string.Empty;

        // 

        //Constructors




        public YesNoField(Page page) : base(page)
  {
   Construct();
  }






        public YesNoField(Page page, XmlElement viewElement)
            : base(page, viewElement)
        {
            this.viewElement = viewElement;
            this.Page = page;
            Construct();
        }





  public YesNoField(View view) : base(view)
  {
   Construct();
  }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
        }

        public YesNoField Clone()
        {
            YesNoField clone = (YesNoField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }






        public YesNoField(View view, XmlNode fieldNode) : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, fieldNode);
        }

  private void Construct()
  {
            genericDbColumnType = GenericDbColumnType.Byte;
            this.dbColumnType = DbType.Byte;
  }
  //Constructors

  //Public Events
  //

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.YesNo;
            }
        }




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }
        //Public Properties

        //Public Methods

  //

  //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }




        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }

  //

  //Event Handlers
  //

        //Members




        public string CheckCodeAfter
        {
            get
            {
                return (checkCodeAfter);
            }
            set
            {
                checkCodeAfter = value;
            }
        }



        public string CheckCodeBefore
        {
            get
            {
                return (checkCodeBefore);
            }
            set
            {
                checkCodeBefore = value;
            }
        }

        //

        public override string GetDbSpecificColumnType()
        {
            return GetProject().CollectedData.GetDatabase().GetDbSpecificColumnType(GenericDbColumnType.Byte);
        }
 }
}

 