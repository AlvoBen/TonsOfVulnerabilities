//Namespaces

using System;
using System.Data;
using System.Drawing;
using Epi;
using Epi.Data.Services;
using System.Windows.Forms;
//

namespace Epi.Fields
{




 public abstract class RenderableField : Field
 {
  //Private Members
  private Page page = null;
  private bool hasTabStop = false;
  private bool isControlResizable = true;
        protected bool insertStarted;
        private double tabIndex = 0;
  private double controlTopPositionPercentage = 0;
  private double controlLeftPositionPercentage = 0;
  private double controlHeightPercentage = 0;
  private double controlWidthPercentage = 0;
  private string promptText = string.Empty;
  private System.Drawing.Font promptFont = null;
  private System.Drawing.Font controlFont = null;




  private object tag = null;

  //

  //Constructors





  public RenderableField(Page page) : base(page.GetView())
  {
   this.page = page;
  }




  public RenderableField (View view) : base(view)
  {
  }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            int pageId = (int)row[ColumnNames.PAGE_ID];



            bool pageExistsInView = false;

            foreach (Page page in this.view.Pages)
            {
                if (pageId == page.Id)
                {
                    pageExistsInView = true;
                }
            }


            if (pageExistsInView)
            {
                Page = this.view.GetPageById(pageId);
            }



            else
            {
                Page = null;
            }

            controlHeightPercentage = (double)row["ControlHeightPercentage"];
            controlWidthPercentage = (double)row["ControlWidthPercentage"];
            controlLeftPositionPercentage = (double)row["ControlLeftPositionPercentage"];
            controlTopPositionPercentage = (double)row["ControlTopPositionPercentage"];
            promptText = row["PromptText"].ToString();
            tabIndex = Convert.ToDouble(row["TabIndex"]);
            hasTabStop = (bool)row["HasTabStop"];
            controlFont = new System.Drawing.Font(row["ControlFontFamily"].ToString(), Float.Parse(row["ControlFontSize"].ToString()), (FontStyle)System.Enum.Parse(typeof(FontStyle), row["ControlFontStyle"].ToString(), true));
            promptFont = GetMetadata().ExtractPromptFont(row);
        }


        public override void AssignMembers(Object field)
        {
            (field as RenderableField).Page = this.Page;
            (field as RenderableField).controlHeightPercentage = this.controlHeightPercentage;
            (field as RenderableField).controlWidthPercentage = this.controlWidthPercentage;
            (field as RenderableField).controlLeftPositionPercentage = this.controlLeftPositionPercentage;
            (field as RenderableField).controlTopPositionPercentage = this.controlTopPositionPercentage;

            (field as RenderableField).promptText = this.promptText;
            (field as RenderableField).tabIndex = this.tabIndex;
            (field as RenderableField).hasTabStop = this.hasTabStop;
            (field as RenderableField).controlFont = this.controlFont;
            (field as RenderableField).promptFont = this.promptFont;

            base.AssignMembers(field);
        }

  //Constructors

  //Public Properties

  public Control Control { get {return _Control; } set{ _Control=value; } } Control _Control;




  public Page Page
  {
   get
   {
    return this.page;
   }
   set
   {
    this.page = value;
   }
  }




  public Font PromptFont
  {
   get
   {
    if (promptFont == null)
    {
     return new System.Drawing.Font(FontFamily.GenericSansSerif, 8.5f);
    }
    else
    {
     return promptFont;
    }
   }
   set
   {
    promptFont = value;
   }
  }




  public Font ControlFont
  {
   get
   {
    if (controlFont == null)
    {
     return new System.Drawing.Font(FontFamily.GenericSansSerif, 8.5f);
    }
    else
    {
     return controlFont;
    }
   }
   set
   {
    controlFont = value;
   }
  }




  public bool HasTabStop
  {
   get
   {
    return hasTabStop;
   }
   set
   {
    hasTabStop = value;
   }
  }




        public double TabIndex
  {
   get
   {
    return tabIndex;
   }
   set
   {
    tabIndex = value;
   }
  }




        public double ControlTopPositionPercentage
  {
   get
   {
                return controlTopPositionPercentage - (int)controlTopPositionPercentage;
   }
   set
   {
                controlTopPositionPercentage = value - (int)value;
   }
  }




        public double ControlLeftPositionPercentage
  {
   get
   {
                return controlLeftPositionPercentage - (int)controlLeftPositionPercentage;
   }
   set
   {
                controlLeftPositionPercentage = value - (int)value;
   }
  }




        public double ControlHeightPercentage
  {
   get
   {
    return controlHeightPercentage;
   }
   set
   {
    controlHeightPercentage = value;
   }
  }




  public double ControlWidthPercentage
  {
   get
   {
    return controlWidthPercentage;
   }
   set
   {
    controlWidthPercentage = value;
   }
  }




        public string PromptText
  {
   get
   {
    return promptText;
   }
   set
   {
    promptText = value;
   }
  }





  public object Tag
  {
   get
   {
    return tag;
   }
   set
   {
    tag = value;
   }
  }

  //

  //Protected Properties




        public bool IsControlResizable
  {
   get
   {
    return isControlResizable;
   }
   set
   {
    isControlResizable = value;
   }
  }
  //Protected Properties

  //Public Methods




  public override void SaveToDb()
  {
   if (Id == 0)
   {
                InsertField();
   }
   else
   {
    UpdateField();
   }
  }




        public void UpdateControlPosition()
        {
            GetMetadata().UpdateControlPosition(this);
        }




        public void UpdateControlSize()
        {
            GetMetadata().UpdateControlSize(this);
        }

  //

  //Protected Methods




  protected abstract void UpdateField();

  //

  //Private Methods

  //Private Methods

 }
}
 