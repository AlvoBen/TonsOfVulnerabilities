//Namespaces

using System;
using System.Data;
using System.Xml;
using System.Collections.Generic;
using Epi;
using Epi.Collections;

// 

namespace Epi.Fields
{



    public class GridField : FieldWithSeparatePrompt
    {
        //Private Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
        private List columns;
        private DataTable dataSource;
        //Private Members

        //Public Events
        //

        //Constructors





        public GridField(Page page)
            : base(page)
        {
        }





        public GridField(View view)
            : base(view)
        {
        }






        public GridField(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
            this.Page = page;
        }






        public GridField(View view, XmlNode fieldNode)
            : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, this.fieldNode);
        }

        public GridField Clone()
        {
            GridField clone = (GridField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }
        //Constructors

        //Protected Properties
        //Protected Properties

        //Public Methods




        public override void Delete()
        {
            GetMetadata().DeleteField(this);
            view.MustRefreshFieldCollection = true;
        }






        public GridColumnBase CreateGridColumn(MetaFieldType columnType)
        {
            switch (columnType)
            {
                case MetaFieldType.UniqueKey:
                    return new UniqueKeyColumn(this);
                case MetaFieldType.RecStatus:
                    return new RecStatusColumn(this);
                case MetaFieldType.ForeignKey:
                    return new ForeignKeyColumn(this);
                case MetaFieldType.Text:
                    return new TextColumn(this);
                case MetaFieldType.PhoneNumber:
                    return new PhoneNumberColumn(this);
                case MetaFieldType.Date:
                    return new DateColumn(this);
                case MetaFieldType.Number:
                    return new NumberColumn(this);
                default:
                    return new TextColumn(this);
            }
        }

        public void SetNewRecordValue()
        {
            if (DataSource is DataTable)
            {
                foreach (DataRow row in ((DataTable)DataSource).Rows)
                {
                    if (row.RowState != DataRowState.Deleted)
                    {
                        foreach (GridColumnBase column in Columns)
                        {
                            if (column is GridColumnBase && ((GridColumnBase)column).ShouldRepeatLast == false)
                            {
                                row[column.Name] = DBNull.Value;
                            }
                        }
                    }
                }
                DataSource.AcceptChanges();
            }
        }

        //

        //Public Properties




        public string TableName
        {
            get
            {
                if (this.Page == null)
                {
                    return null;
                }
                else
                {
                    return this.Page.TableName + this.Name;
                }
            }
        }




        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.Grid;
            }
        }




        public List Columns
        {
            get
            {
                if (this.columns == null && !this.Id.Equals(0))
                {
                    this.columns = GetMetadata().GetGridColumnCollection(this);
                    if (this.columns.Count.Equals(0))
                    {
                        UniqueRowIdColumn uniqueRowIdColumn = new UniqueRowIdColumn(this);
                        RecStatusColumn recStatusColumn = new RecStatusColumn(this);
                        ForeignKeyColumn foreignKeyColumn = new ForeignKeyColumn(this);
                        GlobalRecordIdColumn globalRecordIdColumn = new GlobalRecordIdColumn(this);

                        uniqueRowIdColumn.SaveToDb();
                        recStatusColumn.SaveToDb();
                        foreignKeyColumn.SaveToDb();
                        globalRecordIdColumn.SaveToDb();

                        columns = GetMetadata().GetGridColumnCollection(this);
                    }
                }
                return this.columns;
            }
            set
            {
                this.columns = value;
            }
        }




        public DataTable DataSource
        {
            get
            {
                return dataSource;
            }
            set
            {
                dataSource = value;
            }
        }




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }
        //

        //Protected Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);

            if (columns != null)
            {
                foreach (GridColumnBase column in columns)
                {
                    column.Id = 0;
                    ((Epi.Fields.Field)(column.Grid)).Id = this.Id;
                }
            }

            SaveColumnsToDb();
            base.OnFieldAdded();
        }




        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
            SaveColumnsToDb();
        }
        //Protected Methods

        //Private Methods

        private void SaveColumnsToDb()
        {
            foreach (GridColumnBase gridColumn in Columns)
            {
                gridColumn.SaveToDb();
            }
        }

        //Private Methods

        //Event Handlers
        //
    }
}

 