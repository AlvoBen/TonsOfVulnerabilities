using System;
using System.ComponentModel;
using System.Data;
using System.Xml;
using Epi;
using Epi.Data;

namespace Epi.Fields
{



 public class PhoneNumberField : InputTextBoxField, IPatternable
 {
  //Private Members

        private XmlElement viewElement;
        private XmlNode fieldNode;
  private string pattern = string.Empty;
        private BackgroundWorker _updater;
        private BackgroundWorker _inserter;

  //

  //Constructors





  public PhoneNumberField(Page page) : base(page)
  {
   Construct();
  }





  public PhoneNumberField(View view) : base(view)
  {
   Construct();
  }






        public PhoneNumberField(Page page, XmlElement viewElement)
            : base(page)
        {
            this.viewElement = viewElement;
            this.Page = page;
        }






        public PhoneNumberField(View view, XmlNode fieldNode) : base(view)
        {
            this.fieldNode = fieldNode;
            this.view.Project.Metadata.GetFieldData(this, this.fieldNode);
        }

  private void Construct()
  {
            genericDbColumnType = GenericDbColumnType.String;
            this.dbColumnType = DbType.String;
  }





        public override void LoadFromRow(DataRow row)
        {
            base.LoadFromRow(row);
            pattern = row[ColumnNames.PATTERN].ToString();
        }

        public PhoneNumberField Clone()
        {
            PhoneNumberField clone = (PhoneNumberField)this.MemberwiseClone();
            base.AssignMembers(clone);
            return clone;
        }

        //Constructors

  //Public Events
  //

        //Public Properties



        public override MetaFieldType FieldType
        {
            get
            {
                return MetaFieldType.PhoneNumber;
            }
        }




        public string CurrentRecordValue
        {
            get
            {
                if (base.CurrentRecordValueObject == null) return string.Empty;
                else return CurrentRecordValueObject.ToString();
            }
            set
            {
                base.CurrentRecordValueObject = value;
            }
        }




        public XmlElement ViewElement
        {
            get
            {
                return viewElement;
            }
            set
            {
                viewElement = value;
            }
        }

        //Public Properties

  //IPatternableField Members




  public string Pattern
  {
   get
   {
    return (pattern);
   }
   set
   {
    pattern = value;
   }
  }

  //

  //Public Methods




        public override string GetDbSpecificColumnType()
        {
            return base.GetDbSpecificColumnType() + "(20)";
        }

  //Public Methods

  //Private Methods




        protected override void InsertField()
        {
            this.Id = GetMetadata().CreateField(this);
            base.OnFieldAdded();
        }





        protected override void UpdateField()
        {
            GetMetadata().UpdateField(this);
        }























































  //Private Methods

  //Event Handlers

  //Event Handler
 }
}
 