using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Data;
using Epi.Collections;

namespace Epi
{



    public abstract class ModuleBase : IModule
    {
        //Private Attributes






        protected IMemoryRegion memoryRegion;
        //Private Attributes

        //Protected Attributes



        protected ICommandLine commandLine;




  protected IModuleManager moduleManager;
        //Protected Attributes

        //Constructors




        public ModuleBase()
  {
            memoryRegion = new MemoryRegion();
        }
        //

        //Public Properties

        //Public Properties

        //Public Methods




        public IMemoryRegion GetMemoryRegion()
        {
            /*
            if (Epi.Core.Interpreter.Reduction.MemoryRegion == null)
            {
                Epi.Core.Interpreter.Reduction.MemoryRegion = new MemoryRegion();
            }

            return Epi.Core.Interpreter.Reduction.MemoryRegion;*/

            return null;
        }
        //Public Methods

        //Protected IModule Implementation






        protected virtual void Load(IModuleManager moduleManager, ICommandLine commandLine)
        {
            this.moduleManager = moduleManager;
            this.commandLine = commandLine;
        }




  protected void OnLoaded()
  {


   if (this.moduleManager != null)
   {
    this.moduleManager.Attach(this);
   }
  }




  protected abstract void Unload();




  protected void OnUnloaded()
  {



   if (this.moduleManager != null)
   {
    this.moduleManager.Detach(this);


                this.moduleManager = null;
   }
        }




        protected abstract string ModuleName { get {return _ModuleName; } set{ _ModuleName=value; } } string _ModuleName;




        public virtual void Dispose()
        {

            this.OnUnloaded();
        }
        //

        //Explicit IProjectManager Implementation


        //

        //Public Service Provider Implementation













        [System.Diagnostics.DebuggerStepThrough()]
  public virtual object GetService(Type serviceType)
  {
   object service = null;

            if (serviceType == this.GetType())
            {
                return this;
            }
            else if (serviceType == typeof(IModule))
            {
                return this;
            }
            else if (serviceType == typeof(ICommandLine))
            {
                return this.commandLine;
            }

            else if (this.moduleManager != null)
            {
                service = this.moduleManager.GetService(serviceType);
            }

   return service;
        }
        //

        //Project Management





















        public IModuleManager ModuleManager
        {
            get
            {
                return moduleManager;
            }
        }




        public ICommandLine CommandLine
        {
            get
            {
                return commandLine;
            }
        }








        //

        //Explicit IModule Routing


        string IModule.ModuleName
        {
            get
            {
                return this.ModuleName;
            }
        }

        void IModule.Load(IModuleManager moduleManager, ICommandLine commandLine)
  {
            this.Load(moduleManager, commandLine);
  }

  void IModule.Unload()
  {
   this.Unload();
        }
        //

    }
}

 