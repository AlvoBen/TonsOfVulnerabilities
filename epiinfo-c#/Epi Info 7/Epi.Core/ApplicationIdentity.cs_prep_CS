using System;
using Epi;
using System.Reflection;

namespace Epi
{



    public class ApplicationIdentity
    {
        readonly Version assemblyVersion;
        readonly Version assemblyInformationalVersion;
        readonly Version assemblyFileVersion;
        readonly string company;
        readonly string product;
        readonly string copyright;
        readonly string releaseDate;





        public ApplicationIdentity(Assembly a)
        {
            assemblyVersion = a.GetName().Version;

            object[] customAttributes;

            customAttributes = a.GetCustomAttributes(typeof(AssemblyInformationalVersionAttribute), false);
            if (customAttributes.Length == 1)
            {
                assemblyInformationalVersion = new Version(((AssemblyInformationalVersionAttribute)customAttributes[0]).InformationalVersion);
            }

            customAttributes = a.GetCustomAttributes(typeof(AssemblyFileVersionAttribute), false);
            if (customAttributes.Length == 1)
            {
                assemblyFileVersion = new Version(((AssemblyFileVersionAttribute)customAttributes[0]).Version);
            }

            customAttributes = a.GetCustomAttributes(typeof(AssemblyProductAttribute), false);
            if (customAttributes.Length == 1)
            {
                product = ((AssemblyProductAttribute)customAttributes[0]).Product;
            }

            customAttributes = a.GetCustomAttributes(typeof(AssemblyCompanyAttribute), false);
            if (customAttributes.Length == 1)
            {
                company = ((AssemblyCompanyAttribute)customAttributes[0]).Company;
            }

            customAttributes = a.GetCustomAttributes(typeof(AssemblyCopyrightAttribute), false);
            if (customAttributes.Length == 1)
            {
                copyright = ((AssemblyCopyrightAttribute)customAttributes[0]).Copyright;
            }

            customAttributes = a.GetCustomAttributes(typeof(AssemblyReleaseDateAttribute), false);
            if (customAttributes.Length == 1)
            {
                releaseDate = ((AssemblyReleaseDateAttribute)customAttributes[0]).ReleaseDate;
            }

        }
        //Public Properties



        public string Version
        {
            get
            {
                return assemblyInformationalVersion.ToString();
            }
        }




        public Version VersionObject
        {
            get
            {
                return assemblyInformationalVersion;
            }
        }




        public string Build
        {
            get
            {
                return assemblyVersion.Build.ToString();
            }
        }




        public string Revision
        {
            get
            {
                return assemblyVersion.Revision.ToString();
            }
        }































        public string VersionReleaseDate
        {
            get { return releaseDate; }
        }




        public string AppName
        {
            get
            {
                return product;
            }
        }



        public string SuiteName
        {
            get
            {
                return product;
            }
        }




        public string Company
        {
            get
            {
                return company;
            }
        }




        public string Copyright
        {
            get
            {
                return copyright;
            }
        }

        //Public Properties
    }



    [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
    public class AssemblyReleaseDateAttribute : Attribute
    {
        private string releaseDate;



        public string ReleaseDate
        {
            get { return releaseDate; }
            set { releaseDate = value; }
        }





        public AssemblyReleaseDateAttribute(string releaseDate)
        {
            this.releaseDate = releaseDate;
        }
    }
}

 