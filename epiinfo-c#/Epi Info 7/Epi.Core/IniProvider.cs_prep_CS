using System;
using System.Collections.Generic;
using System.Text;

namespace Epi
{

    class InvalidInputException : System.Exception { }
    class NonExistingKeyException : System.Exception { }




    public class IniProvider
    {



  System.Collections.Hashtable Keys;



  System.Collections.Hashtable Values;




  public IniProvider()
  {
   Keys = new System.Collections.Hashtable();
   Values = new System.Collections.Hashtable();
  }





  public IniProvider(System.IO.TextReader tr)
  {
   Keys = new System.Collections.Hashtable();
   Values = new System.Collections.Hashtable();
   Parse(tr);
  }







  public string GetValue(string Key, string ValueName)
  {
   System.Collections.Hashtable KeyTable = (System.Collections.Hashtable)Keys[Key];
   if(KeyTable!=null)
   {
    if(KeyTable.ContainsKey(ValueName))
    {
     return (string)KeyTable[ValueName];
    }
    else
    {
                    return null;
    }

   }
   else
   {
                return null;
   }
  }






  public string GetValue(string ValueName)
  {
   if(Values.ContainsKey(ValueName))
   {
    return (string)Values[ValueName];
   }
   else
   {
                return null;
   }
  }






  bool KeyExists(string KeyName)
  {
   return Keys.Contains(KeyName);
  }







  bool ValueExists(string KeyName,string ValueName)
  {
   System.Collections.Hashtable KeyTable = (System.Collections.Hashtable)Keys[KeyName];
   if(KeyTable!=null)
   {
    return KeyTable.Contains(ValueName);
   }
   else
   {
                return false;
   }
  }






  bool ValueExists(string ValueName)
  {
   return Values.Contains(ValueName);
  }







  public void SetValue(string Key, string ValueName, string Value)
  {
   System.Collections.Hashtable KeyTable = (System.Collections.Hashtable)Keys[Key];
   if(KeyTable!=null)
   {
    KeyTable[ValueName] = Value;
   }
   else
   {
                throw new NonExistingKeyException();
   }
  }






  public void SetValue(string ValueName, string Value)
  {
   Values[ValueName] = Value;
  }






  public void AddKey(string NewKey)
  {
   System.Collections.Hashtable New = new System.Collections.Hashtable();
   Keys[NewKey] = New;
  }





  public void Save(System.IO.TextWriter sw)
  {
   System.Collections.IDictionaryEnumerator Enumerator = Values.GetEnumerator();

   sw.WriteLine("; The values in      group");
   while(Enumerator.MoveNext())
   {
    sw.WriteLine("{0} = {1}",Enumerator.Key,Enumerator.Value);
   }
   sw.WriteLine("; This is where the keys begins");
   Enumerator = Keys.GetEnumerator();
   while(Enumerator.MoveNext())
   {
    System.Collections.IDictionaryEnumerator Enumerator2nd = ((System.Collections.Hashtable)Enumerator.Value).GetEnumerator();
    sw.WriteLine("[{0}]",Enumerator.Key);
    while(Enumerator2nd.MoveNext())
    {
     sw.WriteLine("{0} = {1}",Enumerator2nd.Key,Enumerator2nd.Value);
    }
   }
  }






  private void Parse(System.IO.TextReader sr)
  {
   System.Collections.Hashtable CurrentKey=null;
   string Line,ValueName,Value;
   while (null != (Line = sr.ReadLine()))
   {
    int j,i=0;
    while(Line.Length>i && Char.IsWhiteSpace(Line,i)) i++;
    if(Line.Length<=i)
     continue;
    if(Line[i] == ';')
     continue;
    if(Line[i] == '[')
    {
     string KeyName;
     j = Line.IndexOf(']',i);
     if(j==-1)
      throw new InvalidInputException();

     KeyName = Line.Substring(i+1,j-i-1).Trim();

     if(!Keys.ContainsKey(KeyName))
     {
      this.AddKey(KeyName);
     }
     CurrentKey = (System.Collections.Hashtable)Keys[KeyName];
     while(Line.Length>++j && Char.IsWhiteSpace(Line,j));
     if(Line.Length>j)
     {
      if (Line[j]!=';')
       throw new InvalidInputException();
     }
     continue;
    }

    j = Line.IndexOf('=',i);
    if(j==-1)
     throw new InvalidInputException();
                ValueName = Line.Substring(i,j-i).Trim();
    if((i = Line.IndexOf(';',j+1))!=-1)
     Value = Line.Substring(j+1,i-(j+1)).Trim();
    else
     Value = Line.Substring(j+1).Trim();
    if(CurrentKey != null)
    {
     CurrentKey[ValueName] = Value;
    }
    else
    {
     Values[ValueName] = Value;
    }
   }
  }
    }
}

 