using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Collections;

namespace Epi.Data.Office
{



    public class JetQuery: Query
    {

        //Constructors




            public JetQuery(string queryStatement)
                : base(queryStatement)
            {
                this.Parameters = new List();
            }
        //
        //Private Members
            private StringBuilder queryResult = new StringBuilder();
        //
        //Private Methods
        /*
        private string getSwitchStatement(IVariable variable, IVariable assignToVariable, List recodeRanges)
            {
                StringBuilder queryResult = new StringBuilder();
                string singlequote = string.Empty;
                if (variable.DataType == DataType.Text)
                    singlequote = "'";
                queryResult.Append("SWITCH(");
                for (int i = 0; i < recodeRanges.Count ; i++)
                {
                    switch (recodeRanges[i].RecodeType)
                    {
                        case "RecodeA":

                            queryResult.Append( "(" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote + " AND (" + variable.Name + ") <= " + singlequote + recodeRanges[i].Value2 + singlequote
                                + " , '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeB":

                            queryResult.Append("(" + variable.Name + ") = " + singlequote + recodeRanges[i].Value1 + singlequote
                                + " , '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeC":

                            queryResult.Append("(" + variable.Name + ") " + GetBooleanExpr(recodeRanges[i].Value1)
                                + " , '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeD":

                            queryResult.Append("(" + variable.Name + ") <= " + singlequote + recodeRanges[i].Value2 + singlequote
                                + " , '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeE":

                            queryResult.Append("(" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote
                                + " , '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeF":

                            queryResult.Append("");
                            break;
                        case "RecodeG":

                            queryResult.Append(" true, '" + recodeRanges[i].EqualValue + "', ");
                            break;
                        case "RecodeH":

                            queryResult.Append("(" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote + " AND (" + variable.Name + ")<=" + singlequote + recodeRanges[i].Value2 + singlequote
                                + " , " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        case "RecodeI":

                            queryResult.Append("(" + variable.Name + ") = " + singlequote + recodeRanges[i].Value1 + singlequote
                                + " , " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        case "RecodeJ":

                            queryResult.Append("(" + variable.Name + ") = " + Boolean.Parse(recodeRanges[i].Value1)
                                + " , " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        case "RecodeK":

                            queryResult.Append("(" + variable.Name + ") < " + singlequote + recodeRanges[i].Value2 + singlequote
                                + " , " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        case "RecodeL":

                            queryResult.Append("(" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote
                                + " , " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        case "RecodeM":

                            queryResult.Append("");
                            break;
                        case "RecodeN":

                            queryResult.Append(" true, " + GetBooleanExpr(recodeRanges[i].EqualValue));
                            break;
                        default:

                            break;
                    }
                }
                string s = queryResult.ToString();
                s = s.Substring(0, s.Length - 2) + ")";
                return s;
            }

        private string getExpressionStatement(IVariable variable, IVariable assignToVariable, List recodeRanges)
        {
            StringBuilder queryResult = new StringBuilder();
            string singlequote = string.Empty;
            if (variable.DataType == DataType.Text)
                singlequote = "'";
            queryResult.Append("(");
            for (int i = 0; i < recodeRanges.Count; i++)
            {
                switch (recodeRanges[i].RecodeType)
                {
                    case "RecodeA":

                        queryResult.Append("((" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote + " AND (" + variable.Name + ") <= " + singlequote + recodeRanges[i].Value2 + singlequote
                            + ") OR " );
                        break;
                    case "RecodeB":

                        queryResult.Append("((" + variable.Name + ") = " + singlequote + recodeRanges[i].Value1 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeC":

                        queryResult.Append("((" + variable.Name + ") " + GetBooleanExpr(recodeRanges[i].Value1)
                            + ") OR ");
                        break;
                    case "RecodeD":

                        queryResult.Append("((" + variable.Name + ") <= " + singlequote + recodeRanges[i].Value2 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeE":

                        queryResult.Append("((" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeF":

                        queryResult.Append("");
                        break;
                    case "RecodeG":


                        break;
                    case "RecodeH":

                        queryResult.Append("((" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote + " AND (" + variable.Name + ")<=" + singlequote + recodeRanges[i].Value2 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeI":

                        queryResult.Append("((" + variable.Name + ") = " + singlequote + recodeRanges[i].Value1 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeJ":

                        queryResult.Append("((" + variable.Name + ") = " + Boolean.Parse(recodeRanges[i].Value1)
                            + ") OR ");
                        break;
                    case "RecodeK":

                        queryResult.Append("((" + variable.Name + ") < " + singlequote + recodeRanges[i].Value2 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeL":

                        queryResult.Append("((" + variable.Name + ") > " + singlequote + recodeRanges[i].Value1 + singlequote
                            + ") OR ");
                        break;
                    case "RecodeM":


                        break;
                    case "RecodeN":

                        queryResult.Append("(True) OR ");
                        break;
                    default:

                        break;
                }
            }
            string s = queryResult.ToString();
            s = s.Substring(1, s.Length - 4) ;
            return s;
        }*/













        //
        //Public Methods
        /*    /// 






        public override string GetRecodeCaseSubQuery(IVariable variable, IVariable assignToVariable, List recodeRanges)
        {
            int iCount = recodeRanges.Count;
            int iGroup = iCount / 10;
            int iRemainder = iCount % 10;
            List sublistRange = new List();
            List  listRange = new List();
            int j;
            for (int i = 0; i <= iCount-1; i++)
            {
                j = i % 10;
                if (j == 9)
                {
                    sublistRange.Add(recodeRanges[i]);
                    listRange.Add(sublistRange);
                    sublistRange = new List();
                }
                else
                {
                    sublistRange.Add(recodeRanges[i]);
                    if (i == iCount-1)
                    {
                        listRange.Add(sublistRange);

                        break;
                    }
                }
            }
            StringBuilder recodeQuery = new StringBuilder();
            queryResult.Append("SWITCH(");
            string subExpression;
            string subSwitchQuery;
            for (int i = 0; i <= listRange.Count-1; i++)
            {


                subExpression = getExpressionStatement(variable, assignToVariable, listRange[i]);
                queryResult.Append(subExpression + ",");
                subSwitchQuery = getSwitchStatement(variable, assignToVariable, listRange[i]);
                queryResult.Append(subSwitchQuery + ",");
            }

            string s = queryResult.ToString();
            s = s.Substring(0, s.Length - 1) + ")";
            return s;
            }*/






            public override string GetInsertValue(string pvalues)
            {
                return string.Empty;
            }
        //
    }
}

 