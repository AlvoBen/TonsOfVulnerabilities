using System;
using System.IO;
using System.Xml;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using Epi.Collections;
using System.Collections.Generic;
using System.Collections;
using System.Text.RegularExpressions;
using System.Threading;
using Epi;
using Epi.Data;

namespace Epi.Data.Office
{



    public abstract class OleDbDatabase : DbDriverBase
    {
        private bool isBulkOperation;
        private DataTable schemaCols;

        //Constructor




        public OleDbDatabase(){ }

        //Constructors




        public override ProjectPermissions GetPermissions()
        {
            return null;
        }

        //Native Driver Implementation




        protected virtual OleDbParameter ConvertToNativeParameter(QueryParameter parameter)
        {
            if (parameter.DbType.Equals(DbType.Guid))
            {
                parameter.Value = new Guid(parameter.Value.ToString());
            }

            OleDbParameter param = new OleDbParameter
                (
                    parameter.ParameterName,
                    CovertToNativeDbType(parameter.DbType),
                    parameter.Size,
                    parameter.Direction,
                    parameter.IsNullable,
                    parameter.Precision,
                    parameter.Scale,
                    parameter.SourceColumn,
                    parameter.SourceVersion,
                    parameter.Value
                );

            return param;
        }





        protected virtual OleDbConnection GetNativeConnection()
        {
            return GetNativeConnection(connectionString);
        }





        protected virtual OleDbConnection GetNativeConnection(string connectionString)
        {
            OleDbConnectionStringBuilder oleDBCnnStrBuilder = new OleDbConnectionStringBuilder(connectionString);
            oleDBCnnStrBuilder.Provider = "Microsoft.Jet.OLEDB.4.0";

            return new OleDbConnection(oleDBCnnStrBuilder.ToString());
        }






        protected OleDbCommand GetNativeCommand(IDbTransaction transaction)
        {
            OleDbTransaction oleDbtransaction = transaction as OleDbTransaction;

            //Input Validation
            if (oleDbtransaction == null)
            {
                throw new ArgumentException("Transaction parameter must be a OleDbTransaction.", "transaction");
            }
            //

            return new OleDbCommand(null, (OleDbConnection)transaction.Connection, (OleDbTransaction)transaction);

        }







        public override DataTable Select(Query selectQuery, DataTable dataTable)
        {
            //Input Validation
            if (selectQuery == null)
            {
                throw new ArgumentNullException("selectQuery");
            }
            if (dataTable == null)
            {
                throw new ArgumentNullException("dataTable");
            }
            //Input Validation

            IDbConnection connection = GetConnection();
            OleDbDataAdapter adapter = new OleDbDataAdapter();
            adapter.SelectCommand = (OleDbCommand)GetCommand(selectQuery.SqlStatement, connection, selectQuery.Parameters);

            try
            {
                adapter.Fill(dataTable);
                try
                {
                    adapter.FillSchema(dataTable, SchemaType.Source);
                }
                catch { }

                return dataTable;
            }
            catch (OleDbException oleDbException)
            {
                throw oleDbException;
            }
            catch (Exception ex)
            {
                throw new System.ApplicationException(SharedStrings.ERROR_SELECT_QUERY_DATA_SOURCE, ex);
            }
        }








        public override void Update(DataTable dataTable, string tableName, Query insertQuery, Query updateQuery)
        {
            //Input Validation

            if (dataTable == null)
            {
                throw new ArgumentNullException("DataTable");
            }
            if (string.IsNullOrEmpty(tableName))
            {
                throw new ArgumentNullException("TableName");
            }

            //Input Validation


            IDbConnection connection = GetConnection();
            OleDbDataAdapter adapter = new OleDbDataAdapter();

            if (insertQuery != null)
            {
                adapter.InsertCommand = (OleDbCommand)GetCommand(insertQuery.SqlStatement, connection, insertQuery.Parameters);
            }

            if (updateQuery != null)
            {
                adapter.UpdateCommand = (OleDbCommand)GetCommand(updateQuery.SqlStatement, connection, updateQuery.Parameters);
            }

            try
            {
                adapter.Update(dataTable);
            }
            catch (Exception ex)
            {
                throw new System.ApplicationException("Error updating data.", ex);
            }
        }




        public override void UpdateGUIDs(string childTableName, string parentTableName)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("UPDATE ");
            sb.Append(childTableName);
            sb.Append(" INNER JOIN ");
            sb.Append(parentTableName);
            sb.Append(" ON [");
            sb.Append(childTableName);
            sb.Append("].[OldFKEY] = [");
            sb.Append(parentTableName);
            sb.Append("].[OldUniqueKey]");
            sb.Append(" SET [");
            sb.Append(childTableName);
            sb.Append("].[FKEY] = [");
            sb.Append(parentTableName);
            sb.Append("].[GlobalRecordId]");

            ExecuteNonQuery(CreateQuery(sb.ToString()));
        }




        public override void UpdateKeys(string childTableName, string parentTableName)
        {


















        }

        //

        //Temporary junk pile






        protected virtual bool HasPassword(string connectionString)
        {
            if (!string.IsNullOrEmpty(connectionString))
            {
                OleDbConnectionStringBuilder builder = new OleDbConnectionStringBuilder(this.connectionString);
                return builder.ContainsKey("Jet OLEDB:Database Password");
            }
            else
            {
                return false;
            }
        }



        public override string DbName 
        {
            get
            {
                return dbName;
            }
            set
            {
                dbName = value;
            }
        }

        private string dbName = string.Empty;
        private string location;
        private string connectionString;




        protected string Location
        {
            get
            {
                return location;
            }
        }

        public override bool IsBulkOperation
        {
            get
            {
                return this.isBulkOperation;
            }
            set
            {
                this.isBulkOperation = value;
            }
        }




        public override string DataSource
        {
            get
            {
                string[] strings = ConnectionString.Split(';');
                string dataSource;
                if (strings.Length > 1)
                {
                    dataSource = strings[1].Replace("Data Source=", "");
                }
                else
                {
                    dataSource = ConnectionString.Replace("Data Source=", "");
                }
                dataSource = dataSource.Replace("\"", "");
                return dataSource;
            }
        }



        public override string ConnectionString
        {
            get
            {

















                return this.connectionString;
            }
            set
            {
                this.connectionString = value;
                ProcessConnectionString();
            }
        }





        public override string OleConnectionString
        {
            get
            {
                if (ConnectionString.Contains("="))
                {
                    return ConnectionString;
                }
                else
                {
                    return "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ConnectionString + ";";
                }
            }
        }




        public override int TableColumnMax
        {
            get { return 250; }
        }




        protected void ProcessConnectionString()
        {
            this.location = null;
            if (this.connectionString == null) return;

            OleDbConnectionStringBuilder builder = new OleDbConnectionStringBuilder(this.connectionString);

            string filename = builder.DataSource;
            if (File.Exists(filename))
            {
                if (!Path.IsPathRooted(filename))
                {
                    filename = Path.GetFullPath(filename);
                }
                this.location = filename;
                this.DbName = Path.GetFileNameWithoutExtension(this.location);
                this.connectionString = builder.ToString();
            }
        }




        protected virtual OleDbType CovertToNativeDbType(DbType dbType)
        {
            switch (dbType)
            {
                case DbType.AnsiString:
                    return OleDbType.VarChar;
                case DbType.AnsiStringFixedLength:
                    return OleDbType.Char;
                case DbType.Binary:
                    return OleDbType.Binary;
                case DbType.Boolean:
                    return OleDbType.Boolean;
                case DbType.Byte:
                    return OleDbType.UnsignedTinyInt;
                case DbType.Currency:
                    return OleDbType.Currency;
                case DbType.Date:
                    return OleDbType.DBDate;
                case DbType.DateTime:
                    return OleDbType.DBTimeStamp;
                case DbType.Decimal:
                    return OleDbType.Decimal;
                case DbType.Double:
                    return OleDbType.Double;
                case DbType.Guid:
                    return OleDbType.Guid;
                case DbType.Int16:
                    return OleDbType.SmallInt;
                case DbType.Int32:
                    return OleDbType.Integer;
                case DbType.Int64:
                    return OleDbType.BigInt;
                case DbType.Object:

                    return OleDbType.Binary;
                case DbType.SByte:
                    return OleDbType.TinyInt;
                case DbType.Single:
                    return OleDbType.Single;
                case DbType.String:
                    return OleDbType.VarWChar;
                case DbType.StringFixedLength:
                    return OleDbType.WChar;
                case DbType.Time:
                    return OleDbType.DBTimeStamp;
                case DbType.UInt16:
                    return OleDbType.UnsignedSmallInt;
                case DbType.UInt32:
                    return OleDbType.UnsignedInt;
                case DbType.UInt64:
                    return OleDbType.UnsignedBigInt;
                case DbType.VarNumeric:
                    return OleDbType.VarNumeric;
                default:
                    return OleDbType.VarChar;
            }
        }






        public abstract void SetDataSourceFilePath(string filePath);






        public override Query CreateQuery(string sqlStatement)
        {
            return new JetQuery(sqlStatement);
        }

        //Public Methods

        //Schema and DDL Support




        public override int GetTableCount()
        {
            DataTable dtSchema = GetTableSchema();
            return dtSchema.Rows.Count;
        }









        public override int GetTableColumnCount(string tableName)
        {
            DataTable table = this.GetSchema("COLUMNS", tableName);
            return table.Rows.Count;
        }






        public override List GetTableColumnNames(string tableName)
        {
            DataTable table = this.GetSchema("Columns", tableName);
            List list = new List();
            foreach (DataRow row in table.Rows)
            {
                list.Add(row["COLUMN_NAME"].ToString());
            }
            return list;
        }





        public override Dictionary GetTableColumnNameTypePairs(string tableName)
        {
            DataTable table = this.GetSchema("COLUMNS", tableName);
            Dictionary dictionary = new Dictionary();

            foreach (DataRow row in table.Rows)
            {
                dictionary.Add((string)row["COLUMN_NAME"], (int)row["DATA_TYPE"]);
            }
            return dictionary;
        }






        public override bool DeleteTable(string tableName)
        {
            Query query = this.CreateQuery("Drop Table [" + tableName + "]");
            return (ExecuteNonQuery(query) > 0);
        }







        public override bool DeleteColumn(string tableName, string columnName)
        {
            Query query = this.CreateQuery("ALTER TABLE " + tableName + " DROP COLUMN [" + columnName + "]");
            return (ExecuteNonQuery(query) > 0);
        }






        public override bool TableExists(string tableName)
        {
            //Input Validation
            if (string.IsNullOrEmpty(tableName))
            {
                throw new ArgumentNullException("tableName");
            }
            //




            try
            {
                Select(this.CreateQuery("SELECT TOP 1 * FROM [" + tableName + "]"));
            }
            catch (OleDbException)
            {
                return false;
            }
            catch (Exception)
            {
                return false;
            }

            return true;
        }







        public override bool ColumnExists(string tableName, string columnName)
        {
            //Input Validation
            if (string.IsNullOrEmpty(tableName))
            {
                throw new ArgumentNullException("tableName");
            }
            if (string.IsNullOrEmpty(columnName))
            {
                throw new ArgumentNullException("columnName");
            }
            //
            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);

                object[] objTable;
                objTable =  CxNull;
                if (schemaCols == null || !IsBulkOperation)
                {
                    schemaCols = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Columns, objTable);
                }
                bool exists = schemaCols.Select("COLUMN_NAME = '" + columnName.Replace("'", "''") + "'").Length > 0;
                return exists;
            }
            finally
            {
                CloseConnection(conn);
            }
        }





        public override bool CompactDatabase()
        {
            return true;
        }






        public override DataView GetTextColumnNames(string tableName)
        {
            return new DataView(this.GetSchema("Columns", tableName));
        }








        private DataTable GetSchema(string collectionName, string tableName)
        {
            //Input Validation
            if (string.IsNullOrEmpty(collectionName))
            {
                throw new ArgumentNullException("collectionName");
            }
            if (string.IsNullOrEmpty(tableName))
            {
                throw new ArgumentNullException("tableName");
            }
            //

            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                return conn.GetSchema(collectionName,  CxNull);
            }
            finally
            {
                CloseConnection(conn);
            }
        }






        private DataTable GetSchema(string collectionName)
        {

            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                return conn.GetSchema(collectionName,  CxNull);
            }
            finally
            {
                CloseConnection(conn);
            }
        }




        public override DataSets.TableSchema.TablesDataTable GetTableSchema()
        {
            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                DataTable table = conn.GetSchema("Tables",  CxNull);
                DataSets.TableSchema tableSchema = new Epi.DataSets.TableSchema();
                tableSchema.Merge(table);
                return tableSchema._Tables;
            }
            finally
            {
                CloseConnection(conn);
            }
        }





        public override List GetTableNames()
        {
            List tableNames = new List();
            DataTable schemaTable = GetTableSchema();

            foreach (DataRow row in schemaTable.Rows)
            {
                string tableNameCandidate = row[ColumnNames.SCHEMA_TABLE_NAME].ToString();
                tableNames.Add(row[ColumnNames.SCHEMA_TABLE_NAME].ToString());
            }
            return tableNames;
        }






        public override DataSets.TableKeysSchema.Primary_KeysDataTable GetTableKeysSchema(string tableName)
        {

            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                DataTable tb = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Primary_Keys,  CxNull);
                DataSets.TableKeysSchema schema = new Epi.DataSets.TableKeysSchema();
                schema.Merge(tb);
                return schema.Primary_Keys;
            }
            finally
            {
                CloseConnection(conn);
            }
        }





        public override bool IsDatabaseFormatValid(ref string exceptionMessage)
        {
            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
            }
            catch (Exception ex)
            {
                exceptionMessage = ex.Message;
                return false;
            }
            finally
            {
                CloseConnection(conn);
            }

            exceptionMessage = string.Empty;
            return true;
        }






        public override DataSets.TableColumnSchema.ColumnsDataTable GetTableColumnSchema(string tableName)
        {
            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                DataTable dt = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Columns,  CxNull);
                DataSets.TableColumnSchema schema = new Epi.DataSets.TableColumnSchema();
                schema.Merge(dt);
                return schema.Columns;
            }
            catch (Exception ex)
            {
                throw new GeneralException("Could not get table column schema for." + tableName, ex);
            }
            finally
            {
                CloseConnection(conn);
            }
        }






        public override DataSets.ANSI.TableColumnSchema.ColumnsDataTable GetTableColumnSchemaANSI(string tableName)
        {
            OleDbConnection conn = this.GetNativeConnection();

            try
            {
                OpenConnection(conn);
                DataTable dt = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Columns,  CxNull);
                DataSets.ANSI.TableColumnSchema schema = new Epi.DataSets.ANSI.TableColumnSchema();
                schema.Merge(dt);
                return schema.Columns;
            }
            catch (Exception ex)
            {
                throw new GeneralException("Could not get table column schema for." + tableName, ex);
            }
            finally
            {
                CloseConnection(conn);
            }
        }
        //

        //Generic IDbTransaction Methods (mirror Epi.Data.Office/Epi.Data.SqlServer)





        public override bool TestConnection()
        {
            try
            {
                return TestConnection(connectionString);
            }
            catch (Exception ex)
            {
                throw new GeneralException(SharedStrings.ERROR_CONNECT_DATA_SOURCE, ex);
            }
        }






        protected bool TestConnection(string connectionString)
        {
            IDbConnection testConnection = GetConnection(connectionString);
            try
            {
                OpenConnection(testConnection);
            }
            finally
            {
                CloseConnection(testConnection);
            }
            return true;
        }





        public override IDbConnection GetConnection()
        {
            return GetNativeConnection(connectionString);
        }





        protected virtual IDbConnection GetConnection(string connectionString)
        {
            return GetNativeConnection(connectionString);
        }








        protected virtual IDbCommand GetCommand(string sqlStatement, IDbTransaction transaction, List parameters)
        {
            //Input Validation
            if (string.IsNullOrEmpty(sqlStatement))
            {
                throw new ArgumentNullException("sqlStatement");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("Parameters");
            }
            //

            IDbCommand command = this.GetNativeCommand(transaction);
            command.CommandText = sqlStatement;

            foreach (QueryParameter parameter in parameters)
            {
                command.Parameters.Add(this.ConvertToNativeParameter(parameter));
            }

            return command;
        }








        protected virtual IDbCommand GetCommand(string sqlStatement, IDbConnection connection, List parameters)
        {
            //Input Validation
            if (string.IsNullOrEmpty(sqlStatement))
            {
                throw new ArgumentNullException("sqlStatement");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            //

            IDbCommand command = connection.CreateCommand();
            command.CommandText = sqlStatement;

            foreach (QueryParameter parameter in parameters)
            {
                command.Parameters.Add(this.ConvertToNativeParameter(parameter));
            }

            return command;
        }





        protected void OpenConnection(IDbConnection conn)
        {
            try
            {
                if (conn.State != ConnectionState.Open)
                {
                    conn.Open();
                }
            }
            catch (Exception ex)
            {
                Logger.Log(DateTime.Now + ":  " + ex.Message);
                if (ex.Message.Contains("Unrecognized database format"))
                {
                    throw new GeneralException(ex.Message);
                }
                else
                {
                    throw new System.ApplicationException(SharedStrings.ERROR_OPENING_CONNECTION);
                }
            }
        }








        public override bool AlterColumnType(string tableName, string columnName, string columnType)
        {
            Query query = this.CreateQuery("ALTER TABLE " + tableName + " ALTER COLUMN " + columnName + " " + columnType);
            return (ExecuteNonQuery(query) > 0);
        }







        public override bool AddColumn(string tableName, TableColumn column)
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("ALTER TABLE ");
            sb.Append(tableName);
            sb.Append(" ADD COLUMN ");
            sb.Append(column.Name);
            sb.Append(" ");
            sb.Append(GetDbSpecificColumnType(column.DataType));
            if (column.Length != null)
            {
                sb.Append("(");
                sb.Append(column.Length.Value.ToString());
                sb.Append(") ");
            }

            ExecuteNonQuery(CreateQuery(sb.ToString()));
            return false;
        }





        protected void CloseConnection(IDbConnection conn)
        {
            try
            {
                if (conn != null)
                {
                    if (conn.State != ConnectionState.Closed)
                    {
                        conn.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                conn = null;
                throw new System.ApplicationException(SharedStrings.ERROR_CLOSING_CONNECTION, ex);
            }
        }




        public override void CloseTransaction(IDbTransaction transaction)
        {
            if (transaction == null)
            {
                throw new ArgumentNullException("Transaction cannot be null.", "transaction");
            }

            CloseConnection(transaction.Connection);
        }





        public override IDbTransaction OpenTransaction()
        {
            IDbConnection connection = GetConnection();
            OpenConnection(connection);
            return connection.BeginTransaction();
        }






        public override IDbTransaction OpenTransaction(IsolationLevel isolationLevel)
        {
            IDbConnection connection = GetConnection();
            OpenConnection(connection);
            return connection.BeginTransaction(isolationLevel);
        }






        public override IDataReader GetTableDataReader(string tableName)
        {
            Query query = this.CreateQuery("select * from " + tableName);
            return this.ExecuteReader(query);
        }







        public override DataTable Select(Query selectQuery)
        {
            //Input Validation
            if (selectQuery == null)
            {
                throw new ArgumentNullException("selectQuery");
            }
            //

            DataTable table = new DataTable();
            return Select(selectQuery, table);
        }








        public override DataTable GetTableData(string tableName, string columnNames, string sortCriteria)
        {
            try
            {
                if (string.IsNullOrEmpty(columnNames))
                {
                    columnNames = Epi.StringLiterals.STAR;
                }

                string queryString = "select " + columnNames + " from [" + tableName + "]";
                if (!string.IsNullOrEmpty(sortCriteria))
                {
                    queryString += " order by " + sortCriteria;
                }
                Query query = this.CreateQuery(queryString);

                DataTable returnTable = Select(query);
                return returnTable;
            }
            finally
            {
            }
        }






        public override DataTable GetTopTwoTable(string tableName)
        {
            try
            {
                string queryString = "select top 2 * from [" + tableName + "]";
                Query query = this.CreateQuery(queryString);
                return Select(query);
            }
            finally
            {
            }
        }






        public override IDataReader ExecuteReader(Query selectQuery)
        {
            //Input Validation
            if (selectQuery == null)
            {
                throw new ArgumentNullException("SelectQuery");
            }
            //

            return ExecuteReader(selectQuery, CommandBehavior.Default);
        }






        public override IDataReader ExecuteReader(Query selectQuery, CommandBehavior commandBehavior)
        {
            //Input Validation

            if (selectQuery == null)
            {
                throw new ArgumentNullException("SelectQuery");
            }

            //

            IDbCommand command = null;
            IDbConnection connection = null;

            try
            {
                connection = GetConnection();
                OpenConnection(connection);
                command = GetCommand(selectQuery.SqlStatement, connection, selectQuery.Parameters);

                return command.ExecuteReader(commandBehavior);
            }
            catch (Exception ex)
            {
                throw new System.ApplicationException("Could not execute reader", ex);
            }
        }







        public override object ExecuteScalar(Query query, IDbTransaction transaction)
        {
            //Input Validation
            if (query == null)
            {
                throw new ArgumentNullException("query");
            }
            if (transaction == null)
            {
                throw new ArgumentNullException("transaction");
            }
            //

            object result;
            IDbCommand command = GetCommand(query.SqlStatement, transaction, query.Parameters);

            try
            {

                result = command.ExecuteScalar();
            }
            finally
            {

            }

            return result;
        }






        public override object ExecuteScalar(Query query)
        {

            //Input Validation
            if (query == null)
            {
                throw new ArgumentNullException("query");
            }
            //

            object result;
            IDbConnection conn = GetConnection();
            IDbCommand command = GetCommand(query.SqlStatement, conn, query.Parameters);

            try
            {
                OpenConnection(conn);
                result = command.ExecuteScalar();
            }
            finally
            {
                CloseConnection(conn);
            }

            return result;
        }






        public override int ExecuteNonQuery(Query query)
        {
            //Input Validation
            if (query == null)
            {
                throw new ArgumentNullException("query");
            }
            //


            IDbConnection conn = this.GetConnection();
            IDbCommand command = GetCommand(query.SqlStatement, conn, query.Parameters);

            try
            {
                OpenConnection(conn);
                object obj = command.ExecuteNonQuery();
                return (int)obj;
            }
            finally
            {
                CloseConnection(conn);
            }
        }







        public override int ExecuteNonQuery(Query query, IDbTransaction transaction)
        {

            //Input Validation
            if (query == null)
            {
                throw new ArgumentNullException("query");
            }
            if (transaction == null)
            {
                throw new ArgumentNullException("transaction");
            }
            //


            IDbCommand command = GetCommand(query.SqlStatement, transaction, query.Parameters);

            try
            {

                return command.ExecuteNonQuery();
            }
            finally
            {

            }
        }

        //


        //IDbDriver Members







        public static string EncodeOleDbConnectionStringValue(string value)
        {




            string result = value.Trim();






            if (value.IndexOfAny( CxNull

















































































































































































































































































































































































































































































































































































































































































































 