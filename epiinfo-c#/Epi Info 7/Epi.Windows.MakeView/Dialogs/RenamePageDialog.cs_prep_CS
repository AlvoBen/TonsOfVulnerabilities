using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Epi;
using Epi.Windows;
using Epi.Windows.Controls;
using Epi.Windows.Dialogs;
using Epi.Data.Services;

namespace Epi.Windows.MakeView.Dialogs
{



    public         class RenamePageDialog : DialogBase
 {
  private string pageName = string.Empty;
        private PageNode pageNode = null;
        private View parentView = null;




        [Obsolete("Use of default constructor not allowed", true)]
        public RenamePageDialog()
        {
            InitializeComponent();
        }




        public RenamePageDialog(MainForm frm, View parentView)
            : base(frm)
        {
            this.parentView = parentView;
            InitializeComponent();
        }






        public RenamePageDialog(MainForm frm, PageNode node)
            : base(frm)
        {

            InitializeComponent();
            this.PageNode = node;
            this.parentView = node.Page.view;
        }






  private void txtPageName_TextChanged(object sender, System.EventArgs e)
  {
   PageName = txtPageName.Text.Trim();

            string message;

            if (txtPageName.Text.Length > 0 && ValidatePageName(out message))
            {
                btnOK.Enabled = true;
                txtPageName.ForeColor = Color.Black;
            }
            else
            {
                btnOK.Enabled = false;
                txtPageName.ForeColor = Color.Red;
            }
  }






  private void btnCancel_Click(object sender, System.EventArgs e)
  {
   this.Close();
  }






        private void btnOK_Click(object sender, System.EventArgs e)
  {
            string validationMessage;
            if (ValidatePageName(out validationMessage) == false)
            {
                this.DialogResult = DialogResult.None;
                txtPageName.Focus();
                return;
            }

   this.DialogResult = DialogResult.OK;
   this.Hide();
  }






  private void RenamePage_Load(object sender, System.EventArgs e)
  {
            txtPageName.Text = PageName;
   txtPageName.Focus();
  }




        private bool ValidatePageName(out string message)
        {
            bool valid = true;
            string validationMessage = string.Empty;

            foreach (Page page in parentView.Pages)
            {
                if (PageName.ToLower().Trim().Equals(page.Name.ToLower()) || PageName.ToLower().Equals(page.Name.ToLower()))
                {
                  if (!(PageNode != null && PageNode.Text.ToLower() == PageName.ToLower()) )

                    {
                        validationMessage = SharedStrings.INVALID_PAGE_NAME_DUPLICATE;
                        valid = false;
                        break;
                    }

                }
            }
            if (PageName.ToLower() == "page" && string.IsNullOrEmpty(validationMessage))
            {
                validationMessage = SharedStrings.INVALID_PAGE_NAME_IS_RESERVED;
                valid = false;

            }
            if (valid)
            {
                valid = Page.IsValidPageName(PageName, ref validationMessage);
            }

            message = validationMessage;

            return valid;
        }




  public string PageName
  {
   get
   {
    return this.pageName;
   }
   set
   {
    this.pageName = value;
   }
  }




        public PageNode PageNode
        {
            get
            {
                return this.pageNode;
            }
            set
            {
                this.pageNode = value;
            }
        }
 }
}


 