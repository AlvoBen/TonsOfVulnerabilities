    using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Data;

using Epi;
using Epi.Data;
using Epi.Data.Services;
using Epi.Windows;
using Epi.Fields;
using Epi.Windows.Dialogs;
using System.Text.RegularExpressions;


namespace Epi.Windows.MakeView.Dialogs
{
    public         class CommentLegalDialog : LegalValuesDialog
    {
        //Public Interface

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public CommentLegalDialog()
        {
            InitializeComponent();
        }








        public CommentLegalDialog(TableBasedDropDownField field, MainForm frm, string name, Page currentPage)
            : base(field, frm, name, currentPage)
        {
            InitializeComponent();
            fieldName = name;
            page = currentPage;

        }








        public CommentLegalDialog(TableBasedDropDownColumn column, MainForm frm, string name, Page currentPage)
            : base(column, frm, name, currentPage)
        {
            InitializeComponent();
            fieldName = name;
            page = currentPage;

        }






        public CommentLegalDialog(RenderableField field, Page currentPage)
            : base(field, currentPage)
        {
            InitializeComponent();
            page = currentPage;
            DDLFieldOfCommentLegal ddlField = (DDLFieldOfCommentLegal)field;
            codeTable = ddlField.GetSourceData();









            dgCodes.DataSource = codeTable;
            sourceTableName = codeTable.TableName;
            textColumnName = fieldName;

        }
        //Constructors

        //Public Enums and Constants

        //Public Enums and Constants

        //Public Properties




        public new string SourceTableName
        {
            get
            {
                return (sourceTableName);
            }
        }




        public new string TextColumnName
        {
            get
            {
                return (textColumnName);
            }
        }

        //Public Properties

        //Public Methods

        //Public Methods

        //Public Interface

        //Protected Interface

        //Protected Properties

        //Protected Properties

        //Protected Methods





        protected override void ShowFieldSelection(string tableName)
        {
            FieldSelectionDialog fieldSelection = new FieldSelectionDialog(MainForm, page.GetProject(), tableName);
            DialogResult result = fieldSelection.ShowDialog();
            if (result == DialogResult.OK)
            {
                textColumnName = fieldSelection.ColumnName;
                sourceTableName = tableName;
                codeTable = GetProject().GetTableData(tableName, textColumnName);
                fieldSelection.Close();
                DisplayData();
                isExclusiveTable = true;
            }
        }

        //Protected Methods

        //Protected Events






        protected override void btnCreate_Click(object sender, System.EventArgs e)
        {
            CreateCommentLegal();
            creationMode = CreationMode.CreateNew;
            btnCreate.Enabled = false;
            btnFromExisting.Enabled = false;
            btnUseExisting.Enabled = false;
            dgCodes.Visible = true;
            btnOK.Enabled = true;
        }






        protected override void btnOK_Click(object sender, System.EventArgs e)
        {
            if ((DataTable)dgCodes.DataSource != null)
            {
                ((DataTable)dgCodes.DataSource).AcceptChanges();
            }

            SaveShouldSort();

            if (CheckForHyphens())
            {
                SaveCodeTableToField();
                this.DialogResult = DialogResult.OK;
                this.Hide();
            }
        }

        //Protected Events
        //Protected Interface

        //Private Members

        //Private Enums and Constants

        //Private Enums and Constants

        //Private Properties
        private string fieldName = string.Empty;
        private DataTable codeTable;
        private Page page;
        private int oldCurrentRow;
        //Private Properties

        //Private Methods




        private void SaveShouldSort()
        {
            if (DdlField != null)
            {
                DdlField.ShouldSort = !cbxSort.Checked;
            }
        }




        private bool CheckForHyphens()
        {
            bool isValidated;
            Regex commentLegalCheck = new Regex(@"^[0-9a-zA-Z]+(\s)*(-){1}");

            codeTable = (DataTable)dgCodes.DataSource;

            if (codeTable != null && string.IsNullOrEmpty(textColumnName))
            {
                textColumnName = codeTable.Columns[0].ColumnName;
            }

            if (codeTable != null)
            {
                isValidated = true;
                foreach (DataRow row in codeTable.Rows)
                {
                    //Validation
                    if (textColumnName == null)
                    {
                        throw new ArgumentNullException("textColumnName");
                    }
                    //Input validation

                    if (((string.IsNullOrEmpty(textColumnName)) || !(commentLegalCheck.IsMatch(row[textColumnName].ToString()))))
                    {
                        string msg = SharedStrings.SEPARATE_COMMENT_LEGAL_WITH_HYPEN + ": \n" + row[textColumnName].ToString();
                        MsgBox.ShowError(msg);
                        isValidated = false;
                    }

                    if (isValidated == false)
                    {
                        break;
                    }
                }
            }
            else
            {
                isValidated = true;
            }

            return isValidated;
        }





        private Project GetProject()
        {
            return page.GetProject();
        }




        private void CreateCommentLegal()
        {
            dgCodes.Visible = true;
            btnOK.Visible = true;

            DataTable bindingTable = page.GetProject().CodeData.GetCodeTableNamesForProject(page.GetProject());
            DataView dataView = bindingTable.DefaultView;

            {
                dataView.Sort = GetDisplayString(page);
            }
            string cleanedCodeTableName = CleanCodeTableName(fieldName, dataView);

            page.GetProject().CreateCodeTable(cleanedCodeTableName, fieldName.ToLower());
            codeTable = page.GetProject().GetTableData(cleanedCodeTableName);
            codeTable.TableName = cleanedCodeTableName;
            dgCodes.DataSource = codeTable;

            sourceTableName = codeTable.TableName;
            textColumnName = fieldName;
            dgCodes.Focus(); 
        }


        private void DisplayData()
        {
            if (codeTable != null)
            {
                dgCodes.Visible = true;
                btnOK.Enabled = true;
                btnOK.Visible = true;

                btnCreate.Enabled = false;
                btnFromExisting.Enabled = false;
                btnUseExisting.Enabled = false;

                btnDelete.Enabled = false;
                btnDelete.Visible = true;

                codeTable.TableName = sourceTableName;
                dgCodes.DataSource = codeTable;


                if (DdlField != null) cbxSort.Checked = !DdlField.ShouldSort;
            }
        }

        //Private Methods

        //Private Events






        private void CommentLegal_Load(object sender, System.EventArgs e)
        {
            DisplayData();
            dgCodes.Focus();
        }

        //Private Events

        //Private Members
    }
}

 