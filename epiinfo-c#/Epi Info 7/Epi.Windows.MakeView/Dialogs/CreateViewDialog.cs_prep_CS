//Namespaces
using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Epi;
using Epi.Windows;
using Epi.Windows.Dialogs;
using Epi.Data.Services;
// 

namespace Epi.Windows.MakeView.Dialogs
{



    public         class CreateViewDialog : DialogBase, IWizardStep
 {
  //Private Members
  private int viewID;
        private Project project;
        private string defaultViewName = string.Empty;
  // 

        //Events



        public event EventHandler BackRequested;



        public event EventHandler NextRequested;



        public event EventHandler CancelRequested;
        //Events

        //Constructors



        [Obsolete("Use of default constructor not allowed", true)]
  public CreateViewDialog()
  {
   InitializeComponent();
        }






        public CreateViewDialog(MainForm frm, Project currentProject) : base(frm)
        {
            InitializeComponent();
            project = currentProject;
        }








        public CreateViewDialog(MainForm frm, Project currentProject, string initialViewName)
            : base(frm)
        {
            InitializeComponent();
            project = currentProject;
            defaultViewName = initialViewName;
        }

        //Constructors

        //Private Methods




  private bool ValidateViewName()
  {
            bool valid = true;
            string validationMessage = string.Empty;

            string trimmedFormNameCandidate = ViewName.Trim( CxNull);

            foreach (View view in project.Views)
            {
                if (ViewName.ToLower() == view.Name.ToLower())
                {
                    validationMessage = SharedStrings.INVALID_VIEW_NAME_DUPLICATE;
                    valid = false;
                    break;
                }

                if (trimmedFormNameCandidate.ToLower() == view.Name.ToLower())
                {
                    validationMessage = SharedStrings.INVALID_VIEW_NAME_DUPLICATE_PREFIX;
                    valid = false;
                    break;
                }
            }

            if (valid)
            {
                valid = View.IsValidViewName(ViewName, ref validationMessage);
            }

            if (!valid)
            {
                MsgBox.ShowError(validationMessage);
                txtViewName.Focus();
            }

            return valid;
  }

  // 

  //Event Handlers





  private void CreateView_Load(object sender, System.EventArgs e)
  {

            this.btnBack.Visible = this.IsInWizard;
   txtViewName.Text = defaultViewName;
   txtViewName.Focus();
            btnOK.Enabled = true;
  }






  private void txtViewName_TextChanged(object sender, System.EventArgs e)
  {

  }






  private void btnOK_Click(object sender, System.EventArgs e)
  {
            if (ValidateViewName())
            {
                this.DialogResult = DialogResult.OK;
                if (this.IsInWizard)
                {

                    if (this.NextRequested != null)
                    {
                        this.NextRequested(this, EventArgs.Empty);
                    }
                }
                else
                {
                    this.Hide();
                }
            }
  }

        private void btnBack_Click(object sender, EventArgs e)
        {
            if (this.IsInWizard)
            {

                if (this.BackRequested != null)
                {
                    this.BackRequested(this, EventArgs.Empty);
                }
            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            if (this.IsInWizard)
            {

                if (this.CancelRequested != null)
                {
                    this.CancelRequested(this, EventArgs.Empty);
                }
            }
            else
            {
                this.Close();
            }
        }

        private void InputDataChanged(object sender, EventArgs e)
        {

        }
  //Event Handlers

  //Public Properties



  public string ViewName
  {
            get
            {
                return txtViewName.Text;
            }
   set
   {


    txtViewName.Text = value;
   }
  }




  public int ViewId
  {
   get
   {
    return this.viewID;
   }
   set
   {
    this.viewID = value;
   }
  }




  public Button BtnBack
        {
            get
            {
                return btnBack;
            }
        }




  public Button BtnNext
        {
            get
            {
                return this.btnOK;
            }
        }




  public Button BtnCancel
        {
            get
            {
                return btnCancel;
            }
        }
  //Public Properties

        //Public Methods




  public override void CheckForInputSufficiency()
        {
            Regex ViewNameCheck = new Regex("^[a-zA-z][a-zA-Z0-9]*$");

            if(! string.IsNullOrEmpty(this.txtViewName.Text.Trim()) && ViewNameCheck.IsMatch(this.txtViewName.Text.Trim()))
            {
                this.btnOK.Enabled = true;
            }
            else
            {
                this.btnOK.Enabled = false;
            }
        }
        //Public Methods
    }
}


 