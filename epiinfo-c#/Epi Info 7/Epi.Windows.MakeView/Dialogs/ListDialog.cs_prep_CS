using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Data;
using Epi;
using Epi.Windows;
using Epi.Windows.Dialogs;

using Epi.Data;
using Epi.Fields;
using Epi.Collections;

namespace Epi.Windows.MakeView.Dialogs
{



    public         class ListDialog : LegalValuesDialog
    {

        //Public Interface
        //Constructors



        [Obsolete("Use of default constructor not allowed", true)]
        public ListDialog()
        {
            InitializeComponent();
        }







        public ListDialog(MainForm frm, string name, Page currentPage)
            : base(frm, name, currentPage)
        {
            InitializeComponent();
            fieldName = name;
            page = currentPage;
            ddlField = new DDListField(page);
            ddlField.Name = fieldName;
            selectedFields = new NamedObjectCollection();
            SetDataSource(ddlField);
            SetDgCodes(dgCodes, fieldName);
        }







        public ListDialog(MainForm frm, RenderableField field, Page currentPage)
            : base(frm, field, currentPage)
        {
            InitializeComponent();
            page = currentPage;
            ddlField = (DDListField)field;
            codeTable = ddlField.GetSourceData();
            this.Text = "List Field";

            fieldName = ddlField.Name;
            SetDataSource(ddlField);
            SetDgCodes(dgCodes, fieldName);
        }









        public ListDialog(TableBasedDropDownField field, MainForm frm, string name, Page currentPage, NamedObjectCollection selectedItems)
            : base(frm, name, currentPage)
        {
            InitializeComponent();
            fieldName = name;
            page = currentPage;
            ddlField = (DDListField)field;
            this.Text = "List Field";




            selectedFields = selectedItems;
            SetDataSource(ddlField);
            SetDgCodes(dgCodes, fieldName);

        }
        //Constructors

        //Public Enums and Constants
        //Public Enums and Constants

        //Public Properties



        public new string SourceTableName
        {
            get
            {
                return (sourceTableName);
            }
            set
            {
                sourceTableName = value;
            }
        }




        public new string TextColumnName
        {
            get
            {
                return (textColumnName);
            }
        }




        public NamedObjectCollection SelectedFields
        {
            get
            {
                return (selectedFields);
            }

        }
        //Public Properties

        //Public Methods

        //Public Methods
        //Public Interface

        //Protected Interface

        //Protected Properties

        //Protected Properties

        //Protected Methods

        //Protected Methods

        //Protected Events





        protected override void btnCreate_Click(object sender, System.EventArgs e)
        {
            CreateCodes();






            btnCreate.Enabled = false;
            btnUseExisting.Enabled = false;
            dgCodes.Visible = true;
            btnOK.Enabled = true;
        }






        protected override void btnOK_Click(object sender, System.EventArgs e)
        {
            SaveShouldSort();
            if (codeTable == null)
            {

                SaveCodeTableToField();
            }
            else
            {

                if ((DataTable)dgCodes.DataSource != null)
                {
                    DataTable dataTables = page.GetProject().CodeData.GetCodeTableNamesForProject(page.GetProject());




















                    this.sourceTableName = codeTable.TableName;

                    int index = 0;
                    string[] columnsToSave = new string[codeTable.Columns.Count];
                    foreach (DataColumn column in codeTable.Columns)
                    {
                        columnsToSave[index] = codeTable.Columns[index].ColumnName;
                        index = index + 1;
                    }

                    page.GetProject().CreateCodeTable(codeTable.TableName, columnsToSave);

                    page.GetProject().InsertCodeTableData(codeTable, codeTable.TableName, columnsToSave);
                }
            }

            this.DialogResult = DialogResult.OK;
            this.Hide();
        }
        //Protected Events

        //Protected Interface

        //Private Members

        //Private Enums and Constants
        private double MULTICOLUMN_WIDTH_MULTIPLE = .4;
        //Private Enums and Constants

        //Private Properties
        private string fieldName = string.Empty;
        private DataTable codeTable;
        private DataTable valueTable;
        private DataTable fieldSetupTable;
        private DataTable fieldValueSetupTable;
        private DataTable finalTable;
        private Page page;
        private string sourceTableName = string.Empty;
        private string textColumnName = string.Empty;
        private NamedObjectCollection selectedFields;
        private new DDListField ddlField;

        //Private Properties

        //Private Methods
        private void SetDgCodes(DataGridView dgCodes, string fieldName)
        {


        }

        private void SetDataSource(DDListField ddlField)
        {
            if (!string.IsNullOrEmpty(ddlField.SourceTableName))
            {
                codeTable = ddlField.GetSourceData();
                sourceTableName = ddlField.SourceTableName;
                textColumnName = ddlField.TextColumnName;
            }
        }

        private void DisplayData()
        {
            if (codeTable != null)
            {
                dgCodes.Visible = true;
                btnOK.Enabled = true;
                btnCreate.Enabled = false;
                btnUseExisting.Enabled = false;
                btnDelete.Enabled = false;

                codeTable.TableName = sourceTableName;
                dgCodes.DataSource = codeTable;
                cbxSort.Checked = !ddlField.ShouldSort;

                btnOK.Visible = true;
                btnCreate.Enabled = false;
                btnUseExisting.Enabled = false;
                btnDelete.Visible = true;
            }

        }

        private void CreateCodes()
        {
            dgCodes.Visible = true;
            DataTable bindingTable = page.GetProject().CodeData.GetCodeTableNamesForProject(page.GetProject());
            DataView dataView = bindingTable.DefaultView;




            string cleanedCodeTableName = CleanCodeTableName(fieldName, dataView);

            if (SelectedFields.Count >= 1)
            {
                int i = 1;

                string[] selectedFieldsForCodeColumns = new string[SelectedFields.Count + 1];
                selectedFieldsForCodeColumns[0] = fieldName;

                foreach (Field field in SelectedFields)
                {
                    selectedFieldsForCodeColumns[i] = field.Name;
                    i += 1;
                }



                page.GetProject().CreateCodeTable(cleanedCodeTableName, selectedFieldsForCodeColumns);
            }
            else
            {
                page.GetProject().CreateCodeTable(cleanedCodeTableName, fieldName.ToLower());
            }

            codeTable = page.GetProject().GetTableData(cleanedCodeTableName);
            codeTable.TableName = cleanedCodeTableName;
            dgCodes.DataSource = codeTable;

            sourceTableName = codeTable.TableName;
            textColumnName = fieldName;
        }




        private void SaveCodeTableToField()
        {
            DataTable dataTable = (DataTable)dgCodes.DataSource;
            if (dataTable != null)
            {
                if (dataTable.Columns.Count > 1)
                {
                    int index = 0;
                    string[] columnsToSave = new string[dataTable.Columns.Count];
                    foreach (DataColumn column in dataTable.Columns)
                    {
                        columnsToSave[index] = dataTable.Columns[index].ColumnName;
                        index = index + 1;
                    }
                    page.GetProject().SaveCodeTableData(dataTable, dataTable.TableName, columnsToSave);
                }
                else
                {
                    page.GetProject().SaveCodeTableData(dataTable, dataTable.TableName, dataTable.Columns[0].ColumnName);
                }
                this.sourceTableName = dataTable.TableName;
                this.textColumnName = dataTable.Columns[0].ColumnName;
            }
        }

        private NamedObjectCollection ConvertToLower(NamedObjectCollection columnNames)
        {
            if (columnNames != null)
            {
                NamedObjectCollection columnNamesInLower = new NamedObjectCollection();
                columnNamesInLower = columnNames;

                int selectedIndex = 1;
                DataRowView item;
                string[] selectedViewFields = new string[lbxFields.SelectedItems.Count + 1];
                selectedViewFields[0] = fieldName;
                for (int i = 0; i < lbxFields.Items.Count; i++)
                {
                    item = (DataRowView)lbxFields.Items[i];
                    if (lbxFields.GetSelected(i))
                    {
                        selectedViewFields[selectedIndex] = item[lbxFields.DisplayMember].ToString();
                        DataRow selectRow = item.Row;
                        selectedFields.Add(page.GetView().GetFieldById(Int32.Parse((selectRow[ColumnNames.FIELD_ID].ToString()))));
                        selectedIndex++;
                    }
                }
                return columnNamesInLower;
            }
            return columnNames;
        }




        private void SaveShouldSort()
        {
            if (ddlField != null)
            {
                ddlField.ShouldSort = !cbxSort.Checked;
            }
        }

        //Private Methods

        //Private Events





        private void Codes_Load(object sender, System.EventArgs e)
        {
            DisplayData();
            if (dgCodes.DataSource != null)
            {
                btnOK.Enabled = true;
            }
            dgCodes.Focus();
        }
        //Private Events

        //Private Members

    }
}


 