//Namespaces

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

//

namespace Epi.Windows.MakeView.Dialogs
{



    public         class DialogListDialog : Epi.Windows.Dialogs.DialogBase
    {
        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public DialogListDialog()
        {
            InitializeComponent();
        }





        public DialogListDialog(MainForm frm) : base(frm)
        {
           InitializeComponent();
           Construct();
        }
        //Constructors

        //Public Properties



        public string Selections
        {
            get
            {
                return selections;
            }
        }
        //Public Properties

        //Protected Methods



        public override void CheckForInputSufficiency()
        {
            btnOK.Enabled = (ValidateInput() && ListCount(((DataView)dgList.DataSource)) > 0);
        }





        protected override bool ValidateInput()
        {
            base.ValidateInput();
            return (ErrorMessages.Count == 0);
        }

        //Protected Methods

        //Private Attributes
        DataTable selectionList = null;
        string selections = string.Empty;
        //Private Attributes

        //Private Methods




        private void Construct()
        {
            const string SELECTION = "Selection";
            selectionList = new DataTable(SELECTION);
            selectionList.Columns.Add(new DataColumn(SELECTION));
            DataView dgListView = new DataView( selectionList );
            dgListView.ListChanged  +=
                new System.ComponentModel.ListChangedEventHandler(dgListView_ListChanged);
            this.dgList.DataSource = dgListView;
            this.dgList.DataMember = "";
            DataGridTableStyle ts = new DataGridTableStyle();
            ts.MappingName = SELECTION;
            dgList.TableStyles.Clear();
            dgList.TableStyles.Add(ts);
            dgList.TableStyles[SELECTION].GridColumnStyles[SELECTION].Width = dgList.Width - dgList.RowHeaderWidth;
            dgListView.AddNew();
        }






        private int ListCount(DataView view)
        {
            int count = 0;
            foreach (DataRowView row in view)
            {
                if (!string.IsNullOrEmpty(row[0].ToString()))
                {
                    count++;
                }
            }
            return count;
        }

        //Private Methods

        //Event Handlers






        private void dgListView_ListChanged( object sender, System.EventArgs e )
        {
            CheckForInputSufficiency();
        }






        private void btnOK_Click(object sender, EventArgs e)
        {
            string s = string.Empty;
            StringBuilder sb = new StringBuilder();
            foreach (DataRowView row in ((DataView)dgList.DataSource))
            {
                s = row[0].ToString();
                if (!string.IsNullOrEmpty(s))
                {
                    sb.Append(StringLiterals.DOUBLEQUOTES);
                    sb.Append(s).Append(StringLiterals.DOUBLEQUOTES).Append(", ");
                }
            }
            sb.Length-= 2;
            selections = sb.ToString();
        }






        private void btnInsert_Click(object sender, EventArgs e)
        {
            DataView view = ((DataView)dgList.DataSource);
            DataRowView row = view.AddNew();
            row.EndEdit();
            for (int i = view.Count-1; i > dgList.CurrentCell.RowNumber; i--)
            {
                row = view[i];
                row.BeginEdit();
                row.Row[0] = view[i-1][0].ToString();
                row.EndEdit();
            }
            row = view[dgList.CurrentCell.RowNumber];
            row.BeginEdit();
            row[0] = string.Empty;
            row.EndEdit();
        }






        private void btnDelete_Click(object sender, EventArgs e)
        {
            DataView view = ((DataView)dgList.DataSource);
            view.Delete(dgList.CurrentCell.RowNumber);
        }






        private void dgList_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                if (e.X > dgList.Left && e.X < (dgList.Left + dgList.RowHeaderWidth))
                {

                }
            }
        }

        //Event Handlers
    }
}



 