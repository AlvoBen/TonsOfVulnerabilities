//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Epi.Data.Services;
using Epi.Windows.Dialogs;

// 

namespace Epi.Windows.MakeView.Dialogs
{



    public         class TableDefinitionDialog : DialogBase
    {
        //Private Data Members
        private View currentView;
        private Int32 startingId;
        private string dataTableName;
        private string UNIQUEID_DEFAULT = "1";

        // 

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
        public TableDefinitionDialog()
        {
            InitializeComponent();
        }





        public TableDefinitionDialog(MainForm frm)
            : base(frm)
        {

            InitializeComponent();
        }





        public TableDefinitionDialog(View view)
        {
            InitializeComponent();
            currentView = view;
        }

        // Constructors

        //Event Handlers






        private void btnCancel_Click(object sender, System.EventArgs e)
        {
            this.Close();
        }







        private void txtDataTableName_TextChanged(object sender, EventArgs e)
        {
            EnableDisableOk();
        }






        private void txtUniqueId_TextChanged(object sender, EventArgs e)
        {
            EnableDisableOk();
        }






        private void txtUniqueId_Leave(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(txtUniqueId.Text.Trim()))
            {
                if(ValidateStartingId() == false)
                {

                }
            }
        }






        private void txtDataTableName_Leave(object sender, EventArgs e)
        {
            /*
            bool valid = true;
            if (!string.IsNullOrEmpty(txtDataTableName.Text))
            {
                Match nameMatch = Regex.Match(txtDataTableName.Text.Substring(0, 1), "[0-9]");
                if (nameMatch.Success)
                {
                    MsgBox.ShowError(SharedStrings.PROJECT_NAME_BEGIN_NUMERIC);
                    txtDataTableName.Clear();
                    valid = false;
                }
                else if (currentView.Project.CollectedData.TableExists(txtDataTableName.Text.Trim()))
                {
                    MsgBox.ShowError(SharedStrings.INVALID_DATA_TABLE_NAME);
                    txtDataTableName.Clear();
                    valid = false;
                }
                else
                {
                    for (int i = 0; i < txtDataTableName.Text.Trim().Length - 1; i++)
                    {
                        string dataTableChar = txtDataTableName.Text.Trim().Substring(i, 1);
                        Match m = Regex.Match(dataTableChar, "[ A-Za-z0-9_]");
                        if (!m.Success)
                        {
                            string newDataTableName = Util.RemoveNonAlphaNumericExceptSpaces(txtDataTableName.Text.Trim());
                            if (!string.IsNullOrEmpty(newDataTableName))
                            {

                                int nPos = newDataTableName.IndexOf(" ");
                                if (nPos >= 0 || AppData.Instance.IsReservedWord(newDataTableName))
                                {
                                    MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                                    txtDataTableName.Clear();
                                    valid = false;
                                    return;
                                }
                                else
                                {
                                    if (newDataTableName.Trim().Length > 64)
                                    {
                                        MsgBox.ShowError(SharedStrings.DATATABLE_NAME_TOO_LONG_AND_INVALID_CHARACTERS);
                                        txtDataTableName.Text = string.Empty;
                                        valid = false;
                                        return;
                                    }
                                    else
                                    {
                                        MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME + SharedStrings.RENAME_DATA_TABLE_NAME + StringLiterals.SPACE + newDataTableName);
                                        txtDataTableName.Text = Util.RemoveNonAlphaNumericExceptSpaces(newDataTableName);
                                        valid = false;
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                                valid = false;
                                txtDataTableName.Text = string.Empty;
                                return;
                            }
                        }
                    }
                }

                if (valid)
                {
                    int nPos = txtDataTableName.Text.IndexOf(" ");
                    if (nPos >= 0 || AppData.Instance.IsReservedWord(txtDataTableName.Text.Trim()))
                    {
                        MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                        txtDataTableName.Clear();
                    }
                    else
                    {
                        if (txtDataTableName.Text.Trim().Length > 64)
                        {
                            MsgBox.ShowError(SharedStrings.DATA_TABLE_NAME_TOO_LONG);
                            txtDataTableName.Text = string.Empty;
                        }
                    }
                }
                txtDataTableName.Text = txtDataTableName.Text.Trim();
                dataTableName = txtDataTableName.Text;
            }
            */
        }






        private void btnOK_Click(object sender, EventArgs e)
        {
            txtDataTableName.Text = txtDataTableName.Text.Trim();

            if (ValidateFieldsBeforeSave() == true)
            {
                DataTableName = txtDataTableName.Text;
                this.Close();
            }
            else 
            {
                txtDataTableName.Focus();
                this.DialogResult = DialogResult.None;
            }
        }






        private void TableDefinitionDialog_Load(object sender, EventArgs e)
        {



            if (!string.IsNullOrEmpty(currentView.Name))
            {
                txtDataTableName.Text = currentView.Name;
            }


            if (!string.IsNullOrEmpty(UNIQUEID_DEFAULT))
            {
                txtUniqueId.Text = UNIQUEID_DEFAULT;
            }
        }

        // 

        //Private Methods




        private void EnableDisableOk()
        {
            btnOK.Enabled = (!string.IsNullOrEmpty(txtDataTableName.Text.Trim()) && !string.IsNullOrEmpty(txtUniqueId.Text.Trim()));
        }




        private bool ValidateStartingId()
        {
            bool valid = true;
            for (int i = 0; i < txtUniqueId.Text.Trim().Length; i++)
            {
                string uniqueId = txtUniqueId.Text.Trim().Substring(i, 1);
                Match m = Regex.Match(uniqueId, "[0-9]");
                if (!m.Success)
                {
                    MsgBox.Show(SharedStrings.INVALID_STARTING_UNIQUE_ID, "Invalid Unique Id", MessageBoxButtons.OK);
                    valid = false;
                    txtUniqueId.Clear();
                    txtUniqueId.Focus();
                    return valid;
                }
            }

            if (valid)
            {
                startingId = Int32.Parse(txtUniqueId.Text.Trim());
            }
            return valid;
        }




        private bool ValidateFieldsBeforeSave()
        {

            if (ValidateDataTableName() == true)
            {
                if (ValidateStartingId() == true)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }

        }





        private bool ValidateDataTableName()
        {
            bool valid = true;
            if (!string.IsNullOrEmpty(txtDataTableName.Text))
            {
                Match nameMatch = Regex.Match(txtDataTableName.Text.Substring(0, 1), "[0-9]");
                Match underscoreMatch = Regex.Match(txtDataTableName.Text.Substring(0, 1), "[_]");
                if (nameMatch.Success)
                {
                    MsgBox.ShowError(SharedStrings.DATA_TABLE_NAME_BEGIN_NUMERIC);
                    txtDataTableName.Clear();
                    valid = false;
                }
                else if (underscoreMatch.Success)
                {
                    MsgBox.ShowError(SharedStrings.DATA_TABLE_NAME_BEGIN_UNDERSCORE);
                    txtDataTableName.Clear();
                    valid = false;
                }
                else if (currentView.Project.CollectedData.TableExists(txtDataTableName.Text.Trim()))
                {
                    MsgBox.ShowError(string.Format(SharedStrings.DATA_TABLE_NAME_ALREADY_EXISTS, txtDataTableName.Text.Trim()));
                    txtDataTableName.Clear();
                    valid = false;
                }
                else
                {
                    for (int i = 0; i < txtDataTableName.Text.Trim().Length - 1; i++)
                    {
                        string dataTableChar = txtDataTableName.Text.Trim().Substring(i, 1);
                        Match m = Regex.Match(dataTableChar, "[ A-Za-z0-9_]");
                        if (!m.Success)
                        {
                            string newDataTableName = Util.RemoveNonAlphaNumericExceptSpaces(txtDataTableName.Text.Trim());
                            if (!string.IsNullOrEmpty(newDataTableName))
                            {

                                int nPos = newDataTableName.IndexOf(" ");
                                if (nPos >= 0 || AppData.Instance.IsReservedWord(newDataTableName))
                                {
                                    MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                                    txtDataTableName.Clear();
                                    valid = false;
                                    return valid;
                                }
                                else
                                {
                                    if (newDataTableName.Trim().Length > 64)
                                    {
                                        MsgBox.ShowError(SharedStrings.DATATABLE_NAME_TOO_LONG_AND_INVALID_CHARACTERS);
                                        txtDataTableName.Text = string.Empty;
                                        valid = false;
                                        return valid;
                                    }
                                    else
                                    {
                                        MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME + SharedStrings.RENAME_DATA_TABLE_NAME + StringLiterals.SPACE + newDataTableName);
                                        txtDataTableName.Text = Util.RemoveNonAlphaNumericCharacters(newDataTableName);
                                        valid = false;
                                        return valid;
                                    }
                                }
                            }
                            else
                            {
                                MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                                valid = false;
                                txtDataTableName.Text = string.Empty;
                                return valid;
                            }
                        }
                    }
                }
                if (valid)
                {
                    int nPos = txtDataTableName.Text.IndexOf(" ");
                    if (nPos >= 0 || AppData.Instance.IsReservedWord(txtDataTableName.Text.Trim()))
                    {
                        MsgBox.ShowError(SharedStrings.INVALID_DATATABLE_NAME);
                        txtDataTableName.Clear();
                        valid = false;
                        return valid;
                    }
                    else
                    {
                        if (txtDataTableName.Text.Trim().Length > 64)
                        {
                            MsgBox.ShowError(SharedStrings.DATA_TABLE_NAME_TOO_LONG);
                            txtDataTableName.Text = string.Empty;
                            valid = false;
                            return valid;
                        }
                    }
                }
            }
            return valid;
        }

        // 

        //Public Properties




        public Int32 StartingID
        {
            get
            {
                return startingId;
            }
            set
            {
                startingId = value;
            }
        }




        public string DataTableName
        {
            get
            {
                return dataTableName;
            }
            set
            {
                dataTableName = value;
            }
        }

        //



    }
}


 