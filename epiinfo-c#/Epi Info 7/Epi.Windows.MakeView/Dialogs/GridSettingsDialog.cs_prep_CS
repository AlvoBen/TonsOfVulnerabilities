using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using Epi.Windows.Dialogs;

namespace Epi.Windows.MakeView.Dialogs
{



    public         class GridSettingsDialog : DialogBase
 {



        public event EventHandler SettingsSaved;

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
  public GridSettingsDialog()
  {

   InitializeComponent();
  }





  public GridSettingsDialog(MainForm frm) : base(frm)
        {
            InitializeComponent();
            this.udGridSize.Validating += new CancelEventHandler(OnSettingChanged);
            this.Validating += new CancelEventHandler(OnSettingChanged);
            LoadSettings();
        }

        //

        //Event Handlers

        private void OnSettingChanged(object sender, CancelEventArgs e)
        {
            if (!ValidateInput())
            {
                e.Cancel = true;
            }
        }






  private void btnCancel_Click(object sender, System.EventArgs e)
  {
   this.Close();
  }






        private void btnOK_Click(object sender, System.EventArgs e)
        {
            Save();
            if (SettingsSaved != null)
            {
                SettingsSaved(this, new EventArgs());
            }
            Close();
        }

        //

        //Private Methods




        private void LoadSettings()
        {
            Configuration config = Configuration.GetNewInstance();
            chkSnapToGrid.Checked = config.Settings.SnapToGrid;
            chkShowGrid.Checked = config.Settings.ShowGrid;
            udGridSize.Text = config.Settings.GridSize.ToString();
            udGridSize.Value = config.Settings.GridSize;
            if (config.Settings.SnapPromptToGrid)
            {
                rbSnapToPrompt.Checked = true;
            }
            if (config.Settings.SnapInputControlToGrid)
            {
                rbSnapToField.Checked = true;
            }
            gbSnapToGrid.Enabled = chkSnapToGrid.Checked;
        }




        private void Save()
        {
            if (this.Validate())
            {
                Configuration config = Configuration.GetNewInstance();
                config.Settings.SnapToGrid = chkSnapToGrid.Checked;
                config.Settings.SnapPromptToGrid = rbSnapToPrompt.Checked;
                config.Settings.SnapInputControlToGrid = rbSnapToField.Checked;
                config.Settings.GridSize = Convert.ToInt32(udGridSize.Text);
                config.Settings.ShowGrid = chkShowGrid.Checked;
                Configuration.Save(config);
            }
        }

        private void chkSnapToGrid_CheckedChanged(object sender, EventArgs e)
        {
            gbSnapToGrid.Enabled = chkSnapToGrid.Checked;
        }

        //

        //Protected Methods





        protected override bool ValidateInput()
        {
            if(String.IsNullOrEmpty(udGridSize.Text))
            {
                udGridSize.Text = "1";
                udGridSize.Value = 1;
            }

            if (Convert.ToInt32(udGridSize.Text)<1)
            {
                udGridSize.Text = "1";
                udGridSize.Value = 1;
            }

            if (Convert.ToInt32(udGridSize.Text) > 6)
            {
                udGridSize.Text = "6";
                udGridSize.Value = 6;
            }
            bool isValid = (!String.IsNullOrEmpty(udGridSize.Text) && (rbSnapToField.Checked || rbSnapToPrompt.Checked));
            btnOK.Enabled = isValid;
            return isValid;
        }

        //
 }
}


 