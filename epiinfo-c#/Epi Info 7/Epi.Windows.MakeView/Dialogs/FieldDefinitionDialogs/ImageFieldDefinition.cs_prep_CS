using System;
using System.Collections.Generic;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Epi.Fields;


namespace Epi.Windows.MakeView.Dialogs.FieldDefinitionDialogs
{
    public         class ImageFieldDefinition : GenericFieldDefinition
    {
        private ImageField field;

        //Constructors



        public ImageFieldDefinition()
        {
            InitializeComponent();
        }






  public ImageFieldDefinition(MainForm frm, Page page) : base(frm)
  {
   InitializeComponent();
   this.mode = FormMode.Create;
   this.page = page;
  }






  public ImageFieldDefinition(MainForm frm, ImageField field) : base(frm)
  {
   InitializeComponent();
   this.mode = FormMode.Edit;
   this.field = field;
   this.page = field.Page;
   LoadFormData();
  }
  //Constructors

        //Private Methods

        private void LoadFormData()
        {
            Configuration config = Configuration.GetNewInstance();
            FontStyle style = FontStyle.Regular;
            if (config.Settings.EditorFontBold)
            {
                style |= FontStyle.Bold;
            }
            if (config.Settings.EditorFontItalics)
            {
                style |= FontStyle.Italic;
            }
            if ((field.PromptFont == null) || ((field.PromptFont.Name == "Microsoft Sans Serif") && (field.PromptFont.Size == 8.5)))
            {
                field.PromptFont = new Font(config.Settings.EditorFontName, (float)config.Settings.EditorFontSize, style);
            }
            txtPrompt.Text = field.PromptText;
            txtFieldName.Text = field.Name;
            chkRetainSize.Checked = field.ShouldRetainImageSize;
            promptFont = field.PromptFont;
        }
        //

        //Public Methods




        protected override void SetFieldProperties()
        {
            field.PromptText = txtPrompt.Text;
            field.Name = txtFieldName.Text;
            field.ShouldRetainImageSize = chkRetainSize.Checked;
            if (promptFont != null)
            {
                field.PromptFont = promptFont;
            }
        }




        public override RenderableField Field
        {
            get
            {
                return field;
            }
        }
        //


        private void btnFont_Click(object sender, EventArgs e)
        {
            FontDialog dialog = new FontDialog();
            if (promptFont != null)
            {
                dialog.Font = promptFont;
            }
            DialogResult result = dialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                promptFont = dialog.Font;
                ((GenericFieldDefinition)this).Controls["txtPrompt"].Focus();
            }
        }

        private void ImageFieldDefinition_Load(object sender, EventArgs e)
        {

        }
    }
}

 