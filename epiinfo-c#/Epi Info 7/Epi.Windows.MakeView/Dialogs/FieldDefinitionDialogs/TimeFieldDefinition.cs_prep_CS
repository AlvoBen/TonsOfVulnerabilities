//Namespaces

using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using Epi.Data.Services;
using Epi.Fields;

//

namespace Epi.Windows.MakeView.Dialogs.FieldDefinitionDialogs
{



    public         class TimeFieldDefinition : PatternableTextFieldDefinition
 {
  //Fields
  private TimeField field;
  //

  //Private Methods
  private void PopulatePatterns()
  {

            System.Data.DataView patterns = (System.Data.DataView)AppData.Instance.DataPatternsDataTable.DefaultView;
   patterns.RowFilter = "DataTypeId = " + ((int) DataType.Time).ToString();
   cbxPattern.DataSource = patterns;
   cbxPattern.DisplayMember = Epi.ColumnNames.EXPRESSION;
   cbxPattern.ValueMember = Epi.ColumnNames.PATTERN_ID;
            cbxPattern.DropDownStyle = ComboBoxStyle.DropDownList;
  }

  private void LoadFormData()
  {
            SetFontStyles(field);

   txtPrompt.Text = field.PromptText;
   txtFieldName.Text = field.Name;
   chkReadOnly.Checked = field.IsReadOnly;
   chkRepeatLast.Checked = field.ShouldRepeatLast;
   chkRequired.Checked = field.IsRequired;

            int fieldType = (int)field.FieldType;

  }
  //

  //Constructors



        public TimeFieldDefinition()
        {
            InitializeComponent();
        }






  public TimeFieldDefinition(MainForm frm, Page page) : base(frm)
  {
   InitializeComponent();
   this.mode = FormMode.Create;
   this.page = page;
   PopulatePatterns();
   cbxPattern.SelectedIndex = -1;
  }






  public TimeFieldDefinition(MainForm frm, TimeField field) : base(frm)
  {
   InitializeComponent();
   this.mode = FormMode.Edit;
   this.field = field;
   this.page = field.Page;
   PopulatePatterns();
            cbxPattern.SelectedIndex = -1;
   LoadFormData();
  }
  //Constructors

  //Public Methods




        protected override void SetFieldProperties()
        {
            field.PromptText = txtPrompt.Text;
            field.Name = txtFieldName.Text;

            if (promptFont != null)
            {
                field.PromptFont = promptFont;
            }
            if (controlFont != null)
            {
                field.ControlFont = controlFont;
            }
            field.IsRequired = chkRequired.Checked;
            field.IsReadOnly = chkReadOnly.Checked;
            field.ShouldRepeatLast = chkRepeatLast.Checked;
        }




  public override RenderableField Field
  {
   get
   {
    return field;
   }
  }
  //

        private void txtFieldName_TextChanged(object sender, EventArgs e)
        {

        }



 }
}

 