using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using Epi;
using Epi.Fields;
using Epi.Windows.Dialogs;


namespace Epi.Windows.MakeView.Dialogs.FieldDefinitionDialogs
{



    public         class FieldDefinition : DialogBase
 {
  //Fields




  protected int xCoordinate;




  protected int yCoordinate;






  protected FormMode mode;




  protected Page page;




        protected Font promptFont;




  protected Font controlFont;

  //Fields

  //Constructors



        public FieldDefinition()
        {
            InitializeComponent();
        }



        public FieldDefinition(MainForm frm) : base(frm)
  {
   InitializeComponent();
  }
  //Constructors

  //Protected Methods





  protected virtual bool ValidateDialogInput()
  {

   return true;
  }




        protected virtual void SetFieldProperties()
        {
        }
































  //

  //Public Methods





  public void CreateField(int xLocation, int yLocation)
  {
   this.xCoordinate = xLocation;
   this.yCoordinate = yLocation;
   this.mode = FormMode.Create;
  }




  public virtual RenderableField Field
  {
   get
   {
    return null;
   }
  }
  //

  //Event Handlers

  protected virtual void btnOk_Click(object sender, System.EventArgs e)
  {
   if (ValidateDialogInput())
   {
                SetFieldProperties();
                page.GetView().MustRefreshFieldCollection = true;
    this.DialogResult = DialogResult.OK;
    this.Hide();
   }
  }

  private void btnPromptFont_Click(object sender, System.EventArgs e)
  {
   FontDialog dialog = new FontDialog();
   if (promptFont != null)
   {
    dialog.Font = promptFont;

   }
   DialogResult result = dialog.ShowDialog();
            if (result == DialogResult.OK)
            {
                promptFont = dialog.Font;
                ((GenericFieldDefinition)this).Controls["txtPrompt"].Focus();
            }
  }

  private void btnFieldFont_Click(object sender, System.EventArgs e)
  {
   FontDialog dialog = new FontDialog();
   if (controlFont != null)
   {
    dialog.Font = controlFont;
   }
   DialogResult result = dialog.ShowDialog();
   if (result == DialogResult.OK)
   {
    controlFont = dialog.Font;
   }
  }

        private bool ShouldUseDefaultPromptFont(RenderableField field)
        {
            if ((field.PromptFont == null) || ((field.PromptFont.Name == "Microsoft Sans Serif") && (field.PromptFont.Size == 8.5)))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        private bool ShouldUseDefaultControlFont(RenderableField field)
        {
            if ((field.ControlFont == null) || ((field.ControlFont.Name == "Microsoft Sans Serif") && (field.ControlFont.Size == 8.5)))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        protected void SetFontStyles(RenderableField field)
        {
            if (ShouldUseDefaultPromptFont(field))
            {
                Configuration config = Configuration.GetNewInstance();
                FontStyle promptFontStyle = FontStyle.Regular;
                if (config.Settings.EditorFontBold)
                {
                    promptFontStyle |= FontStyle.Bold;
                }
                if (config.Settings.EditorFontItalics)
                {
                    promptFontStyle |= FontStyle.Italic;
                }
                field.PromptFont = new Font(config.Settings.EditorFontName, (float)config.Settings.EditorFontSize, promptFontStyle);
            }

            if (ShouldUseDefaultControlFont(field))
            {
                Configuration config = Configuration.GetNewInstance();
                FontStyle controlFontStyle = FontStyle.Regular;
                if (config.Settings.ControlFontBold)
                {
                    controlFontStyle |= FontStyle.Bold;
                }
                if (config.Settings.ControlFontItalics)
                {
                    controlFontStyle |= FontStyle.Italic;
                }
                field.ControlFont = new Font(config.Settings.ControlFontName, (float)config.Settings.ControlFontSize, controlFontStyle);
            }

            promptFont = field.PromptFont;
            controlFont = field.ControlFont;
        }
  //
 }
}

 