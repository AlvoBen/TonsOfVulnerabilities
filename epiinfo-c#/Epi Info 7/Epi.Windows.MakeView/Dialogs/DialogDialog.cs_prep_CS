using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Data;
using System.Windows.Forms;
using Epi;
using Epi.Windows;
using Epi.Windows.Controls;
using Epi.Data.Services;
using EpiInfo.Plugin;
using VariableCollection = Epi.Collections.NamedObjectCollection;


namespace Epi.Windows.MakeView.Dialogs
{



    public         class DialogDialog : CommandDesignDialog
 {
  //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
  public DialogDialog()
  {
   InitializeComponent();
  }





        public DialogDialog(Epi.Windows.MakeView.Forms.MakeViewMainForm frm)
            : base(frm)
  {
   InitializeComponent();
            mainForm = frm;
            Construct();
        }






        public DialogDialog(Epi.Windows.MakeView.Forms.MakeViewMainForm frm, Project project)
            : base(frm)
        {
            InitializeComponent();
            mainForm = frm;
            this.project = project;
            Construct();
        }






        public DialogDialog(Epi.Windows.MakeView.Forms.MakeViewMainForm frm, bool showSave)
            : base(frm)
        {
            InitializeComponent();
            mainForm = frm;
            if (showSave)
            {
                showSaveOnly = true;
                this.btnSaveOnly.Click += new System.EventHandler(this.btnSaveOnly_Click);
            }
            Construct();
        }

        //Constructor

        //private Attributes
        private Project project = null;

        private string multichoiceList = string.Empty;
        private bool showSaveOnly = false;
        //private Attributes

        //Public Methods
        //Public Methods

        //Protected Methods





        protected override bool ValidateInput()
        {
            //Preconditions
            if (!base.ValidateInput())
            {
                return false;
            }
            //Preconditions

            if ((rdbGetVar.Checked) || (rdbListofValues.Checked))
   {
    if (string.IsNullOrEmpty(cmbInputVar.Text.Trim()))
    {
     ErrorMessages.Add(SharedStrings.NO_INPUT_VARIABLE);
    }
    if (cmbVarType.SelectedIndex == 1 && string.IsNullOrEmpty(cmbDialogType.Text.Trim()))
    {
     ErrorMessages.Add(SharedStrings.NO_DIALOG_FORMAT);
    }
    if (rdbListofValues.Checked)
    {
     if (string.IsNullOrEmpty(cmbShowVar.Text.Trim()))
     {
      ErrorMessages.Add(SharedStrings.NO_SHOW_VARIABLE);
     }
    }
   }

   return (ErrorMessages.Count == 0);
  }




  protected override void GenerateCommand()
  {
            string expression = string.Empty;
            DataRow row = null;
            bool isTextInput = false;

            StringBuilder sb = new StringBuilder();
   sb.Append(CommandNames.DIALOG);             // "DIALOG"
   sb.Append(StringLiterals.SPACE);

   sb.Append(StringLiterals.DOUBLEQUOTES);
   sb.Append(txtPrompt.Text.Trim());           
   sb.Append(StringLiterals.DOUBLEQUOTES);
   sb.Append(StringLiterals.SPACE);

            if (!this.rdbSimple.Checked)
   {
    sb.Append(cmbInputVar.Text).Append(StringLiterals.SPACE);  
   }
            if (this.rdbGetVar.Checked)
   {
                if (cmbDialogType.Enabled)
                {
                    row = ((DataRowView)cmbDialogType.SelectedItem).Row;
                    expression = row[ColumnNames.EXPRESSION].ToString();

                    if (expression == "")       // StringList for multi-choice
                    {
                        sb.Append(this.multichoiceList);
                    }
                    else
                    {
                        sb.Append(expression);
                        if (expression == "TEXTINPUT")
                        {
                            isTextInput = true;
                        }
                        expression = string.Empty;
                    }
                }
                else if (string.IsNullOrEmpty(expression))
                {
                    row = ((DataRowView)cmbVarType.SelectedItem).Row;  
                    expression = row[ColumnNames.EXPRESSION].ToString();
                    sb.Append(expression);
                }

                sb.Append(StringLiterals.SPACE);

                if (isTextInput)
                {
                    expression = txtLength.Text;
                    if (string.IsNullOrEmpty(expression))
                        expression = " ";
                    if (!string.IsNullOrEmpty(expression))
                    {
                        sb.Append(StringLiterals.DOUBLEQUOTES).Append(expression);
                        sb.Append(StringLiterals.DOUBLEQUOTES).Append(StringLiterals.SPACE);
                    }
                }
                else
                {
                    expression = cmbInputMask.Text;
                    if (!string.IsNullOrEmpty(expression))
                    {
                        sb.Append(StringLiterals.DOUBLEQUOTES).Append(expression);
                        sb.Append(StringLiterals.DOUBLEQUOTES).Append(StringLiterals.SPACE);
                    }
                }
            }
            else if (this.rdbListofValues.Checked)
            {
                if (!string.IsNullOrEmpty(cmbDialogType.Text.Trim()))
                {
                    sb.Append(CommandNames.DBVALUES).Append(StringLiterals.SPACE);
                }
                sb.Append(cmbShowTable.Text).Append(StringLiterals.SPACE);
                sb.Append(cmbShowVar.Text).Append(StringLiterals.SPACE);
            }

            if (!string.IsNullOrEmpty(txtTitle.Text.Trim()))    
            {
                sb.Append(CommandNames.TITLETEXT);
                sb.Append(StringLiterals.EQUAL);
                sb.Append(StringLiterals.DOUBLEQUOTES);
                sb.Append(txtTitle.Text.Trim());
                sb.Append(StringLiterals.DOUBLEQUOTES);
            }

            CommandText = sb.ToString();
  }




        public override void CheckForInputSufficiency()
  {
   bool inputValid = ValidateInput();
   btnOK.Enabled = inputValid;
   btnSaveOnly.Enabled = inputValid ;
  }
  //

  //Private Methods

        private void AlignControls()
        {
            int left = lblVarType.Left;
            lblShowTable.Left = left;
            lblShowTable.Top = lblDialogType.Top;
            cmbShowTable.Left = left;
            cmbShowTable.Top = cmbDialogType.Top;
            lblShowVar.Left = left;
            lblShowVar.Top = lblLength.Top;
            cmbShowVar.Left = left;
            cmbShowVar.Top = txtLength.Top;
            lblInputMask.Left = left;
            lblInputMask.Top = lblLength.Top;
            cmbInputMask.Left = left;
            cmbInputMask.Top = txtLength.Top;
        }

        private void Construct()
        {
            if (!this.DesignMode)
            {
                AlignControls();
                LoadVarTypes();
                LoadDialogTypes();
                LoadShowTables();
                this.btnOK.Click += new System.EventHandler(this.btnOK_Click);
            }
        }




        private void RepositionButtons()
        {
            int x = btnClear.Left;
            int y = btnClear.Top;
            btnClear.Location = new Point(btnCancel.Left, y);
            btnCancel.Location = new Point(btnOK.Left, y);
            btnOK.Location = new Point(btnSaveOnly.Left, y);
            btnSaveOnly.Location = new Point(x, y);
        }






  private void ToggleControls(bool visible, bool listOfValuesVisible)
  {
            lblInputVar.Visible = visible;
            cmbInputVar.Visible = visible;
            lblVarType.Visible = visible;
            cmbVarType.Visible = visible;
            lblDialogType.Visible = (visible && !listOfValuesVisible);
            cmbDialogType.Visible = (visible && !listOfValuesVisible);
            lblLength.Visible = (visible && !listOfValuesVisible);
            txtLength.Visible = (visible && !listOfValuesVisible);
            lblShowTable.Visible = (visible && listOfValuesVisible);
            cmbShowTable.Visible = (visible && listOfValuesVisible);
            lblShowVar.Visible = (visible && listOfValuesVisible);
            cmbShowVar.Visible = (visible && listOfValuesVisible);
   btnOK.Enabled = !visible;
   btnSaveOnly.Enabled = !visible;
  }





        private void LoadInputVars(ComboBox cmb)
        {
            VariableScope scopeWord = VariableScope.Standard | VariableScope.Global | VariableScope.Permanent | VariableScope.DataSource;
            List vars = this.EpiInterpreter.Context.GetVariablesInScope(scopeWord);
            if (cmb.Items.Count <= 0)
            {
                cmb.Items.Clear();
                foreach (EpiInfo.Plugin.IVariable var in vars)
                {
                    if (var.Name != ColumnNames.REC_STATUS && var.Name != ColumnNames.UNIQUE_KEY)
                    {
                        cmb.Items.Add(var.Name.ToString());
                    }
                }




                cmb.SelectedIndex = -1;
            }
        }



        private void LoadVarTypes()
        {
            LocalizedComboBox cmb = cmbVarType;
            if (cmb.DataSource == null)
            {
                cmb.Items.Clear();
                this.cmbVarType.SelectedIndexChanged -= new System.EventHandler( this.cmbVarType_SelectedIndexChanged );
                cmb.DataSource = AppData.Instance.DataTypesDataTable.DefaultView;
                cmb.DisplayMember = ColumnNames.NAME;
                cmb.ValueMember = ColumnNames.DATATYPEID;
                cmb.SkipTranslation = false;
                cmb.SelectedIndex = 1;
                this.cmbVarType.SelectedIndexChanged += new System.EventHandler( this.cmbVarType_SelectedIndexChanged );
            }


        }



  private void LoadDialogTypes()
  {
   LocalizedComboBox cmb = cmbDialogType;
            if (cmb.DataSource == null)
            {
                cmb.Items.Clear();
                cmb.DataSource = AppData.Instance.DialogFormatsDataTable.DefaultView;
                cmb.DisplayMember = ColumnNames.NAME;
                cmb.ValueMember = ColumnNames.ID;
                cmb.SkipTranslation = false;
                cmb.SelectedIndex = 0;

            }
  }




        private void LoadShowTables()
        {
            if (project != null)
            {
                ComboBox cmb = cmbShowTable;
                if (cmb.DataSource == null)
                {
                    cmb.Items.Clear();
                    List names = project.GetDataTableNames();
                    foreach (string name in names)
                    {
                        if (name != string.Empty)
                        {
                            cmb.Items.Add(name);
                        }
                    }
                    if (cmb.Items.Count > 0 && cmb.Visible)
                    {

                        cmb.SelectedItem = 0;
                    }
                }
            }
        }





        private void LoadShowVars(string tableName)
        {
            if (project != null)
            {
                ComboBox cmb = cmbShowVar;
                cmb.Items.Clear();
                if (tableName != string.Empty)
                {
                    List columnNames = project.GetTableColumnNames(tableName);
                    foreach (string name in columnNames)
                    {

                        if (name != ColumnNames.REC_STATUS && name != ColumnNames.UNIQUE_KEY)
                        {
                            cmb.Items.Add(name);
                        }
                    }

                    cmbShowVar.SelectedItem = 0;
                }
            }
        }






        private string GetSelectionList()
        {
            string selections = string.Empty;
            DialogListDialog dlg = new DialogListDialog(mainForm);
            if (dlg.ShowDialog(this) == DialogResult.OK)
            {
                selections = dlg.Selections;
            }
            return selections;

        }



  //

  //Event Handlers






        private void DialogDialog_Load(object sender, EventArgs e)
        {







            btnSaveOnly.Visible = showSaveOnly;
            if (showSaveOnly)
            {
                RepositionButtons();
            }
            LoadInputVars(cmbInputVar);
        }






  private void btnClear_Click(object sender, System.EventArgs e)
  {
   txtPrompt.Text = string.Empty;
   txtTitle.Text = string.Empty;
   rdbSimple.Checked = true;
   ToggleControls(false,false);
  }





  private void RadioButtonClick(object sender, System.EventArgs e)
  {
   if (rdbSimple.Checked)
   {
    ToggleControls(false,false);

   }
   else if (rdbGetVar.Checked)
   {
    ToggleControls(true,false);
   }
   else if (rdbListofValues.Checked)
   {
    ToggleControls(true,true);
                LoadShowTables();
   }
  }






        private void cmbDialogType_SelectedIndexChanged(object sender, EventArgs e)
        {
            LocalizedComboBox cmb = cmbDialogType;
            multichoiceList = string.Empty;
            txtLength.Enabled = (cmb.SelectedIndex < 1);
            lblLength.Enabled = (cmb.SelectedIndex < 1);
            if (cmb.DataSource != null && cmbDialogType.SelectedIndex > 0)
            {
                CheckForInputSufficiency();
                DataRow row = ((DataRowView)cmb.SelectedItem).Row;
                if (string.Compare(row[ColumnNames.EXPRESSION].ToString(), "") == 0)
                {
                    multichoiceList = GetSelectionList();
                }
            }

        }





  private void SelectedIndexChanged(object sender, System.EventArgs e)
  {
   CheckForInputSufficiency();
  }

        private void cmbShowTable_SelectedIndexChanged(object sender, EventArgs e)
        {
            LoadShowVars(cmbShowTable.Text);
        }

        private void SetVisible( bool hasSize, bool hasPattern )
        {
            txtLength.Visible = hasSize;
            lblLength.Visible = hasSize;
            cmbInputMask.Visible = hasPattern;
            lblInputMask.Visible = hasPattern;
            lblDialogType.Enabled = (hasSize);
            cmbDialogType.Enabled = (hasSize);
        }

        private void cmbVarType_SelectedIndexChanged( object sender, EventArgs e )
        {
            if (cmbVarType.SelectedIndex < 0 || rdbListofValues.Checked)
            {
                return;
            }

            DataRow row = ((DataRowView)cmbVarType.SelectedItem).Row;
            bool hasSize = bool.Parse( row["HasSize"].ToString() );
            bool hasPattern = bool.Parse( row["HasPattern"].ToString() );
            SetVisible(hasSize, hasPattern);
            if (hasPattern)
            {
                string filter = ColumnNames.DATATYPEID + " = " + row[cmbVarType.ValueMember].ToString();
                DataRow[] masks = AppData.Instance.DataPatternsDataTable.Select( filter );
                this.cmbInputMask.DataSource = masks;
                this.cmbInputMask.DisplayMember = ColumnNames.EXPRESSION;
                this.cmbInputMask.ValueMember = ColumnNames.PATTERN_ID;
            }
            if (!hasSize)
            {
                cmbDialogType.SelectedIndex = -1;
            }
        }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/analysis-commands-dialog.html");
        }

        //




 }
}
 