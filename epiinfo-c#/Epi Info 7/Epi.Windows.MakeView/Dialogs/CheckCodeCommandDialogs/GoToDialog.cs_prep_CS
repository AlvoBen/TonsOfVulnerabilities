//Namespaces

using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using Epi;
using System.Windows.Forms;
using Epi.Windows.Dialogs;
using Epi.Fields;

// 

namespace Epi.Windows.MakeView.Dialogs.CheckCodeCommandDialogs
{



    public         class GoToDialog : CheckCodeDesignDialog
    {
        //Private Data Members
        View currentView;
        // 

        //Constructors




        [Obsolete("Use of default constructor not allowed", true)]
  public GoToDialog()
  {
   InitializeComponent();
  }





  public GoToDialog(MainForm frm) : base(frm)
        {
            InitializeComponent();
        }

        // 

        //Private Event Handlers






  private void btnCancel_Click(object sender, System.EventArgs e)
  {
   this.Close();
  }






        private void btnOk_Click(object sender, System.EventArgs e)
        {
            bool fieldNameFound = false;
            foreach (Field field in currentView.Fields)
            {
                if (lbxFields.SelectedItem.ToString().Trim().Equals(field.Name.Trim()))
                {
                    Output = CommandNames.GOTO + StringLiterals.SPACE + lbxFields.SelectedItem.ToString();
                    fieldNameFound = true;
                    break;
                }
            }

            if (!fieldNameFound)
            {
                string temp = lbxFields.SelectedItem.ToString();
                string pagePosition = temp.Substring(0, temp.IndexOf(' '));
                Output = CommandNames.GOTO + StringLiterals.SPACE + pagePosition;
            }

            this.DialogResult = DialogResult.OK;
            this.Hide();
        }






        private void lbxFields_SelectedIndexChanged(object sender, EventArgs e)
        {
            btnOk.Enabled = (lbxFields.SelectedItem != null);
        }






        protected override void btnHelp_Click(object sender, System.EventArgs e)
        {
            System.Diagnostics.Process.Start("http://wwwn.cdc.gov/epiinfo/user-guide/command-reference/check-commands-goto.html");
        }

        // 

        //Public Properties




        public override View View
        {
            set
            {
                foreach (Field field in value.Fields)
                {
                    if (field is Fields.RenderableField && !(field is Fields.LabelField))
                    {
                        lbxFields.Items.Add(field.Name);
                    }
                }

                foreach (Page page in value.Pages)
                {
                    int position = page.Position + 1;
                    lbxFields.Items.Add(position + "    " + page.Name);
                }

                currentView = value;
            }
        }
        // 

    }
}
 