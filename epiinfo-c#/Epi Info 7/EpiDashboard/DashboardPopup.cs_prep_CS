using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;

namespace EpiDashboard
{
    public class DashboardPopup
    {
        private Rectangle maskRectangle = new Rectangle();

        public FrameworkElement Parent { get {return _Parent; } set{ _Parent=value; } } FrameworkElement _Parent;





        public FrameworkElement Content { get {return _Content; } set{ _Content=value; } } FrameworkElement _Content;





        public DashboardPopup()
        {
            Button button = new Button();
            button.Width = 100;
            button.Height = 200;
            button.Content = "I am the popup!";

            button.Click +=  CxPlaceHolder;

            Content = button;
        }

        public void Show()
        {
            Grid grid = GetRootGrid();

            if (grid != null)
            {
                DoubleAnimation opacityAnimation = new DoubleAnimation(0.5, new Duration(TimeSpan.FromSeconds(0.15)));

                Storyboard opacityBoard = new Storyboard();
                opacityBoard.Children.Add(opacityAnimation);

                Storyboard.SetTarget(opacityAnimation, maskRectangle);
                Storyboard.SetTargetProperty(opacityAnimation, new PropertyPath("(Opacity)"));

                opacityBoard.Completed += 

























 CxPlaceHolder;

                opacityBoard.Begin();

                grid.Children.Add(maskRectangle);
                Grid.SetColumnSpan(maskRectangle, 100);
                Grid.SetRowSpan(maskRectangle, 100);
            }
        }

        public void Close()
        {
            Grid grid = GetRootGrid();

            if (grid != null)
            {
                ScaleTransform scaleTransform = new ScaleTransform(1.0, 1.0, Content.Width / 2.0, Content.Height / 2.0);
                Content.RenderTransform = scaleTransform;

                Storyboard scaleBoard = new Storyboard();

                DoubleAnimation scaleXAnimation = new DoubleAnimation(0.0, TimeSpan.FromSeconds(0.15));

                scaleBoard.Children.Add(scaleXAnimation);

                Storyboard.SetTarget(scaleXAnimation, Content);
                Storyboard.SetTargetProperty(scaleXAnimation, new PropertyPath("(UIElement.RenderTransform).(ScaleTransform.ScaleX)"));

                DoubleAnimation scaleYAnimation = new DoubleAnimation(0.0, TimeSpan.FromSeconds(0.15));

                scaleBoard.Children.Add(scaleYAnimation);

                Storyboard.SetTarget(scaleYAnimation, Content);
                Storyboard.SetTargetProperty(scaleYAnimation, new PropertyPath("(UIElement.RenderTransform).(ScaleTransform.ScaleY)"));

                scaleBoard.Completed += 
















 CxPlaceHolder;

                scaleBoard.Begin();
            }
        }

        private Grid GetRootGrid()
        {
            FrameworkElement root = Parent;











            return root as Grid;



        }
    }
}

 