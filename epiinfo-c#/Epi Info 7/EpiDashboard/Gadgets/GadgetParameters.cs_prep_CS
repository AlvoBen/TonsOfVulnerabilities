using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Epi;

namespace EpiDashboard
{



    [Obsolete("Use gadget-specific parameters objects starting in 7.1.4.0", false)]
    public class GadgetParameters : GadgetParametersBase
    {
        //Events
        public new event GadgetStatusUpdateHandler GadgetStatusUpdate;


        //

        //Constructors



        public GadgetParameters() : base()
        {
            ColumnNames = new List();
            GadgetStatusUpdate = null;
            InputVariableList = new Dictionary();
            CustomFilter = string.Empty;
            CustomSortColumnName = string.Empty;
            ShouldIncludeFullSummaryStatistics = false;
            ShouldUseAllPossibleValues = false;
            ShouldShowCommentLegalLabels = false;
            ShouldSortHighToLow = false;
            ShouldIncludeMissing = false;
            CrosstabVariableName = string.Empty;
            WeightVariableName = string.Empty;
            StrataVariableNames = new List();
            ShouldIgnoreRowLimits = false;
            SortVariables = new Dictionary();
        }




        public GadgetParameters(GadgetParameters parameters)
        {
            MainVariableNames = parameters.MainVariableNames;
            MainVariableName = parameters.MainVariableName;
            ColumnNames = parameters.ColumnNames;
            GadgetStatusUpdate = parameters.GadgetStatusUpdate;
            InputVariableList = parameters.InputVariableList;
            CustomFilter = parameters.CustomFilter;
            CustomSortColumnName = parameters.CustomSortColumnName;
            ShouldIncludeFullSummaryStatistics = parameters.ShouldIncludeFullSummaryStatistics;
            ShouldUseAllPossibleValues = parameters.ShouldUseAllPossibleValues;
            ShouldShowCommentLegalLabels = parameters.ShouldShowCommentLegalLabels;
            ShouldSortHighToLow = parameters.ShouldSortHighToLow;
            ShouldIncludeMissing = parameters.ShouldIncludeMissing;
            CrosstabVariableName = parameters.CrosstabVariableName;
            WeightVariableName = parameters.WeightVariableName;
            StrataVariableNames = parameters.StrataVariableNames;
            ShouldIgnoreRowLimits = parameters.ShouldIgnoreRowLimits;
            SortVariables = parameters.SortVariables;
        }




        public GadgetParameters(IGadgetParameters parameters)
        {
            InputVariableList = parameters.InputVariableList;
            CustomFilter = parameters.CustomFilter;
            CustomSortColumnName = parameters.CustomSortColumnName;
            StrataVariableNames = parameters.StrataVariableNames;
            SortVariables = parameters.SortVariables;
        }
        //

        //Public Properties



        public int RowsToDisplay { get {return _RowsToDisplay; } set{ _RowsToDisplay=value; } } int _RowsToDisplay;




        public double Height { get {return _Height; } set{ _Height=value; } } double _Height;




        public double Width { get {return _Width; } set{ _Width=value; } } double _Width;




        public Dictionary InputVariableList { get {return _InputVariableList; } set{ _InputVariableList=value; } } Dictionary _InputVariableList;




        public List MainVariableNames { get {return _MainVariableNames; } set{ _MainVariableNames=value; } } List _MainVariableNames;




        public string MainVariableName { get {return _MainVariableName; } set{ _MainVariableName=value; } } string _MainVariableName;




        public List ColumnNames { get {return _ColumnNames; } set{ _ColumnNames=value; } } List _ColumnNames;




        public string CrosstabVariableName { get {return _CrosstabVariableName; } set{ _CrosstabVariableName=value; } } string _CrosstabVariableName;




        public string WeightVariableName { get {return _WeightVariableName; } set{ _WeightVariableName=value; } } string _WeightVariableName;




        public string PSUVariableName { get {return _PSUVariableName; } set{ _PSUVariableName=value; } } string _PSUVariableName;




        public List StrataVariableNames { get {return _StrataVariableNames; } set{ _StrataVariableNames=value; } } List _StrataVariableNames;




        public bool ShouldIncludeMissing { get {return _ShouldIncludeMissing; } set{ _ShouldIncludeMissing=value; } } bool _ShouldIncludeMissing;




        public bool ShouldSortHighToLow { get {return _ShouldSortHighToLow; } set{ _ShouldSortHighToLow=value; } } bool _ShouldSortHighToLow;




        public bool ShouldUseAllPossibleValues { get {return _ShouldUseAllPossibleValues; } set{ _ShouldUseAllPossibleValues=value; } } bool _ShouldUseAllPossibleValues;




        public bool ShouldShowCommentLegalLabels { get {return _ShouldShowCommentLegalLabels; } set{ _ShouldShowCommentLegalLabels=value; } } bool _ShouldShowCommentLegalLabels;




        public bool ShouldIncludeFullSummaryStatistics { get {return _ShouldIncludeFullSummaryStatistics; } set{ _ShouldIncludeFullSummaryStatistics=value; } } bool _ShouldIncludeFullSummaryStatistics;




        public bool ShouldIgnoreRowLimits { get {return _ShouldIgnoreRowLimits; } set{ _ShouldIgnoreRowLimits=value; } } bool _ShouldIgnoreRowLimits;





        public string CustomFilter { get {return _CustomFilter; } set{ _CustomFilter=value; } } string _CustomFilter;





        public string CustomSortColumnName { get {return _CustomSortColumnName; } set{ _CustomSortColumnName=value; } } string _CustomSortColumnName;
        //
    }
}

 