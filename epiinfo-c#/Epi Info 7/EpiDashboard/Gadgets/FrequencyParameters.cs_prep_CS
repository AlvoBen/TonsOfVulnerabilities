using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Epi;
using Epi.Fields;

namespace EpiDashboard
{
    public class FrequencyParameters : FrequencyParametersBase
    {
        public bool DrawBorders { get {return _DrawBorders; } set{ _DrawBorders=value; } } bool _DrawBorders;
        public bool DrawHeaderRow { get {return _DrawHeaderRow; } set{ _DrawHeaderRow=value; } } bool _DrawHeaderRow;
        public bool DrawTotalRow { get {return _DrawTotalRow; } set{ _DrawTotalRow=value; } } bool _DrawTotalRow;
        public string PercentBarMode { get {return _PercentBarMode; } set{ _PercentBarMode=value; } } string _PercentBarMode;
        public int RowsToDisplay { get {return _RowsToDisplay; } set{ _RowsToDisplay=value; } } int _RowsToDisplay;
        public int PercentBarWidth { get {return _PercentBarWidth; } set{ _PercentBarWidth=value; } } int _PercentBarWidth;
        public bool ShowFrequencyCol { get {return _ShowFrequencyCol; } set{ _ShowFrequencyCol=value; } } bool _ShowFrequencyCol;
        public bool ShowPercentCol { get {return _ShowPercentCol; } set{ _ShowPercentCol=value; } } bool _ShowPercentCol;
        public bool ShowCumPercentCol { get {return _ShowCumPercentCol; } set{ _ShowCumPercentCol=value; } } bool _ShowCumPercentCol;
        public bool Show95CILowerCol { get {return _Show95CILowerCol; } set{ _Show95CILowerCol=value; } } bool _Show95CILowerCol;
        public bool Show95CIUpperCol { get {return _Show95CIUpperCol; } set{ _Show95CIUpperCol=value; } } bool _Show95CIUpperCol;
        public bool ShowPercentBarsCol { get {return _ShowPercentBarsCol; } set{ _ShowPercentBarsCol=value; } } bool _ShowPercentBarsCol;

        public FrequencyParameters()
            : base()
        {
            DrawBorders = true;
            DrawHeaderRow = true;
            DrawTotalRow = true;
            RowsToDisplay = null;
            PercentBarMode = "Bar only";
            PercentBarWidth = 100;
            ShowFrequencyCol = true;
            ShowPercentCol = true;
            ShowCumPercentCol = true;
            Show95CILowerCol = true;
            Show95CIUpperCol = true;
            ShowPercentBarsCol = true;
            IncludeFullSummaryStatistics = false;
            GadgetTitle = "Frequency";
        }




        public FrequencyParameters(FrequencyParameters parameters)
            : base()
        {
            GadgetTitle = parameters.GadgetTitle;
            GadgetDescription = parameters.GadgetDescription;

            WeightVariableName = parameters.WeightVariableName;
            StrataVariableNames = parameters.StrataVariableNames;
            CrosstabVariableName = parameters.CrosstabVariableName;
            UseFieldPrompts = parameters.UseFieldPrompts;
            DrawBorders = parameters.DrawBorders;
            DrawHeaderRow = parameters.DrawHeaderRow;
            DrawTotalRow = parameters.DrawTotalRow;
            RowsToDisplay = parameters.RowsToDisplay;
            Precision = parameters.Precision;
            PercentBarMode = parameters.PercentBarMode;
            PercentBarWidth = parameters.PercentBarWidth;
            ShowAllListValues = parameters.ShowAllListValues;
            SortHighToLow = parameters.SortHighToLow;
            IncludeMissing = parameters.IncludeMissing;
            ShowFrequencyCol = parameters.ShowFrequencyCol;
            ShowPercentCol = parameters.ShowPercentCol;
            ShowCumPercentCol = parameters.ShowCumPercentCol;
            Show95CILowerCol = parameters.Show95CILowerCol;
            Show95CIUpperCol = parameters.Show95CIUpperCol;
            ShowPercentBarsCol = parameters.ShowPercentBarsCol;
            IncludeFullSummaryStatistics = parameters.IncludeFullSummaryStatistics;
        }
    }
}

 