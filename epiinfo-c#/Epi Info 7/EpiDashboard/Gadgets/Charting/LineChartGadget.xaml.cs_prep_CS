using System;
using System.Data;
using System.Diagnostics;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Xml;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Epi;
using Epi.Data;
using Epi.Fields;
using EpiDashboard;
using EpiDashboard.Controls;
using EpiDashboard.Gadgets;
using EpiDashboard.Gadgets.Charting;
using ComponentArt.Win.DataVisualization.Charting;

namespace EpiDashboard.Gadgets.Charting
{



    public         class LineChartGadget : ChartGadgetBase
    {
        //Constructors

        private bool IsDropDownList { get {return _IsDropDownList; } set{ _IsDropDownList=value; } } bool _IsDropDownList;
        private bool IsCommentLegal { get {return _IsCommentLegal; } set{ _IsCommentLegal=value; } } bool _IsCommentLegal;
        private bool IsRecoded { get {return _IsRecoded; } set{ _IsRecoded=value; } } bool _IsRecoded;
        private bool IsOptionField { get {return _IsOptionField; } set{ _IsOptionField=value; } } bool _IsOptionField;

        public LineChartGadget()
        {
            InitializeComponent();
            Construct();
        }

        public LineChartGadget(DashboardHelper dashboardHelper)
        {
            InitializeComponent();
            this.DashboardHelper = dashboardHelper;
            Construct();

        }
        //

        //Private and Protected Methods

        private void btnRun_Click(object sender, RoutedEventArgs e)
        {
            if (LoadingCombos)
            {
                return;
            }

            RefreshResults();
        }

        private void FillComboboxes(bool update = false)
        {









































































































































        }

        private void CreateInputVariableList()
        {
































































































        }

        protected override void Construct()
        {
            this.Parameters = new LineChartParameters();

            if (!string.IsNullOrEmpty(CustomOutputHeading) && !CustomOutputHeading.Equals("(none)"))
            {
                headerPanel.Text = CustomOutputHeading;
            }

            StrataGridList = new List();
            StrataExpanderList = new List();

            mnuCopy.Click += new RoutedEventHandler(mnuCopy_Click);
            mnuSendDataToHTML.Click += new RoutedEventHandler(mnuSendDataToHTML_Click);



















            mnuSendToBack.Click += new RoutedEventHandler(mnuSendToBack_Click);
            mnuClose.Click += new RoutedEventHandler(mnuClose_Click);
            this.IsProcessing = false;
            this.GadgetStatusUpdate += new GadgetStatusUpdateHandler(RequestUpdateStatusMessage);
            this.GadgetCheckForCancellation += new GadgetCheckForCancellationHandler(IsCancelled);

            //Translation






















































            //

            base.Construct();
        }

        protected override void SetChartData(List dataList, Strata strata)
        {
            //Input Validation
            if (dataList == null)
            {
                throw new ArgumentNullException("dataList");
            }
            //

            LineChartParameters LCParameters = (LineChartParameters)Parameters;

            if (dataList.Count > 0)
            {



                if (strata != null)
                {
                    LCParameters.ChartStrataTitle = strata.Filter;
                }
                else
                {
                    LCParameters.ChartStrataTitle = String.Empty;
                }

































































































































                EpiDashboard.Controls.Charting.LineChart lineChart = new EpiDashboard.Controls.Charting.LineChart(DashboardHelper, LCParameters, dataList);
                lineChart.Margin = new Thickness(0, 0, 0, 16);
                lineChart.MouseEnter += new MouseEventHandler(chart_MouseEnter);
                lineChart.MouseLeave += new MouseEventHandler(chart_MouseLeave);
                panelMain.Children.Add(lineChart);
            }
        }

        private void EnableDisableY2Fields()
        {































        }








        private void ClearResults()
        {
            messagePanel.Visibility = System.Windows.Visibility.Collapsed;
            messagePanel.Text = string.Empty;
            descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.Collapsed;

            panelMain.Children.Clear();

            StrataGridList.Clear();
            StrataExpanderList.Clear();
        }

        protected override void RenderFinish()
        {
            waitPanel.Visibility = System.Windows.Visibility.Collapsed;

            messagePanel.MessagePanelType = EpiDashboard.Controls.MessagePanelType.StatusPanel;
            messagePanel.Text = string.Empty;
            messagePanel.Visibility = System.Windows.Visibility.Collapsed;

            HideConfigPanel();
            CheckAndSetPosition();
        }

        protected override void RenderFinishWithWarning(string errorMessage)
        {
            waitPanel.Visibility = System.Windows.Visibility.Collapsed; 

            messagePanel.MessagePanelType = EpiDashboard.Controls.MessagePanelType.WarningPanel;
            messagePanel.Text = errorMessage;
            messagePanel.Visibility = System.Windows.Visibility.Visible;

            HideConfigPanel();
            CheckAndSetPosition();
        }

        protected override void RenderFinishWithError(string errorMessage)
        {
            waitPanel.Visibility = System.Windows.Visibility.Collapsed;

            messagePanel.MessagePanelType = EpiDashboard.Controls.MessagePanelType.ErrorPanel;
            messagePanel.Text = errorMessage;
            messagePanel.Visibility = System.Windows.Visibility.Visible;

            panelMain.Children.Clear();

            HideConfigPanel();
            CheckAndSetPosition();
        }

        private void properties_ChangesAccepted(object sender, EventArgs e)
        {
            Controls.GadgetProperties.LineChartProperties properties = Popup.Content as Controls.GadgetProperties.LineChartProperties;
            this.Parameters = properties.Parameters;
            this.DataFilters = properties.DataFilters;
            this.CustomOutputHeading = Parameters.GadgetTitle;
            this.CustomOutputDescription = Parameters.GadgetDescription;
            Popup.Close();
            if (properties.HasSelectedFields)
            {
                RefreshResults();
            }
        }

        private void properties_Cancelled(object sender, EventArgs e)
        {
            Popup.Close();
        }

        protected override void worker_WorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            if (DashboardHelper.IsAutoClosing)
            {
                System.Threading.Thread.Sleep(2200);
            }
            else
            {
                System.Threading.Thread.Sleep(300);
            }
            this.Dispatcher.BeginInvoke(new SimpleCallback(SetGadgetToFinishedState));
        }

        protected override void worker_DoWork(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            lock (syncLock)
            {
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();

                this.Dispatcher.BeginInvoke(new SimpleCallback(SetGadgetToProcessingState));
                this.Dispatcher.BeginInvoke(new SimpleCallback(ClearResults));
                LineChartParameters LineChartParameters = (LineChartParameters)Parameters;






                string freqVar = LineChartParameters.ColumnNames[0];
                string weightVar = LineChartParameters.WeightVariableName;
                string crosstabVar = LineChartParameters.CrosstabVariableName;

                bool includeMissing = LineChartParameters.IncludeMissing;

                List stratas = new List();

                try
                {
                    RequestUpdateStatusDelegate requestUpdateStatus = new RequestUpdateStatusDelegate(RequestUpdateStatusMessage);
                    CheckForCancellationDelegate checkForCancellation = new CheckForCancellationDelegate(IsCancelled);



                    LineChartParameters.GadgetStatusUpdate += new GadgetStatusUpdateHandler(requestUpdateStatus);
                    LineChartParameters.GadgetCheckForCancellation += new GadgetCheckForCancellationHandler(checkForCancellation);

                    if (this.DataFilters != null && this.DataFilters.Count > 0)
                    {
                        LineChartParameters.CustomFilter = this.DataFilters.GenerateDataFilterString(false);
                    }
                    else
                    {
                        LineChartParameters.CustomFilter = string.Empty;
                    }

                    if (!string.IsNullOrEmpty(crosstabVar.Trim()))
                    {
                        List crosstabVarList = new List();
                        crosstabVarList.Add(crosstabVar);

                        foreach (Strata strata in DashboardHelper.GetStrataValuesAsDictionary(crosstabVarList, false, false))
                        {

                            LineChartParameters parameters = new LineChartParameters(LineChartParameters);

                            if (!string.IsNullOrEmpty(parameters.CustomFilter))
                            {
                                parameters.CustomFilter = "(" + parameters.CustomFilter + ") AND " + strata.SafeFilter;
                            }
                            else
                            {
                                parameters.CustomFilter = strata.SafeFilter;
                            }
                            parameters.CrosstabVariableName = string.Empty;
                            Dictionary stratifiedFrequencyTables = DashboardHelper.GenerateFrequencyTable(parameters);
                            GenerateChartData(stratifiedFrequencyTables, strata);
                            System.Threading.Thread.Sleep(100);
                        }
                    }
                    else
                    {

                        Dictionary stratifiedFrequencyTables = DashboardHelper.GenerateFrequencyTable(LineChartParameters);
                        GenerateChartData(stratifiedFrequencyTables);
                    }

                    this.Dispatcher.BeginInvoke(new SimpleCallback(RenderFinish));

                }
                catch (Exception ex)
                {
                    this.Dispatcher.BeginInvoke(new RenderFinishWithErrorDelegate(RenderFinishWithError), ex.Message);
                }
                finally
                {
                    stopwatch.Stop();
                    Debug.Print("Line chart gadget took " + stopwatch.Elapsed.ToString() + " seconds to complete.");
                    Debug.Print(DashboardHelper.DataFilters.GenerateDataFilterString());
                }
            }
        }

        //

        //Public Methods

        public override void SetGadgetToProcessingState()
        {
            this.IsProcessing = true;
            base.SetGadgetToProcessingState();
        }

        public override void SetGadgetToFinishedState()
        {
            this.IsProcessing = false;
            base.SetGadgetToFinishedState();
        }

        public override void RefreshResults()
        {
            LineChartParameters LineChartParameters = (LineChartParameters)Parameters;
            if (!LoadingCombos)
            {
                if (LineChartParameters != null)
                {
                    if (LineChartParameters.ColumnNames.Count > 0 && !String.IsNullOrEmpty(LineChartParameters.ColumnNames[0]))
                    {

                        infoPanel.Visibility = System.Windows.Visibility.Collapsed;
                        waitPanel.Visibility = System.Windows.Visibility.Visible;
                        messagePanel.MessagePanelType = EpiDashboard.Controls.MessagePanelType.StatusPanel;
                        descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.Collapsed;
                        baseWorker = new BackgroundWorker();
                        baseWorker.DoWork += new System.ComponentModel.DoWorkEventHandler(Execute);
                        baseWorker.RunWorkerAsync();
                        base.RefreshResults();
                    }
                    else
                    {
                        ClearResults();
                        waitPanel.Visibility = System.Windows.Visibility.Collapsed;
                    }
                }
            }
        }

        public void CreateFromLegacyXml(XmlElement element)
        {
            foreach (XmlElement child in element.ChildNodes)
            {
                switch (child.Name.ToLower())
                {
                    case "allvalues":
                        if (child.InnerText.ToLower().Equals("true"))
                        {

                            ((LineChartParameters)Parameters).ShowAllListValues = true;
                        }
                        else
                        {
                            ((LineChartParameters)Parameters).ShowAllListValues = false;
                        }
                        break;










                    case "singlevariable":

                        if ((this.Parameters.ColumnNames.Count > 0) && (!String.IsNullOrEmpty(child.InnerText.Trim())))
                        {
                            ((LineChartParameters)Parameters).ColumnNames[0] = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "weightvariable":

                        if (!String.IsNullOrEmpty(child.InnerText.Trim()))
                        {
                            ((LineChartParameters)Parameters).WeightVariableName = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "stratavariable":
                        if (!String.IsNullOrEmpty(child.InnerText.Trim()))
                        {

                            ((LineChartParameters)Parameters).StrataVariableNames[0] = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "customheading":
                        if (!string.IsNullOrEmpty(child.InnerText) && !child.InnerText.Equals("(none)"))
                        {
                            this.Parameters.GadgetTitle = child.InnerText.Replace("&lt;", "<");
                            this.CustomOutputHeading = child.InnerText.Replace("&lt;", "<");
                        }
                        else
                        {
                            this.CustomOutputHeading = string.Empty;
                            this.Parameters.GadgetTitle = string.Empty;
                        }
                        break;
                    case "customdescription":

                        if (!string.IsNullOrEmpty(child.InnerText) && !child.InnerText.Equals("(none)"))
                        {
                            this.CustomOutputDescription = child.InnerText.Replace("&lt;", "<");
                            this.Parameters.GadgetDescription = child.InnerText.Replace("&lt;", "<");
                            if (!string.IsNullOrEmpty(CustomOutputDescription) && !CustomOutputHeading.Equals("(none)"))
                            {
                                descriptionPanel.Text = CustomOutputDescription;
                                descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.DisplayMode;
                            }
                            else
                            {
                                descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.Collapsed;
                            }
                        }
                        break;
                    case "customcaption":
                        this.CustomOutputCaption = child.InnerText;
                        break;
                    case "chartsize":
                        switch (child.InnerText)
                        {














                            case "Small":
                                ((LineChartParameters)Parameters).ChartWidth = 400;
                                ((LineChartParameters)Parameters).ChartHeight = 250;
                                break;
                            case "Medium":
                                ((LineChartParameters)Parameters).ChartWidth = 533;
                                ((LineChartParameters)Parameters).ChartHeight = 333;
                                break;
                            case "Large":
                                ((LineChartParameters)Parameters).ChartWidth = 800;
                                ((LineChartParameters)Parameters).ChartHeight = 500;
                                break;
                            case "Custom":
                                break;
                        }
                        break;
                    case "chartwidth":
                        if (!string.IsNullOrEmpty(child.InnerText))
                        {

                            ((LineChartParameters)Parameters).ChartWidth = Int32.Parse(child.InnerText.Replace("&lt;", "<"));
                        }
                        break;
                    case "chartheight":
                        if (!string.IsNullOrEmpty(child.InnerText))
                        {

                            ((LineChartParameters)Parameters).ChartHeight = Int32.Parse(child.InnerText.Replace("&lt;", "<"));
                        }
                        break;
                    case "charttitle":

                        if (!string.IsNullOrEmpty(child.InnerText))
                        {
                            ((LineChartParameters)Parameters).ChartTitle = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "xaxislabel":


                        if (!string.IsNullOrEmpty(child.InnerText))
                        {
                            ((LineChartParameters)Parameters).XAxisLabel = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "yaxislabel":

                        if (!string.IsNullOrEmpty(child.InnerText))
                        {
                            ((LineChartParameters)Parameters).YAxisLabel = child.InnerText.Replace("&lt;", "<");
                        }
                        break;
                    case "xaxisrotation":
                        switch (child.InnerText)
                        {












                            case "0":

                                ((LineChartParameters)Parameters).XAxisAngle = 0;
                                break;
                            case "45":
                                ((LineChartParameters)Parameters).XAxisAngle = -45;
                                break;
                            case "90":
                                ((LineChartParameters)Parameters).XAxisAngle = -90;
                                break;
                            default:
                                ((LineChartParameters)Parameters).XAxisAngle = 0;
                                break;
                        }
                        break;
                }
            }
        }

        public override void CreateFromXml(XmlElement element)
        {
            this.LoadingCombos = true;

            infoPanel.Visibility = System.Windows.Visibility.Collapsed;
            messagePanel.Visibility = System.Windows.Visibility.Collapsed;

            if (element.Name.Equals("chartGadget") || element.Name.Equals("ChartControl"))
            {
                CreateFromLegacyXml(element);
            }
            else
            {
                foreach (XmlElement child in element.ChildNodes)
                {
                    if (!string.IsNullOrEmpty(child.InnerText))
                    {
                        switch (child.Name.ToLower())
                        {
                            case "mainvariable":

                                if (this.Parameters.ColumnNames.Count > 0)
                                {
                                    ((LineChartParameters)Parameters).ColumnNames[0] = child.InnerText.Replace("&lt;", "<");
                                }
                                else
                                {
                                    ((LineChartParameters)Parameters).ColumnNames.Add(child.InnerText.Replace("&lt;", "<"));
                                }
                                break;
                            case "stratavariable":

                                    if (((LineChartParameters)Parameters).StrataVariableNames.Count > 0)
                                    {
                                        ((LineChartParameters)Parameters).StrataVariableNames[0] = child.InnerText.Replace("&lt;", "<");
                                    }
                                    else
                                    {
                                        ((LineChartParameters)Parameters).StrataVariableNames.Add(child.InnerText.Replace("&lt;", "<"));
                                    }
                                break;
                            case "stratavariables":








                                foreach (XmlElement field in child.ChildNodes)
                                {
                                    List fields = new List();
                                    if (field.Name.ToLower().Equals("stratavariable"))
                                    {
                                        ((LineChartParameters)Parameters).StrataVariableNames.Add(field.InnerText.Replace("&lt;", "<"));
                                    }
                                }
                                break;
                            case "weightvariable":

                                    ((LineChartParameters)Parameters).WeightVariableName = child.InnerText.Replace("&lt;", "<");
                                break;
                            case "crosstabvariable":

                                    ((LineChartParameters)Parameters).CrosstabVariableName = child.InnerText.Replace("&lt;", "<");
                                break;
                            case "secondyvar":


                                    if (this.Parameters.ColumnNames.Count > 1)
                                    {
                                        ((LineChartParameters)Parameters).ColumnNames[1] = (child.InnerText.Replace("&lt;", "<"));
                                    }
                                    else
                                    {
                                        ((LineChartParameters)Parameters).ColumnNames.Add(child.InnerText.Replace("&lt;", "<"));
                                    }
                                break;
                            case "secondyvartype":
                                    Y2Type y2Type = ((Y2Type)Int32.Parse(child.InnerText));















                                    ((LineChartParameters)Parameters).Y2AxisType = Int32.Parse(child.InnerText.Replace("&lt;", "<"));
                                break;
                            case "sort":




                                if (child.InnerText.ToLower().Equals("highlow") || child.InnerText.ToLower().Equals("hightolow"))
                                {
                                    ((LineChartParameters)Parameters).SortHighToLow = true;
                                }

                                break;
                            case "allvalues":


                                if (child.InnerText.ToLower().Equals("true"))
                                {
                                    ((LineChartParameters)Parameters).ShowAllListValues = true;
                                }
                                else { ((LineChartParameters)Parameters).ShowAllListValues = false; }
                                break;
                            case "showlistlabels":


                                if (child.InnerText.ToLower().Equals("true"))
                                {
                                    ((LineChartParameters)Parameters).ShowCommentLegalLabels = true;
                                }
                                else { ((LineChartParameters)Parameters).ShowCommentLegalLabels = false; }
                                break;
                            case "includemissing":


                                if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).IncludeMissing = true; }
                                else { ((LineChartParameters)Parameters).IncludeMissing = false; }
                                break;
                            case "customheading":




                                if (!child.InnerText.Equals("(none)"))
                                {
                                    this.Parameters.GadgetTitle = child.InnerText.Replace("&lt;", "<");
                                    this.CustomOutputHeading = child.InnerText.Replace("&lt;", "<");
                                }
                                else
                                {
                                    this.CustomOutputHeading = string.Empty;
                                    this.Parameters.GadgetTitle = string.Empty;
                                }
                                break;
                            case "customdescription":













                                if (!child.InnerText.Equals("(none)"))
                                {
                                    this.CustomOutputDescription = child.InnerText.Replace("&lt;", "<");
                                    this.Parameters.GadgetDescription = child.InnerText.Replace("&lt;", "<");
                                    if (!string.IsNullOrEmpty(CustomOutputDescription) && !CustomOutputHeading.Equals("(none)"))
                                    {
                                        descriptionPanel.Text = CustomOutputDescription;
                                        descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.DisplayMode;
                                    }
                                    else
                                    {
                                        descriptionPanel.PanelMode = EpiDashboard.Controls.GadgetDescriptionPanel.DescriptionPanelMode.Collapsed;
                                    }
                                }
                                break;
                            case "customcaption":
                                this.CustomOutputCaption = child.InnerText;
                                break;
                            case "datafilters":
                                this.DataFilters = new DataFilters(this.DashboardHelper);
                                this.DataFilters.CreateFromXml(child);
                                break;
                            case "userefvalues":


                                if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).UseRefValues = true; }
                                else { ((LineChartParameters)Parameters).UseRefValues = false; }
                                break;
                            case "showannotations":


                                if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).ShowAnnotations = true; }
                                else { ((LineChartParameters)Parameters).ShowAnnotations = false; }
                                break;
                            case "y2showannotations":


                                if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).Y2ShowAnnotations = true; }
                                else { ((LineChartParameters)Parameters).Y2ShowAnnotations = false; }
                                break;
                            case "showgridlines":


                                if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).ShowGridLines = true; }
                                else { ((LineChartParameters)Parameters).ShowGridLines = false; }
                                break;
                            case "palette":

                                ((LineChartParameters)Parameters).Palette = Int32.Parse(child.InnerText);
                                break;
                            case "linetype":

                                switch (child.InnerText)
                                {
                                    case "Polygon":
                                        ((LineChartParameters)Parameters).LineKind = LineKind.Polygon;
                                        break;
                                    case "Smooth":
                                        ((LineChartParameters)Parameters).LineKind = LineKind.Smooth;
                                        break;
                                    case "Step":
                                        ((LineChartParameters)Parameters).LineKind = LineKind.Step;
                                        break;
                                    default:
                                    case "Auto":
                                        ((LineChartParameters)Parameters).LineKind = LineKind.Auto;
                                        break;
                                }
                                break;
                            case "linethickness":

                                    ((LineChartParameters)Parameters).LineThickness = Double.Parse(child.InnerText);
                                break;
                            case "legenddock":

                                {
                                    switch (Int32.Parse(child.InnerText))
                                    {
                                        case 0:
                                            ((LineChartParameters)Parameters).LegendDock = ComponentArt.Win.DataVisualization.Charting.Dock.Left;
                                            break;
                                        default:
                                        case 1:
                                            ((LineChartParameters)Parameters).LegendDock = ComponentArt.Win.DataVisualization.Charting.Dock.Right;
                                            break;
                                        case 2:
                                            ((LineChartParameters)Parameters).LegendDock = ComponentArt.Win.DataVisualization.Charting.Dock.Top;
                                            break;
                                        case 3:
                                            ((LineChartParameters)Parameters).LegendDock = ComponentArt.Win.DataVisualization.Charting.Dock.Bottom;
                                            break;
                                    }
                                }
                                break;
                            case "y2linetype":

                                switch (child.InnerText)
                                {
                                    case "Polygon":
                                        ((LineChartParameters)Parameters).Y2LineKind = LineKind.Polygon;
                                        break;
                                    case "Smooth":
                                        ((LineChartParameters)Parameters).Y2LineKind = LineKind.Smooth;
                                        break;
                                    case "Step":
                                        ((LineChartParameters)Parameters).Y2LineKind = LineKind.Step;
                                        break;
                                    case "Auto":
                                        ((LineChartParameters)Parameters).Y2LineKind = LineKind.Auto;
                                        break;
                                }
                                break;
                            case "y2linedashstyle":
                                {

                                        switch (child.InnerText)
                                        {
                                            case "Solid":
                                                ((LineChartParameters)Parameters).Y2LineDashStyle = LineDashStyle.Solid;
                                                break;
                                            case "Dash":
                                                ((LineChartParameters)Parameters).Y2LineDashStyle = LineDashStyle.Dash;
                                                break;
                                            case "Dot":
                                                ((LineChartParameters)Parameters).Y2LineDashStyle = LineDashStyle.Dot;
                                                break;
                                            case "DashDot":
                                                ((LineChartParameters)Parameters).Y2LineDashStyle = LineDashStyle.DashDot;
                                                break;
                                            case "DashDotDot":
                                                ((LineChartParameters)Parameters).Y2LineDashStyle = LineDashStyle.DashDotDot;
                                                break;
                                        }
                                }
                                break;
                            case "y2linethickness":

                                    ((LineChartParameters)Parameters).Y2LineThickness = Double.Parse(child.InnerText);
                                break;
                            case "yaxislabel":

                                    ((LineChartParameters)Parameters).YAxisLabel = child.InnerText;
                                break;
                            case "yaxisformatstring":

                                    ((LineChartParameters)Parameters).YAxisFormat = child.InnerText;
                                break;
                            case "y2axisformatstring":

                                    ((LineChartParameters)Parameters).Y2AxisFormat = child.InnerText;
                                break;
                            case "xaxislabeltype":

                                    ((LineChartParameters)Parameters).XAxisLabelType = Int32.Parse(child.InnerText);
                                break;
                            case "xaxislabel":

                                    ((LineChartParameters)Parameters).XAxisLabel = child.InnerText;
                                break;
                            case "xaxisangle":

                                    ((LineChartParameters)Parameters).XAxisAngle = Int32.Parse(child.InnerText);
                                break;
                            case "charttitle":

                                    ((LineChartParameters)Parameters).ChartTitle = child.InnerText;
                                break;
                            case "chartsubtitle":

                                    ((LineChartParameters)Parameters).ChartSubTitle = child.InnerText;
                                break;
                            case "showlegend":


                                    if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).ShowLegend = true; }
                                    else { ((LineChartParameters)Parameters).ShowLegend = false; }
                                break;
                            case "showlegendborder":


                                    if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).ShowLegendBorder = true; }
                                    else { ((LineChartParameters)Parameters).ShowLegendBorder = false; }
                                break;
                            case "showlegendvarnames":


                                    if (child.InnerText.ToLower().Equals("true")) { ((LineChartParameters)Parameters).ShowLegendVarNames = true; }
                                    else { ((LineChartParameters)Parameters).ShowLegendVarNames = false; }
                                break;
                            case "legendfontsize":

                                    ((LineChartParameters)Parameters).LegendFontSize = Int32.Parse(child.InnerText);
                                break;
                            case "height":

                                    ((LineChartParameters)Parameters).ChartHeight = Double.Parse(child.InnerText);
                                break;
                            case "width":

                                    ((LineChartParameters)Parameters).ChartWidth = Double.Parse(child.InnerText);
                                break;
                        }
                    }
                }
            }

            base.CreateFromXml(element);

            this.LoadingCombos = false;
            RefreshResults();
            HideConfigPanel();

        }






        public override XmlNode Serialize(XmlDocument doc)
        {
            //PreProperties Code



































































































































































            //

            LineChartParameters LineChartParameters = (LineChartParameters)Parameters;

            System.Xml.XmlElement element = doc.CreateElement("LineChartGadget");
            string xmlString = string.Empty;
            element.InnerXml = xmlString;
            element.AppendChild(SerializeFilters(doc));

            System.Xml.XmlAttribute id = doc.CreateAttribute("id");
            System.Xml.XmlAttribute locationY = doc.CreateAttribute("top");
            System.Xml.XmlAttribute locationX = doc.CreateAttribute("left");
            System.Xml.XmlAttribute collapsed = doc.CreateAttribute("collapsed");
            System.Xml.XmlAttribute type = doc.CreateAttribute("gadgetType");

            id.Value = this.UniqueIdentifier.ToString();
            locationY.Value = Canvas.GetTop(this).ToString("F0");
            locationX.Value = Canvas.GetLeft(this).ToString("F0");
            collapsed.Value = "false"; // currently no way to collapse the gadget, so leave this 'false' for now
            type.Value = "EpiDashboard.Gadgets.Charting.LineChartGadget";

            element.Attributes.Append(locationY);
            element.Attributes.Append(locationX);
            element.Attributes.Append(collapsed);
            element.Attributes.Append(type);
            element.Attributes.Append(id);



            CustomOutputHeading = headerPanel.Text;
            CustomOutputDescription = descriptionPanel.Text;

            string mainVar = string.Empty;
            string strataVar = string.Empty;
            string crosstabVar = string.Empty;
            string weightVar = string.Empty;
            string second_y_var = string.Empty;
            string sort = string.Empty;

            double height = 600;
            double width = 800;

            double.TryParse(LineChartParameters.ChartHeight.ToString(), out height);
            double.TryParse(LineChartParameters.ChartWidth.ToString(), out width);

            crosstabVar = LineChartParameters.CrosstabVariableName.Replace("<", "&lt;");


            XmlElement freqVarElement = doc.CreateElement("mainVariable");
            if (LineChartParameters.ColumnNames.Count > 0)
            {
                if (!String.IsNullOrEmpty(LineChartParameters.ColumnNames[0].ToString()))
                {
                    freqVarElement.InnerText = LineChartParameters.ColumnNames[0].ToString().Replace("<", "&lt;");
                    element.AppendChild(freqVarElement);
                }
            }


            XmlElement weightVariableElement = doc.CreateElement("weightVariable");
            if (!String.IsNullOrEmpty(LineChartParameters.WeightVariableName))
            {
                weightVariableElement.InnerText = LineChartParameters.WeightVariableName.Replace("<", "&lt;");
                element.AppendChild(weightVariableElement);
            }


            XmlElement crossTabVarElement = doc.CreateElement("crosstabVariable");
            if (!String.IsNullOrEmpty(LineChartParameters.CrosstabVariableName))
            {
                crossTabVarElement.InnerText = LineChartParameters.CrosstabVariableName.Replace("<", "&lt;");
                element.AppendChild(crossTabVarElement);
            }


            XmlElement StrataVariableNameElement = doc.CreateElement("strataVariable");
            XmlElement StrataVariableNamesElement = doc.CreateElement("strataVariables");
            if (LineChartParameters.StrataVariableNames.Count == 1)
            {
                StrataVariableNameElement.InnerText = LineChartParameters.StrataVariableNames[0].ToString().Replace("<", "&lt;");
                element.AppendChild(StrataVariableNameElement);
            }
            else if (LineChartParameters.StrataVariableNames.Count > 1)
            {
                foreach (string strataColumn in LineChartParameters.StrataVariableNames)
                {
                    XmlElement strataElement = doc.CreateElement("strataVariable");
                    strataElement.InnerText = strataColumn.Replace("<", "&lt;");
                    StrataVariableNamesElement.AppendChild(strataElement);
                }

                element.AppendChild(StrataVariableNamesElement);
            }


            XmlElement secondYVarTypeElement = doc.CreateElement("secondYVarType");
            secondYVarTypeElement.InnerText = LineChartParameters.Y2AxisType.ToString().Replace("<", "&lt;");
            element.AppendChild(secondYVarTypeElement);


            XmlElement secondYVarElement = doc.CreateElement("secondYVar");
            if (LineChartParameters.ColumnNames.Count > 1)
            {
                if (!String.IsNullOrEmpty(LineChartParameters.ColumnNames[1].ToString()))
                {
                    secondYVarElement.InnerText = LineChartParameters.ColumnNames[1].ToString().Replace("<", "&lt;");
                    element.AppendChild(secondYVarElement);
                }
            }


            XmlElement heightElement = doc.CreateElement("height");
            heightElement.InnerText = LineChartParameters.ChartHeight.ToString().Replace("<", "&lt;");
            element.AppendChild(heightElement);


            XmlElement widthElement = doc.CreateElement("width");
            widthElement.InnerText = LineChartParameters.ChartWidth.ToString().Replace("<", "&lt;");
            element.AppendChild(widthElement);


            XmlElement allValuesElement = doc.CreateElement("allValues");
            allValuesElement.InnerText = LineChartParameters.ShowAllListValues.ToString().Replace("<", "&lt;");
            element.AppendChild(allValuesElement);


            XmlElement showListLabelsElement = doc.CreateElement("showListLabels");
            showListLabelsElement.InnerText = LineChartParameters.ShowCommentLegalLabels.ToString().Replace("<", "&lt;");
            element.AppendChild(showListLabelsElement);


            XmlElement sortElement = doc.CreateElement("sort");
            if (LineChartParameters.SortHighToLow) sortElement.InnerText = "hightolow";
            element.AppendChild(sortElement);


            XmlElement includeMissingElement = doc.CreateElement("includeMissing");
            includeMissingElement.InnerText = LineChartParameters.IncludeMissing.ToString();
            element.AppendChild(includeMissingElement);


            XmlElement customHeadingElement = doc.CreateElement("customHeading");
            customHeadingElement.InnerText = LineChartParameters.GadgetTitle.Replace("<", "&lt;");
            element.AppendChild(customHeadingElement);


            XmlElement customDescriptionElement = doc.CreateElement("customDescription");
            customDescriptionElement.InnerText = LineChartParameters.GadgetDescription.Replace("<", "&lt;");
            element.AppendChild(customDescriptionElement);


            XmlElement customCaptionElement = doc.CreateElement("customCaption");
            if (!String.IsNullOrEmpty(CustomOutputCaption))
            {
                customCaptionElement.InnerText = CustomOutputCaption.Replace("<", "&lt;");
            }
            else
            {
                customCaptionElement.InnerText = string.Empty;
            }
            element.AppendChild(customCaptionElement);


            XmlElement useRefValuesElement = doc.CreateElement("useRefValues");
            useRefValuesElement.InnerText = LineChartParameters.UseRefValues.ToString();
            element.AppendChild(useRefValuesElement);


            XmlElement showAnnotationsElement = doc.CreateElement("showAnnotations");
            showAnnotationsElement.InnerText = LineChartParameters.ShowAnnotations.ToString();
            element.AppendChild(showAnnotationsElement);


            XmlElement y2showAnnotationsElement = doc.CreateElement("y2showAnnotations");
            y2showAnnotationsElement.InnerText = LineChartParameters.Y2ShowAnnotations.ToString();
            element.AppendChild(y2showAnnotationsElement);


            XmlElement showGridLinesElement = doc.CreateElement("showGridLines");
            showGridLinesElement.InnerText = LineChartParameters.ShowGridLines.ToString();
            element.AppendChild(showGridLinesElement);


            XmlElement paletteElement = doc.CreateElement("palette");
            paletteElement.InnerText = LineChartParameters.Palette.ToString();
            element.AppendChild(paletteElement);


            XmlElement lineTypeElement = doc.CreateElement("lineType");
            lineTypeElement.InnerText = LineChartParameters.LineKind.ToString();
            element.AppendChild(lineTypeElement);


            XmlElement lineThicknessElement = doc.CreateElement("lineThickness");
            lineThicknessElement.InnerText = LineChartParameters.LineThickness.ToString();
            element.AppendChild(lineThicknessElement);


            XmlElement y2LineTypeElement = doc.CreateElement("y2LineType");
            y2LineTypeElement.InnerText = LineChartParameters.Y2LineKind.ToString();
            element.AppendChild(y2LineTypeElement);


            XmlElement y2LineDashStyleElement = doc.CreateElement("y2LineDashStyle");
            y2LineDashStyleElement.InnerText = LineChartParameters.Y2LineDashStyle.ToString();
            element.AppendChild(y2LineDashStyleElement);


            XmlElement y2LineThicknessElement = doc.CreateElement("y2LineThickness");
            y2LineThicknessElement.InnerText = LineChartParameters.Y2LineThickness.ToString();
            element.AppendChild(y2LineThicknessElement);


            XmlElement yAxisLabelElement = doc.CreateElement("yAxisLabel");
            yAxisLabelElement.InnerText = LineChartParameters.YAxisLabel.ToString().Replace("<", "&lt;");
            element.AppendChild(yAxisLabelElement);


            XmlElement yAxisFormatStringElement = doc.CreateElement("yAxisFormatString");
            yAxisFormatStringElement.InnerText = LineChartParameters.YAxisFormat.ToString().Replace("<", "&lt;");
            element.AppendChild(yAxisFormatStringElement);


            XmlElement y2AxisLabelElement = doc.CreateElement("y2AxisLabel");
            y2AxisLabelElement.InnerText = LineChartParameters.Y2AxisLabel.ToString().Replace("<", "&lt;");
            element.AppendChild(y2AxisLabelElement);


            XmlElement y2AxisLegendTitleElement = doc.CreateElement("y2AxisLegendTitle");
            y2AxisLegendTitleElement.InnerText = LineChartParameters.Y2AxisLegendTitle.ToString().Replace("<", "&lt;");
            element.AppendChild(y2AxisLegendTitleElement);


            XmlElement y2AxisFormatStringElement = doc.CreateElement("y2AxisFormatString");
            y2AxisFormatStringElement.InnerText = LineChartParameters.Y2AxisFormat.ToString().Replace("<", "&lt;");
            element.AppendChild(y2AxisFormatStringElement);


            XmlElement xAxisLabelTypeElement = doc.CreateElement("xAxisLabelType");
            xAxisLabelTypeElement.InnerText = LineChartParameters.XAxisLabelType.ToString().Replace("<", "&lt;");
            element.AppendChild(xAxisLabelTypeElement);


            XmlElement xAxisLabelElement = doc.CreateElement("xAxisLabel");
            xAxisLabelElement.InnerText = LineChartParameters.XAxisLabel.ToString().Replace("<", "&lt;");
            element.AppendChild(xAxisLabelElement);


            XmlElement xAxisAngleElement = doc.CreateElement("xAxisAngle");
            xAxisAngleElement.InnerText = LineChartParameters.XAxisAngle.ToString().Replace("<", "&lt;");
            element.AppendChild(xAxisAngleElement);


            XmlElement chartTitleElement = doc.CreateElement("chartTitle");
            chartTitleElement.InnerText = LineChartParameters.ChartTitle.ToString().Replace("<", "&lt;");
            element.AppendChild(chartTitleElement);


            XmlElement chartSubTitleElement = doc.CreateElement("chartSubTitle");
            chartSubTitleElement.InnerText = LineChartParameters.ChartSubTitle.ToString().Replace("<", "&lt;");
            element.AppendChild(chartSubTitleElement);


            XmlElement showLegendElement = doc.CreateElement("showLegend");
            showLegendElement.InnerText = LineChartParameters.ShowLegend.ToString().Replace("<", "&lt;");
            element.AppendChild(showLegendElement);


            XmlElement showLegendBorderElement = doc.CreateElement("showLegendBorder");
            showLegendBorderElement.InnerText = LineChartParameters.ShowLegendBorder.ToString();
            element.AppendChild(showLegendBorderElement);


            XmlElement showLegendVarNamesElement = doc.CreateElement("showLegendVarNames");
            showLegendVarNamesElement.InnerText = LineChartParameters.ShowLegendVarNames.ToString();
            element.AppendChild(showLegendVarNamesElement);


            XmlElement legendFontSizeElement = doc.CreateElement("legendFontSize");
            legendFontSizeElement.InnerText = LineChartParameters.LegendFontSize.ToString();
            element.AppendChild(legendFontSizeElement);


            XmlElement legendDockElement = doc.CreateElement("legendDock");
            switch (LineChartParameters.LegendDock)
            {
                case ComponentArt.Win.DataVisualization.Charting.Dock.Left:
                    legendDockElement.InnerText = "0";
                    break;
                default:
                case ComponentArt.Win.DataVisualization.Charting.Dock.Right:
                    legendDockElement.InnerText = "1";
                    break;
                case ComponentArt.Win.DataVisualization.Charting.Dock.Top:
                    legendDockElement.InnerText = "2";
                    break;
                case ComponentArt.Win.DataVisualization.Charting.Dock.Bottom:
                    legendDockElement.InnerText = "3";
                    break;
            }
            element.AppendChild(legendDockElement);

            SerializeAnchors(element);
            return element;
        }

        public override void ShowHideConfigPanel()
        {
            Popup = new DashboardPopup();
            Popup.Parent = ((this.Parent as DragCanvas).Parent as ScrollViewer).Parent as Grid;
            Controls.GadgetProperties.LineChartProperties properties = new Controls.GadgetProperties.LineChartProperties(this.DashboardHelper, this, (LineChartParameters)Parameters, StrataGridList);

            properties.Width = 800;
            properties.Height = 600;

            if ((System.Windows.SystemParameters.PrimaryScreenWidth / 1.2) > properties.Width)
            {
                properties.Width = (System.Windows.SystemParameters.PrimaryScreenWidth / 1.2);
            }

            if ((System.Windows.SystemParameters.PrimaryScreenHeight / 1.2) > properties.Height)
            {
                properties.Height = (System.Windows.SystemParameters.PrimaryScreenHeight / 1.2);
            }

            properties.Cancelled += new EventHandler(properties_Cancelled);
            properties.ChangesAccepted += new EventHandler(properties_ChangesAccepted);
            Popup.Content = properties;
            Popup.Show();
        }




        public override void UpdateVariableNames()
        {
            FillComboboxes(true);
        }





        public override string ToHTML(string htmlFileName = "", int count = 0)
        {
            LineChartParameters LineChartParameters = (LineChartParameters)Parameters;
            StringBuilder sb = new StringBuilder();



            sb.AppendLine("" + LineChartParameters.ChartTitle + "</h2>");
            sb.AppendLine("" + LineChartParameters.ChartSubTitle + "</h3>");

            foreach (UIElement element in panelMain.Children)
            {
                if (element is EpiDashboard.Controls.Charting.LineChart)
                {
                    sb.AppendLine(((EpiDashboard.Controls.Charting.LineChart)element).ToHTML(htmlFileName, count, true, false));
                }
            }

            return sb.ToString();
        }

        // 
    }
}

 