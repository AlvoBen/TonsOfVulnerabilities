using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Controls;
using EpiDashboard.Gadgets.Charting;
using ComponentArt.Win.DataVisualization;
using ComponentArt.Win.DataVisualization.Common;
using ComponentArt.Win.DataVisualization.Charting;


namespace EpiDashboard
{
    public class ChartParametersBase : FrequencyParametersBase, IChartGadgetParameters
    {
        //Constructors



        public ChartParametersBase()
            : base()
        {
            UseRefValues = true;
            ShowGridLines = true;

            XAxisLabel = String.Empty;
            XAxisLabelType = 0;
            XAxisAngle = 0;

            ShowAnnotations = false;
            YAxisFormat = String.Empty;
            YAxisLabel = String.Empty;

            Y2AxisFormat = String.Empty;
            Y2AxisLabel = String.Empty;
            Y2AxisLegendTitle = String.Empty;
            Y2LineKind = 0;
            Y2LineDashStyle = 0;
            Y2ShowAnnotations = false;
            Y2LineThickness = 0;

            ChartTitle = String.Empty;
            ChartStrataTitle = String.Empty;
            ChartSubTitle = String.Empty;

            ShowLegend = false;
            ShowLegendBorder = false;
            ShowLegendVarNames = false;
            LegendFontSize = 12;
            ChartWidth = 800;
            ChartHeight = 500;
            Palette = 12;
        }




        public ChartParametersBase(ChartParametersBase parameters)
            : base(parameters)
        {
            UseRefValues = parameters.UseRefValues;
            ShowGridLines = parameters.ShowGridLines;

            XAxisLabel = parameters.XAxisLabel;
            XAxisLabelType = parameters.XAxisLabelType;
            XAxisAngle = parameters.XAxisAngle;

            YAxisFormat = parameters.YAxisFormat;
            YAxisLabel = parameters.YAxisLabel;

            Y2AxisFormat = parameters.Y2AxisFormat;
            Y2AxisLabel = parameters.Y2AxisLabel;
            Y2AxisLegendTitle = parameters.Y2AxisLegendTitle;
            Y2LineKind =parameters.Y2LineKind;
            Y2LineDashStyle = parameters.Y2LineDashStyle;
            Y2ShowAnnotations = parameters.Y2ShowAnnotations;
            Y2LineThickness = parameters.Y2LineThickness;

            ChartTitle = parameters.ChartTitle;
            ChartStrataTitle = parameters.ChartStrataTitle;
            ChartSubTitle = parameters.ChartSubTitle;

            ShowAnnotations = parameters.ShowAnnotations;
            ShowLegend = parameters.ShowLegend;
            ShowLegendBorder = parameters.ShowLegendBorder;
            ShowLegendVarNames = parameters.ShowLegendVarNames;
            LegendFontSize = parameters.LegendFontSize;
            ChartWidth = parameters.ChartWidth;
            ChartHeight = parameters.ChartHeight;
            Palette = parameters.Palette;
        }
        //    

        //Properties


        public bool UseRefValues { get {return _UseRefValues; } set{ _UseRefValues=value; } } bool _UseRefValues;
        public bool ShowGridLines { get {return _ShowGridLines; } set{ _ShowGridLines=value; } } bool _ShowGridLines;

        public string XAxisLabel { get {return _XAxisLabel; } set{ _XAxisLabel=value; } } string _XAxisLabel;
        public int XAxisLabelType { get {return _XAxisLabelType; } set{ _XAxisLabelType=value; } } int _XAxisLabelType;
        public int XAxisAngle { get {return _XAxisAngle; } set{ _XAxisAngle=value; } } int _XAxisAngle;

        public string YAxisFormat { get {return _YAxisFormat; } set{ _YAxisFormat=value; } } string _YAxisFormat;
        public string YAxisLabel { get {return _YAxisLabel; } set{ _YAxisLabel=value; } } string _YAxisLabel;

        public string Y2AxisFormat { get {return _Y2AxisFormat; } set{ _Y2AxisFormat=value; } } string _Y2AxisFormat;
        public string Y2AxisLabel { get {return _Y2AxisLabel; } set{ _Y2AxisLabel=value; } } string _Y2AxisLabel;
        public string Y2AxisLegendTitle { get {return _Y2AxisLegendTitle; } set{ _Y2AxisLegendTitle=value; } } string _Y2AxisLegendTitle;
        public LineKind Y2LineKind { get {return _Y2LineKind; } set{ _Y2LineKind=value; } } LineKind _Y2LineKind;

        public int Y2AxisType { get {return _Y2AxisType; } set{ _Y2AxisType=value; } } int _Y2AxisType;
        public LineDashStyle Y2LineDashStyle { get {return _Y2LineDashStyle; } set{ _Y2LineDashStyle=value; } } LineDashStyle _Y2LineDashStyle;
        public bool Y2ShowAnnotations { get {return _Y2ShowAnnotations; } set{ _Y2ShowAnnotations=value; } } bool _Y2ShowAnnotations;
        public double Y2LineThickness { get {return _Y2LineThickness; } set{ _Y2LineThickness=value; } } double _Y2LineThickness;

        public string ChartTitle { get {return _ChartTitle; } set{ _ChartTitle=value; } } string _ChartTitle;
        public string ChartStrataTitle { get {return _ChartStrataTitle; } set{ _ChartStrataTitle=value; } } string _ChartStrataTitle;
        public string ChartSubTitle { get {return _ChartSubTitle; } set{ _ChartSubTitle=value; } } string _ChartSubTitle;

        public bool ShowAnnotations { get {return _ShowAnnotations; } set{ _ShowAnnotations=value; } } bool _ShowAnnotations;
        public bool ShowLegend { get {return _ShowLegend; } set{ _ShowLegend=value; } } bool _ShowLegend;
        public bool ShowLegendBorder { get {return _ShowLegendBorder; } set{ _ShowLegendBorder=value; } } bool _ShowLegendBorder;
        public bool ShowLegendVarNames { get {return _ShowLegendVarNames; } set{ _ShowLegendVarNames=value; } } bool _ShowLegendVarNames;

        public double LegendFontSize { get {return _LegendFontSize; } set{ _LegendFontSize=value; } } double _LegendFontSize;
        public double ChartWidth { get {return _ChartWidth; } set{ _ChartWidth=value; } } double _ChartWidth;
        public double ChartHeight { get {return _ChartHeight; } set{ _ChartHeight=value; } } double _ChartHeight;
        public int Palette { get {return _Palette; } set{ _Palette=value; } } int _Palette;

        public ComponentArt.Win.DataVisualization.Charting.Dock LegendDock { get {return _LegendDock; } set{ _LegendDock=value; } } Dock _LegendDock;
        // 
    }
}

 