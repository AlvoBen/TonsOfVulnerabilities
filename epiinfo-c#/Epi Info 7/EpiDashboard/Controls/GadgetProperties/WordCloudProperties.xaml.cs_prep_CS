using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using EpiDashboard;
using Epi;

namespace EpiDashboard.Controls.GadgetProperties
{



    public         class WordCloudProperties : GadgetPropertiesPanelBase
    {
        public WordCloudProperties(
            DashboardHelper dashboardHelper,
            IGadget gadget,
            IGadgetParameters parameters
            )
        {
            InitializeComponent();
            this.DashboardHelper = dashboardHelper;
            this.Gadget = gadget;
            this.Parameters = (parameters as WordCloudParameters);




            List fieldNames = new List();
            ColumnDataType columnDataType = ColumnDataType.Boolean | ColumnDataType.DateTime | ColumnDataType.Numeric | ColumnDataType.Text | ColumnDataType.UserDefined | ColumnDataType.UserDefined;
            fieldNames = DashboardHelper.GetFieldsAsList(columnDataType);






































            fieldNames.Sort();

            cmbField.ItemsSource = fieldNames;






            RowFilterControl = new RowFilterControl(this.DashboardHelper, Dialogs.FilterDialogMode.ConditionalMode, (gadget as WordCloudControl).DataFilters, true);
            RowFilterControl.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            panelFilters.Children.Add(RowFilterControl);
        }

        public bool HasSelectedFields
        {
            get
            {
                if (cmbField.SelectedIndex > -1)
                {
                    return true;
                }
                return false;
            }
        }
        public WordCloudParameters Parameters { get {return _Parameters; } set{ _Parameters=value; } } WordCloudParameters _Parameters;
                List StrataGridList { get {return _StrataGridList; } set{ _StrataGridList=value; } } List _StrataGridList;
                List ColumnOrder { get {return _ColumnOrder; } set{ _ColumnOrder=value; } } List _ColumnOrder;




        protected override void CreateInputVariableList()
        {
            this.DataFilters = RowFilterControl.DataFilters;



            if (Parameters != null)
            {
                if (cmbField.SelectedIndex > -1)
                {
                    if (Parameters.ColumnNames.Count > 0)
                    {
                        Parameters.ColumnNames[0] = cmbField.SelectedItem.ToString();
                    }
                    else
                    {
                        Parameters.ColumnNames.Add(cmbField.SelectedItem.ToString());
                    }
                }
                Parameters.GadgetTitle = txtTitle.Text;
                Parameters.GadgetDescription = txtDesc.Text;
                Parameters.CommonWords = txtCommonWords.Text;
            }






















        }


















































                void UserControl_Loaded(object sender, RoutedEventArgs e)
        {















            if (Parameters != null)
            {
                if (Parameters.ColumnNames.Count > 0)
                {
                    cmbField.SelectedItem = Parameters.ColumnNames[0];
                }
                txtTitle.Text = Parameters.GadgetTitle;
                txtDesc.Text = Parameters.GadgetDescription;
                txtCommonWords.Text = Parameters.CommonWords;
            }
        }

        public class FieldInfo { public string Name { get {return _Name; } set{ _Name=value; } } string _Name; public string DataType { get {return _DataType; } set{ _DataType=value; } } string _DataType; public VariableCategory VariableCategory { get {return _VariableCategory; } set{ _VariableCategory=value; } } VariableCategory _VariableCategory; }

                void tbtnVariables_Checked(object sender, RoutedEventArgs e)
        {
            if (panelVariables == null) return;

            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Visible;

            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }










                void tbtnDisplay_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;

            panelDisplay.Visibility = System.Windows.Visibility.Visible;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnFilters_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;

            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Visible;
        }
    }
}

 