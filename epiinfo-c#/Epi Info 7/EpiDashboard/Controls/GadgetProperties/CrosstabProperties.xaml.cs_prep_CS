using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Epi;
using Epi.Fields;
using EpiDashboard;
using EpiDashboard.Rules;

namespace EpiDashboard.Controls.GadgetProperties
{



    public         class CrosstabProperties : GadgetPropertiesPanelBase
    {
        //Private Variables






















                List YesValues;
                List NoValues;

        //

        public CrosstabProperties(
            DashboardHelper dashboardHelper,
            IGadget gadget,
            CrosstabParameters parameters,
            List strataGridList
            )
        {
            InitializeComponent();
            this.DashboardHelper = dashboardHelper;
            this.Gadget = gadget;
            this.Parameters = parameters;
            this.StrataGridList = strataGridList;

            List fields = new List();
            List weightFields = new List();
            List strataItems = new List();


            fields.Add(String.Empty);
            ColumnDataType columnDataType = ColumnDataType.Boolean | ColumnDataType.DateTime | ColumnDataType.Numeric | ColumnDataType.Text | ColumnDataType.UserDefined;
            foreach (string fieldName in DashboardHelper.GetFieldsAsList(columnDataType))
            {
                if (DashboardHelper.IsUsingEpiProject)
                {
                    if (!(fieldName == "RecStatus"))
                        fields.Add(fieldName);
                }
                else
                {
                    fields.Add(fieldName);
                }
            }

            if (fields.Contains("SYSTEMDATE"))
            {
                fields.Remove("SYSTEMDATE");
            }


            weightFields.Add(String.Empty);
            columnDataType = ColumnDataType.Numeric | ColumnDataType.UserDefined;
            foreach (string fieldName in DashboardHelper.GetFieldsAsList(columnDataType))
            {
                if (DashboardHelper.IsUsingEpiProject)
                {
                    if (!(fieldName == "RecStatus")) weightFields.Add(fieldName);
                }
                else
                {
                    weightFields.Add(fieldName);
                }
            }
            weightFields.Sort();


            strataItems.Add(String.Empty);
            columnDataType = ColumnDataType.Numeric | ColumnDataType.Boolean | ColumnDataType.Text | ColumnDataType.UserDefined;
            foreach (string fieldName in DashboardHelper.GetFieldsAsList(columnDataType))
            {
                if (DashboardHelper.IsUsingEpiProject)
                {
                    if (!(fieldName == "RecStatus" || fieldName == "FKEY" || fieldName == "GlobalRecordId")) strataItems.Add(fieldName);
                }
                else
                {
                    strataItems.Add(fieldName);
                }
            }

            if (DashboardHelper.IsUsingEpiProject)
            {
                if (fields.Contains("RecStatus")) fields.Remove("RecStatus");
                if (weightFields.Contains("RecStatus")) weightFields.Remove("RecStatus");

                if (strataItems.Contains("RecStatus")) strataItems.Remove("RecStatus");
                if (strataItems.Contains("FKEY")) strataItems.Remove("FKEY");
                if (strataItems.Contains("GlobalRecordId")) strataItems.Remove("GlobalRecordId");
            }

            List allFieldNames = new List();
            allFieldNames.AddRange(fields);
            allFieldNames.AddRange(DashboardHelper.GetAllGroupsAsList());

            cbxExposureField.ItemsSource = allFieldNames;
            cbxOutcomeField.ItemsSource = fields;
            cbxFieldWeight.ItemsSource = weightFields;
            lbxFieldStrata.ItemsSource = strataItems;

            if (cbxExposureField.Items.Count > 0)
            {
                cbxExposureField.SelectedIndex = -1;
                cbxOutcomeField.SelectedIndex = -1;
            }

            if (cbxFieldWeight.Items.Count > 0)
            {
                cbxFieldWeight.SelectedIndex = -1;
            }

            CollectionView view = (CollectionView)CollectionViewSource.GetDefaultView(cbxExposureField.ItemsSource);
            PropertyGroupDescription groupDescription = new PropertyGroupDescription("VariableCategory");
            view.GroupDescriptions.Add(groupDescription);

            RowFilterControl = new RowFilterControl(this.DashboardHelper, Dialogs.FilterDialogMode.ConditionalMode, (gadget as CrosstabControl).DataFilters, true);
            RowFilterControl.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            panelFilters.Children.Add(RowFilterControl);

            txtMaxColumnLength.PreviewKeyDown += new KeyEventHandler(txtInput_PositiveIntegerOnly_PreviewKeyDown);

            //Translation





















            //

        }

        public bool HasSelectedFields
        {
            get
            {
                if (cbxExposureField.SelectedIndex > -1 && cbxOutcomeField.SelectedIndex > -1)
                {
                    return true;
                }
                return false;
            }
        }

        public CrosstabParameters Parameters { get {return _Parameters; } set{ _Parameters=value; } } CrosstabParameters _Parameters;
                List StrataGridList { get {return _StrataGridList; } set{ _StrataGridList=value; } } List _StrataGridList;




        protected override void CreateInputVariableList()
        {

            this.DataFilters = RowFilterControl.DataFilters;

            Dictionary inputVariableList = new Dictionary();


            Parameters.ColumnNames = new List();
            Parameters.StrataVariableNames = new List();

            if (cbxExposureField.SelectedIndex > -1 && !string.IsNullOrEmpty(cbxExposureField.SelectedItem.ToString()))
            {
                if (Parameters.ColumnNames.Count > 0)
                {
                    Parameters.ColumnNames[0] = cbxExposureField.SelectedItem.ToString();
                }
                else
                {
                    Parameters.ColumnNames.Add(cbxExposureField.SelectedItem.ToString());
                }
            }
            else
            {
                return;
            }

            if (cbxOutcomeField.SelectedIndex > -1 && !string.IsNullOrEmpty(cbxOutcomeField.SelectedItem.ToString()))
            {
                Parameters.CrosstabVariableName = cbxOutcomeField.SelectedItem.ToString();
            }
            else
            {
                return;
            }

            if (cbxFieldWeight.SelectedIndex > -1 && !string.IsNullOrEmpty(cbxFieldWeight.SelectedItem.ToString()))
            {
                Parameters.WeightVariableName = cbxFieldWeight.SelectedItem.ToString();
            }
            else
            {
                Parameters.WeightVariableName = String.Empty;
            }

            if (lbxFieldStrata.SelectedItems.Count > 0)
            {
                Parameters.StrataVariableNames = new List();
                foreach (string s in lbxFieldStrata.SelectedItems)
                {
                    Parameters.StrataVariableNames.Add(s.ToString());
                }
            }


            if (lbxYesValues.Items.Count > 0)
            {
                foreach (string thisItem in lbxYesValues.Items)
                {
                    if (!Parameters.YesValues.Contains(thisItem))
                    {
                        Parameters.YesValues.Add(thisItem);
                    }
                }
            }
            if (lbxNoValues.Items.Count > 0)
            {
                foreach (string thisItem in lbxNoValues.Items)
                {
                    if (!Parameters.NoValues.Contains(thisItem))
                    {
                        Parameters.NoValues.Add(thisItem);
                    }
                }
            }


            Parameters.GadgetTitle = txtTitle.Text;
            Parameters.GadgetDescription = txtDesc.Text;

            Parameters.ShowAllListValues = (bool)checkboxAllValues.IsChecked;
            Parameters.ShowCommentLegalLabels = (bool)checkboxCommentLegalLabels.IsChecked;
            Parameters.IncludeMissing = (bool) checkboxIncludeMissing.IsChecked;

            Parameters.TreatOutcomeAsContinuous = (bool)checkboxOutcomeContinuous.IsChecked;
            Parameters.SmartTable = (bool)checkboxSmartTable.IsChecked;
            Parameters.StrataSummaryOnly = (bool)checkboxStrataSummaryOnly.IsChecked;
            Parameters.ShowPercents = (bool)checkboxRowColPercents.IsChecked;

            Parameters.HorizontalDisplayMode = (bool)checkboxHorizontal.IsChecked;
            Parameters.MaxColumnNameLength = txtMaxColumnLength.Text;


            Parameters.ConditionalShading = (bool)checkboxConditionalShading.IsChecked;
            Parameters.LoColorFill = rctLowColor.Fill as SolidColorBrush;
            Parameters.HiColorFill = rctHighColor.Fill as SolidColorBrush;

            Parameters.BreakType = cmbBreakType.SelectedIndex;
            Parameters.Break1 = txtPct1.Text;
            Parameters.Break2 = txtPct2.Text;
            Parameters.Break3 = txtPct3.Text;
            Parameters.Break4 = txtPct4.Text;
            Parameters.Break5 = txtPct5.Text;
        }

                void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            this.DashboardHelper = DashboardHelper;
            CrosstabParameters crosstabParameters = (CrosstabParameters)Parameters;

            rctLowColor.Fill = crosstabParameters.LoColorFill;
            rctHighColor.Fill = crosstabParameters.HiColorFill;


            if (Parameters.ColumnNames.Count > 0)
            {
                cbxExposureField.SelectedItem = Parameters.ColumnNames[0];
            }
            cbxOutcomeField.SelectedItem = Parameters.CrosstabVariableName;
            cbxFieldWeight.SelectedItem = Parameters.WeightVariableName;
            lbxFieldStrata.MaxHeight = lbxFieldStrata.MaxHeight + (System.Windows.SystemParameters.PrimaryScreenHeight - 768.0);
            scrollViewerStrataProperties.Height = scrollViewerStrataProperties.Height + (System.Windows.SystemParameters.PrimaryScreenHeight - 768.0);
            if (Parameters.StrataVariableNames.Count > 0)
            {
                foreach (string s in Parameters.StrataVariableNames)
                {

                    lbxFieldStrata.SelectedItems.Add(s.ToString());
                }
            }


            Update2x2ValueMappings();
            if (crosstabParameters.ColumnNames.Count > 0)
            {

                foreach (string s in crosstabParameters.YesValues)
                {
                    if (lbxAllValues.Items.Contains(s))
                    {
                        lbxYesValues.Items.Add(s);
                        lbxAllValues.Items.Remove(s);
                    }
                }

                foreach (string s in crosstabParameters.NoValues)
                {
                    if (lbxAllValues.Items.Contains(s))
                    {
                        lbxNoValues.Items.Add(s);
                        lbxAllValues.Items.Remove(s);
                    }
                }
            }


            txtTitle.Text = Parameters.GadgetTitle;
            txtDesc.Text = Parameters.GadgetDescription;
            checkboxAllValues.IsChecked = Parameters.ShowAllListValues;
            checkboxCommentLegalLabels.IsChecked = Parameters.ShowCommentLegalLabels;
            checkboxIncludeMissing.IsChecked = Parameters.IncludeMissing;
            checkboxOutcomeContinuous.IsChecked = crosstabParameters.TreatOutcomeAsContinuous;
            checkboxSmartTable.IsChecked = crosstabParameters.SmartTable;
            checkboxStrataSummaryOnly.IsChecked = crosstabParameters.StrataSummaryOnly;
            checkboxRowColPercents.IsChecked = crosstabParameters.ShowPercents;
            checkboxHorizontal.IsChecked = crosstabParameters.HorizontalDisplayMode;
            txtMaxColumnLength.Text = crosstabParameters.MaxColumnNameLength;


            checkboxConditionalShading.IsChecked = crosstabParameters.ConditionalShading;


            cmbBreakType.SelectedIndex = Int32.Parse(crosstabParameters.BreakType.ToString());
            if (!String.IsNullOrEmpty(crosstabParameters.Break1))
            {
                txtPct1.Text = crosstabParameters.Break1;
            }
            else
            {
                txtPct1.Text = "0";
            }
            if (!String.IsNullOrEmpty(crosstabParameters.Break2))
            {
                txtPct2.Text = crosstabParameters.Break2;
            }
            else
            {
                txtPct2.Text = "20";
            }
            if (!String.IsNullOrEmpty(crosstabParameters.Break3))
            {
                txtPct3.Text = crosstabParameters.Break3;
            }
            else
            {
                txtPct3.Text = "40";
            }
            if (!String.IsNullOrEmpty(crosstabParameters.Break4))
            {
                txtPct4.Text = crosstabParameters.Break4;
            }
            else
            {
                txtPct4.Text = "60";
            }
            if (!String.IsNullOrEmpty(crosstabParameters.Break5))
            {
                txtPct5.Text = crosstabParameters.Break5;
            }
            else
            {
                txtPct5.Text = "80";
            }

            CheckVariables();
        }

        public class FieldInfo { public string Name { get {return _Name; } set{ _Name=value; } } string _Name; public string DataType { get {return _DataType; } set{ _DataType=value; } } string _DataType; public VariableCategory VariableCategory { get {return _VariableCategory; } set{ _VariableCategory=value; } } VariableCategory _VariableCategory; }














































































                void tbtnVariables_Checked(object sender, RoutedEventArgs e)
        {
            if (panelVariables == null) return;

            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Visible;
            panelValueMapping.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplayColors.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnValueMapping_Checked(object sender, RoutedEventArgs e)
        {
            if (panelVariables == null) return;

            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelValueMapping.Visibility = System.Windows.Visibility.Visible;
            panelDisplayColors.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnDisplay_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelValueMapping.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplayColors.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Visible;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnDisplayColors_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelValueMapping.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplayColors.Visibility = System.Windows.Visibility.Visible;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnFilters_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelValueMapping.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplayColors.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Visible;
        }






                void checkboxCheckChanged(object sender, RoutedEventArgs e)
        {
            if (sender == checkboxOutcomeContinuous && checkboxOutcomeContinuous.IsChecked == true)
            {
                checkboxIncludeMissing.IsChecked = false;
            }
            else if (sender == checkboxIncludeMissing && checkboxIncludeMissing.IsChecked == true)
            {
                checkboxOutcomeContinuous.IsChecked = false;
            }
        }




                void CheckVariables()
        {
            lbxFieldStrata.IsEnabled = true;
            if (cbxExposureField.SelectedIndex >= 0)
            {
                string exposureFieldName = cbxExposureField.SelectedItem.ToString();
                if (!String.IsNullOrEmpty(exposureFieldName))
                {
                    if (DashboardHelper.GetAllGroupsAsList().Contains(exposureFieldName))
                    {
                        lbxFieldStrata.IsEnabled = false;
                        lbxFieldStrata.SelectedItems.Clear();

                    }
                    else if (DashboardHelper.IsColumnText(exposureFieldName) || DashboardHelper.IsColumnNumeric(exposureFieldName))
                    {

                    }
                }
                else
                {

                    YesValues = new List();
                    lbxYesValues.SelectedItems.Clear();
                    NoValues = new List();
                    lbxNoValues.SelectedItems.Clear();
                }
            }
        }

                void lbxFieldStrata_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            bool clearLbx = false;
            foreach (string s in lbxFieldStrata.SelectedItems)
            {
                if (s == String.Empty)
                {
                    clearLbx = true;
                }
            }
            if (clearLbx) lbxFieldStrata.SelectedItems.Clear();
        }

                void cbxFieldWeight_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {




        }















































                void Update2x2ValueMappings()
        {
            this.DashboardHelper = DashboardHelper;
            List YesItems = new List();
            List NoItems = new List();
            lbxAllValues.Items.Clear();
            if (lbxYesValues.Items.Count > 0)
            {
                foreach (string thisItem in lbxYesValues.Items)
                {
                    YesItems.Add(thisItem);
                }
            }
            if (lbxNoValues.Items.Count > 0)
            {
                foreach (string thisItem in lbxNoValues.Items)
                {
                    NoItems.Add(thisItem);
                }
            }
            lbxYesValues.Items.Clear();
            lbxNoValues.Items.Clear();

            if (Parameters.ColumnNames.Count > 0 && !String.IsNullOrEmpty(Parameters.ColumnNames[0])) GetValueLists(Parameters.ColumnNames[0]);
            if (!String.IsNullOrEmpty(Parameters.CrosstabVariableName)) GetValueLists(Parameters.CrosstabVariableName);

            foreach (string YesItem in Parameters.YesValues)
            {
                if (lbxAllValues.Items.Contains(YesItem))
                {
                    lbxAllValues.Items.Remove(YesItem);
                    lbxYesValues.Items.Add(YesItem);
                }
            }
            foreach (string NoItem in Parameters.NoValues)
            {
                if (lbxAllValues.Items.Contains(NoItem))
                {
                    lbxAllValues.Items.Remove(NoItem);
                    lbxNoValues.Items.Add(NoItem);
                }
            }


            lbxAllValues.Items.SortDescriptions.Add(new System.ComponentModel.SortDescription("Content", System.ComponentModel.ListSortDirection.Ascending));
            lbxYesValues.Items.SortDescriptions.Add(new System.ComponentModel.SortDescription("Content", System.ComponentModel.ListSortDirection.Ascending));
            lbxNoValues.Items.SortDescriptions.Add(new System.ComponentModel.SortDescription("Content", System.ComponentModel.ListSortDirection.Ascending));
        }



                void GetValueLists(string fieldName)
        {
            if (!String.IsNullOrEmpty(fieldName))
            {
                List distinctValueList = new List();
                if (DashboardHelper.GetAllGroupsAsList().Contains(fieldName))
                {
                    foreach (string var in DashboardHelper.GetVariablesInGroup(fieldName))
                    {
                        distinctValueList = DashboardHelper.GetDistinctValuesAsList(var);
                        AddRemoveValues(distinctValueList);
                    }
                }
                else
                {
                    distinctValueList = DashboardHelper.GetDistinctValuesAsList(fieldName);
                    AddRemoveValues(distinctValueList);
                }
            }
        }

                void AddRemoveValues(List distinctValueList)
        {
            foreach (string s in distinctValueList)
            {
                if (!lbxAllValues.Items.Contains(s) && !lbxYesValues.Items.Contains(s) && !lbxNoValues.Items.Contains(s) && !String.IsNullOrEmpty(s))
                {
                    lbxAllValues.Items.Add(s);
                }
            }
        }

                void cmbBreakType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tblockPct5 != null)
            {
                if (cmbBreakType.SelectedIndex == 0)
                {
                    tblockPct5.Visibility = System.Windows.Visibility.Visible;
                    tblockPct4.Visibility = tblockPct3.Visibility = tblockPct2.Visibility = tblockPct1.Visibility = tblockPct5.Visibility;
                    txtPct1.Text = "0";
                    txtPct2.Text = "20";
                    txtPct3.Text = "40";
                    txtPct4.Text = "60";
                    txtPct5.Text = "80";
                }
                else
                {
                    tblockPct5.Visibility = System.Windows.Visibility.Hidden;
                    tblockPct4.Visibility = tblockPct3.Visibility = tblockPct2.Visibility = tblockPct1.Visibility = tblockPct5.Visibility;
                }
            }
        }

                void cbxExposureField_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (panelVariables == null) return;
            if (cbxExposureField.SelectedIndex > -1)
            {
                if (!String.IsNullOrEmpty(cbxExposureField.SelectedItem.ToString()))
                {
                    if (Parameters.ColumnNames.Count > 0)
                    {
                        Parameters.ColumnNames[0] = cbxExposureField.SelectedItem.ToString();
                    }
                    else
                    {
                        Parameters.ColumnNames.Add(cbxExposureField.SelectedItem.ToString());
                    }
                    Update2x2ValueMappings();
                }
            }
            CheckVariables();
        }

                void cbxOutcomeField_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (panelVariables == null) return;
            if (cbxOutcomeField.SelectedIndex > -1)
            {
                if (!String.IsNullOrEmpty(cbxOutcomeField.SelectedItem.ToString()))
                {
                    Parameters.CrosstabVariableName = cbxOutcomeField.SelectedItem.ToString();
                    Update2x2ValueMappings();
                }
            }
        }

                void btnAddYes_Click(object sender, RoutedEventArgs e)
        {
            if (lbxAllValues.SelectedItems.Count > 0)
            {
                string selectedItem = lbxAllValues.SelectedItem.ToString();

                lbxAllValues.Items.Remove(selectedItem);
                lbxYesValues.Items.Add(selectedItem);
            }
        }

                void btnRemoveYes_Click(object sender, RoutedEventArgs e)
        {
            if (lbxYesValues.SelectedItems.Count > 0)
            {
                string selectedItem = lbxYesValues.SelectedItem.ToString();

                lbxYesValues.Items.Remove(selectedItem);
                lbxAllValues.Items.Add(selectedItem);
            }
        }

                void btnAddNo_Click(object sender, RoutedEventArgs e)
        {
            if (lbxAllValues.SelectedItems.Count > 0)
            {
                string selectedItem = lbxAllValues.SelectedItem.ToString();

                lbxAllValues.Items.Remove(selectedItem);
                lbxNoValues.Items.Add(selectedItem);
            }
        }

                void btnRemoveNo_Click(object sender, RoutedEventArgs e)
        {
            if (lbxNoValues.SelectedItems.Count > 0)
            {
                string selectedItem = lbxNoValues.SelectedItem.ToString();

                lbxNoValues.Items.Remove(selectedItem);
                lbxAllValues.Items.Add(selectedItem);
            }
        }

        void rctLowColor_MouseUp(object sender, MouseButtonEventArgs e)
        {

            System.Windows.Forms.ColorDialog dialog = new System.Windows.Forms.ColorDialog();
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                rctLowColor.Fill = new SolidColorBrush(Color.FromArgb(0xF0, dialog.Color.R, dialog.Color.G, dialog.Color.B));



            }
        }

        void rctHighColor_MouseUp(object sender, MouseButtonEventArgs e)
        {
            System.Windows.Forms.ColorDialog dialog = new System.Windows.Forms.ColorDialog();
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                rctHighColor.Fill = new SolidColorBrush(Color.FromArgb(0xF0, dialog.Color.R, dialog.Color.G, dialog.Color.B));



            }
        }
    }
}

 