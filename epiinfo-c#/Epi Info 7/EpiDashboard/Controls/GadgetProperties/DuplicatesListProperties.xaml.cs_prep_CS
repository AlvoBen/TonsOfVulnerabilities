using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using EpiDashboard;
using Epi;

namespace EpiDashboard.Controls.GadgetProperties
{



    public         class DuplicatesListProperties : GadgetPropertiesPanelBase
    {
        public DuplicatesListProperties(
            DashboardHelper dashboardHelper,
            IGadget gadget,
            DuplicatesListParameters parameters,
            List strataGridList,
            List columnOrder
            )
        {
            InitializeComponent();
            this.DashboardHelper = dashboardHelper;
            this.Gadget = gadget;
            this.Parameters = parameters;
            this.StrataGridList = strataGridList;
            this.ColumnOrder = columnOrder;

            List items = new List();
            List fields = new List();

            foreach (string fieldName in DashboardHelper.GetFieldsAsList())
            {
                items.Add(new FieldInfo()




);

                fields.Add(fieldName);
            }

            foreach (string fieldName in DashboardHelper.GetAllGroupsAsList())
            {
                FieldInfo fieldInfo = new FieldInfo()




;
                items.Add(fieldInfo);
            }















            fields.Sort();

            lvVariables.ItemsSource = items;
            lvDisplayVariables.ItemsSource = items;

            cmbGroupField.ItemsSource = fields;
            cmbSecondaryGroupField.ItemsSource = fields;

            foreach (string fieldName in fields)
            {
                lbxAvailableVariables.Items.Add(fieldName);
            }

            CollectionView view = (CollectionView)CollectionViewSource.GetDefaultView(lvVariables.ItemsSource);
            PropertyGroupDescription groupDescription = new PropertyGroupDescription("VariableCategory");
            view.GroupDescriptions.Add(groupDescription);

            RowFilterControl = new RowFilterControl(this.DashboardHelper, Dialogs.FilterDialogMode.ConditionalMode, (gadget as EpiDashboard.Gadgets.Analysis.DuplicatesListControl).DataFilters, true);
            RowFilterControl.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            panelFilters.Children.Add(RowFilterControl);
        }

        public bool HasSelectedFields
        {
            get
            {
                if (lvVariables.SelectedItems.Count > 0)
                {
                    return true;
                }
                return false;
            }
        }

        public DuplicatesListParameters Parameters { get {return _Parameters; } set{ _Parameters=value; } } DuplicatesListParameters _Parameters;
                List StrataGridList { get {return _StrataGridList; } set{ _StrataGridList=value; } } List _StrataGridList;
                List ColumnOrder { get {return _ColumnOrder; } set{ _ColumnOrder=value; } } List _ColumnOrder;




        protected override void CreateInputVariableList()
        {

            this.DataFilters = RowFilterControl.DataFilters;


            Parameters.ColumnNames = new List();
            Parameters.KeyColumnNames = new List();

            Parameters.SortVariables = new Dictionary();

            Parameters.GadgetTitle = txtTitle.Text;
            Parameters.GadgetDescription = txtDesc.Text;

            double height = 0;
            double width = 0;

            bool success = double.TryParse(txtMaxHeight.Text, out height);
            if (success)
            {
                Parameters.Height = height;
            }

            success = double.TryParse(txtMaxWidth.Text, out width);
            if (success)
            {
                Parameters.Width = width;
            }

            List listFields = new List();

            if (lvVariables.SelectedItems.Count > 0)
            {
                foreach (FieldInfo fieldInfo in lvVariables.SelectedItems)
                {
                    if (!string.IsNullOrEmpty(fieldInfo.Name))
                    {
                        listFields.Add(fieldInfo.Name);
                    }
                }
            }

            listFields.Sort();
            foreach (string field in listFields)
            {
                if (!string.IsNullOrEmpty(field) && !Parameters.KeyColumnNames.Contains(field))
                {
                    Parameters.KeyColumnNames.Add(field);
                }
            }

            List displayListFields = new List();

            if (lvDisplayVariables.SelectedItems.Count > 0)
            {
                foreach (FieldInfo fieldInfo in lvDisplayVariables.SelectedItems)
                {
                    if (!string.IsNullOrEmpty(fieldInfo.Name))
                    {
                        displayListFields.Add(fieldInfo.Name);
                    }
                }
            }

            displayListFields.Sort();

            foreach (string field in displayListFields)
            {
                Parameters.ColumnNames.Add(field);
            }



            Parameters.SortColumnsByTabOrder = checkboxTabOrder.IsChecked.Value;
            Parameters.UsePromptsForColumnNames = checkboxUsePrompts.IsChecked.Value;
            Parameters.ShowColumnHeadings = checkboxColumnHeaders.IsChecked.Value;
            Parameters.ShowLineColumn = checkboxLineColumn.IsChecked.Value;
            Parameters.ShowNullLabels = checkboxShowNulls.IsChecked.Value;
            Parameters.ShowCommentLegalLabels = checkboxListLabels.IsChecked.Value;

            if (lbxSortOrder.Items.Count > 0)
            {
                foreach (string item in lbxSortOrder.Items)
                {
                    if (!string.IsNullOrEmpty(item))
                    {












                        string baseStr = item;

                        if (baseStr.EndsWith("(ascending)"))
                        {
                            baseStr = baseStr.Remove(baseStr.Length - 12);
                            Parameters.SortVariables.Add(baseStr, SortOrder.Ascending);
                        }
                        if (baseStr.EndsWith("(descending)"))
                        {
                            baseStr = baseStr.Remove(baseStr.Length - 13);
                            Parameters.SortVariables.Add(baseStr, SortOrder.Descending);
                        }
                    }
                }
            }

            if (cmbGroupField.SelectedIndex >= 0)
            {
                if (!string.IsNullOrEmpty(cmbGroupField.SelectedItem.ToString()))
                {
                    Parameters.PrimaryGroupField = cmbGroupField.SelectedItem.ToString();
                }
            }

            if (cmbSecondaryGroupField.SelectedIndex >= 0)
            {
                if (!string.IsNullOrEmpty(cmbSecondaryGroupField.SelectedItem.ToString()))
                {
                    Parameters.SecondaryGroupField = cmbSecondaryGroupField.SelectedItem.ToString();
                }
            }

            if (StrataGridList.Count >= 1)
            {
                Grid grid = StrataGridList[0];
                SortedDictionary sortColumnDictionary = new SortedDictionary();

                foreach (UIElement element in grid.Children)
                {
                    if (Grid.GetRow(element) == 0 && element is TextBlock)
                    {
                        TextBlock txtColumnName = element as TextBlock;

                        sortColumnDictionary.Add(Grid.GetColumn(element), txtColumnName.Text);
                    }
                }

                ColumnOrder = new List();
                foreach (KeyValuePair kvp in sortColumnDictionary)
                {
                    ColumnOrder.Add(kvp.Value);
                }

                if (ColumnOrder.Count == listFields.Count || ColumnOrder.Count == (listFields.Count + 1))
                {
                    bool same = true;
                    foreach (string s in listFields)
                    {
                        if (!ColumnOrder.Contains(s))
                        {
                            same = false;
                        }
                    }

                    if (same)
                    {
                        WordBuilder wb = new WordBuilder("^");
                        foreach (string s in ColumnOrder)
                        {
                            wb.Add(s);
                        }


                        Parameters.CustomUserColumnSort.Add(wb.ToString());
                    }
                    else
                    {
                        ColumnOrder = new List();
                    }
                }
                else
                {
                    ColumnOrder = new List();
                }
            }


        }

                void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            lvVariables.MaxHeight = this.ActualHeight - 200;
            lvDisplayVariables.MaxHeight = this.ActualHeight - 200;



            foreach (string s in Parameters.KeyColumnNames)
            {
                foreach (FieldInfo info in lvVariables.Items)
                {
                    if (info.Name == s)
                    {
                        lvVariables.SelectedItems.Add(info);
                        continue;
                    }
                }
            }

            foreach (string s in Parameters.ColumnNames)
            {
                foreach (FieldInfo info in lvVariables.Items)
                {
                    if (info.Name == s)
                    {
                        lvDisplayVariables.SelectedItems.Add(info);
                        continue;
                    }
                }
            }

            if (!String.IsNullOrEmpty(Parameters.Height.ToString()))
            {
                txtMaxHeight.Text = Parameters.Height.ToString();
            }
            if (!String.IsNullOrEmpty(Parameters.Width.ToString()))
            {
                txtMaxWidth.Text = Parameters.Width.ToString();
            }

            svVariables.Height = svVariables.Height + (System.Windows.SystemParameters.PrimaryScreenHeight - 768.0);

            lbxAvailableVariables.Height = lbxAvailableVariables.Height + (System.Windows.SystemParameters.PrimaryScreenHeight - 868.0);
            lbxSortOrder.Height = lbxSortOrder.Height + (System.Windows.SystemParameters.PrimaryScreenHeight - 868.0);

            checkboxTabOrder.IsChecked = Parameters.SortColumnsByTabOrder;
            checkboxUsePrompts.IsChecked = Parameters.UsePromptsForColumnNames;
            checkboxColumnHeaders.IsChecked = Parameters.ShowColumnHeadings;
            checkboxLineColumn.IsChecked = Parameters.ShowLineColumn;
            checkboxShowNulls.IsChecked = Parameters.ShowNullLabels;
            checkboxListLabels.IsChecked = Parameters.ShowCommentLegalLabels;

            cmbGroupField.SelectedItem = Parameters.PrimaryGroupField;
            cmbSecondaryGroupField.SelectedItem = Parameters.SecondaryGroupField;

            foreach (KeyValuePair kvp in Parameters.SortVariables)
            {
                string suffix = String.Empty;
                switch (kvp.Value)
                {
                    case SortOrder.Descending:
                        suffix = " (descending)";
                        break;
                    case SortOrder.Ascending:
                        suffix = " (ascending)";
                        break;
                }

                lbxAvailableVariables.Items.Remove(kvp.Key);
                lbxSortOrder.Items.Add(kvp.Key + suffix);
            }

            txtTitle.Text = Parameters.GadgetTitle;
            txtDesc.Text = Parameters.GadgetDescription;
        }

        public class FieldInfo { public string Name { get {return _Name; } set{ _Name=value; } } string _Name; public string DataType { get {return _DataType; } set{ _DataType=value; } } string _DataType; public VariableCategory VariableCategory { get {return _VariableCategory; } set{ _VariableCategory=value; } } VariableCategory _VariableCategory; }

                void tbtnVariables_Checked(object sender, RoutedEventArgs e)
        {
            if (panelVariables == null) return;

            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Visible;
            panelSorting.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnSorting_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelSorting.Visibility = System.Windows.Visibility.Visible;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnDisplay_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelSorting.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Visible;
            panelFilters.Visibility = System.Windows.Visibility.Collapsed;
        }

                void tbtnFilters_Checked(object sender, RoutedEventArgs e)
        {
            CheckButtonStates(sender as SettingsToggleButton);
            panelVariables.Visibility = System.Windows.Visibility.Collapsed;
            panelSorting.Visibility = System.Windows.Visibility.Collapsed;
            panelDisplay.Visibility = System.Windows.Visibility.Collapsed;
            panelFilters.Visibility = System.Windows.Visibility.Visible;
        }

                void lbxAvailableVariables_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (lbxAvailableVariables.SelectedItems.Count == 1)
            {
                string fieldName = lbxAvailableVariables.SelectedItem.ToString();

                lbxAvailableVariables.Items.Remove(fieldName);

                string method = " (ascending)";
                if (cmbSortMethod.SelectedIndex == 1)
                {
                    method = " (descending)";
                }
                lbxSortOrder.Items.Add(fieldName + method);
            }
        }

                void lbxSortOrder_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (lbxSortOrder.SelectedItems.Count == 1)
            {
                string fieldName = lbxSortOrder.SelectedItem.ToString();

                lbxSortOrder.Items.Remove(fieldName);

                string originalFieldName = fieldName.Replace(" (ascending)", String.Empty).Replace(" (descending)", String.Empty);

                lbxAvailableVariables.Items.Add(originalFieldName);

                List items = new List();

                foreach (string item in lbxAvailableVariables.Items)
                {
                    items.Add(item);
                }

                items.Sort();

                lbxAvailableVariables.Items.Clear();

                foreach (string item in items)
                {
                    lbxAvailableVariables.Items.Add(item);
                }
            }
        }

                void lvVariables_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }
    }
}

 