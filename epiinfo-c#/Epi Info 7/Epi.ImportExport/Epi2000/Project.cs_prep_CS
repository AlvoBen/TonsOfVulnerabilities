using System;
using System.Data;
using System.IO;
using Epi;
using Epi.Data;
using Epi.Data.Services;
using Epi.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Epi.Epi2000
{




    public class Project
    {
        //Public Events




        public event MessageEventHandler TableCopyBeginEvent;




        public event TableCopyStatusEventHandler TableCopyStatusEvent;




        public event MessageEventHandler TableCopyEndEvent;

        //Public Events

        //Fields
        private string location;
        private string name;
        private bool useMetadataDbForCollectedData;
        private MetadataDbProvider metadata;
        private CollectedDataProvider collectedData;
        private Collection views = null;
        //Fields

        //Constructors



        public Project()
        {
            PreConstruct();
        }





        public Project(string filePath)
        {
            Location = Path.GetDirectoryName(filePath);
            Name = Path.GetFileNameWithoutExtension(filePath);
            this.name = Name;
            this.location = Location;
            PreConstruct();
        }

        //

        //Private Methods

        private void PreConstruct()
        {
            UseMetadataDbForCollectedData = true;
            metadata = new MetadataDbProvider(this);
            collectedData = new CollectedDataProvider(this);
        }

        // 

        //Public Properties




        public CollectedDataProvider CollectedData
        {
            get
            {
                return collectedData;
            }
            set
            {
                collectedData = value;
            }
        }




        public MetadataDbProvider Metadata
        {
            get
            {
                return metadata;
            }
            set
            {
                metadata = value;
            }
        }








        public string FileExtension
        {
            get
            {
                return ".mdb";
            }
        }




        public bool UseMetadataDbForCollectedData
        {
            get
            {
                return useMetadataDbForCollectedData;
            }
            set
            {
                useMetadataDbForCollectedData = value;
            }
        }




        public string Location
        {
            get
            {
                return location;
            }
            set
            {
                location = value;
            }
        }




        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                name = value;
            }
        }




        public string FilePath
        {
            get
            {
                if (string.IsNullOrEmpty(Location) || string.IsNullOrEmpty(FileName))
                {
                    return string.Empty;
                }
                else
                {
                    return Path.Combine(Location, FileName);
                }
            }
        }




        public string FileName
        {
            get
            {
                if (!string.IsNullOrEmpty(Name))
                {
                    return (Name + FileExtension);
                }
                else
                {
                    return string.Empty;
                }
            }
        }





        public bool IsEpiCollectedData
        {
            get
            {
                return true;
            }
        }




        public Collection Views
        {
            get
            {
                if (views == null)
                {
                    LoadViews();
                }
                return views;
            }
        }

        //Public Properties

        //Public Methods





        public void CopyCodeTablesTo(Epi.Project destination)
        {
            List codeTableList = Metadata.GetCodeTableNames();

            foreach (string codeTableName in codeTableList)
            {
                RaiseEventTableCopyBegin(codeTableName + StringLiterals.ELLIPSIS);

                string[] columnNames = Metadata.GetCodeTableColumnNames(codeTableName);

                destination.CreateCodeTable(codeTableName, columnNames);

                DataTable CodeTable = this.Metadata.GetCodeTableData(codeTableName);
                int rowIndex = 0;

                foreach (DataRow CodeRow in CodeTable.Rows)
                {
                    RaiseEventTableCopyStatus(codeTableName, rowIndex, CodeTable.Rows.Count);

                    rowIndex++;
                    string[] columnData = new string[columnNames.Length];

                    for (int i = 0; i < columnNames.Length; i++)
                    {
                        columnData[i] = CodeRow[columnNames[i]].ToString();
                    }

                    destination.Metadata.CreateCodeTableRecord(codeTableName, columnNames, columnData);
                }

                RaiseEventTableCopyEnd(codeTableName + StringLiterals.ELLIPSIS);
            }
        }

        /*




        public override DataTable GetCodeTables()
        {
            return null;
        }
        */







        public void CreateCodeTable(string tableName, string[] columnNames)
        {
            throw new NotImplementedException("Not Implemented: CreateCodeTable");
        }







        public void CreateCodeTable(string tableName, string columnName)
        {
            throw new NotImplementedException("Not Implemented: CreateCodeTable");
        }







        public void DeletePgm(string programName, int programId)
        {
            Metadata.DeletePgm(programName);
        }







        public bool Equals(Project other)
        {
            return (string.Compare(FilePath, other.FilePath, true) == 0);
        }






        public DataTable GetNonViewTablesAsDataTable()
        {
            return (Metadata.GetNonViewTablesAsDataTable());
        }





        [System.Obsolete]

        public DataTable GetDataTableList()
        {
            return null;
        }






        public DataTable GetViewsAsDataTable()
        {
            return (Metadata.GetViewsAsDataTable());
        }


















        public void InsertPgm(string name, string content, string comment, string author)
        {
            Metadata.InsertPgm(name, content, comment, author);
        }





        public void LoadViews()
        {
            this.views = new Collection();
            System.Collections.Hashtable RelatedViews = new System.Collections.Hashtable();

            DataTable viewsTable = GetViewsAsDataTable();
            foreach (DataRow viewRow in viewsTable.Rows)
            {
                View V = new Epi2000.View(viewRow, this);


                IDataReader R = this.collectedData.GetTableDataReader(V.Name);
                while(R.Read())
                {

                    if (R["Name"].ToString().ToUpper().StartsWith("RELVIEW"))
                    {
                        if(! RelatedViews.ContainsKey(R["DataTable"].ToString()))
                        {
                            RelatedViews.Add(R["DataTable"].ToString(), R["DataTable"].ToString());
                        }
                    }
                }
                R.Close();

                this.views.Add(V);
            }


            foreach(Epi2000.View V in this.views)
            {
                if (RelatedViews.ContainsKey(V.Name))
                {
                    V.IsRelatedView = true;
                }
            }
        }





        public void RaiseEventTableCopyBegin(string tableName)
        {
            if (TableCopyBeginEvent != null)
            {
                TableCopyBeginEvent(this, new MessageEventArgs(tableName + StringLiterals.ELLIPSIS));
            }
        }





        public void RaiseEventTableCopyEnd(string tableName)
        {
            if (TableCopyEndEvent != null)
            {
                string msg = SharedStrings.END + " : " + tableName;
                TableCopyEndEvent(this, new MessageEventArgs(msg));
            }
        }






        public void RaiseEventTableCopyStatus(string tableName, int recordCount)
        {
            if (this.TableCopyStatusEvent != null)
            {
                this.TableCopyStatusEvent(this, new TableCopyStatusEventArgs(tableName, recordCount));
            }
        }






        public void RaiseEventTableCopyStatus(string tableName, int recordCount, int totalRecords)
        {
            if (this.TableCopyStatusEvent != null)
            {
                this.TableCopyStatusEvent(this, new TableCopyStatusEventArgs(tableName, recordCount, totalRecords));
            }
        }








        public void SaveCodeTableData(DataTable dataTable, string tableName, string columnName)
        {

        }








        public void SaveCodeTableData(DataTable dataTable, string tablename, string[] columnNames)
        {

        }










        public void UpdatePgm(int programId, string name, string content, string comment, string author)
        {
            Metadata.UpdatePgm(name, content, comment, author);
        }





        public List Validate()
        {

            List validationErrors = new List();
            AppData appData = AppData.Instance;
            foreach (Epi2000.View view in this.Views)
            {
                if (appData.IsReservedWord(view.NameWithoutPrefix))
                {
                    string errorMsg = view.NameWithoutPrefix + " : " + SharedStrings.RESERVED_WORD_INVALID_USE;
                    validationErrors.Add(errorMsg);

                }
                foreach (Epi2000.Page page in view.Pages)
                {

                    if (appData.IsReservedWord(page.Name))
                    {
                        string errorMsg = view.Name + "\\" + page.Name + " : " + SharedStrings.RESERVED_WORD_INVALID_USE;
                        validationErrors.Add(errorMsg);

                    }
                    DataTable fieldsTable = Metadata.GetFieldsOnPageAsDataTable(view.NameWithPrefix, page.Position);
                    foreach (DataRow fieldRow in fieldsTable.Rows)
                    {

                        string fieldName = fieldRow[ColumnNames.NAME].ToString();
                        if (appData.IsReservedWord(fieldName))
                        {
                            string errorMsg = view.Name + "\\" + page.Name + "\\" + fieldName + " : " + SharedStrings.RESERVED_WORD_INVALID_USE;
                            validationErrors.Add(errorMsg);

                        }
                    }
                }
            }
            return (validationErrors);
        }

        //Public Methods
    }
}
 