using System;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using Epi.Collections;

namespace Epi.Epi2000
{



    public class View
 {
        //Fields
  private string name = string.Empty;
  private bool isRelatedView = false;
        private bool isWideTableView = false;
  private string checkCodeVariableDefinitions = string.Empty;
  private string checkCodeBefore = string.Empty;
  private string checkCodeAfter = string.Empty;
  private string recordCheckCodeBefore = string.Empty;
  private string recordCheckCodeAfter = string.Empty;


        private List dataTableNames = new List();
  private int id = 0;
        private Epi2000.View parentView;




        protected List pages = null;



        protected Project project;
  //Fields

  //Constructors




  public View()
  {
  }





        public View(Project proj)
        {
            project = proj;
        }





        public void CopyTo(Epi.View other)
        {
            other.Name = this.NameWithoutPrefix;
            other.IsRelatedView = this.IsRelatedView;
            /*
            other.CheckCodeVariableDefinitions = this.CheckCodeVariableDefinitions;
            other.CheckCodeBefore = this.CheckCodeBefore;
            other.WebSurveyId = this.CheckCodeAfter;
            other.RecordCheckCodeBefore = this.RecordCheckCodeBefore;
            other.RecordCheckCodeAfter = this.RecordCheckCodeAfter;
            other.IsRelatedView = this.IsRelatedView;*/
        }







        public View(DataRow row, Project proj)
        {
            project = proj;

            Name = row[ColumnNames.NAME].ToString();
            System.Text.StringBuilder CheckCode = new System.Text.StringBuilder();



            if (!string.IsNullOrEmpty(row[ColumnNames.CHECK_CODE_VARIABLE_DEFINITIONS].ToString()))
            {
                CheckCode.Append("\nDefineVariables\n\t");
                CheckCode.Append(row[ColumnNames.CHECK_CODE_VARIABLE_DEFINITIONS].ToString().Replace("\n","\n\t\t"));
                CheckCode.Append("\nEnd-DefineVariables");
            }


            if (
                   (!string.IsNullOrEmpty(row[ColumnNames.CHECK_CODE_BEFORE].ToString()))
                ||
                   (!string.IsNullOrEmpty(row[ColumnNames.CHECK_CODE_AFTER].ToString()))
                )
            {

                CheckCode.Append("\nView\n\t");
                if (!string.IsNullOrEmpty(row[ColumnNames.CHECK_CODE_BEFORE].ToString()))
                {
                    CheckCode.Append("Before\n\t\t");

                    CheckCode.Append(row[ColumnNames.CHECK_CODE_BEFORE].ToString().Replace("\n", "\n\t\t\t"));
                    CheckCode.Append("\n\tEnd-Before\n");
                }

                if (!string.IsNullOrEmpty(row[ColumnNames.CHECK_CODE_AFTER].ToString()))
                {
                    CheckCode.Append("After\n\t\t");

                    CheckCode.Append(row[ColumnNames.CHECK_CODE_AFTER].ToString().Replace("\n", "\n\t\t\t"));
                    CheckCode.Append("\n\tEnd-After\n\t\t");
                }
                CheckCode.Append("\nEnd-View");
            }



            if (
                   (!string.IsNullOrEmpty(row[ColumnNames.RECORD_CHECK_CODE_BEFORE].ToString()))
                ||
                   (!string.IsNullOrEmpty(row[ColumnNames.RECORD_CHECK_CODE_AFTER].ToString()))
                )
            {

                CheckCode.Append("\nRecord\n\t");
                if (!string.IsNullOrEmpty(row[ColumnNames.RECORD_CHECK_CODE_BEFORE].ToString()))
                {
                    CheckCode.Append("Before\n\t\t");

                    CheckCode.Append(row[ColumnNames.RECORD_CHECK_CODE_BEFORE].ToString().Replace("\n", "\n\t\t\t"));
                    CheckCode.Append("\n\tEnd-Before\n");
                }

                if (!string.IsNullOrEmpty(row[ColumnNames.RECORD_CHECK_CODE_AFTER].ToString()))
                {
                    CheckCode.Append("After\n\t\t");

                    CheckCode.Append(row[ColumnNames.RECORD_CHECK_CODE_AFTER].ToString().Replace("\n", "\n\t\t\t"));
                    CheckCode.Append("\n\tEnd-After\n\t\t");
                }
                CheckCode.Append("\nEnd-Record");
            }

            CheckCodeBefore = CheckCode.ToString();
            /*
            CheckCodeVariableDefinitions = row[ColumnNames.CHECK_CODE_VARIABLE_DEFINITIONS].ToString();
            CheckCodeBefore = row[ColumnNames.CHECK_CODE_BEFORE].ToString();
            CheckCodeAfter = row[ColumnNames.CHECK_CODE_AFTER].ToString();
            RecordCheckCodeBefore = row[ColumnNames.RECORD_CHECK_CODE_BEFORE].ToString();
            RecordCheckCodeAfter = row[ColumnNames.RECORD_CHECK_CODE_AFTER].ToString();*/


            dataTableNames.Add(row[ColumnNames.DATA_TABLE_NAME].ToString());
            if (dataTableNames[0].Contains(";"))
            {
                IsWideTableView = true;
                string[] tableNames = dataTableNames[0].Split(';');

                dataTableNames.Clear();

                foreach (string s in tableNames)
                {
                    dataTableNames.Add(s);
                }
            }
        }

  //Constructors

  //Public Properties




  public string Name
  {
   get
   {
    return (name);
   }
   set
   {
    name = value;
   }
  }




        public string TableName
        {
            get
            {
                if (TableNames.Count <= 0)
                {
                    return string.Empty;
                }
                else
                {
                    return TableNames[0];
                }
            }
        }




        public List TableNames
        {
            get
            {
                return dataTableNames;
            }
        }




  public string NameWithPrefix
  {
   get
   {
    if (Name.ToLower().StartsWith("view"))
    {
     return Name;
    }
    else
    {
     return ("view" + Name);
    }
   }
  }




  public string NameWithoutPrefix
  {
   get
   {
    if (Name.ToLower().StartsWith("view"))
    {
     return Name.Substring(4);
    }
    else
    {
     return Name;
    }
   }
  }




  public bool IsRelatedView
  {
   get
   {
    return (isRelatedView);
   }
   set
   {
    isRelatedView = value;
   }
  }




        public bool IsWideTableView
        {
            get
            {
                return (isWideTableView);
            }
            set
            {
                isWideTableView = value;
            }
        }




  public string CheckCodeVariableDefinitions
  {
   get
   {
    return (checkCodeVariableDefinitions);
   }
   set
   {
    checkCodeVariableDefinitions = value;
   }
  }




  public string CheckCodeAfter
  {
   get
   {
    return (checkCodeAfter);
   }
   set
   {
    checkCodeAfter = value;
   }
  }




  public string CheckCodeBefore
  {
   get
   {
    return (checkCodeBefore);
   }
   set
   {
    checkCodeBefore = value;
   }
  }




  public string RecordCheckCodeAfter
  {
   get
   {
    return (recordCheckCodeAfter);
   }
   set
   {
    recordCheckCodeAfter = value;
   }
  }




  public string RecordCheckCodeBefore
  {
   get
   {
    return (recordCheckCodeBefore);
   }
   set
   {
    recordCheckCodeBefore = value;
   }
  }






















  public virtual int Id
  {
   get
   {
    return id;
   }
   set
   {
    id = value;
   }
  }




        public View ParentView
        {
            get { return parentView; }
            set { parentView = value; }
        }





        public List Pages
        {
            get
            {
                if (pages == null)
                {

                    pages = this.project.Metadata.GetViewPages(this);
                }
                return (pages);
            }
        }

  //Public Methods

        //Public Methods




        public Epi2000.Project GetProject()
        {
            return (Epi2000.Project)project;
        }





        public int GetRecordCount()
        {
            return (this.GetProject().CollectedData.GetRecordCount(this));
        }






        public static string StripViewNameOfPrefix(string viewName)
        {
            if (viewName.ToLower().StartsWith("view"))
            {
                return viewName.Substring(4);
            }
            else
            {
                return (viewName);
            }
        }
        //Public Methods
    }
}
 