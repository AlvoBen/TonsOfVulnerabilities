//Using
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using Epi;
using Epi.Core;
using Epi.Data;
using Epi.Fields;
//

namespace Epi.ImportExport
{





    public class GenericProjectPackager : ProjectPackagerBase
    {
        //Events
        //

        //Constructors







        public GenericProjectPackager(Project sourceProject, string packagePath, string formName, string password)
            : base(sourceProject, packagePath, formName, password)
        {
        }










        public GenericProjectPackager(Project sourceProject, Dictionary columnsToNull, Dictionary gridColumnsToNull, string packagePath, string formName, string password)
            : base(sourceProject, columnsToNull, gridColumnsToNull, packagePath, formName, password)
        {
        }
        //

        //Private Members
        //

        //Protected Methods





        protected override bool CreateProjectCopy()
        {
            OnSetStatusMessage(ImportExportSharedStrings.COLLECTED_DATA_COPY_START);
            View sourceView = sourceProject.Views[FormName];


            destinationProject = CreateProject();
            string destinationFileName = destinationProject.CollectedData.DataSource;


            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            destinationProject.Metadata.AttachDbDriver(db);

            OnSetStatusMessage(ImportExportSharedStrings.FORM_COPY_START);



            FormCopier dataCopier = new FormCopier(sourceProject, destinationProject, sourceView);
            if (this.SelectQuery != null)
            {
                dataCopier.SelectQuery = SelectQuery; // The select query is what is used to filter out certain records, e.g. if the user wants to package only records where the case status is "C"
            }
            dataCopier.ColumnsToNull = ColumnsToNull; 
            dataCopier.GridColumnsToNull = GridColumnsToNull; 
            dataCopier.SetProgressBar += new SetProgressBarDelegate(OnSetProgress);
            dataCopier.SetStatus += new UpdateStatusEventHandler(OnSetStatusMessage);
            dataCopier.AddStatusMessage += new UpdateStatusEventHandler(OnAddStatusMessage);
            dataCopier.SetMaxProgressBarValue += new SetMaxProgressBarValueDelegate(OnSetMaxProgressValue);


            dataCopier.Copy();
            dataCopier.Dispose();


            OnSetStatusMessage(ImportExportSharedStrings.COLLECTED_DATA_COPY_END);

            try
            {

                destinationProject.CollectedData.GetDbDriver().CompactDatabase();
            }
            catch (Exception ex)
            {
                OnAddStatusMessage(string.Format(ImportExportSharedStrings.WARNING_COMPACT_FAILURE, ex.Message));
            }

            return true;
        }
        //

        //Private Methods
        //
    }
}

 