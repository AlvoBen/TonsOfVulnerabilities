//Using
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using Epi;
using Epi.Core;
using Epi.Data;
using Epi.Fields;
//

namespace Epi.ImportExport
{









    public class AccessProjectPackager : ProjectPackagerBase
    {
        //Events
        //

        //Constructors







        public AccessProjectPackager(Project sourceProject, string packagePath, string formName, string password)
            : base(sourceProject, packagePath, formName, password)
        {
        }










        public AccessProjectPackager(Project sourceProject, Dictionary columnsToNull, Dictionary gridColumnsToNull, string packagePath, string formName, string password)
            : base(sourceProject, columnsToNull, gridColumnsToNull, packagePath, formName, password)
        {
        }
        //

        //Protected Methods




        protected override bool CreateProjectCopy()
        {
            OnSetStatusMessage(ImportExportSharedStrings.COLLECTED_DATA_COPY_START);

            destinationProject = CreateProject();

            string sourceFileName = SourceProject.CollectedData.DataSource;
            string destinationFileName = destinationProject.CollectedData.DataSource;

            if (File.Exists(destinationFileName))
            {
                File.Delete(destinationFileName);
            }

            File.Copy(sourceFileName, destinationFileName);

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            destinationProject.Metadata.AttachDbDriver(db);

            View destinationView = destinationProject.Views[FormName];




            foreach (View view in destinationProject.Views)
            {
                if (ImportExportHelper.IsFormDescendant(view, destinationView))
                {
                    if (!view.Project.CollectedData.TableExists(view.TableName))
                    {
                        view.SetTableName(view.Name);
                        destinationProject.CollectedData.CreateDataTableForView(view, 1);
                        OnAddStatusMessage(string.Format(ImportExportSharedStrings.CREATED_DATA_TABLE_FOR_FORM_VERBOSE, view.Name));
                    }
                }
            }

            OnSetStatusMessage(ImportExportSharedStrings.COLLECTED_DATA_COPY_END);

            RemoveRowData();
            RemoveColumnData();

            if (!DeleteUnrelatedData())
            {
                OnSetStatusMessage(string.Format(ImportExportSharedStrings.WARNING_UNRELATED_FORMS, FormName));
            }

            if (!RemoveGridColumnData())
            {
                OnSetStatusMessage(ImportExportSharedStrings.WARNING_GRID_COLUMN_REMOVAL_FAILURE);
            }

            try
            {
                destinationProject.CollectedData.GetDbDriver().CompactDatabase();
            }
            catch (Exception ex)
            {
                OnAddStatusMessage(string.Format(ImportExportSharedStrings.WARNING_COMPACT_FAILURE, ex.Message));
            }

            return true;
        }





        protected override bool RemoveRowData()
        {
            //Check Inputs
            if (SelectQuery == null)
            {
                return true;
            }
            //

            /* Importantly, the user has selected row data that they want to send. However, we already
             * have a copy of all the data; therefore, we want to remove what the user didn't select.
             * The condition has to be "notted" so to speak. E.g. if they picked OnsetDate > 1/1/2005,
             * the delete query would get everything NOT (OnsetDate > 1/1/2005)
             *
             * This method should also recursively remove all related row data from both related forms
             * and from grid tables.
             */

            OnSetStatusMessage("Applying row filters...");


            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            View sourceView = sourceProject.Views[FormName];

            Query preRecordCountQuery = db.CreateQuery("SELECT Count(*) FROM [" + sourceView.TableName + "]");
            object preRecordCount = db.ExecuteScalar(preRecordCountQuery);

            Dictionary formLevels = new Dictionary();
            formLevels.Add(sourceView, 0);

            int maxLevel = 0;




            foreach (View view in sourceProject.Views)
            {
                int level = ImportExportHelper.GetFormDescendantLevel(view, sourceView, 0);
                if (level > 0)
                {
                    formLevels.Add(view, level);
                }

                if (level > maxLevel)
                {
                    maxLevel = level;
                }
            }

            List viewsToProcess = new List();

            for (int i = 1; i <= maxLevel; i++)
            {
                foreach (KeyValuePair kvp in formLevels)
                {
                    if (kvp.Value == i)
                    {
                        viewsToProcess.Add(kvp.Key);
                    }
                }
            }



            string sql = SelectQuery.SqlStatement;
            int indexOf = sql.ToLower().IndexOf(" where ");
            sql = sql.Insert(indexOf + 7, "not(");
            sql = sql + ")";


            Query selectNotQuery = db.CreateQuery(sql);
            selectNotQuery.Parameters = SelectQuery.Parameters;


            List parentGuidList = new List();
            List childGuidList = new List();

            IDataReader reader = null;

            try
            {
                reader = db.ExecuteReader(selectNotQuery);


                while (reader.Read())
                {
                    parentGuidList.Add(reader["GlobalRecordId"].ToString());
                }

                reader.Close();
                reader.Dispose();
            }
            catch
            {
                if (reader != null)
                {
                    reader.Close();
                    reader.Dispose();
                    reader = null;
                    return false;
                }
            }

            foreach (string value in parentGuidList)
            {
                Query deleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(sourceView.TableName) + " WHERE [GlobalRecordId] = '" + value + "'");
                db.ExecuteNonQuery(deleteQuery);

                foreach (Page page in sourceView.Pages)
                {
                    deleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(page.TableName) + " WHERE [GlobalRecordId] = '" + value + "'");
                    db.ExecuteNonQuery(deleteQuery);
                }
            }

            RemoveOrphanRecords(viewsToProcess);
            RemoveOrphanGridRecords(viewsToProcess);

            Query recordCountQuery = db.CreateQuery("SELECT Count(*) FROM [" + sourceView.TableName + "]");
            object recordCount = db.ExecuteScalar(recordCountQuery);

            OnSetStatusMessage(string.Format(ImportExportSharedStrings.ROW_FILTERS_END, recordCount.ToString(), preRecordCount.ToString()));

            return true;
        }





        private void RemoveOrphanGridRecords(List relatedFormsToProcess)
        {
            //Input Validation
            if (relatedFormsToProcess == null || relatedFormsToProcess.Count == 0)
            {
                return;
            }
            //

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            List parentGUIDList = new List();
            Dictionary gridKeys = new Dictionary();
            List formsToProcess = relatedFormsToProcess;
            int runningDeletionTotal = 0;

            formsToProcess.Add(sourceProject.Views[FormName]);


            foreach (View view in formsToProcess)
            {
                foreach (GridField gridField in view.Fields.GridFields)
                {
                    OnSetStatusMessage(string.Format(ImportExportSharedStrings.ORPHAN_GRID_ROW_REMOVAL_START, gridField.Name));

                    gridKeys.Clear();
                    parentGUIDList.Clear();

                    Query gridGUIDQuery = db.CreateQuery("SELECT [FKEY], [GlobalRecordId] FROM " + db.InsertInEscape(gridField.TableName));
                    IDataReader gridReader = db.ExecuteReader(gridGUIDQuery);
                    while (gridReader.Read())
                    {
                        if (!gridKeys.ContainsKey(gridReader["GlobalRecordId"].ToString()))
                        {
                            gridKeys.Add(gridReader["GlobalRecordId"].ToString(), gridReader["FKEY"].ToString());
                        }
                    }

                    gridReader.Close();
                    gridReader.Dispose();

                    Query parentGUIDQuery = db.CreateQuery("SELECT [GlobalRecordId] FROM " + db.InsertInEscape(view.TableName));
                    IDataReader parentReader = db.ExecuteReader(parentGUIDQuery);
                    while (parentReader.Read())
                    {
                        parentGUIDList.Add(parentReader["GlobalRecordId"].ToString());
                    }

                    parentReader.Close();
                    parentReader.Dispose();

                    List toRemove = new List();

                    foreach (KeyValuePair kvp in gridKeys)
                    {
                        if (!parentGUIDList.Contains(kvp.Value))
                        {
                            toRemove.Add(kvp.Key);
                        }
                    }

                    foreach (string s in toRemove)
                    {
                        Query deleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(gridField.TableName) + " WHERE [GlobalRecordId] = '" + s + "'");
                        runningDeletionTotal = runningDeletionTotal + db.ExecuteNonQuery(deleteQuery);
                    }
                }
            }

            if (runningDeletionTotal > 0)
            {
                OnSetStatusMessage(string.Format(ImportExportSharedStrings.ORPHAN_GRID_ROW_REMOVAL_END, runningDeletionTotal.ToString()));
            }
        }





        private void RemoveOrphanRecords(List relatedFormsToProcess)
        {
            //Input Validation
            if(relatedFormsToProcess == null || relatedFormsToProcess.Count == 0)
            {
                return;
            }
            //

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            List parentGUIDList = new List();
            Dictionary childKeys = new Dictionary();
            int runningDeletionTotal = 0;


            foreach (View view in relatedFormsToProcess)
            {
                View parentView = null;

                if (view.ParentView != null)
                {
                    OnSetStatusMessage(string.Format(ImportExportSharedStrings.ORPHAN_ROW_REMOVAL_START, view.Name));
                    parentView = view.ParentView;

                    childKeys.Clear();
                    parentGUIDList.Clear();

                    Query childGUIDQuery = db.CreateQuery("SELECT [FKEY], [GlobalRecordId] FROM " + db.InsertInEscape(view.TableName));
                    IDataReader childReader = db.ExecuteReader(childGUIDQuery);
                    while (childReader.Read())
                    {
                        childKeys.Add(childReader["GlobalRecordId"].ToString(), childReader["FKEY"].ToString());
                    }

                    childReader.Close();
                    childReader.Dispose();

                    Query parentGUIDQuery = db.CreateQuery("SELECT [GlobalRecordId] FROM " + db.InsertInEscape(parentView.TableName));
                    IDataReader parentReader = db.ExecuteReader(parentGUIDQuery);
                    while (parentReader.Read())
                    {
                        parentGUIDList.Add(parentReader["GlobalRecordId"].ToString());
                    }

                    parentReader.Close();
                    parentReader.Dispose();

                    List toRemove = new List();

                    foreach (KeyValuePair kvp in childKeys)
                    {
                        if (!parentGUIDList.Contains(kvp.Value))
                        {
                            toRemove.Add(kvp.Key);
                        }
                    }

                    foreach (string s in toRemove)
                    {
                        Query deleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(view.TableName) + " WHERE [GlobalRecordId] = '" + s + "'");
                        runningDeletionTotal = runningDeletionTotal + db.ExecuteNonQuery(deleteQuery);

                        foreach (Page page in view.Pages)
                        {
                            deleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(page.TableName) + " WHERE [GlobalRecordId] = '" + s + "'");
                            db.ExecuteNonQuery(deleteQuery);
                        }
                    }
                }
            }

            if (runningDeletionTotal > 0)
            {
                OnSetStatusMessage(string.Format(ImportExportSharedStrings.ORPHAN_ROW_REMOVAL_END, runningDeletionTotal.ToString()));
            }
        }

        private List GetParentGUIDList(View view)
        {

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();
            View sourceView = sourceProject.Views[FormName];

            return null;
        }





        protected override bool RemoveColumnData()
        {
            /* The user may have specified that they want to null out certain columns. This feature is
             * included so that users can send de-identified data to other organizations or agencies.
             * That is, a local health department may wish to send CDC their data, but without personally-
             * identifiable information such as name, age, address, zip code, etc.
             */

            OnSetStatusMessage(ImportExportSharedStrings.COLUMN_DATA_REMOVAL_START);

            int total = 0;
            int columnsNulled = 0;

            foreach (KeyValuePair kvp in this.ColumnsToNull)
            {
                foreach (string s in kvp.Value)
                {
                    total++;
                }
            }

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();

            foreach (KeyValuePair kvp in this.ColumnsToNull)
            {
                View viewToProcess = sourceProject.Views[kvp.Key];
                List columnNames = kvp.Value;

                foreach (string columnName in columnNames)
                {
                    if (viewToProcess.Fields.Contains(columnName))
                    {
                        Epi.Fields.Field field = viewToProcess.Fields[columnName];
                        Page page = new Page();

                        foreach (Page iPage in viewToProcess.Pages)
                        {
                            if (iPage.Fields.Contains(columnName))
                            {
                                page = iPage;
                                break;
                            }
                        }

                        if (page.view != null)
                        {
                            string updateQueryText = "UPDATE " + db.InsertInEscape(page.TableName) + " SET " + db.InsertInEscape(columnName) + " = null";
                            Query updateQuery = db.CreateQuery(updateQueryText);
                            int recordsAffected = db.ExecuteNonQuery(updateQuery);

                            int totalRecords = (int)db.ExecuteScalar(db.CreateQuery("SELECT Count(*) FROM " + db.InsertInEscape(page.TableName)));


                            if (recordsAffected == totalRecords)
                            {
                                columnsNulled++;
                                OnAddStatusMessage(string.Format(ImportExportSharedStrings.COLUMN_DATA_REMOVAL_SUCCESS, columnName, page.TableName));
                            }
                            else
                            {
                                OnAddStatusMessage(string.Format(ImportExportSharedStrings.COLUMN_DATA_REMOVAL_FAIL, columnName, page.TableName));
                            }
                        }
                    }
                }
            }




            if (columnsNulled == total)
            {
                OnSetStatusMessage(ImportExportSharedStrings.COLUMN_DATA_REMOVAL_END);
                return true;
            }
            else
            {
                OnSetStatusMessage(ImportExportSharedStrings.COLUMN_DATA_REMOVAL_END_WITH_WARNING);
                return false;
            }
        }
        //

        //Private Methods




        private bool RemoveGridColumnData()
        {
            //Input Validation
            if (this.GridColumnsToNull == null || this.GridColumnsToNull.Count == 0)
            {
                return true;
            }
            //

            int total = 0;
            int columnsNulled = 0;

            foreach (KeyValuePair kvp in this.GridColumnsToNull)
            {
                if (kvp.Key.Contains(':'))
                {
                    foreach (string s in kvp.Value)
                    {
                        total++;
                    }
                }
            }

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();

            foreach (KeyValuePair kvp in this.GridColumnsToNull)
            {
                if (kvp.Key.Contains(':'))
                {
                    string[] gridFieldInfo = kvp.Key.ToString().Split(':');

                    View view = destinationProject.Views[gridFieldInfo[0]];
                    GridField gridField = view.Fields.GridFields[gridFieldInfo[1]];

                    foreach (string gridColumnName in kvp.Value)
                    {
                        string updateQueryText = "UPDATE " + db.InsertInEscape(gridField.TableName) + " SET " + db.InsertInEscape(gridColumnName) + " = null";
                        Query updateQuery = db.CreateQuery(updateQueryText);
                        int recordsAffected = db.ExecuteNonQuery(updateQuery);

                        int totalRecords = (int)db.ExecuteScalar(db.CreateQuery("SELECT Count(*) FROM " + db.InsertInEscape(gridField.TableName)));


                        if (recordsAffected == totalRecords)
                        {
                            columnsNulled++;
                            OnAddStatusMessage(string.Format(ImportExportSharedStrings.GRID_COLUMN_DATA_REMOVAL_SUCCESS, gridColumnName, gridField.Name));
                        }
                        else
                        {
                            OnAddStatusMessage(string.Format(ImportExportSharedStrings.GRID_COLUMN_DATA_REMOVAL_FAIL, gridColumnName, gridField.Name));
                        }
                    }
                }
            }

            if (columnsNulled != total)
            {
                return false;
            }
            else
            {
                return true;
            }
        }





        private bool DeleteUnrelatedData()
        {
            /* The problem with creating a copy of the MDB file (as is done in      class) for use
             * as the actual package is that it may contain a lot of data unrelated to the selected
             * form. For example: Temporary output tables that the user may have created in Classic
             * Analysis. These tables may contain PII or sensitive data. If they aren't in any way
             * connected to the form the user selected in the UI, then they shouldn't be part of
             * the data package and can be safely removed. Rather than wiping out the table, the
             * rows are simply erased.
             *
             * Some tables are known to be okay and should be kept, especially because some of them
             * may be needed during the import process. The 'meta' tables are a good example. And,
             * obviously, so are any tables associated with the selected form, any of its related
             * forms, and any grids on any of those forms.
             */

            List unrelatedForms = new List();
            int errors = 0;

            IDbDriver db = destinationProject.CollectedData.GetDbDriver();

            List tableNames = db.GetTableNames();
            tableNames.Remove("metaBackgrounds");
            tableNames.Remove("metaDataTypes");
            tableNames.Remove("metaDbInfo");
            tableNames.Remove("metaFields");
            tableNames.Remove("metaFieldTypes");
            tableNames.Remove("metaGridColumns");
            tableNames.Remove("metaImages");
            tableNames.Remove("metaLayerRenderTypes");
            tableNames.Remove("metaLayers");
            tableNames.Remove("metaLinks");
            tableNames.Remove("metaMapLayers");
            tableNames.Remove("metaMapPoints");
            tableNames.Remove("metaMaps");
            tableNames.Remove("metaPages");
            tableNames.Remove("metaPatterns");
            tableNames.Remove("metaPrograms");
            tableNames.Remove("metaViews");



            if (IncludeCodeTables)
            {
                DataTable codeTableNames = db.GetCodeTableNamesForProject(sourceProject);
                foreach (DataRow row in codeTableNames.Rows)
                {
                    if (tableNames.Contains(row[0].ToString()))
                    {
                        tableNames.Remove(row[0].ToString());
                    }
                }
            }

            View destinationView = destinationProject.Views[FormName];
            foreach (View view in destinationProject.Views)
            {
                int formLevel = 0;
                formLevel = ImportExportHelper.GetFormDescendantLevel(view, destinationView, formLevel);

                if (formLevel >= 0)
                {
                    bool deleteFormData = true;

                    switch (FormInclusionType)
                    {
                        case ImportExport.FormInclusionType.CurrentFormOnly:
                            if (formLevel == 0)
                            {
                                deleteFormData = false;
                            }
                            else
                            {
                                deleteFormData = true;
                            }
                            break;
                        case ImportExport.FormInclusionType.DirectDescendants:
                            if (formLevel <= 1)
                            {
                                deleteFormData = false;
                            }
                            else
                            {
                                deleteFormData = true;
                            }
                            break;
                        case ImportExport.FormInclusionType.AllDescendants:
                            deleteFormData = false;
                            break;
                    }

                    if (!deleteFormData)
                    {
                        if (tableNames.Contains(view.TableName))
                        {
                            tableNames.Remove(view.TableName);
                        }

                        foreach (Page page in view.Pages)
                        {
                            if (tableNames.Contains(page.TableName))
                            {
                                tableNames.Remove(page.TableName);
                            }
                        }
                    }

                    if (this.IncludeGridData)
                    {

                        foreach (GridField gridField in view.Fields.GridFields)
                        {
                            if (tableNames.Contains(gridField.TableName))
                            {
                                tableNames.Remove(gridField.TableName);
                            }
                        }
                    }
                }
            }

            foreach (string tableName in tableNames)
            {
                try
                {
                    int totalRecords = (int)db.ExecuteScalar(db.CreateQuery("SELECT Count(*) FROM " + db.InsertInEscape(tableName)));
                    Query tableDeleteQuery = db.CreateQuery("DELETE * FROM " + db.InsertInEscape(tableName));
                    int affectedRecords = db.ExecuteNonQuery(tableDeleteQuery);


                    if (totalRecords == affectedRecords)
                    {
                        OnAddStatusMessage(string.Format(ImportExportSharedStrings.TABLE_DATA_DELETION_SUCCESS, tableName));
                    }
                    else
                    {
                        OnAddStatusMessage(string.Format(ImportExportSharedStrings.TABLE_DATA_DELETION_FAIL, affectedRecords, totalRecords, tableName));
                        errors++;
                    }
                }
                catch (Exception ex)
                {
                    errors++;
                    OnAddStatusMessage(string.Format(ImportExportSharedStrings.ERROR_WITH_MESSAGE, ex.Message));
                }
            }

            if (errors > 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        //
    }
}

 