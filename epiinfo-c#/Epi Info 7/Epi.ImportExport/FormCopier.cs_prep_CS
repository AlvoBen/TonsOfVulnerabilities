//Using
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;
using Epi;
using Epi.Core;
using Epi.Data;
using Epi.Fields;
//

namespace Epi.ImportExport
{











    public class FormCopier : IDisposable
    {
        //Private Attributes
        private Project sourceProject;
        private Project destinationProject;
        private View sourceView;
        private View destinationView;
        private Query selectQuery;
        private Dictionary columnsToNull;
        private Dictionary gridColumnsToNull;
        //

        //Events
        public event SetProgressBarDelegate SetProgressBar;
        public event UpdateStatusEventHandler SetStatus;
        public event UpdateStatusEventHandler AddStatusMessage;
        public event SetMaxProgressBarValueDelegate SetMaxProgressBarValue;
        //

        //Constructors










        public FormCopier(Project sourceProject, Project destinationProject, View sourceView)
        {
            this.SourceProject = sourceProject;
            this.DestinationProject = destinationProject;
            this.SourceView = sourceView;
        }
        //

        //Public Properties



        public Dictionary ColumnsToNull
        {
            get
            {
                return this.columnsToNull;
            }
            set
            {
                this.columnsToNull = value;
            }
        }




        public Dictionary GridColumnsToNull
        {
            get
            {
                return this.gridColumnsToNull;
            }
            set
            {
                this.gridColumnsToNull = value;
            }
        }




        public Query SelectQuery
        {
            get
            {
                return this.selectQuery;
            }
            set
            {
                if (!value.SqlStatement.ToLower().Trim().StartsWith("select"))
                {
                    throw new ArgumentException(ImportExportSharedStrings.ERROR_INVALID_SELECT_QUERY);
                }
                else
                {
                    this.selectQuery = value;
                }
            }
        }




        public Project SourceProject
        {
            get
            {
                return this.sourceProject;
            }
            set
            {
                this.sourceProject = value;
            }
        }




        public View SourceView
        {
            get
            {
                return this.sourceView;
            }
            set
            {
                this.sourceView = value;
            }
        }




        public Project DestinationProject
        {
            get
            {
                return this.destinationProject;
            }
            set
            {
                this.destinationProject = value;
            }
        }




        public IDbDriver SourceDbDriver
        {
            get
            {
                return this.SourceProject.CollectedData.GetDbDriver();
            }
        }




        public IDbDriver DestinationDbDriver
        {
            get
            {
                return this.DestinationProject.CollectedData.GetDbDriver();
            }
        }
        //

        //Private Methods




        private void OnAddStatusMessage(string message)
        {
            if (AddStatusMessage != null)
            {
                AddStatusMessage(message);
            }
        }





        private void OnSetStatusMessage(string message)
        {
            if (AddStatusMessage != null && SetStatus != null)
            {
                AddStatusMessage(message);
                SetStatus(message);
            }
        }





        private void OnSetProgress(double progress)
        {
            if (SetProgressBar != null)
            {
                SetProgressBar(progress);
            }
        }





        private void OnSetMaxProgressBarValue(double maxProgress)
        {
            if (SetMaxProgressBarValue != null)
            {
                SetMaxProgressBarValue(maxProgress);
            }
        }





        private void PreprocessPages(Epi.Data.Services.MetadataDbProvider typedMetadata)
        {
            SortedDictionary pageDictionary = new SortedDictionary();
            int highestPageId = 0;
            foreach (View view in sourceProject.Views)
            {
                foreach (Page page in view.Pages)
                {
                    if (page.Id > highestPageId)
                    {
                        highestPageId = page.Id;
                    }
                    pageDictionary.Add(page.Id, page);
                }
            }

            List pagesToRemove = new List();
            for (int i = 1; i <= highestPageId; i++)
            {
                if (!pageDictionary.ContainsKey(i))
                {
                    Page page = new Page(sourceView, i);
                    pageDictionary.Add(i, page);
                    pagesToRemove.Add(i);
                }
            }

            foreach (KeyValuePair kvp in pageDictionary)
            {
                Page page = kvp.Value;
                typedMetadata.InsertPage(page);

                if (pagesToRemove.Contains(kvp.Key))
                {
                    typedMetadata.DeletePage(page);
                }
            }
        }





        private void PreprocessForms(Epi.Data.Services.MetadataDbProvider typedMetadata)
        {
            /*
             * This method may not make a lot of sense at first glance, but the idea is to
             * make sure that the View ID values in the destination database (found in the
             * metaViews table) match those in the source. Imagine the following scenario:
             * The user creates ten forms, then wants to create a copy of the fifth one.
             * In the source project, the ID of      view is 5. In the destination, if we
             * simply insert the data from that row, the view ID value will become 1 because
             * the ID column in metaViews is an autonumber. This ID column is used by other
             * tables to determine which fields and pages go where. Rather than trying to
             * keep track of all these IDs and re-assign them appropriately in memory, then
             * update them in the database, we're instead going to add filler records into
             * the metaViews and metaPages tables so that the actual rows we want to copy
             * have matching ID values. In the aforementioned scenario, four dummy rows
             * would be added to metaViews to make sure the view we actually want to copy
             * ends up with an ID value of five. Those dummy rows will be removed later
             * during the metadata cleanup phase.
             */

            SortedDictionary formDictionary = new SortedDictionary();
            int highestFormId = 0;
            foreach (View form in sourceProject.Views)
            {
                if (form.Id > highestFormId)
                {
                    highestFormId = form.Id;
                }
                formDictionary.Add(form.Id, form);
            }

            List formsToRemove = new List();
            for (int i = 1; i <= highestFormId; i++)
            {
                if (!formDictionary.ContainsKey(i))
                {
                    View form = new View(sourceProject);
                    form.Name = "_____VIEW______" + i.ToString();
                    formDictionary.Add(i, form);
                    formsToRemove.Add(i);
                }
            }

            foreach (KeyValuePair kvp in formDictionary)
            {
                View view = kvp.Value;
                typedMetadata.InsertView(view);

                if (formsToRemove.Contains(kvp.Key))
                {
                    typedMetadata.DeleteView(view.Name);
                }
            }
        }






        private void PreprocessFields(View form, Epi.Data.Services.MetadataDbProvider typedMetadata)
        {
            foreach (Epi.Fields.Field field in form.Fields)
            {
                switch (field.FieldType)
                {
                    case MetaFieldType.Checkbox: 
                        typedMetadata.CreateField(field as CheckBoxField);
                        break;
                    case MetaFieldType.YesNo: 
                        typedMetadata.CreateField(field as YesNoField);
                        break;
                    case MetaFieldType.Text: 
                    case MetaFieldType.TextUppercase:
                        typedMetadata.CreateField(field as SingleLineTextField);
                        break;
                    case MetaFieldType.Number: 
                        typedMetadata.CreateField(field as NumberField);
                        break;
                    case MetaFieldType.Date: 
                        typedMetadata.CreateField(field as DateField);
                        break;
                    case MetaFieldType.DateTime: 
                        typedMetadata.CreateField(field as DateTimeField);
                        break;
                    case MetaFieldType.Time: 
                        typedMetadata.CreateField(field as TimeField);
                        break;
                    case MetaFieldType.Codes: 
                        typedMetadata.CreateField(field as DDLFieldOfCodes);
                        break;
                    case MetaFieldType.CommandButton: 
                        typedMetadata.CreateField(field as CommandButtonField);
                        break;
                    case MetaFieldType.CommentLegal: 
                        typedMetadata.CreateField(field as DDLFieldOfCommentLegal);
                        break;
                    case MetaFieldType.LegalValues: 
                        typedMetadata.CreateField(field as DDLFieldOfLegalValues);
                        break;
                    case MetaFieldType.LabelTitle: 
                        typedMetadata.CreateField(field as LabelField);
                        break;
                    case MetaFieldType.Grid: 
                        int id = typedMetadata.CreateField(field as GridField);
                        GridField gridField = field as GridField;
                        int originalId = gridField.Id;

                        foreach (GridColumnBase gc in gridField.Columns)
                        {
                            gridField.Id = id;
                            if (gc is TextColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as TextColumn);
                            }
                            else if (gc is ContiguousColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as ContiguousColumn);
                            }
                            else if (gc is DDLColumnOfCommentLegal)
                            {
                                typedMetadata.CreateGridColumn(gc as DDLColumnOfCommentLegal);
                            }
                            else if (gc is DDLColumnOfLegalValues)
                            {
                                typedMetadata.CreateGridColumn(gc as DDLColumnOfLegalValues);
                            }
                            else if (gc is NumberColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as NumberColumn);
                            }
                            else if (gc is PhoneNumberColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as PhoneNumberColumn);
                            }

                            else if (gc is UniqueKeyColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as UniqueKeyColumn);
                            }
                            else if (gc is UniqueRowIdColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as UniqueRowIdColumn);
                            }
                            else if (gc is GlobalRecordIdColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as GlobalRecordIdColumn);
                            }
                            else if (gc is ForeignKeyColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as ForeignKeyColumn);
                            }
                            else if (gc is RecStatusColumn)
                            {
                                typedMetadata.CreateGridColumn(gc as RecStatusColumn);
                            }
                            gridField.Id = originalId;
                        }
                        gridField.Id = originalId;
                        break;
                    case MetaFieldType.Group: 
                        typedMetadata.CreateField(field as GroupField);
                        break;
                    case MetaFieldType.GUID: 
                        typedMetadata.CreateField(field as GUIDField);
                        break;
                    case MetaFieldType.Image: 
                        typedMetadata.CreateField(field as ImageField);
                        break;



                    case MetaFieldType.Mirror: 
                        typedMetadata.CreateField(field as MirrorField);
                        break;
                    case MetaFieldType.Multiline: 
                        typedMetadata.CreateField(field as MultilineTextField);
                        break;
                    case MetaFieldType.Option: 
                        typedMetadata.CreateField(field as OptionField);
                        break;
                    case MetaFieldType.PhoneNumber: 
                        typedMetadata.CreateField(field as PhoneNumberField);
                        break;
                    case MetaFieldType.Relate: 
                        typedMetadata.CreateField(field as RelatedViewField);
                        break;



                    case MetaFieldType.UniqueKey: 
                        typedMetadata.CreateField(field as UniqueKeyField);
                        break;
                    case MetaFieldType.ForeignKey: 
                        typedMetadata.CreateField(field as ForeignKeyField);
                        break;
                    case MetaFieldType.GlobalRecordId: 
                        typedMetadata.CreateField(field as GlobalRecordIdField);
                        break;
                    case MetaFieldType.RecStatus: 
                        typedMetadata.CreateField(field as RecStatusField);
                        break;
                }
            }
        }





        private void SetupMetadata(List formsToProcess)
        {
            OnAddStatusMessage(ImportExportSharedStrings.SETTING_UP_METADATA_START);


            Project sourceProjectCopy = Util.CreateProjectFileFromDatabase(SourceProject.CollectedDataConnectionString, false, sourceProject.Location, sourceProject.Name);
            sourceProjectCopy.Metadata.AttachDbDriver(sourceProjectCopy.CollectedData.GetDbDriver());
            sourceProjectCopy.LoadViews();


            List viewsToKeep = sourceView.GetDescendantViews();
            View[] viewCollection = new View[sourceProjectCopy.Views.Count];

            sourceProjectCopy.Views.CopyTo(viewCollection, 0);

            foreach (View view in viewCollection)
            {
                if (!viewsToKeep.Contains(view))
                {
                    sourceProjectCopy.Views.Remove(view.Name);
                }
            }


            Dictionary formIds = new Dictionary();
            Dictionary pageIds = new Dictionary();
            Dictionary fieldIds = new Dictionary();


            DestinationProject.MetadataSource = MetadataSource.SameDb;
            Epi.Data.Services.MetadataDbProvider typedMetadata = DestinationProject.Metadata as Epi.Data.Services.MetadataDbProvider;
            typedMetadata.AttachDbDriver(DestinationProject.CollectedData.GetDbDriver());
            typedMetadata.CreateMetadataTables();


            PreprocessForms(typedMetadata);
            PreprocessPages(typedMetadata);
            PreprocessFields(SourceView, typedMetadata);

            foreach (View form in formsToProcess)
            {
                PreprocessFields(form, typedMetadata);
            }

            OnAddStatusMessage(ImportExportSharedStrings.SETTING_UP_METADATA_END);
            sourceProjectCopy.Dispose();
        }




        private void CleanupMetadata()
        {
            Epi.Data.Services.MetadataDbProvider typedMetadata = DestinationProject.Metadata as Epi.Data.Services.MetadataDbProvider;
            List descendantViews = destinationView.GetDescendantViews();
            List viewsToRemove = new List();

            foreach (View view in destinationProject.Views)
            {
                if (!descendantViews.Contains(view) && destinationView.Name != view.Name)
                {
                    viewsToRemove.Add(view);
                }
            }

            foreach (View view in viewsToRemove)
            {
                typedMetadata.DeleteView(view.Name);

                foreach (Page page in view.Pages)
                {
                    typedMetadata.DeletePage(page);
                }
            }
        }

        //

        //Public Methods



        public void Dispose() 
        {
            SetProgressBar = null;
            SetStatus = null;
            AddStatusMessage = null;

            if (columnsToNull != null)
            {
                columnsToNull.Clear();
                columnsToNull = null;
            }
            if (gridColumnsToNull != null)
            {
                gridColumnsToNull.Clear();
                gridColumnsToNull = null;
            }
            if (selectQuery != null)
            {
                selectQuery = null;
            }

            destinationProject = null;
            destinationView = null;
        }




        public void Copy()
        {


            List formsToProcess = new List();


            foreach (View view in sourceProject.Views)
            {
                if (view.Name == sourceView.Name)
                {
                    continue;
                }


                if (ImportExportHelper.IsFormDescendant(view, sourceView))
                {

                    formsToProcess.Add(view);
                }
            }



            SetupMetadata(formsToProcess);



            destinationView = destinationProject.Views[SourceView.Name];
            destinationProject.CollectedData.CreateDataTableForView(destinationView, 1);

            foreach(View form in destinationView.GetDescendantViews())
            {
                destinationProject.CollectedData.CreateDataTableForView(form, 1);
            }



            FormDataImporter fdi = new FormDataImporter(sourceProject, destinationProject, destinationView, formsToProcess);

            fdi.SetProgressBar += new SetProgressBarDelegate(OnSetProgress);
            fdi.SetStatus += new UpdateStatusEventHandler(OnSetStatusMessage);
            fdi.AddStatusMessage += new UpdateStatusEventHandler(OnAddStatusMessage);
            fdi.SetMaxProgressBarValue += new SetMaxProgressBarValueDelegate(OnSetMaxProgressBarValue);

            if (this.SelectQuery != null)
            {
                fdi.SelectQuery = this.SelectQuery; 
            }
            fdi.ColumnsToNull = this.ColumnsToNull; 
            fdi.GridColumnsToNull = this.GridColumnsToNull; 
            fdi.Update = false;
            fdi.Append = true;
            fdi.ImportFormData(); 
            fdi.Dispose(); 


            CleanupMetadata();
        }

        //

        //Junk Pile


































    }







    //
}

 