//Using
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using Epi.Data;
//

namespace Epi.ImportExport
{



    public class CSVExporter : ExporterBase
    {
        //Private Members
        private string fileName;
        //

        public int rowsExported;

        public bool IncludeDeletedRecords { get {return _IncludeDeletedRecords; } set{ _IncludeDeletedRecords=value; } } bool _IncludeDeletedRecords;

        //Constants
        private const string SEPARATOR = StringLiterals.COMMA;
        //

        //Constructors






        public CSVExporter(DataView viewToExport, List columnList, string fileName)
        {
            this.dataView = viewToExport;
            this.fileName = fileName;
            this.columnList = columnList;
            this.ColumnSortOrder = ImportExport.ColumnSortOrder.None;
            this.IncludeDeletedRecords = true;
        }

        //

        //Public Properties



        public string FileName
        {
            get
            {
                return this.fileName;
            }
        }
        //

        //Public Methods



        public override void Export()
        {
            DataView dv = this.DataView;
            DataTable table = new DataTable(); 
            WordBuilder wb = new WordBuilder(SEPARATOR);
            StreamWriter sw = null;

            if (IncludeDeletedRecords == false)
            {
                if (table.Columns.Contains("RecStatus") || table.Columns.Contains("RECSTATUS"))
                {
                    dv.RowFilter = "[RecStatus] > 0";
                }
            }

            try
            {
                sw = File.CreateText(fileName);

                if (ColumnSortOrder != ImportExport.ColumnSortOrder.None || !exportAllFields)
                {
                    table = dv.ToTable(false);

                    if (view != null)
                    {
                        ImportExportHelper.OrderColumns(table, ColumnSortOrder, view);
                    }
                    else
                    {
                        ImportExportHelper.OrderColumns(table, ColumnSortOrder);
                    }

                    List columnsToRemove = new List();

                    foreach (DataColumn dc in table.Columns)
                    {
                        bool found = false;
                        foreach (Epi.Data.TableColumn tc in columnList)
                        {
                            if (tc.Name.Equals(dc.ColumnName))
                            {
                                found = true;
                                break;
                            }
                        }

                        if (!found)
                        {
                            columnsToRemove.Add(dc);
                        }
                    }

                    foreach (DataColumn dc in columnsToRemove)
                    {
                        table.Columns.Remove(dc);
                    }
                }

                foreach (DataColumn dc in table.Columns)
                {
                    wb.Add(dc.ColumnName);
                }

                sw.WriteLine(wb.ToString());
                rowsExported = 0;
                int totalRows = 0;



                    totalRows = table.Rows.Count;
                    foreach (DataRow row in table.Rows)
                    {
                        wb = new WordBuilder(SEPARATOR);
                        for (int i = 0; i < table.Columns.Count; i++)
                        {
                            string rowValue = row[i].ToString().Replace("\r\n", " ");
                            if (rowValue.Contains(",") || rowValue.Contains("\""))
                            {
                                rowValue = rowValue.Replace("\"", "\"\"");
                                rowValue = Util.InsertIn(rowValue, "\"");
                            }
                            wb.Add(rowValue);
                        }
                        sw.WriteLine(wb);
                        rowsExported++;
                        if (rowsExported % 500 == 0)
                        {



                            OnSetStatusMessageAndProgressCount(string.Format(SharedStrings.DASHBOARD_EXPORT_PROGRESS, rowsExported.ToString(), totalRows.ToString()), (double)rowsExported);
                        }
                    }






























                OnSetStatusMessage(string.Format(SharedStrings.DASHBOARD_EXPORT_SUCCESS, rowsExported.ToString()));
            }

            catch (Exception ex)
            {
                OnSetStatusMessage(ex.Message);

            }
            finally
            {
                if (sw != null)
                {
                    sw.Close();
                    sw.Dispose();
                    sw = null;
                }



            }
        }

        //
    }
}

 