using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using System.Text;
using System.Data.Common;
using Epi.Data.MySQL.Forms;
using System.IO;
using MySql.Data.MySqlClient;
using MySql.Data;
using Epi;
using System.Windows.Forms;

namespace Epi.Data.MySQL
{



    public class MySQLDBFactory : IDbDriverFactory
    {

        //Connection string on different OS




        //

        private MySqlConnectionStringBuilder mySQLConnBuild = new MySqlConnectionStringBuilder();

        public bool ArePrerequisitesMet()
        {
            return true;
        }

        public string PrerequisiteMessage
        {
            get { return string.Empty; }
        }

        //IDbDriverFactory Members





        public void CreatePhysicalDatabase(DbDriverInfo dbInfo)
        {
            MySqlConnectionStringBuilder masterBuilder = new MySqlConnectionStringBuilder(dbInfo.DBCnnStringBuilder.ToString());
            MySqlConnectionStringBuilder tempBuilder = new MySqlConnectionStringBuilder(dbInfo.DBCnnStringBuilder.ToString());



            tempBuilder.Database = "information_schema";

            MySqlConnection masterConnection = new MySqlConnection(tempBuilder.ToString());

            try
            {
                MySqlCommand command = masterConnection.CreateCommand();
                if(dbInfo.DBName != null)
                {
                    command.CommandText = "create database " + dbInfo.DBName + ";";
                }

                masterConnection.Open();

                command.ExecuteNonQuery();


                tempBuilder.Database = dbInfo.DBName;
            }
            catch (Exception ex)
            {
                throw new System.ApplicationException("Could not create new MySQL Database", ex);//(Epi.SharedStrings.CAN_NOT_CREATE_NEW_MYSQL, ex);
            }
            finally
            {
                masterConnection.Close();
            }
        }






        public IDbDriver CreateDatabaseObject(System.Data.Common.DbConnectionStringBuilder connectionStringBuilder)
        {
            IDbDriver instance = new MySQLDatabase();
            instance.ConnectionString = connectionStringBuilder.ConnectionString;

            return instance;
        }






        public IDbDriver CreateDatabaseObjectByConfiguredName(string configDatabaseKey)
        {

            IDbDriver instance = null;
            Configuration config = Configuration.GetNewInstance();
            DataRow[] result = config.DatabaseConnections.Select("Name='" + configDatabaseKey + "'");
            if (result.Length == 1)
            {
                Epi.DataSets.Config.DatabaseRow dbConnection = (Epi.DataSets.Config.DatabaseRow)result[0];
                MySqlConnectionStringBuilder mySqlConnectionBuilder = new MySqlConnectionStringBuilder(dbConnection.ConnectionString);
                instance = CreateDatabaseObject(mySqlConnectionBuilder);
            }
            else
            {
                throw new GeneralException("Database name is not configured.");
            }

            return instance;
        }






        public IConnectionStringGui GetConnectionStringGuiForExistingDb()
        {
            if (Configuration.Environment == ExecutionEnvironment.WindowsApplication)
            {
                return new ExistingConnectionStringDialog();
            }
            else
            {
                throw new NotSupportedException("No GUI associated with current environment.");
            }
        }






        public IConnectionStringGui GetConnectionStringGuiForNewDb()
        {

            if (Configuration.Environment == ExecutionEnvironment.WindowsApplication)
            {
                return new NonExistingConnectionStringDialog();

            }
            else
            {
                throw new NotSupportedException("No GUI associated with current environment.");
            }
        }






        public System.Data.Common.DbConnectionStringBuilder RequestNewConnection(string fileName)
        {
            DbConnectionStringBuilder dbStringBuilder = new DbConnectionStringBuilder(false);
            dbStringBuilder.ConnectionString = fileName;

            return dbStringBuilder;
        }






        public System.Data.Common.DbConnectionStringBuilder RequestDefaultConnection(string databaseName, string projectName = "")
        {
            DbConnectionStringBuilder dbStringBuilder = new DbConnectionStringBuilder(false);
            dbStringBuilder.ConnectionString = MySQLDatabase.BuildDefaultConnectionString(databaseName);
            return dbStringBuilder;
        }









        public System.Data.Common.DbConnectionStringBuilder RequestDefaultConnection(string database, string server, string user, string password)
        {
            mySQLConnBuild.PersistSecurityInfo = false;
            mySQLConnBuild.Database = database;
            mySQLConnBuild.Server = server;
            mySQLConnBuild.UserID = user;
            mySQLConnBuild.Password = password;

            return (mySQLConnBuild as DbConnectionStringBuilder);
        }

        public bool CanClaimConnectionString(string connectionString)
        {
            string conn = connectionString.ToLower();
            if (conn.Contains("database") && conn.Contains("server") && !conn.Contains("syncnotification"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //

        public string ConvertFileStringToConnectionString(string fileString)
        {
            return fileString;
        }

        public string GetCreateFromDataTableSQL(string tableName, DataTable table)
        {
            throw new NotImplementedException();
        }

        public string SQLGetType(object type, int columnSize, int numericPrecision, int numericScale)
        {
            throw new NotImplementedException();
        }
    }
}

 