/*
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * http://www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.portletcontainer.core;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.portlet.PortletMode;
import javax.portlet.PortletModeException;
import javax.portlet.PortletRequest;
import javax.portlet.PortletSecurityException;
import javax.portlet.PortletURL;
import javax.portlet.WindowState;
import javax.portlet.WindowStateException;

import com.sap.engine.services.portletcontainer.api.IPortletNode;
import com.sap.engine.services.portletcontainer.api.IPortletURL;

/**
 * The PortletURLImpl class is an implementation of the PortletURL interface which
 * represents a URL that reference the portlet itself. 
 * A PortletURL is created through the RenderResponse. Parameters, a portlet mode,
 * a window state and a security level can be added to PortletURL objects. 
 * The PortletURL must be converted to a String in order to embed it into the 
 * markup generated by the portlet. 
 * <p>
 * There are two types of PortletURLs: 
 * <p>
 * Action URLs, they are created with RenderResponse.createActionURL, and trigger
 * an action request followed by a render request. 
 * Render URLs, they are created with RenderResponse.createRenderURL, and trigger
 * a render request. 
 * The string reprensentation of a PortletURL does not need to be a valid URL at
 * the time the portlet is generating its content. It may contain special tokens 
 * that will be converted to a valid URL, by the portal, before the content is 
 * returned to the client. 
 *
 * @author Diyan Yordanov
 * @version 7.10
 */
public class PortletURLImpl implements PortletURL, IPortletURL {

  /**
   * Defines an action type of <code>PortletURL</code>.
   */
  public static final String ACTION = IPortletNode.ACTION_METHOD;
  
  /**
   * Defines a render type of <code>PortletURL</code>.
   */
  public static final String RENDER = IPortletNode.RENDER_METHOD;

  private IPortletNode portletNode = null;
  //defines the PortletURL type - action or Render;
  private String urlType = null;
  
  private PortletRequest portletRequest = null;
  private WindowState windowState = null;
  private PortletMode portletMode = null;
  
  protected HashMap parameters = new HashMap();
  
  protected boolean secure = false;
  
  /**
   * Creates new <code>PortletURLImpl</code> object.
   * @param portletNode the <code>IPortletNode</code> object that specified 
   * the portlet that creates the URL.
   * @param portletRequest the portlet request.
   * @param urlType the type of the URL to be created. Posible values:
   * <ul>
   * <li>ACTION
   * <li>RENDER
   * </ul>
   */
  public PortletURLImpl(IPortletNode portletNode, PortletRequest portletRequest, String urlType) {
    this.portletNode = portletNode;
    this.portletRequest = portletRequest;
    this.urlType = urlType;
  }

  /**
   * Indicates the window state the portlet should be in, if this portlet URL 
   * triggers a request.
   * <p>
   * A URL can not have more than one window state attached to it. If more than 
   * one window state is set only the last one set is attached to the URL.
   * @param windowState the portlet window state.
   * @throws WindowStateException if the portlet cannot switch to this state,
   * because the portal does not support this state, the portlet has not declared 
   * in its deployment descriptor that it supports this state, or the current
   * user is not allowed to switch to this state. 
   * The <code>PortletRequest.isWindowStateAllowed()</code> method can be used
   * to check if the portlet can set a given window state.
   * @see PortletRequest#isWindowStateAllowed
   */
  public void setWindowState(WindowState windowState) throws WindowStateException {
    if (isWindowStateAllowed(windowState)) {
      this.windowState = windowState;
    } else {
      throw new WindowStateException("unsupported Window State used: " + windowState,windowState);
    }
  }

  /**
   * Indicates the portlet mode the portlet must be in, if this portlet URL 
   * triggers a request.
   * <p>
   * A URL can not have more than one portlet mode attached to it. If more than 
   * one portlet mode is set only the last one set is attached to the URL.
   * @param portletMode the portlet mode.
   * @throws PortletModeException if the portlet cannot switch to this mode,
   * because the portal does not support this mode, the portlet has not declared 
   * in its deployment descriptor that it supports this mode for the current markup,
   * or the current user is not allowed to switch to this mode. 
   * The <code>PortletRequest.isPortletModeAllowed()</code> method can be used
   * to check if the portlet can set a given portlet mode.
   * @see PortletRequest#isPortletModeAllowed
   */
  public void setPortletMode(PortletMode portletMode) throws PortletModeException {
    if (isPortletModeAllowed(portletMode)) {
      this.portletMode = portletMode;
    } else {
      throw new PortletModeException("unsupported Portlet Mode used: " + portletMode,portletMode);
    }
  }

  /**
   * Sets the given String parameter to this URL. 
   * <p>
   * This method replaces all parameters with the given key.
   * <p>
   * The <code>PortletURL</code> implementation 'x-www-form-urlencoded' encodes
   * all  parameter names and values. Developers should not encode them.
   * @param name the parameter name.
   * @param value the parameter value.
   * @exception IllegalArgumentException if name or value are <code>null</code>.
   */
  public void setParameter(String name, String value) {
    if (name == null || value == null) {
      throw new IllegalArgumentException("name and value must not be null");
    }
    String[] values = new String[] {value} ;
    this.setParameter(name, values) ;
  }

  /**
   * Sets the given String array parameter to this URL. 
   * <p>
   * This method replaces all parameters with the given key.
   * <p>
   * The <code>PortletURL</code> implementation 'x-www-form-urlencoded' encodes
   * all  parameter names and values. Developers should not encode them.
   * @param name the parameter name.
   * @param values the parameter values.
   * @exception IllegalArgumentException if name or values are <code>null</code>.
   */
  public void setParameter(String name, String[] values) {
    if (name == null || values == null || values.length == 0) {
      throw new IllegalArgumentException("name and values must not be null or values be an empty array");
    }
    
    int length = values.length;
    String[] newValues = new String[length];
    System.arraycopy(values, 0, newValues, 0, length);
    parameters.put(name, newValues); 
  }

  /**
   * Sets a parameter map for this URL.
   * <p>
   * All previously set parameters are cleared.
   * <p>
   * The <code>PortletURL</code> implementation 'x-www-form-urlencoded' encodes
   * all  parameter names and values. Developers should not encode them.
   * @param parameters Map containing parameter names for the render phase as
   * keys and parameter values as map values. The keys in the parameter
   * map must be of type String. The values in the parameter map must be of type
   * String array (<code>String[]</code>).
   * @exception	IllegalArgumentException if parameters is <code>null</code>, if
   * any of the key/values in the Map are <code>null</code>, if any of the keys 
   * is not a String, or if any of the values is not a String array.
   */
  public void setParameters(Map parameters) {
    if (parameters == null) {
      throw new IllegalArgumentException("Parameters must not be null.");
    }
    
    Iterator iterator = parameters.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry entry = (Map.Entry)iterator.next();
      //keys must be String
      if (!(entry.getKey() instanceof String)) {
        throw new IllegalArgumentException("Keys must be of type java.lang.String.");
      }
      //values must be String arrays
      if (!(entry.getValue() instanceof String[])) {
        throw new IllegalArgumentException("Values must be of type java.lang.String[].");
      }
    }

    HashMap newParameters = new HashMap(parameters);
    iterator = newParameters.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry entry = (Map.Entry)iterator.next();
      String[] value = (String[])entry.getValue();
      int length = value.length;
      String[] newValue = new String[length];
      System.arraycopy(value, 0, newValue, 0, length);
      entry.setValue(newValue);
    }

    this.parameters = newParameters;
  }

  /**
   * Indicated the security setting for this URL. 
   * <p>
   * Secure set to <code>true</code> indicates that the portlet requests
   * a secure connection between the client and the portlet window for
   * this URL. Secure set to <code>false</code> indicates that the portlet 
   * does not need a secure connection for this URL. If the security is not
   * set for a URL, it will stay the same as the current request. 
   * @param  secure  true, if portlet requests to have a secure connection
   * between its portlet window and the client; false, if the portlet does not 
   * require a secure connection.
   * @throws PortletSecurityException  if the run-time environment does
   * not support the indicated setting.
   */
  public void setSecure(boolean secure) throws PortletSecurityException {
    this.secure = secure;
  }
  
  /**
   * Returns the portlet URL string representation to be embedded in the
   * markup.
   * <p>Note that the returned String may not be a valid URL, as it may
   * be rewritten by the portal before returning the markup to the client.
   * @return   the encoded URL as a string.
   */
  public String toString() {
    return portletNode.convertPortletURLToString(this);
  }
  
  // TODO interface IPortletURL needed for toString method

  /**
   * Returns the type of the PortletURL - action or render.
   * @return the type of the PortletURL - action or render. The possible values are:
   * <ul>
   * <li>RENDER
   * <li>ACTION
   * </ul>
   */
  public String getMethod() {
    return urlType;
  }

  /**
   * Returns the <code>String</code> representation of the <code>PortletMode</code>
   * the portlet should be in, if the portlet URL triggers a request.
   * @return the portlet mode set for this portlet URL.
   */
  public String getMode() {
    if (portletMode != null) {
      return portletMode.toString();
    } else {
      return "";
    }
  }

  /**
   * Returns the <code>String</code> representation of the <code>WindowState</code>
   * the portlet should be in, if the portlet URL triggers a request.
   * @return the portlet window state set for the portlet URL.
   */
  public String getState() {
    if (windowState != null) {
      return windowState.toString();
    } else {
       return "";
    }
  }

  /**
   * Checks whether the portlet requests a secure conection between the client
   * and the porltet window for this URL.
   * @return <code>true</code>, if portlet requests to have a secure connection
   * between its portlet window and the client; <code>false</code>, if the portlet
   * does not require a secure connection.
   */
  public boolean isSecure() {
    return secure;
  }

  /**
   * Returns the parameter map the portlet has set for this URL.
   * @return <code>Map</code> containing parameter names for the render phase
   * as keys and parameter. 
   */
  public HashMap getParameters() {
    return parameters;
  }
  
  // TODO private methods

  /**
   * Returns true, if the given window state is valid to be set for the portlet 
   * in the context of the current request.
   * @param windowState the portlet window sate to check.
   * @return true, if it is valid for this portlet in this request to change to 
   * the given window state.
   */
  private boolean isWindowStateAllowed(WindowState windowState) {
    boolean result = false;
    if (windowState != null) {
      result = portletRequest.isWindowStateAllowed(windowState);
    }
    return result;
  }

  /**
   * Returns true, if the given portlet mode is a valid one to be set for the 
   * portlet in the context of the current request.
   * @param portletMode portlet mode to check.
   * @return true, if it is valid for this portlet in this request to change to 
   * the given portlet mode
   */
  private boolean isPortletModeAllowed(PortletMode portletMode) {
    // if the portlet can set a given portlet mode.
    boolean result = false;
    if (portletMode != null) {
      result = portletRequest.isPortletModeAllowed(portletMode);
    }
    return result;
  }
}
