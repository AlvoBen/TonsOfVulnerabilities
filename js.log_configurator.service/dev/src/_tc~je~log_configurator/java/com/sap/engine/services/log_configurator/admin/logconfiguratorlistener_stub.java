// Class generated by SAP Labs Bulgaria Generator
// Don't change it !!


/**
 * Copyright (c) 2000 by SAP AG, Walldorf.,
 * url: http:////www.sap.com
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of SAP AG, Walldorf.. You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms
 * of the license agreement you entered into with SAP.
 */
package com.sap.engine.services.log_configurator.admin;



import com.sap.engine.services.rmi_p4.*;


/**
*
* @author  RMIC Generator
* @version 6.30
*/
public class LogConfiguratorListener_Stub extends com.sap.engine.services.rmi_p4.StubImpl 
implements com.sap.engine.services.log_configurator.admin.LogConfiguratorListener {//$JL-EXC$

	private static final String[] operations = {
			"stateChanged(byte,java.lang.String,java.lang.String[])",
			"configurationChanged(long)"};

    private static final long serialVersionUID = 42L;			

	public String[] p4_getOperations() {
		return operations;
	}

	public void stateChanged(byte _param0, java.lang.String _param1, java.lang.String[] _param2) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
				p4remote.checkPermission("stateChanged(byte,java.lang.String,java.lang.String[])");
			}
			try {
				com.sap.engine.services.log_configurator.admin.LogConfiguratorListener remoteInterface = (com.sap.engine.services.log_configurator.admin.LogConfiguratorListener) remote;
				remoteInterface.stateChanged( _param0,  _param1,  _param2);
				return;
			} catch (java.lang.ClassCastException rex) {
                // $JL-EXC$
				Object[] params = new Object[]{new Byte( _param0),_param1,_param2};
				Class[] p = new Class[]{byte.class,java.lang.String.class,java.lang.String[].class};
				try { 
					p4_invokeReflect(remote,"stateChanged",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <stateChanged>", P4ObjectBroker.debug);
				broker.log(rex, P4ObjectBroker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <stateChanged>", P4ObjectBroker.debug);
				broker.log(ex, P4ObjectBroker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(0);
				P4ObjectOutput out = call.getOutputStream();
				out.writeByte( _param0);
				out.writeObject( _param1);
				out.writeObject( _param2);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


	public void configurationChanged(long _param0) throws java.rmi.RemoteException {

		if (isLocal) {
			java.rmi.Remote remote;
			if (p4remote == null) {
				throw new java.rmi.NoSuchObjectException("");
			} else {
				remote = p4remote.delegate();
				p4remote.checkPermission("configurationChanged(long)");
			}
			try {
				com.sap.engine.services.log_configurator.admin.LogConfiguratorListener remoteInterface = (com.sap.engine.services.log_configurator.admin.LogConfiguratorListener) remote;
				remoteInterface.configurationChanged( _param0);
				return;
			} catch (java.lang.ClassCastException rex) {
                // $JL-EXC$
				Object[] params = new Object[]{new Long( _param0)};
				Class[] p = new Class[]{long.class};
				try { 
					p4_invokeReflect(remote,"configurationChanged",params,p);
					return ;
				} catch (NoSuchMethodException nsme) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.No_Such_Method,nsme);
				} catch (IllegalAccessException iae) {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Illegal_Access,iae);
				} catch (java.lang.reflect.InvocationTargetException ite) {
					Throwable target = (Throwable) p4_replicate(ite.getTargetException());
					if (target instanceof java.rmi.RemoteException) {
					 throw (java.rmi.RemoteException)target;
					} else { 
					 throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException,com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.InvocationTarget, target);
					}
				} 
			} catch (RuntimeException rex) {
				broker.log("P4 Call exception: Exception in execute <configurationChanged>", P4ObjectBroker.debug);
				broker.log(rex, P4ObjectBroker.debug);
					throw rex;
			} catch (java.rmi.RemoteException ex) {
				broker.log("P4 Call exception: Exception in execute <configurationChanged>", P4ObjectBroker.debug);
				broker.log(ex, P4ObjectBroker.debug);
				throw (java.rmi.RemoteException) p4_replicate(ex);
			} 
		}
			com.sap.engine.services.rmi_p4.Call call = null;
			try {
				call = p4_newCall(1);
				P4ObjectOutput out = call.getOutputStream();
				out.writeLong( _param0);
				p4_invoke(call);
				P4ObjectInput in = call.getResultStream();
			} catch (java.rmi.RemoteException ex) {
				throw ex;
			} catch (java.lang.Exception tr) {
				 // ex.printStackTrace();
				if ( java.lang.RuntimeException.class.isAssignableFrom(tr.getClass()) ) {
					throw (RuntimeException)tr;
				} else {
					throw (P4RuntimeException)P4ObjectBroker.init().getException(P4ObjectBroker.P4_RuntimeException, com.sap.engine.services.rmi_p4.exception.P4BaseRuntimeException.Unexpexted_exception, tr);
				}
			} finally {
				p4_done(call);
				call.releaseInputStream();
			}
	}


}
